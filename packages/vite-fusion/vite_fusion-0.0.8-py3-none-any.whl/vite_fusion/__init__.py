import os
import json

"""
vite_fusion
Source by Claudio González
Copyright © 2024 Banshee Development S.L.
https://www.banshee.pro/
MIT License
"""

"""
Registers template functions to integrate Vite-generated assets in a Flask application.

Parameters:
    app (Flask):
            The Flask application instance.

    dev_mode (bool):
            If True, it assumes the Vite dev server is running and loads scripts from dev_server_url.

    dev_server_url (str):
            URL of the Vite development server (e.g., "http://localhost:5173").

    dist_path (str):
            URL of the /src/dist path for production serving files (e.g., "/src/dist" or "/homedock-vue3/dist).

    manifest_path (str):
            Path to the production manifest.json generated by Vite (needed also in development mode to locate src files).

    nonce_provider (callable|None):
            A zero-argument function that returns a nonce (string) or None. If None, the nonce attribute will not be
            added to the scripts.

    logger (logging.Logger|None):
            Optional logger. If None, no warnings or errors are logged.

How to Use:
    1. Install the package in your environment.
    2. In your Flask application code, import and call `register_vite_assets` after initializing your `app`.
    3. Provide the parameters as needed. For instance, if you are in development mode and want to load scripts from Vite's dev server:

Registering Vite assets:
    register_vite_assets(
        app,
        dev_mode=True,
        dev_server_url="http://localhost:5173",
        manifest_path="src/dist/.vite/manifest.json",
        nonce_provider=my_nonce_provider,
        logger=None
    )

"""


def register_vite_assets(app, dev_mode=True, dev_server_url="http://localhost:5173", dist_path="/src/dist", manifest_path="src/dist/.vite/manifest.json", nonce_provider=None, logger=None):

    def load_manifest():
        if not os.path.exists(manifest_path):
            msg = f"Manifest file not found at {manifest_path}, run npm run build first."
            if logger:
                logger.error(msg)
            raise RuntimeError(msg)
        with open(manifest_path, "r") as f:
            return json.load(f)

    @app.context_processor
    def inject_vite_assets():
        def vitecss(entry=None):
            try:
                nonce_value = nonce_provider() if nonce_provider else None
                nonce_attr = f' nonce="{nonce_value}"' if nonce_value else ""

                manifest = load_manifest()
                if dev_mode:
                    matched_entry = next((value for key, value in manifest.items() if key.endswith(f"{entry}.css")), None)
                    if matched_entry:
                        return f'<link rel="stylesheet" href="{dev_server_url}/{matched_entry["src"]}"{nonce_attr} />'
                    else:
                        if logger:
                            logger.warning(f"No CSS entry found for '{entry}' in dev manifest.")
                        return ""
                else:
                    css_links = [f'<link rel="stylesheet" href="{dist_path}/{value["file"]}"{nonce_attr} />' for key, value in manifest.items() if key.endswith(f"{entry}.css")]
                    return "\n".join(css_links)
            except Exception as e:
                if logger:
                    logger.exception(f"Error injecting Vite CSS for entry '{entry}': {e}")
                return ""

        def vitejs(entry=None):
            try:
                nonce_value = nonce_provider() if nonce_provider else None
                nonce_attr = f' nonce="{nonce_value}"' if nonce_value else ""

                manifest = load_manifest()
                if dev_mode:
                    if os.path.exists(manifest_path):
                        matched_entry = next((value for key, value in manifest.items() if value.get("name") == entry), None)
                        if matched_entry:
                            return f'<script type="module" src="{dev_server_url}/{matched_entry["src"]}"{nonce_attr} defer></script>'
                        else:
                            if logger:
                                logger.warning(f"No dev manifest entry found for '{entry}'")
                            return ""
                    else:
                        if logger:
                            logger.warning("Manifest not found in dev mode, run npm run build first or adjust dev_server_url.")
                        return ""
                else:

                    matched_entry = next((value for key, value in manifest.items() if key.endswith(f"{entry}.js") or key.endswith(f"{entry}.ts")), None)

                    if matched_entry:
                        css_links = set()

                        if "css" in matched_entry:
                            css_links.update(matched_entry["css"])

                        for import_name in matched_entry.get("imports", []):
                            imported_entry = manifest.get(import_name)
                            if imported_entry and "css" in imported_entry:
                                css_links.update(imported_entry["css"])

                        css_links_html = "\n".join(f'<link rel="stylesheet" href="{dist_path}/{css}"{nonce_attr} />' for css in css_links)

                        return f"{css_links_html}\n<script type=\"module\" src=\"{dist_path}/{matched_entry['file']}\"{nonce_attr} defer></script>"
                    else:
                        raise RuntimeError(f"Entry '{entry}' not found in manifest")

            except Exception as e:
                if logger:
                    logger.exception(f"Error injecting Vite JS for entry '{entry}': {e}")
                return ""

        return dict(vitecss=vitecss, vitejs=vitejs)

    return app
