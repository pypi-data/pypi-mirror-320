[project]
name = "django-sse4htmx"
version = "0.1.0"
description = "A simple wrapper around Django EventStream's `send_event` to make it simpler to use with HTMX and django-template-partials."
authors = [
    { name = "Duna C.", email = "marinas.bobble-05@icloud.com" },
]
maintainers = [
    { name = "Duna C.", email = "marinas.bobble-05@icloud.com" },
]
readme = "README.md"
classifiers = [
    "Development Status :: 4 - Beta",
    "Framework :: Django",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Text Processing :: Markup :: HTML",
]
requires-python = ">=3.11.6"
dependencies = [
    "django>=5.0",
    "django-eventstream>=5.3.1",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "bump2version>=1.0.1",
    "daphne>=4.1.2",
    "django-extensions>=3.2.3",
    "django-htmx>=1.21.0",
    "django-model-utils>=5.0.0",
    "django-pytest>=0.2.0",
    "django-stubs[compatible-mypy]>=5.1.1",
    "django-template-partials>=24.4",
    "faker>=33.1.0",
    "ipython>=8.31.0",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "pytest>=8.3.4",
    "pytest-django>=4.9.0",
    "ruff>=0.8.4",
    "twisted[http2,tls]>=24.11.0",
]

[tool.hatch.build.targets.sdist]
exclude = [
    "example",
    "*.sqlite3",
    ".venv",
    ".pre-commit-config.yaml",
    ".editorconfig",
    ".gitignore",
    ".idea",
    ".prettierrc.toml",
]

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
log_cli = true
log_cli_level = "info"
python_files = [
    "tests.py",
    "test_*.py",
]

testpaths = [
    "django_sse4htmx",
]

[tool.pytest]
assert = "rewrite"

# ==== Coverage ====
[tool.coverage.run]
include = ["rugela/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]

# ==== mypy ====
[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
enable_incomplete_feature = "NewGenericSyntax"
plugins = [
    "mypy_django_plugin.main",
    "mypy_drf_plugin.main",
]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

[tool.django-stubs]
django_settings_module = "config.settings.test"

# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "endpartialdef"
blank_line_before_tag = "partialdef"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031"
include = "H017,H035,T002"
indent = 2
max_line_length = 119
max_blank_lines = 2
profile = "django"
custom_blocks = "partialdef"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "staticfiles/*"
]

line-length = 110
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "UP",
    "YTT",
    # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
    "ASYNC",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "T10",
    "DJ",
    "EM",
    "EXE",
    "FA",
    'ISC',
    "ICN",
    "G",
    'INP',
    'PIE',
    "T20",
    'PYI',
    'PT',
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SLOT",
    "SIM",
    "TID",
    "TCH",
    "INT",
    # "ARG", # Unused function argument
    "PTH",
    "ERA",
    "PD",
    "PGH",
    "PL",
    "TRY",
    "FLY",
    # "NPY",
    # "AIR",
    "PERF",
    # "FURB",
    # "LOG",
    "RUF"
]
ignore = [
    "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
    #    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "SIM102", # sometimes it's better to nest
    "TRY003", # exception messages
    "EM101", # exception messages
    "C408", # dict calls are fine and sometimes easier to work with
    "PLR0913", # too many arguments in function definition
    "RUF002", # I can use curly quotes like an adult, ruff!
    "UP038", # Checks for uses of isinstance/issubclass that take a tuple
    "ISC001", # single-line-implicit-string-concatenation
    "COM812", # missing-trailing-comma
    "ERA001", # commented out code -- allowing for now during early dev
    # of types for comparison.
    # Deactivated because it can make the code slow:
    # https://github.com/astral-sh/ruff/issues/7871
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# The fixes in extend-unsafe-fixes will require
# provide the `--unsafe-fixes` flag when fixing.
extend-unsafe-fixes = [
    "UP038"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pylint]
max-statements = 23

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.isort]
force-single-line = false

[tool.isort]
py_version = 312
profile = "black"
order-by-type = false
