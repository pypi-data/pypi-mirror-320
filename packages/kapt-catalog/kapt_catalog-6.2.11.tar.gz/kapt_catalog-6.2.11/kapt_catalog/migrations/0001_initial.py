# Generated by Django 2.1.12 on 2019-09-11 12:54

# Third party
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mptt.fields
import parler.fields
import parler.models
import taggit.managers

# Local application / specific library imports
import kapt_catalog.models.mixins


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "__first__"),
        ("kapt_contact", "__first__"),
        ("kapt_meta", "__first__"),
        ("kapt_gallery", "__first__"),
        ("auth", "__first__"),
        ("kapt_validity", "__first__"),
        ("kapt_geo", "__first__"),
        ("taggit", "__first__"),
    ]

    operations = [
        migrations.CreateModel(
            name="AccommodationArrivalDay",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (1, "Monday"),
                            (2, "Tuesday"),
                            (3, "Wednesday"),
                            (4, "Thursday"),
                            (5, "Friday"),
                            (6, "Saturday"),
                            (7, "Sunday"),
                        ],
                        unique=True,
                        verbose_name="Day",
                    ),
                ),
            ],
            options={
                "verbose_name": "Arrival day",
                "verbose_name_plural": "Arrival days",
            },
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created on"),
                ),
                (
                    "modified_on",
                    models.DateTimeField(auto_now=True, verbose_name="Modified on"),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "aspect",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Winter"),
                            (2, "Summer"),
                            (3, "Handicap"),
                            (4, "Business tourism"),
                            (5, "Groups"),
                            (6, "Activities providers"),
                        ],
                        null=True,
                        verbose_name="Aspect",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(blank=True, max_length=255, verbose_name="Slug"),
                ),
                (
                    "reference_slug",
                    models.SlugField(
                        blank=True, max_length=255, verbose_name="Reference slug"
                    ),
                ),
                (
                    "is_complete",
                    models.BooleanField(default=False, verbose_name="Is complete"),
                ),
                (
                    "is_public",
                    models.BooleanField(default=True, verbose_name="Is public"),
                ),
                (
                    "website",
                    models.URLField(blank=True, null=True, verbose_name="Website"),
                ),
                (
                    "number_of_occurrences",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Number of occurences"
                    ),
                ),
                (
                    "min_age",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Minimum age"
                    ),
                ),
                (
                    "max_age",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Maximum age"
                    ),
                ),
                (
                    "min_age_unit",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[(0, "month"), (1, "year")],
                        null=True,
                        verbose_name="Minimum age unit",
                    ),
                ),
                (
                    "max_age_unit",
                    models.SmallIntegerField(
                        blank=True,
                        choices=[(0, "month"), (1, "year")],
                        null=True,
                        verbose_name="Maximum age unit",
                    ),
                ),
                (
                    "min_price",
                    models.FloatField(null=True, verbose_name="Minimum price"),
                ),
                (
                    "max_price",
                    models.FloatField(null=True, verbose_name="Maximum price"),
                ),
                (
                    "currency",
                    models.CharField(
                        blank=True, max_length=12, null=True, verbose_name="Currency"
                    ),
                ),
                (
                    "booking_url",
                    models.URLField(blank=True, null=True, verbose_name="Booking Url"),
                ),
                (
                    "availability_url",
                    models.URLField(
                        blank=True, null=True, verbose_name="Availability Url"
                    ),
                ),
                (
                    "can_be_booked_by_owner",
                    models.BooleanField(
                        default=False, verbose_name="Can be booked by owner"
                    ),
                ),
                (
                    "can_be_booked_by_organization",
                    models.BooleanField(
                        default=False, verbose_name="Can be booked by organization"
                    ),
                ),
                (
                    "score",
                    models.FloatField(
                        blank=True, default=0.0, null=True, verbose_name="Average score"
                    ),
                ),
                (
                    "erp_certificate",
                    models.BooleanField(
                        default=False, verbose_name="ERP certification"
                    ),
                ),
            ],
            options={"verbose_name": "Activity", "verbose_name_plural": "Activities"},
            bases=(
                parler.models.TranslatableModelMixin,
                kapt_catalog.models.mixins.ContentTypeMixin,
                models.Model,
            ),
        ),
        migrations.CreateModel(
            name="ActivityCategory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "former_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="Former identifier",
                    ),
                ),
                (
                    "formatted_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Formatted identifier",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "name_fr",
                    models.CharField(max_length=100, null=True, verbose_name="Name"),
                ),
            ],
            options={
                "verbose_name": "Activity Category",
                "verbose_name_plural": "Activity Categories",
            },
        ),
        migrations.CreateModel(
            name="ActivityPeriod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateField(verbose_name="Start date")),
                ("end", models.DateField(verbose_name="End date")),
                (
                    "opening_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Opening time"
                    ),
                ),
                (
                    "closing_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Closing time"
                    ),
                ),
                (
                    "further_hourly_informations",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Further hourly informations",
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity period",
                "verbose_name_plural": "Activity periods",
            },
        ),
        migrations.CreateModel(
            name="ActivityReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "former_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="Former identifier",
                    ),
                ),
                (
                    "formatted_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Formatted identifier",
                    ),
                ),
                (
                    "activity_number",
                    models.PositiveIntegerField(verbose_name="Activity number"),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        to="kapt_catalog.ActivityCategory",
                        verbose_name="Categories activity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity reference",
                "verbose_name_plural": "Activity references",
            },
            bases=(models.Model, kapt_catalog.models.mixins.ContentTypeMixin),
        ),
        migrations.CreateModel(
            name="ActivityTranslation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "language_code",
                    models.CharField(
                        db_index=True, max_length=15, verbose_name="Language"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True, max_length=160, verbose_name="Name"
                    ),
                ),
                (
                    "slugid",
                    models.SlugField(
                        blank=True, default="", max_length=255, verbose_name="Slug"
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity Translation",
                "db_table": "kapt_catalog_activity_translation",
                "db_tablespace": "",
                "managed": True,
                "default_permissions": (),
            },
            bases=(parler.models.TranslatedFieldsModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Bed",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        default=2, verbose_name="Capacity"
                    ),
                ),
                (
                    "is_extra_bed",
                    models.BooleanField(default=False, verbose_name="Extra bed"),
                ),
            ],
            options={"verbose_name": "Bed", "verbose_name_plural": "Beds"},
            bases=(models.Model, kapt_catalog.models.mixins.ContentTypeMixin),
        ),
        migrations.CreateModel(
            name="BedReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "former_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="Former identifier",
                    ),
                ),
                (
                    "formatted_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Formatted identifier",
                    ),
                ),
                ("bed_number", models.PositiveIntegerField(verbose_name="Bed number")),
            ],
            options={
                "verbose_name": "Bed reference",
                "verbose_name_plural": "Bed references",
            },
            bases=(models.Model, kapt_catalog.models.mixins.ContentTypeMixin),
        ),
        migrations.CreateModel(
            name="Characteristic",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                ("name", models.CharField(max_length=100, verbose_name="Name")),
                (
                    "name_fr",
                    models.CharField(max_length=100, null=True, verbose_name="Name"),
                ),
                (
                    "value",
                    models.CharField(
                        blank=True, max_length=20, null=True, verbose_name="Value"
                    ),
                ),
                (
                    "in_search_engine",
                    models.BooleanField(
                        default=False, verbose_name="Is a search engine criteria"
                    ),
                ),
                (
                    "is_category",
                    models.BooleanField(default=False, verbose_name="Is a category"),
                ),
                (
                    "identifier",
                    models.SlugField(
                        max_length=150, unique=True, verbose_name="Slug identifier"
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="kapt_catalog.Characteristic",
                        verbose_name="Parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Characteristic",
                "verbose_name_plural": "Characteristics",
            },
            managers=[
                ("active", django.db.models.manager.Manager()),
                ("objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Description",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField()),
                ("text_fr", models.TextField(null=True)),
                ("object_id", models.PositiveIntegerField()),
                ("automated_translations", models.BooleanField(default=False)),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.ContentType",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="kapt_catalog.Characteristic",
                        verbose_name="Type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Description",
                "verbose_name_plural": "Descriptions",
            },
        ),
        migrations.CreateModel(
            name="DuplicateActivityObject",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "is_duplicated_object",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Not duplicated"),
                            (1, "Duplicated"),
                            (2, "Signaled"),
                        ],
                        default=0,
                        verbose_name="Duplicated object",
                    ),
                ),
                (
                    "first_obj",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="first_obj_duplicateactivityobject_object_set",
                        to="kapt_catalog.ActivityReference",
                        verbose_name="First duplicate object",
                    ),
                ),
                (
                    "second_obj",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="second_obj_duplicateactivityobject_object_set",
                        to="kapt_catalog.ActivityReference",
                        verbose_name="Second duplicate object",
                    ),
                ),
            ],
            options={
                "verbose_name": "Duplicate activity",
                "verbose_name_plural": "Duplicate activities",
            },
        ),
        migrations.CreateModel(
            name="Labelling",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveSmallIntegerField(default=0, verbose_name="Rating"),
                ),
                (
                    "priority",
                    models.PositiveSmallIntegerField(
                        default=1,
                        help_text="0 is high priority, 10 is low priority",
                        verbose_name="Priority",
                    ),
                ),
            ],
            options={"verbose_name": "Labelling", "verbose_name_plural": "Labellings"},
        ),
        migrations.CreateModel(
            name="MealActivityProducts",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "distance",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Distance between mealactivity and product",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_catalog.Characteristic",
                        verbose_name="Product",
                    ),
                ),
            ],
            options={
                "verbose_name": "Meal activity product",
                "verbose_name_plural": "Meal activity products",
            },
        ),
        migrations.CreateModel(
            name="MealActivitySchedule",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "schedule_type",
                    models.IntegerField(
                        choices=[(0, "Lunch"), (1, "Dinner")],
                        verbose_name="Schedule type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Meal activity schedule",
                "verbose_name_plural": "Meal activity schedules",
                "ordering": ["schedule_type"],
            },
        ),
        migrations.CreateModel(
            name="OpenSystemReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "identifier",
                    models.CharField(max_length=100, verbose_name="Identifier"),
                ),
                (
                    "id_integration",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Integration identifier",
                    ),
                ),
                (
                    "id_basket",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Id basket"
                    ),
                ),
            ],
            options={
                "verbose_name": "OpenSystem reference",
                "verbose_name_plural": "OpenSystem references",
            },
        ),
        migrations.CreateModel(
            name="RatingUnit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=30, verbose_name="Name")),
                (
                    "name_fr",
                    models.CharField(max_length=30, null=True, verbose_name="Name"),
                ),
                (
                    "icon",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="rating_units_icons",
                        verbose_name="Icon",
                    ),
                ),
                (
                    "identifier",
                    models.SlugField(unique=True, verbose_name="Slug identifier"),
                ),
            ],
            options={
                "verbose_name": "Rating unit",
                "verbose_name_plural": "Rating units",
            },
        ),
        migrations.CreateModel(
            name="Room",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "name_fr",
                    models.CharField(
                        blank=True, max_length=150, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "number",
                    models.PositiveIntegerField(blank=True, verbose_name="Room number"),
                ),
                (
                    "area",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Area"
                    ),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="The capacity will be automatically computed according to the beds you specified",
                        verbose_name="Capacity",
                    ),
                ),
                (
                    "facilities",
                    models.ManyToManyField(
                        blank=True,
                        related_name="rooms",
                        to="kapt_catalog.Characteristic",
                        verbose_name="Facilities",
                    ),
                ),
                (
                    "gallery",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="kapt_gallery.Gallery",
                        verbose_name="Gallery",
                    ),
                ),
            ],
            options={"verbose_name": "Room", "verbose_name_plural": "Rooms"},
            bases=(models.Model, kapt_catalog.models.mixins.ContentTypeMixin),
        ),
        migrations.CreateModel(
            name="RoomReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "former_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="Former identifier",
                    ),
                ),
                (
                    "formatted_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Formatted identifier",
                    ),
                ),
                (
                    "room_number",
                    models.PositiveIntegerField(verbose_name="Room number"),
                ),
                (
                    "activity_reference",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_catalog.ActivityReference",
                        verbose_name="Activity reference",
                    ),
                ),
            ],
            options={
                "verbose_name": "Room reference",
                "verbose_name_plural": "Room references",
            },
            bases=(models.Model, kapt_catalog.models.mixins.ContentTypeMixin),
        ),
        migrations.CreateModel(
            name="SpokenLanguage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        choices=[
                            ("af", "Afrikaans"),
                            ("ar", "Arabic"),
                            ("az", "Azerbaijani"),
                            ("bg", "Bulgarian"),
                            ("be", "Belarusian"),
                            ("bn", "Bengali"),
                            ("br", "Breton"),
                            ("bs", "Bosnian"),
                            ("ca", "Catalan"),
                            ("cs", "Czech"),
                            ("cy", "Welsh"),
                            ("da", "Danish"),
                            ("de", "German"),
                            ("el", "Greek"),
                            ("en", "English"),
                            ("en-gb", "British English"),
                            ("eo", "Esperanto"),
                            ("es", "Spanish"),
                            ("es-ar", "Argentinian Spanish"),
                            ("es-mx", "Mexican Spanish"),
                            ("es-ni", "Nicaraguan Spanish"),
                            ("es-ve", "Venezuelan Spanish"),
                            ("et", "Estonian"),
                            ("eu", "Basque"),
                            ("fa", "Persian"),
                            ("fi", "Finnish"),
                            ("fr", "French"),
                            ("fsl", "French Sign Language"),
                            ("fy-nl", "Frisian"),
                            ("ga", "Irish"),
                            ("gl", "Galician"),
                            ("he", "Hebrew"),
                            ("hi", "Hindi"),
                            ("hr", "Croatian"),
                            ("hu", "Hungarian"),
                            ("hy", "Armenian"),
                            ("ia", "Interlingua"),
                            ("id", "Indonesian"),
                            ("is", "Icelandic"),
                            ("it", "Italian"),
                            ("ja", "Japanese"),
                            ("ka", "Georgian"),
                            ("kk", "Kazakh"),
                            ("km", "Khmer"),
                            ("kn", "Kannada"),
                            ("ko", "Korean"),
                            ("lb", "Luxembourgish"),
                            ("lt", "Lithuanian"),
                            ("lv", "Latvian"),
                            ("mk", "Macedonian"),
                            ("ml", "Malayalam"),
                            ("mn", "Mongolian"),
                            ("nb", "Norwegian Bokmal"),
                            ("ne", "Nepali"),
                            ("nl", "Dutch"),
                            ("nn", "Norwegian Nynorsk"),
                            ("oc", "Occitan"),
                            ("pa", "Punjabi"),
                            ("pl", "Polish"),
                            ("pt", "Portuguese"),
                            ("pt-br", "Brazilian Portuguese"),
                            ("ro", "Romanian"),
                            ("ru", "Russian"),
                            ("sk", "Slovak"),
                            ("sl", "Slovenian"),
                            ("sq", "Albanian"),
                            ("sr", "Serbian"),
                            ("sr-latn", "Serbian Latin"),
                            ("sv", "Swedish"),
                            ("sw", "Swahili"),
                            ("ta", "Tamil"),
                            ("te", "Telugu"),
                            ("th", "Thai"),
                            ("tr", "Turkish"),
                            ("tt", "Tatar"),
                            ("udm", "Udmurt"),
                            ("uk", "Ukrainian"),
                            ("ur", "Urdu"),
                            ("vi", "Vietnamese"),
                            ("zh-cn", "Simplified Chinese"),
                            ("zh-tw", "Traditional Chinese"),
                        ],
                        max_length=10,
                        unique=True,
                        verbose_name="Code",
                    ),
                ),
            ],
            options={
                "verbose_name": "Spoken language",
                "verbose_name_plural": "Spoken languages",
            },
        ),
        migrations.CreateModel(
            name="Structure",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created on"),
                ),
                (
                    "modified_on",
                    models.DateTimeField(auto_now=True, verbose_name="Modified on"),
                ),
                (
                    "aspect",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "Winter"),
                            (2, "Summer"),
                            (3, "Handicap"),
                            (4, "Business tourism"),
                            (5, "Groups"),
                            (6, "Activities providers"),
                        ],
                        null=True,
                        verbose_name="Aspect",
                    ),
                ),
                (
                    "imported_on",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Imported on"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=160, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "name_fr",
                    models.CharField(
                        blank=True, max_length=160, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "booking_url",
                    models.URLField(blank=True, null=True, verbose_name="Booking Url"),
                ),
                (
                    "place_name",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Place name"
                    ),
                ),
                (
                    "elevation",
                    models.IntegerField(
                        blank=True, db_index=True, null=True, verbose_name="Elevation"
                    ),
                ),
                (
                    "address",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_geo.Address",
                        verbose_name="Address",
                    ),
                ),
            ],
            options={"verbose_name": "Structure", "verbose_name_plural": "Structures"},
            bases=(kapt_catalog.models.mixins.ContentTypeMixin, models.Model),
        ),
        migrations.CreateModel(
            name="StructureContact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Owner of the accommodation"),
                            (1, "Agency (relay or tourism office)"),
                            (2, "Mandatory"),
                        ],
                        null=True,
                        verbose_name="Contact type for this structure",
                    ),
                ),
                (
                    "is_referent",
                    models.BooleanField(default=True, verbose_name="Is referent"),
                ),
                (
                    "contact",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_contact.Contact",
                        verbose_name="Contact",
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_catalog.Structure",
                        verbose_name="Structure",
                    ),
                ),
            ],
            options={
                "verbose_name": "Structure contact",
                "verbose_name_plural": "Structure contacts",
            },
        ),
        migrations.CreateModel(
            name="StructureNearbyLeisure",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "distance",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Distance between leisure and structure",
                    ),
                ),
                (
                    "leisure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_catalog.Characteristic",
                        verbose_name="Leisure",
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_catalog.Structure",
                        verbose_name="Structure",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StructureNearbyServices",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "distance",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Distance between service and structure",
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_catalog.Characteristic",
                        verbose_name="Service",
                    ),
                ),
                (
                    "structure",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_catalog.Structure",
                        verbose_name="Structure",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StructureReference",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "former_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        unique=True,
                        verbose_name="Former identifier",
                    ),
                ),
                (
                    "formatted_identifier",
                    models.CharField(
                        blank=True,
                        max_length=50,
                        null=True,
                        verbose_name="Formatted identifier",
                    ),
                ),
                (
                    "last_import",
                    models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name="Last import from external script",
                    ),
                ),
                (
                    "external_lock",
                    models.BooleanField(
                        blank=True, default=False, verbose_name="External lock"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this reference belongs to. A reference will get all permissions granted to each of its group.",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
            options={
                "verbose_name": "Structure reference",
                "verbose_name_plural": "Structure references",
            },
            bases=(models.Model, kapt_catalog.models.mixins.ContentTypeMixin),
        ),
        migrations.CreateModel(
            name="TouristicLabel",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "name",
                    models.CharField(max_length=200, unique=True, verbose_name="Name"),
                ),
                (
                    "name_fr",
                    models.CharField(
                        max_length=200, null=True, unique=True, verbose_name="Name"
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="labels_logos",
                        verbose_name="Icon",
                    ),
                ),
                (
                    "identifier",
                    models.SlugField(
                        max_length=100, unique=True, verbose_name="Slug identifier"
                    ),
                ),
                (
                    "activity_types",
                    models.ManyToManyField(
                        to="contenttypes.ContentType",
                        verbose_name="Activities that can be attached to this Label",
                    ),
                ),
                (
                    "rating_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="kapt_catalog.RatingUnit",
                        verbose_name="Rating unit",
                    ),
                ),
            ],
            options={
                "verbose_name": "Touristic label",
                "verbose_name_plural": "Touristic labels",
            },
        ),
        migrations.CreateModel(
            name="AccommodationActivity",
            fields=[
                (
                    "activity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.Activity",
                    ),
                ),
                (
                    "housing_type",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Apartment"),
                            (1, "Boat"),
                            (2, "Bungalow"),
                            (3, "Mobil-home"),
                            (4, "Cabin"),
                            (5, "Tree house"),
                            (6, "Chalet"),
                            (7, "Castle"),
                            (8, "Manor"),
                            (9, "Ecolodge"),
                            (21, "Igloo"),
                            (10, "Loft"),
                            (11, "Townhouse"),
                            (12, "Caravan"),
                            (13, "Plot"),
                            (14, "Garden"),
                            (15, "Island"),
                            (16, "Villa"),
                            (17, "Country house"),
                            (18, "Yurt"),
                            (19, "Tipi"),
                            (20, "Tent"),
                            (22, "Cave dwelling"),
                            (23, "Village house"),
                            (24, "Bubble"),
                        ],
                        null=True,
                        verbose_name="Property type",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        help_text="The capacity will be automatically computed according to the beds you specified",
                        null=True,
                        verbose_name="Capacity",
                    ),
                ),
                (
                    "min_capacity_per_room",
                    models.PositiveIntegerField(
                        help_text="This value will be automatically computed according to the beds you specified",
                        null=True,
                        verbose_name="Minimum capacity per room",
                    ),
                ),
                (
                    "max_capacity_per_room",
                    models.PositiveIntegerField(
                        help_text="This value will be automatically computed according to the beds you specified",
                        null=True,
                        verbose_name="Maximum capacity per room",
                    ),
                ),
                (
                    "max_capacity",
                    models.PositiveSmallIntegerField(
                        null=True, verbose_name="Max Capacity"
                    ),
                ),
                (
                    "area",
                    models.PositiveIntegerField(
                        db_index=True, null=True, verbose_name="Area"
                    ),
                ),
                (
                    "number_of_floors",
                    models.PositiveSmallIntegerField(
                        default=1, verbose_name="Number of floors"
                    ),
                ),
                (
                    "number_of_rooms",
                    models.SmallIntegerField(
                        blank=True, null=True, verbose_name="Number of rooms"
                    ),
                ),
                (
                    "is_light_construction",
                    models.BooleanField(
                        default=False, verbose_name="Light construction"
                    ),
                ),
                (
                    "unusual_accommodation",
                    models.BooleanField(
                        default=False, verbose_name="Unusual accommodation"
                    ),
                ),
                (
                    "land_surface",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Land surface",
                    ),
                ),
                (
                    "garden_surface",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Garden surface",
                    ),
                ),
                (
                    "pool_dimension",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Pool dimension",
                    ),
                ),
                (
                    "patio_surface",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        null=True,
                        verbose_name="Patio surface",
                    ),
                ),
                (
                    "tourist_tax",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "No tax"),
                            (1, "Included in the price"),
                            (2, "Not included in the price"),
                        ],
                        null=True,
                        verbose_name="Tourist tax type",
                    ),
                ),
                (
                    "deposit",
                    models.FloatField(blank=True, null=True, verbose_name="Deposit"),
                ),
                (
                    "pets_deposit",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Pets deposit"
                    ),
                ),
                (
                    "check_in_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Check-in time"
                    ),
                ),
                (
                    "check_out_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Check-out time"
                    ),
                ),
                (
                    "min_stay_duration",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Minimum number of nights"
                    ),
                ),
            ],
            options={
                "verbose_name": "Accommodation activity",
                "verbose_name_plural": "Accommodation activities",
            },
            bases=("kapt_catalog.activity",),
        ),
        migrations.CreateModel(
            name="EventActivity",
            fields=[
                (
                    "activity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.Activity",
                    ),
                ),
                (
                    "reach",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "For residents"),
                            (1, "Local"),
                            (2, "Departemental"),
                            (3, "Regional"),
                            (4, "National"),
                            (5, "International"),
                        ],
                        db_index=True,
                        verbose_name="Event reach",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_eventactivity_categories_+",
                        to="kapt_catalog.Characteristic",
                        verbose_name="Event categories",
                    ),
                ),
                (
                    "types",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_eventactivity_types_+",
                        to="kapt_catalog.Characteristic",
                        verbose_name="Event types",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event activity",
                "verbose_name_plural": "Event activities",
            },
            bases=("kapt_catalog.activity",),
        ),
        migrations.CreateModel(
            name="LeisureActivity",
            fields=[
                (
                    "activity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.Activity",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        null=True, verbose_name="Max capacity"
                    ),
                ),
                (
                    "capacity_min",
                    models.PositiveSmallIntegerField(
                        null=True, verbose_name="Min capacity"
                    ),
                ),
                (
                    "elevation",
                    models.SmallIntegerField(null=True, verbose_name="Elevation (m)"),
                ),
                (
                    "distance",
                    models.PositiveIntegerField(
                        null=True, verbose_name="Distance (km)"
                    ),
                ),
                (
                    "daily_duration",
                    models.PositiveIntegerField(
                        null=True, verbose_name="Daily duration (minute)"
                    ),
                ),
                (
                    "roaming_duration",
                    models.PositiveIntegerField(
                        null=True, verbose_name="Roaming duration"
                    ),
                ),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Duration time"
                    ),
                ),
                (
                    "difficulty",
                    models.SmallIntegerField(
                        blank=True, null=True, verbose_name="Level of difficulty"
                    ),
                ),
                (
                    "start_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Departure time"
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_leisureactivity_categories_+",
                        to="kapt_catalog.Characteristic",
                        verbose_name="Categories",
                    ),
                ),
                (
                    "informations",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_leisureactivity_informations_+",
                        to="kapt_catalog.Characteristic",
                        verbose_name="Informations",
                    ),
                ),
            ],
            options={
                "verbose_name": "Leisure activity",
                "verbose_name_plural": "Leisure activities",
            },
            bases=("kapt_catalog.activity",),
        ),
        migrations.CreateModel(
            name="MealActivity",
            fields=[
                (
                    "activity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.Activity",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Capacity"
                    ),
                ),
                (
                    "chef_speciality",
                    models.TextField(
                        blank=True, null=True, verbose_name="Chef speciality"
                    ),
                ),
            ],
            options={
                "verbose_name": "Meal activity",
                "verbose_name_plural": "Meal activities",
            },
            bases=("kapt_catalog.activity",),
        ),
        migrations.CreateModel(
            name="PointOfInterestActivity",
            fields=[
                (
                    "activity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.Activity",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_pointofinterestactivity_categories_+",
                        to="kapt_catalog.Characteristic",
                        verbose_name="Categories",
                    ),
                ),
                (
                    "themes",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_pointofinterestactivity_themes_+",
                        to="kapt_catalog.Characteristic",
                        verbose_name="Themes",
                    ),
                ),
            ],
            options={
                "verbose_name": "Point of interest activity",
                "verbose_name_plural": "Points of interest activities",
            },
            bases=("kapt_catalog.activity",),
        ),
        migrations.AddField(
            model_name="structure",
            name="contacts",
            field=models.ManyToManyField(
                blank=True,
                through="kapt_catalog.StructureContact",
                to="kapt_contact.Contact",
                verbose_name="Contacts",
            ),
        ),
        migrations.AddField(
            model_name="structure",
            name="gallery",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="kapt_gallery.Gallery",
                verbose_name="Gallery",
            ),
        ),
        migrations.AddField(
            model_name="structure",
            name="nearby_leisures",
            field=models.ManyToManyField(
                blank=True,
                related_name="_structure_nearby_leisures_+",
                through="kapt_catalog.StructureNearbyLeisure",
                to="kapt_catalog.Characteristic",
                verbose_name="Nearby leisures",
            ),
        ),
        migrations.AddField(
            model_name="structure",
            name="nearby_services",
            field=models.ManyToManyField(
                blank=True,
                related_name="_structure_nearby_services_+",
                through="kapt_catalog.StructureNearbyServices",
                to="kapt_catalog.Characteristic",
                verbose_name="Nearby services",
            ),
        ),
        migrations.AddField(
            model_name="structure",
            name="on_site_services",
            field=models.ManyToManyField(
                blank=True,
                related_name="_structure_on_site_services_+",
                to="kapt_catalog.Characteristic",
                verbose_name="On site services",
            ),
        ),
        migrations.AddField(
            model_name="structure",
            name="reference",
            field=models.ForeignKey(
                help_text="The reference will be automatically created on save.",
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.StructureReference",
                verbose_name="Reference",
            ),
        ),
        migrations.AddField(
            model_name="structure",
            name="spoken_languages",
            field=models.ManyToManyField(
                blank=True,
                to="kapt_catalog.SpokenLanguage",
                verbose_name="Spoken language",
            ),
        ),
        migrations.AddField(
            model_name="structure",
            name="validity_period",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_validity.Period",
                verbose_name="Validity",
            ),
        ),
        migrations.AddField(
            model_name="room",
            name="reference",
            field=models.ForeignKey(
                help_text="The reference will be automatically created on save.",
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.RoomReference",
                verbose_name="Reference",
            ),
        ),
        migrations.AddField(
            model_name="opensystemreference",
            name="structure_reference",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.StructureReference",
            ),
        ),
        migrations.AddField(
            model_name="labelling",
            name="activity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.Activity",
                verbose_name="Activity",
            ),
        ),
        migrations.AddField(
            model_name="labelling",
            name="touristic_label",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.TouristicLabel",
                verbose_name="Touristic label",
            ),
        ),
        migrations.AddField(
            model_name="bedreference",
            name="room_reference",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.RoomReference",
                verbose_name="Room reference",
            ),
        ),
        migrations.AddField(
            model_name="bed",
            name="reference",
            field=models.ForeignKey(
                help_text="The reference will be automatically created on save.",
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.BedReference",
                verbose_name="Reference",
            ),
        ),
        migrations.AddField(
            model_name="bed",
            name="room",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.Room",
                verbose_name="Room",
            ),
        ),
        migrations.AddField(
            model_name="bed",
            name="size",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="bed_size",
                to="kapt_catalog.Characteristic",
                verbose_name="Size",
            ),
        ),
        migrations.AddField(
            model_name="activitytranslation",
            name="master",
            field=parler.fields.TranslationsForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="translations",
                to="kapt_catalog.Activity",
            ),
        ),
        migrations.AddField(
            model_name="activityreference",
            name="duplicate_objects",
            field=models.ManyToManyField(
                blank=True,
                related_name="duplicate_activity_object",
                through="kapt_catalog.DuplicateActivityObject",
                to="kapt_catalog.ActivityReference",
                verbose_name="Duplicate objects",
            ),
        ),
        migrations.AddField(
            model_name="activityreference",
            name="structure_reference",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.StructureReference",
                verbose_name="Structure reference",
            ),
        ),
        migrations.AddField(
            model_name="activityperiod",
            name="activity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.Activity",
                verbose_name="Activity",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="characteristics",
            field=models.ManyToManyField(
                blank=True,
                related_name="_activity_characteristics_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Characteristics",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="customer_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="_activity_customer_types_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Customer types",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="environment",
            field=models.ManyToManyField(
                blank=True,
                related_name="_activity_environment_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Environment",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="gallery",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="kapt_gallery.Gallery",
                verbose_name="Gallery",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="labels",
            field=models.ManyToManyField(
                blank=True,
                through="kapt_catalog.Labelling",
                to="kapt_catalog.TouristicLabel",
                verbose_name="Touristic labels",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="linked_activityreferences",
            field=models.ManyToManyField(
                related_name="linked_activityreferences",
                to="kapt_catalog.ActivityReference",
                verbose_name="Activity reference",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="main_labelling",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="main_labelling_activity+",
                to="kapt_catalog.Labelling",
                verbose_name="Main labelling",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="means_of_payment",
            field=models.ManyToManyField(
                blank=True,
                to="kapt_catalog.Characteristic",
                verbose_name="Means of payment",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="meta_datas",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="extended_object",
                to="kapt_meta.MetaDatas",
                verbose_name="Meta datas",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_kapt_catalog.activity_set+",
                to="contenttypes.ContentType",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="prefectoral_labelling",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="prefectoral_labelling_activity+",
                to="kapt_catalog.Labelling",
                verbose_name="Prefectoral labelling",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="reference",
            field=models.ForeignKey(
                help_text="The reference will be automatically created on save.",
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.ActivityReference",
                verbose_name="Reference",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="referent_contact",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="kapt_contact.Contact",
                verbose_name="Referent contact",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="structure",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="kapt_catalog.Structure"
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="activity_type+",
                to="kapt_catalog.Characteristic",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="typologies_promo",
            field=models.ManyToManyField(
                blank=True,
                related_name="_activity_typologies_promo_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Typologies promo Sitra",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="visibility",
            field=models.ManyToManyField(
                blank=True,
                related_name="_activity_visibility_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Visibility",
            ),
        ),
        migrations.CreateModel(
            name="BnBActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Bed & Breakfast activity",
                "verbose_name_plural": "Bed & Breakfast activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="CamperVanActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Camper van activity",
                "verbose_name_plural": "Camper van activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="CampingActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                ),
                (
                    "number_of_pitches",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="Number of pitches"
                    ),
                ),
            ],
            options={
                "verbose_name": "Camping activity",
                "verbose_name_plural": "Camping activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="HolidayVillageActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Holiday village activity",
                "verbose_name_plural": "Holiday village activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="HomestayActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Homestay activity",
                "verbose_name_plural": "Homestay activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="HotelActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                ),
                (
                    "ranked_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Ranked rooms quantity"
                    ),
                ),
                (
                    "hotel_declared_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Hotel declared rooms quantity",
                    ),
                ),
                (
                    "single_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Single rooms quantity"
                    ),
                ),
                (
                    "double_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Double rooms quantity"
                    ),
                ),
                (
                    "suite_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Suite rooms quantity"
                    ),
                ),
                (
                    "reduced_mobility_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Reduced mobility rooms quantity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Hotel activity",
                "verbose_name_plural": "Hotel activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="InnActivity",
            fields=[
                (
                    "mealactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.MealActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Inn activity",
                "verbose_name_plural": "Inn activities",
            },
            bases=("kapt_catalog.mealactivity",),
        ),
        migrations.CreateModel(
            name="RelayActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Relay activity",
                "verbose_name_plural": "Relay activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="RentalActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Rental activity",
                "verbose_name_plural": "Rental activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="RiadActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Riad activity",
                "verbose_name_plural": "Riad activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.CreateModel(
            name="TableActivity",
            fields=[
                (
                    "mealactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.MealActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Table d'hôtes activity",
                "verbose_name_plural": "Table d'hôtes activities",
            },
            bases=("kapt_catalog.mealactivity",),
        ),
        migrations.CreateModel(
            name="YouthHostelActivity",
            fields=[
                (
                    "accommodationactivity_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_catalog.AccommodationActivity",
                    ),
                )
            ],
            options={
                "verbose_name": "Youth hostel activity",
                "verbose_name_plural": "Youth hostel activities",
            },
            bases=("kapt_catalog.accommodationactivity",),
        ),
        migrations.AlterUniqueTogether(
            name="structurenearbyservices", unique_together={("structure", "service")}
        ),
        migrations.AlterUniqueTogether(
            name="structurenearbyleisure", unique_together={("structure", "leisure")}
        ),
        migrations.AlterUniqueTogether(
            name="structurecontact", unique_together={("structure", "contact")}
        ),
        migrations.AddField(
            model_name="room",
            name="accommodation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.AccommodationActivity",
                verbose_name="Accommodation",
            ),
        ),
        migrations.AddField(
            model_name="mealactivityschedule",
            name="mealactivity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="schedules",
                to="kapt_catalog.MealActivity",
                verbose_name="Meal activity",
            ),
        ),
        migrations.AddField(
            model_name="mealactivityproducts",
            name="mealactivity",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_catalog.MealActivity",
                verbose_name="Meal activity",
            ),
        ),
        migrations.AddField(
            model_name="mealactivity",
            name="categories",
            field=models.ManyToManyField(
                related_name="_mealactivity_categories_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Categories",
            ),
        ),
        migrations.AddField(
            model_name="mealactivity",
            name="informations",
            field=models.ManyToManyField(
                blank=True,
                related_name="_mealactivity_informations_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Informations",
            ),
        ),
        migrations.AddField(
            model_name="mealactivity",
            name="products",
            field=models.ManyToManyField(
                blank=True,
                through="kapt_catalog.MealActivityProducts",
                to="kapt_catalog.Characteristic",
                verbose_name="Products",
            ),
        ),
        migrations.AddField(
            model_name="mealactivity",
            name="specialties",
            field=models.ManyToManyField(
                related_name="_mealactivity_specialties_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Specialties",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="description", unique_together={("type", "content_type", "object_id")}
        ),
        migrations.AlterUniqueTogether(
            name="activitytranslation", unique_together={("language_code", "master")}
        ),
        migrations.AddField(
            model_name="accommodationactivity",
            name="arrival_days",
            field=models.ManyToManyField(
                to="kapt_catalog.AccommodationArrivalDay", verbose_name="Arrival days"
            ),
        ),
        migrations.AddField(
            model_name="accommodationactivity",
            name="facilities",
            field=models.ManyToManyField(
                blank=True,
                related_name="_accommodationactivity_facilities_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Facilities",
            ),
        ),
        migrations.AddField(
            model_name="accommodationactivity",
            name="services",
            field=models.ManyToManyField(
                blank=True,
                related_name="_accommodationactivity_services_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Services",
            ),
        ),
        migrations.AddField(
            model_name="accommodationactivity",
            name="technical_characteristics",
            field=models.ManyToManyField(
                blank=True,
                related_name="_accommodationactivity_technical_characteristics_+",
                to="kapt_catalog.Characteristic",
                verbose_name="Technical characteristics",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="mealactivityproducts", unique_together={("mealactivity", "product")}
        ),
    ]
