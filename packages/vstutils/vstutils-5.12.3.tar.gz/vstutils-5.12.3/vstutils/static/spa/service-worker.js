const l=t=>n=>{try{if(!n.data){console.warn("Push event has no data");return}const{type:e,data:i}=n.data.json();e==="notification"&&self.registration.showNotification(i.title,{...t??{},...i.options})}catch(e){console.warn("Error handling push event:",e)}},d=()=>t=>{t.notification.close(),!(!t.notification.data||!t.notification.data.url)&&t.waitUntil(clients.matchAll({type:"window"}).then(n=>{const e=n[0];return e?e.navigate(t.notification.data.url).then(()=>e.focus()):clients.openWindow(t.notification.data.url).then(i=>{if(i)return i.focus()})}))},u=t=>n=>{const e=n;if(!e.oldSubscription||!e.oldSubscription.endpoint){console.warn("Push subscription change event has no old subscription");return}e.waitUntil(self.registration.pushManager.subscribe(e.oldSubscription.options).then(i=>{const r={old_endpoint:e.oldSubscription.endpoint,subscription_data:i.toJSON()},c=new URL("webpush/pushsubscriptionchange/",t||"/api/");return fetch(c,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)})}).catch(i=>{console.warn(i)}))},h=t=>{t.data==="authPageOpened"&&t.waitUntil(self.registration.pushManager.getSubscription().then(n=>{if(n)return n.unsubscribe()}))},o="/offline.html",s="/favicon.ico";self.addEventListener("push",t=>l(self.defaultNotificationOptions)(t));self.addEventListener("notificationclick",t=>d()(t));self.addEventListener("pushsubscriptionchange",t=>u(self.apiUrl)(t));self.addEventListener("message",h);self.addEventListener("install",()=>{const n=new URL(self.serviceWorker.scriptURL).searchParams.get("options");if(n)try{const{apiUrl:e,defaultOptions:i}=JSON.parse(decodeURIComponent(n));self.defaultNotificationOptions=i||{},self.apiUrl=e||void 0}catch(e){console.error("Error decoding options:",e)}else console.warn('No "options" parameter found in scriptURL.')});function a(){return caches.open("offline").then(t=>t.addAll([o,s]))}self.addEventListener("activate",t=>{t.waitUntil(a().then(()=>self.clients.claim()))});self.addEventListener("message",t=>{t.data==="OFFLINE_CACHE_UPDATE"&&a(),t.data==="triggerPushSubscriptionChange"&&self.registration.pushManager.getSubscription().then(n=>{const e=new Event("pushsubscriptionchange");Object.assign(e,{oldSubscription:n}),self.dispatchEvent(e)})});self.addEventListener("fetch",t=>{var e;const n=t.request;try{n.method==="GET"&&(!n.headers||!n.headers.get("accept")||(e=n.headers.get("accept"))!=null&&e.includes("text/html"))?t.respondWith(fetch(n).catch(()=>caches.match(o,{ignoreVary:!0}).then(i=>i||new Response("Offline page not found",{status:503})))):n.method==="GET"&&n.url.endsWith(s)&&t.respondWith(fetch(n).catch(()=>caches.match(s,{ignoreVary:!0}).then(i=>i||new Response("Favicon not found",{status:404}))))}catch(i){console.log("SW error on:",n,i)}});
