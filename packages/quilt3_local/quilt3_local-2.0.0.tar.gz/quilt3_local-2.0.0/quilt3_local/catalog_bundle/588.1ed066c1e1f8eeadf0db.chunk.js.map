{"version":3,"file":"588.1ed066c1e1f8eeadf0db.chunk.js","mappings":"+LAIMA,EAAa,wCAgBnB,IAAMC,EAAY,KAAa,SAACC,GAAM,OACpCC,KAAM,CACJC,OAAQF,EAAEG,QAAQ,IAClBC,SAAU,OACVC,OAAQ,WACRC,MAAO,QAL2B,IAcvB,SAASC,EAAI,GAAE,IAAAC,EAAI,OAAEC,EAAG,MAAKC,GAAK,UAArB,gBACpBC,EAAUZ,IAEVC,EAAI,MACJY,EAAW,SAAoC,MAE/CC,EAAc,eAClB,SAACC,G,OACqB,QAAhB,EAAAF,EAASG,eAAO,eAAEC,SAASF,EAAMG,UACnCH,EAAMI,gBAEV,GACA,CAACN,IAEG,EAAoB,WAAe,MAAlCO,EAAK,KAAEC,EAAQ,KAgBtB,GAdA,aAAgB,WACd,IAAIC,EAOJ,OANIT,EAASG,UA9CjB,SAAyBP,EAAYC,EAAaa,EAA2BtB,G,8GAC/D,SAAMF,G,OAMlB,OANMyB,EAAM,SACNF,EAAQ,IAAIE,EAAIC,MAAMF,EAAW,CAAEG,gBAAiBzB,EAAE0B,QAAQC,OAAOC,QAEpD,IAAIC,OAAOC,gBAAe,WAAM,OAAAT,EAAMU,cAAN,IACxCC,QAAQV,GAEvB,GAAMD,EAAMY,SAASzB,EAAM,CACzB0B,uBAAuB,EACvBzB,IAAG,K,OAEL,OAJA,SAIO,CAAP,EAAOY,G,OAoCHc,CAAU3B,EAAMC,EAAKG,EAASG,QAASf,GACpCoC,MAAK,SAACC,GAAM,OAAChB,EAAQgB,CAAT,IACZC,OAAM,SAACC,GAAM,OAAAnB,EAASmB,EAAT,IAChBV,OAAOW,iBAAiB,QAAS3B,EAAa,CAAE4B,SAAS,KAEpD,WACLpB,SAAAA,EAAOqB,UACPb,OAAOc,oBAAoB,QAAS9B,EACtC,CACF,GAAG,CAACL,EAAMC,EAAKI,EAAab,EAAGY,IAE3BO,EAAO,MAAMA,EAEjB,OAAO,gCAAKyB,IAAKhC,EAAUiC,UAAWlC,EAAQV,MAAUS,GAC1D,C","sources":["webpack://quilt-navigator/./app/components/Preview/renderers/Ngl/Ngl.tsx"],"sourcesContent":["import * as React from 'react'\nimport * as M from '@material-ui/core'\nimport type { Stage } from 'ngl'\n\nconst NGLLibrary = import('ngl')\n\nasync function renderNgl(blob: Blob, ext: string, wrapperEl: HTMLDivElement, t: M.Theme) {\n  const NGL = await NGLLibrary\n  const stage = new NGL.Stage(wrapperEl, { backgroundColor: t.palette.common.white })\n\n  const resizeObserver = new window.ResizeObserver(() => stage.handleResize())\n  resizeObserver.observe(wrapperEl)\n\n  await stage.loadFile(blob, {\n    defaultRepresentation: true,\n    ext,\n  })\n  return stage\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  root: {\n    height: t.spacing(50),\n    overflow: 'auto',\n    resize: 'vertical',\n    width: '100%',\n  },\n}))\n\nexport interface NglProps extends React.HTMLAttributes<HTMLDivElement> {\n  blob: Blob\n  ext: string\n}\n\nexport default function Ngl({ blob, ext, ...props }: NglProps) {\n  const classes = useStyles()\n\n  const t = M.useTheme()\n  const viewport = React.useRef<HTMLDivElement | null>(null)\n\n  const handleWheel = React.useCallback(\n    (event) => {\n      if (viewport.current?.contains(event.target)) {\n        event.preventDefault()\n      }\n    },\n    [viewport],\n  )\n  const [error, setError] = React.useState(null)\n\n  React.useEffect(() => {\n    let stage: Stage\n    if (viewport.current) {\n      renderNgl(blob, ext, viewport.current, t)\n        .then((s) => (stage = s))\n        .catch((e) => setError(e))\n      window.addEventListener('wheel', handleWheel, { passive: false })\n    }\n    return () => {\n      stage?.dispose()\n      window.removeEventListener('wheel', handleWheel)\n    }\n  }, [blob, ext, handleWheel, t, viewport])\n\n  if (error) throw error\n\n  return <div ref={viewport} className={classes.root} {...props} />\n}\n"],"names":["NGLLibrary","useStyles","t","root","height","spacing","overflow","resize","width","Ngl","blob","ext","props","classes","viewport","handleWheel","event","current","contains","target","preventDefault","error","setError","stage","wrapperEl","NGL","Stage","backgroundColor","palette","common","white","window","ResizeObserver","handleResize","observe","loadFile","defaultRepresentation","renderNgl","then","s","catch","e","addEventListener","passive","dispose","removeEventListener","ref","className"],"sourceRoot":""}