{
  "hash": "d6e70baee8adcc818d0b418ec6e96fe5",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Does `PyFixest` match `fixest`?\ntoc: true\ntoc-title: \"On this page\"\ntoc-location: left\n---\n\n\n\n\nThis vignette compares estimation results from `fixest` with `pyfixest` via the `rpy2` package.\n\n## Setup\n\n::: {#3279c940 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport rpy2.robjects as ro\nfrom rpy2.robjects import pandas2ri\nfrom rpy2.robjects.packages import importr\n\nimport pyfixest as pf\n\n# Activate pandas2ri\npandas2ri.activate()\n\n# Import R packages\nfixest = importr(\"fixest\")\nstats = importr(\"stats\")\nbroom = importr(\"broom\")\n\n# IPython magic commands for autoreloading\n%load_ext autoreload\n%autoreload 2\n\n# Get data using pyfixest\ndata = pf.get_data(model=\"Feols\", N=10_000, seed=99292)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"62Z4aY\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"62Z4aY\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"62Z4aY\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"Dm0Swx\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"Dm0Swx\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"Dm0Swx\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n:::\n\n\n## Ordinary Least Squares (OLS)\n\n### IID Inference\n\nFirst, we estimate a model via `pyfixest. We compute \"iid\" standard errors.\n\n::: {#ac477dd7 .cell execution_count=2}\n``` {.python .cell-code}\nfit = pf.feols(fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, vcov=\"iid\")\n```\n:::\n\n\nWe estimate the same model with weights:\n\n::: {#f737be11 .cell execution_count=3}\n``` {.python .cell-code}\nfit_weights = pf.feols(\n    fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, weights=\"weights\", vcov=\"iid\"\n)\n```\n:::\n\n\nVia `r-fixest` and `rpy2`, we get\n\n::: {#bd7a05c3 .cell execution_count=4}\n``` {.python .cell-code}\nr_fit = fixest.feols(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    vcov=\"iid\",\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\n\nr_fit_weights = fixest.feols(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    weights=ro.Formula(\"~weights\"),\n    vcov=\"iid\",\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\n```\n:::\n:::\n\n\n    R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\n    R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\n\n\nLet's compare how close the covariance matrices are:\n\n::: {#566db89b .cell execution_count=5}\n``` {.python .cell-code}\nfit_vcov = fit._vcov\nr_vcov = stats.vcov(r_fit)\nfit_vcov - r_vcov\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[-7.04731412e-19, -3.34180967e-22],\n       [-3.34594558e-22, -1.38913403e-19]])\n```\n:::\n:::\n\n\nAnd for WLS:\n\n::: {#cb2102af .cell execution_count=6}\n``` {.python .cell-code}\nfit_weights._vcov - stats.vcov(r_fit_weights)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\narray([[ 1.68051337e-18, -1.69406589e-21],\n       [-1.69406589e-21, -1.49077799e-19]])\n```\n:::\n:::\n\n\nWe conclude by comparing all estimation results via the `tidy` methods:\n\n::: {#974d607b .cell execution_count=7}\n``` {.python .cell-code}\nfit.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>0.112019</td>\n      <td>0.016947</td>\n      <td>6.610087</td>\n      <td>4.036971e-11</td>\n      <td>0.078800</td>\n      <td>0.145238</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>0.732788</td>\n      <td>0.004595</td>\n      <td>159.474281</td>\n      <td>0.000000e+00</td>\n      <td>0.723781</td>\n      <td>0.741795</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#3404cfb4 .cell execution_count=8}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(r_fit)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>0.112019</td>\n      <td>0.016947</td>\n      <td>6.610087</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>0.732788</td>\n      <td>0.004595</td>\n      <td>159.474281</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e0e964d2 .cell execution_count=9}\n``` {.python .cell-code}\nfit_weights.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>0.123687</td>\n      <td>0.016880</td>\n      <td>7.327370</td>\n      <td>2.529088e-13</td>\n      <td>0.090598</td>\n      <td>0.156775</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>0.732244</td>\n      <td>0.004584</td>\n      <td>159.741845</td>\n      <td>0.000000e+00</td>\n      <td>0.723258</td>\n      <td>0.741229</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#afe4c55d .cell execution_count=10}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(r_fit_weights)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>0.123687</td>\n      <td>0.01688</td>\n      <td>7.32737</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>0.732244</td>\n      <td>0.004584</td>\n      <td>159.741845</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Heteroskedastic Errors\n\nWe repeat the same exercise with heteroskedastic (HC1) errors:\n\n::: {#008726eb .cell execution_count=11}\n``` {.python .cell-code}\nfit = pf.feols(fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, vcov=\"hetero\")\nfit_weights = pf.feols(\n    fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, vcov=\"hetero\", weights=\"weights\"\n)\n```\n:::\n\n\n::: {#b6afb1e3 .cell execution_count=12}\n``` {.python .cell-code}\nr_fit = fixest.feols(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    vcov=\"hetero\",\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\n\nr_fit_weights = fixest.feols(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    weights=ro.Formula(\"~weights\"),\n    vcov=\"hetero\",\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\n```\n:::\n:::\n\n\nAs before, we compare the variance covariance matrices:\n\n::: {#0349a3da .cell execution_count=13}\n``` {.python .cell-code}\nfit._vcov - stats.vcov(r_fit)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\narray([[-1.61925594e-16, -2.13306719e-17],\n       [-2.13306719e-17, -5.39593869e-17]])\n```\n:::\n:::\n\n\n::: {#3e22e1b2 .cell execution_count=14}\n``` {.python .cell-code}\nfit_weights._vcov - stats.vcov(r_fit_weights)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\narray([[-2.04968421e-16, -9.53780274e-18],\n       [-9.53780274e-18, -3.03136151e-17]])\n```\n:::\n:::\n\n\nWe conclude by comparing all estimation results via the `tidy` methods:\n\n::: {#50c5c6ec .cell execution_count=15}\n``` {.python .cell-code}\nfit.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>0.112019</td>\n      <td>0.017009</td>\n      <td>6.585966</td>\n      <td>4.746648e-11</td>\n      <td>0.078678</td>\n      <td>0.145359</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>0.732788</td>\n      <td>0.004553</td>\n      <td>160.940355</td>\n      <td>0.000000e+00</td>\n      <td>0.723863</td>\n      <td>0.741713</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e4a02499 .cell execution_count=16}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(r_fit)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>0.112019</td>\n      <td>0.017009</td>\n      <td>6.585966</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>0.732788</td>\n      <td>0.004553</td>\n      <td>160.940355</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#8a9be903 .cell execution_count=17}\n``` {.python .cell-code}\nfit_weights.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>0.123687</td>\n      <td>0.019361</td>\n      <td>6.388512</td>\n      <td>1.749667e-10</td>\n      <td>0.085736</td>\n      <td>0.161638</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>0.732244</td>\n      <td>0.005140</td>\n      <td>142.453692</td>\n      <td>0.000000e+00</td>\n      <td>0.722168</td>\n      <td>0.742319</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#cccc08c8 .cell execution_count=18}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(r_fit_weights)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>0.123687</td>\n      <td>0.019361</td>\n      <td>6.388512</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>0.732244</td>\n      <td>0.00514</td>\n      <td>142.453692</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Cluster-Robust Errors\n\nWe conclude with cluster robust errors.\n\n::: {#90b7017e .cell execution_count=19}\n``` {.python .cell-code}\nfit = pf.feols(fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, vcov={\"CRV1\": \"f1\"})\nfit_weights = pf.feols(\n    fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, vcov={\"CRV1\": \"f1\"}, weights=\"weights\"\n)\n\nr_fit = fixest.feols(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    vcov=ro.Formula(\"~f1\"),\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\nr_fit_weights = fixest.feols(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    weights=ro.Formula(\"~weights\"),\n    vcov=ro.Formula(\"~f1\"),\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\n```\n:::\n:::\n\n\n::: {#5298ea92 .cell execution_count=20}\n``` {.python .cell-code}\nfit._vcov - stats.vcov(r_fit)\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\narray([[ 4.20345182e-16, -6.97319874e-17],\n       [-6.97328344e-17, -1.42199891e-17]])\n```\n:::\n:::\n\n\n::: {#3b4a66fa .cell execution_count=21}\n``` {.python .cell-code}\nfit_weights._vcov - stats.vcov(r_fit_weights)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\narray([[2.58961689e-16, 4.07331368e-16],\n       [4.07334756e-16, 1.79740391e-17]])\n```\n:::\n:::\n\n\nWe conclude by comparing all estimation results via the `tidy` methods:\n\n::: {#862aba3c .cell execution_count=22}\n``` {.python .cell-code}\nfit.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>0.112019</td>\n      <td>0.015816</td>\n      <td>7.082626</td>\n      <td>4.456304e-09</td>\n      <td>0.080251</td>\n      <td>0.143786</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>0.732788</td>\n      <td>0.004476</td>\n      <td>163.724207</td>\n      <td>0.000000e+00</td>\n      <td>0.723798</td>\n      <td>0.741778</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#91f3a878 .cell execution_count=23}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(r_fit)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>0.112019</td>\n      <td>0.015816</td>\n      <td>7.082626</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>0.732788</td>\n      <td>0.004476</td>\n      <td>163.724207</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#6519e9a1 .cell execution_count=24}\n``` {.python .cell-code}\nfit_weights.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>0.123687</td>\n      <td>0.018311</td>\n      <td>6.754616</td>\n      <td>1.452848e-08</td>\n      <td>0.086907</td>\n      <td>0.160466</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>0.732244</td>\n      <td>0.005249</td>\n      <td>139.495536</td>\n      <td>0.000000e+00</td>\n      <td>0.721700</td>\n      <td>0.742787</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#084b95cf .cell execution_count=25}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(r_fit_weights)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>0.123687</td>\n      <td>0.018311</td>\n      <td>6.754616</td>\n      <td>0.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>0.732244</td>\n      <td>0.005249</td>\n      <td>139.495536</td>\n      <td>0.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Poisson Regression\n\n::: {#169cf55f .cell execution_count=26}\n``` {.python .cell-code}\ndata = pf.get_data(model=\"Fepois\")\n```\n:::\n\n\n::: {#d0cb2306 .cell execution_count=27}\n``` {.python .cell-code}\nfit_iid = pf.fepois(fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, vcov=\"iid\", iwls_tol=1e-10)\nfit_hetero = pf.fepois(\n    fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, vcov=\"hetero\", iwls_tol=1e-10\n)\nfit_crv = pf.fepois(\n    fml=\"Y ~ X1 + X2 | f1 + f2\", data=data, vcov={\"CRV1\": \"f1\"}, iwls_tol=1e-10\n)\n\nfit_r_iid = fixest.fepois(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    vcov=\"iid\",\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\n\nfit_r_hetero = fixest.fepois(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    vcov=\"hetero\",\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\n\nfit_r_crv = fixest.fepois(\n    ro.Formula(\"Y ~ X1 + X2 | f1 + f2\"),\n    data=data,\n    vcov=ro.Formula(\"~f1\"),\n    ssc=fixest.ssc(True, \"none\", True, \"min\", \"min\", False),\n)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\nWARNING:rpy2.rinterface_lib.callbacks:R[write to console]: NOTE: 3 observations removed because of NA values (LHS: 1, RHS: 1, Fixed-effects: 1).\n\n```\n:::\n:::\n\n\n::: {#ad74afec .cell execution_count=28}\n``` {.python .cell-code}\nfit_iid._vcov - stats.vcov(fit_r_iid)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\narray([[ 1.20791284e-08, -6.55604931e-10],\n       [-6.55604931e-10,  1.69958097e-09]])\n```\n:::\n:::\n\n\n::: {#5bfe6eb7 .cell execution_count=29}\n``` {.python .cell-code}\nfit_hetero._vcov - stats.vcov(fit_r_hetero)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\narray([[ 2.18101847e-08, -7.38711972e-10],\n       [-7.38711972e-10,  3.07587753e-09]])\n```\n:::\n:::\n\n\n::: {#0b4fce46 .cell execution_count=30}\n``` {.python .cell-code}\nfit_crv._vcov - stats.vcov(fit_r_crv)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\narray([[ 1.58300904e-08, -1.20806815e-10],\n       [-1.20806815e-10,  3.17512746e-09]])\n```\n:::\n:::\n\n\nWe conclude by comparing all estimation results via the `tidy` methods:\n\n::: {#4dcc920a .cell execution_count=31}\n``` {.python .cell-code}\nfit_iid.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>-0.006591</td>\n      <td>0.040758</td>\n      <td>-0.161714</td>\n      <td>0.871531</td>\n      <td>-0.086475</td>\n      <td>0.073293</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>-0.014924</td>\n      <td>0.010994</td>\n      <td>-1.357466</td>\n      <td>0.174633</td>\n      <td>-0.036472</td>\n      <td>0.006624</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#e46db009 .cell execution_count=32}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(fit_r_iid)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>-0.006591</td>\n      <td>0.040758</td>\n      <td>-0.161714</td>\n      <td>0.871531</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>-0.014924</td>\n      <td>0.010994</td>\n      <td>-1.357476</td>\n      <td>0.17463</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#ca4faaee .cell execution_count=33}\n``` {.python .cell-code}\nfit_hetero.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>-0.006591</td>\n      <td>0.039145</td>\n      <td>-0.168376</td>\n      <td>0.866287</td>\n      <td>-0.083314</td>\n      <td>0.070132</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>-0.014924</td>\n      <td>0.010501</td>\n      <td>-1.421145</td>\n      <td>0.155275</td>\n      <td>-0.035506</td>\n      <td>0.005658</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#c9c9a1bb .cell execution_count=34}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(fit_r_hetero)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>-0.006591</td>\n      <td>0.039145</td>\n      <td>-0.168377</td>\n      <td>0.866286</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>-0.014924</td>\n      <td>0.010501</td>\n      <td>-1.421165</td>\n      <td>0.155269</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#ad4fe610 .cell execution_count=35}\n``` {.python .cell-code}\nfit_crv.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>X1</th>\n      <td>-0.006591</td>\n      <td>0.034745</td>\n      <td>-0.189697</td>\n      <td>0.849547</td>\n      <td>-0.074691</td>\n      <td>0.061509</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>-0.014924</td>\n      <td>0.010303</td>\n      <td>-1.448570</td>\n      <td>0.147458</td>\n      <td>-0.035117</td>\n      <td>0.005269</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#48034779 .cell execution_count=36}\n``` {.python .cell-code}\npd.DataFrame(broom.tidy_fixest(fit_r_crv)).T\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>X1</td>\n      <td>-0.006591</td>\n      <td>0.034745</td>\n      <td>-0.189698</td>\n      <td>0.849546</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>X2</td>\n      <td>-0.014924</td>\n      <td>0.010302</td>\n      <td>-1.448592</td>\n      <td>0.147452</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "compare-fixest-pyfixest_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}