{
  "hash": "19b851907460c0be73c814582e0d187c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: did.estimation.lpdid\n---\n\n\n\n```python\ndid.estimation.lpdid(\n    data,\n    yname,\n    idname,\n    tname,\n    gname,\n    vcov=None,\n    pre_window=None,\n    post_window=None,\n    never_treated=0,\n    att=True,\n    xfml=None,\n)\n```\n\nLocal projections approach to estimation.\n\nEstimate a Difference-in-Differences / Event Study Model via the Local\nProjections Approach.\n\n## Parameters {.doc-section .doc-section-parameters}\n\n| Name          | Type        | Description                                                                                                                            | Default    |\n|---------------|-------------|----------------------------------------------------------------------------------------------------------------------------------------|------------|\n| data          | DataFrame   | The DataFrame containing all variables.                                                                                                | _required_ |\n| yname         | str         | The name of the dependent variable.                                                                                                    | _required_ |\n| idname        | str         | The name of the id variable.                                                                                                           | _required_ |\n| tname         | str         | Variable name for calendar period.                                                                                                     | _required_ |\n| gname         | str         | Unit-specific time of initial treatment.                                                                                               | _required_ |\n| vcov          | (str, dict) | The type of inference to employ. Defaults to {\"CRV1\": idname}. Options include \"iid\", \"hetero\", or a dictionary like {\"CRV1\": idname}. | `None`     |\n| pre_window    | int         | The number of periods before the treatment to include in the estimation. Default is the minimum relative year in the data.             | `None`     |\n| post_window   | int         | The number of periods after the treatment to include in the estimation. Default is the maximum relative year in the data.              | `None`     |\n| never_treated | int         | Value in gname indicating units never treated. Default is 0.                                                                           | `0`        |\n| att           | bool        | If True, estimates the pooled average treatment effect on the treated (ATT). Default is False.                                         | `True`     |\n| xfml          | str         | Formula for the covariates. Not yet supported.                                                                                         | `None`     |\n\n## Returns {.doc-section .doc-section-returns}\n\n| Name   | Type      | Description                                  |\n|--------|-----------|----------------------------------------------|\n|        | DataFrame | A DataFrame with the estimated coefficients. |\n\n## Examples {.doc-section .doc-section-examples}\n\n\n::: {#43c888d4 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport pyfixest as pf\n\nurl = \"https://raw.githubusercontent.com/py-econometrics/pyfixest/master/pyfixest/did/data/df_het.csv\"\ndf_het = pd.read_csv(url)\n\nfit = pf.lpdid(\n    df_het,\n    yname=\"dep_var\",\n    idname=\"unit\",\n    tname=\"year\",\n    gname=\"g\",\n    vcov={\"CRV1\": \"state\"},\n    pre_window=-20,\n    post_window=20,\n    att=False\n)\n\nfit.tidy().head()\nfit.iplot(figsize= [1200, 400], coord_flip=False).show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"Ql5Hfq\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"Ql5Hfq\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"Ql5Hfq\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"OOpK9U\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"OOpK9U\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"OOpK9U\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n   <div id=\"xqYDHW\"></div>\n   <script type=\"text/javascript\" data-lets-plot-script=\"plot\">\n   \n   (function() {\n   // ----------\n   \n   var containerDiv = document.getElementById(\"xqYDHW\");\n   var observer = new ResizeObserver(function(entries) {\n       for (let entry of entries) {\n           var width = containerDiv.clientWidth\n           if (entry.contentBoxSize && width > 0) {\n           \n               // Render plot\n               if (observer) {\n                   observer.disconnect();\n                   observer = null;\n               }\n\n               var plotSpec={\n\"data\":{\n\"Coefficient\":[\"time_to_treatment::-20\",\"time_to_treatment::-19\",\"time_to_treatment::-18\",\"time_to_treatment::-17\",\"time_to_treatment::-16\",\"time_to_treatment::-15\",\"time_to_treatment::-14\",\"time_to_treatment::-13\",\"time_to_treatment::-12\",\"time_to_treatment::-11\",\"time_to_treatment::-10\",\"time_to_treatment::-9\",\"time_to_treatment::-8\",\"time_to_treatment::-7\",\"time_to_treatment::-6\",\"time_to_treatment::-5\",\"time_to_treatment::-4\",\"time_to_treatment::-3\",\"time_to_treatment::-2\",\"time_to_treatment::0\",\"time_to_treatment::1\",\"time_to_treatment::2\",\"time_to_treatment::3\",\"time_to_treatment::4\",\"time_to_treatment::5\",\"time_to_treatment::6\",\"time_to_treatment::7\",\"time_to_treatment::8\",\"time_to_treatment::9\",\"time_to_treatment::10\",\"time_to_treatment::11\",\"time_to_treatment::12\",\"time_to_treatment::13\",\"time_to_treatment::14\",\"time_to_treatment::15\",\"time_to_treatment::16\",\"time_to_treatment::17\",\"time_to_treatment::18\",\"time_to_treatment::19\",\"time_to_treatment::20\"],\n\"Estimate\":[-0.07305529455102057,-0.005747539400753715,0.019862595898581595,0.07556131947831908,-0.051277562684252126,0.04789121634978959,0.03006102440123136,0.039869683844842636,0.0484578972898468,-0.012820133350277516,0.01368536104092389,0.005199898128597271,0.01641627746483729,0.05641673885681887,0.0016957198969680851,-0.06496834258802509,0.010741616233677906,0.04275993550129887,0.0032290159332871316,1.4520234748273073,1.66762205650255,1.733699704558005,1.843611819985164,1.962093749379402,2.0880835635857604,2.1819660437275705,2.2546784046421315,2.348473587127565,2.360384864306779,2.5161139333617535,2.55297799431009,2.6039385093443834,2.5780442879020353,2.7229688455567262,2.9092747255962257,2.859325154708493,2.907943168261159,2.8736781792414066,2.8828072503191615,2.911501018068635],\n\"2.5%\":[-0.2270826961098405,-0.16693825914268584,-0.17099960310693896,-0.09826170522707196,-0.22455341838575843,-0.11489451024530284,-0.13002612178576894,-0.13437295272167696,-0.11730100551172672,-0.1777160768472696,-0.11566892795170589,-0.11001240538935626,-0.1076937937940532,-0.06859048773331217,-0.12148536092865649,-0.18961678740617083,-0.09887320410930789,-0.07743835566370613,-0.11859018554785672,1.336399652784727,1.5249457624566891,1.6253408299624867,1.7294961753234745,1.8189783249343026,1.962310567624104,2.0419614198097027,2.1171577125178027,2.2274111169856234,2.22074468600017,2.3975983601691073,2.3713023787051073,2.412359105803796,2.402011397023944,2.5168920592954493,2.7211465261144885,2.6740882866258033,2.727898103368657,2.6590374444987335,2.672165750808046,2.7127030711606706],\n\"97.5%\":[0.08097210700779937,0.15544318034117843,0.21072479490410218,0.24938434418371014,0.12199829301725418,0.21067694294488204,0.1901481705882317,0.21411232041136222,0.2142168000914203,0.15207581014671456,0.14303965003355365,0.1204122016465508,0.14052634872372777,0.1814239654469499,0.12487680072259265,0.05968010223012066,0.1203564365766637,0.16295822666630388,0.12504821741443098,1.5676472968698876,1.8102983505484107,1.8420585791535231,1.9577274646468537,2.1052091738245013,2.213856559547417,2.3219706676454384,2.3921990967664604,2.4695360572695066,2.500025042613388,2.6346295065543996,2.734653609915073,2.795517912884971,2.754077178780127,2.929045631818003,3.097402925077963,3.0445620227911823,3.0879882331536614,3.0883189139840796,3.093448749830277,3.1102989649765993],\n\"Model\":[\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\",\"lpdid\"]\n},\n\"mapping\":{\n\"x\":\"Coefficient\",\n\"y\":\"Estimate\",\n\"color\":\"Model\"\n},\n\"data_meta\":{\n\"series_annotations\":[{\n\"type\":\"str\",\n\"column\":\"Coefficient\"\n},{\n\"type\":\"float\",\n\"column\":\"Estimate\"\n},{\n\"type\":\"float\",\n\"column\":\"Std. Error\"\n},{\n\"type\":\"float\",\n\"column\":\"t value\"\n},{\n\"type\":\"float\",\n\"column\":\"Pr(>|t|)\"\n},{\n\"type\":\"float\",\n\"column\":\"2.5%\"\n},{\n\"type\":\"float\",\n\"column\":\"97.5%\"\n},{\n\"type\":\"float\",\n\"column\":\"N\"\n},{\n\"type\":\"str\",\n\"column\":\"Model\"\n}]\n},\n\"guides\":{\n\"y\":{\n\"title\":\"Estimate and 95.0% Confidence Interval\"\n}\n},\n\"ggsize\":{\n\"width\":1200.0,\n\"height\":400.0\n},\n\"theme\":{\n\"axis_text_x\":{\n\"angle\":0.0,\n\"blank\":false\n}\n},\n\"ggtitle\":{\n\"text\":\"LPDID Event Study Estimate\"\n},\n\"kind\":\"plot\",\n\"scales\":[],\n\"layers\":[{\n\"geom\":\"point\",\n\"mapping\":{\n},\n\"position\":{\n\"name\":\"dodge\",\n\"width\":0.5\n},\n\"data_meta\":{\n},\n\"data\":{\n}\n},{\n\"geom\":\"errorbar\",\n\"mapping\":{\n\"ymin\":\"2.5%\",\n\"ymax\":\"97.5%\"\n},\n\"position\":{\n\"name\":\"dodge\",\n\"width\":0.5\n},\n\"data_meta\":{\n},\n\"width\":0.05,\n\"data\":{\n}\n}],\n\"metainfo_list\":[],\n\"spec_id\":\"1\"\n};\n               window.letsPlotCall(function() {\n       \n               var toolbar = null;\n               var plotContainer = containerDiv;               \n               \n                   var options = {\n                       sizing: {\n                           width_mode: \"min\",\n                           height_mode: \"scaled\",\n                           width: width\n                       }\n                   };\n                   var fig = LetsPlot.buildPlotFromProcessedSpecs(plotSpec, -1, -1, plotContainer, options);\n                   if (toolbar) {\n                     toolbar.bind(fig);\n                   }\n               });\n               \n               break;\n           }\n       }\n   });\n   \n   observer.observe(containerDiv);\n   \n   // ----------\n   })();\n   \n   </script>\n```\n:::\n:::\n\n\nTo get the ATT, set `att=True`:\n\n::: {#f48b5514 .cell execution_count=2}\n``` {.python .cell-code}\nfit = pf.lpdid(\n    df_het,\n    yname=\"dep_var\",\n    idname=\"unit\",\n    tname=\"year\",\n    gname=\"g\",\n    vcov={\"CRV1\": \"state\"},\n    pre_window=-20,\n    post_window=20,\n    att=True\n)\nfit.tidy()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n      <th>N</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>treat_diff</th>\n      <td>2.506746</td>\n      <td>0.071357</td>\n      <td>35.129648</td>\n      <td>0.0</td>\n      <td>2.362413</td>\n      <td>2.65108</td>\n      <td>5716.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "did.estimation.lpdid_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}