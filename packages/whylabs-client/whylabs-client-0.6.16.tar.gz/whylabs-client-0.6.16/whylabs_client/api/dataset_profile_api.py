"""
    WhyLabs API client

    WhyLabs API that enables end-to-end AI observability  # noqa: E501

    The version of the OpenAPI document: 0.1
    Contact: support@whylabs.ai
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from whylabs_client.api_client import ApiClient, Endpoint as _Endpoint
from whylabs_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from whylabs_client.model.create_reference_profile_request import CreateReferenceProfileRequest
from whylabs_client.model.create_reference_profile_response import CreateReferenceProfileResponse
from whylabs_client.model.delete_analyzer_result import DeleteAnalyzerResult
from whylabs_client.model.delete_analyzer_results_response import DeleteAnalyzerResultsResponse
from whylabs_client.model.delete_dataset_profiles_response import DeleteDatasetProfilesResponse
from whylabs_client.model.delete_profile import DeleteProfile
from whylabs_client.model.profile_traces_response import ProfileTracesResponse
from whylabs_client.model.reference_profile_item_response import ReferenceProfileItemResponse
from whylabs_client.model.segment_list_response import SegmentListResponse
from whylabs_client.model.segment_tag import SegmentTag


class DatasetProfileApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_reference_profile_endpoint = _Endpoint(
            settings={
                'response_type': (CreateReferenceProfileResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/reference-profile',
                'operation_id': 'create_reference_profile',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'dataset_id',
                    'create_reference_profile_request',
                ],
                'required': [
                    'org_id',
                    'dataset_id',
                    'create_reference_profile_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'dataset_id':
                        (str,),
                    'create_reference_profile_request':
                        (CreateReferenceProfileRequest,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'dataset_id': 'dataset_id',
                },
                'location_map': {
                    'org_id': 'path',
                    'dataset_id': 'path',
                    'create_reference_profile_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.delete_analyzer_results_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteAnalyzerResultsResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/analyzer-results',
                'operation_id': 'delete_analyzer_results',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'dataset_id',
                    'analyzer_id',
                    'start_timestamp',
                    'end_timestamp',
                ],
                'required': [
                    'org_id',
                    'dataset_id',
                ],
                'nullable': [
                    'analyzer_id',
                    'start_timestamp',
                    'end_timestamp',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'dataset_id':
                        (str,),
                    'analyzer_id':
                        (str, none_type,),
                    'start_timestamp':
                        (int, none_type,),
                    'end_timestamp':
                        (int, none_type,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'dataset_id': 'dataset_id',
                    'analyzer_id': 'analyzer_id',
                    'start_timestamp': 'start_timestamp',
                    'end_timestamp': 'end_timestamp',
                },
                'location_map': {
                    'org_id': 'path',
                    'dataset_id': 'path',
                    'analyzer_id': 'query',
                    'start_timestamp': 'query',
                    'end_timestamp': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_dataset_profiles_endpoint = _Endpoint(
            settings={
                'response_type': (DeleteDatasetProfilesResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}',
                'operation_id': 'delete_dataset_profiles',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'dataset_id',
                    'profile_start_timestamp',
                    'profile_end_timestamp',
                    'before_upload_timestamp',
                    'delete_analyzer_results',
                    'column_name',
                ],
                'required': [
                    'org_id',
                    'dataset_id',
                ],
                'nullable': [
                    'profile_start_timestamp',
                    'profile_end_timestamp',
                    'before_upload_timestamp',
                    'delete_analyzer_results',
                    'column_name',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'dataset_id':
                        (str,),
                    'profile_start_timestamp':
                        (int, none_type,),
                    'profile_end_timestamp':
                        (int, none_type,),
                    'before_upload_timestamp':
                        (int, none_type,),
                    'delete_analyzer_results':
                        (bool, none_type,),
                    'column_name':
                        (str, none_type,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'dataset_id': 'dataset_id',
                    'profile_start_timestamp': 'profile_start_timestamp',
                    'profile_end_timestamp': 'profile_end_timestamp',
                    'before_upload_timestamp': 'before_upload_timestamp',
                    'delete_analyzer_results': 'delete_analyzer_results',
                    'column_name': 'column_name',
                },
                'location_map': {
                    'org_id': 'path',
                    'dataset_id': 'path',
                    'profile_start_timestamp': 'query',
                    'profile_end_timestamp': 'query',
                    'before_upload_timestamp': 'query',
                    'delete_analyzer_results': 'query',
                    'column_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_reference_profile_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}',
                'operation_id': 'delete_reference_profile',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'model_id',
                    'reference_id',
                ],
                'required': [
                    'org_id',
                    'model_id',
                    'reference_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'model_id':
                        (str,),
                    'reference_id':
                        (str,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'model_id': 'model_id',
                    'reference_id': 'reference_id',
                },
                'location_map': {
                    'org_id': 'path',
                    'model_id': 'path',
                    'reference_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_profile_traces_endpoint = _Endpoint(
            settings={
                'response_type': (ProfileTracesResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/trace/{trace_id}',
                'operation_id': 'get_profile_traces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'dataset_id',
                    'trace_id',
                    'limit',
                    'offset',
                ],
                'required': [
                    'org_id',
                    'dataset_id',
                    'trace_id',
                ],
                'nullable': [
                    'limit',
                    'offset',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'dataset_id':
                        (str,),
                    'trace_id':
                        (str,),
                    'limit':
                        (int, none_type,),
                    'offset':
                        (int, none_type,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'dataset_id': 'dataset_id',
                    'trace_id': 'trace_id',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'org_id': 'path',
                    'dataset_id': 'path',
                    'trace_id': 'path',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_reference_profile_endpoint = _Endpoint(
            settings={
                'response_type': (ReferenceProfileItemResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}',
                'operation_id': 'get_reference_profile',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'model_id',
                    'reference_id',
                ],
                'required': [
                    'org_id',
                    'model_id',
                    'reference_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'model_id':
                        (str,),
                    'reference_id':
                        (str,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'model_id': 'model_id',
                    'reference_id': 'reference_id',
                },
                'location_map': {
                    'org_id': 'path',
                    'model_id': 'path',
                    'reference_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_delete_analyzer_results_requests_endpoint = _Endpoint(
            settings={
                'response_type': ([DeleteAnalyzerResult],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/delete-requests/analyzer-results',
                'operation_id': 'list_delete_analyzer_results_requests',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                ],
                'required': [
                    'org_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                },
                'location_map': {
                    'org_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_delete_dataset_profiles_requests_endpoint = _Endpoint(
            settings={
                'response_type': ([DeleteProfile],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/delete-requests/dataset-profiles',
                'operation_id': 'list_delete_dataset_profiles_requests',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                ],
                'required': [
                    'org_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                },
                'location_map': {
                    'org_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_profile_traces_endpoint = _Endpoint(
            settings={
                'response_type': (ProfileTracesResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/trace',
                'operation_id': 'list_profile_traces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'dataset_id',
                    'from_epoch',
                    'to_epoch',
                    'segment',
                    'limit',
                    'offset',
                ],
                'required': [
                    'org_id',
                    'dataset_id',
                    'from_epoch',
                    'to_epoch',
                ],
                'nullable': [
                    'segment',
                    'limit',
                    'offset',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'dataset_id':
                        (str,),
                    'from_epoch':
                        (int,),
                    'to_epoch':
                        (int,),
                    'segment':
                        ([SegmentTag], none_type,),
                    'limit':
                        (int, none_type,),
                    'offset':
                        (int, none_type,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'dataset_id': 'dataset_id',
                    'from_epoch': 'from_epoch',
                    'to_epoch': 'to_epoch',
                    'segment': 'segment',
                    'limit': 'limit',
                    'offset': 'offset',
                },
                'location_map': {
                    'org_id': 'path',
                    'dataset_id': 'path',
                    'from_epoch': 'query',
                    'to_epoch': 'query',
                    'segment': 'query',
                    'limit': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                    'segment': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_reference_profiles_endpoint = _Endpoint(
            settings={
                'response_type': ([ReferenceProfileItemResponse],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles',
                'operation_id': 'list_reference_profiles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'model_id',
                    'from_epoch',
                    'to_epoch',
                ],
                'required': [
                    'org_id',
                    'model_id',
                ],
                'nullable': [
                    'from_epoch',
                    'to_epoch',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'model_id':
                        (str,),
                    'from_epoch':
                        (int, none_type,),
                    'to_epoch':
                        (int, none_type,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'model_id': 'model_id',
                    'from_epoch': 'from_epoch',
                    'to_epoch': 'to_epoch',
                },
                'location_map': {
                    'org_id': 'path',
                    'model_id': 'path',
                    'from_epoch': 'query',
                    'to_epoch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_segments_endpoint = _Endpoint(
            settings={
                'response_type': (SegmentListResponse,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/segments',
                'operation_id': 'list_segments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'org_id',
                    'model_id',
                ],
                'required': [
                    'org_id',
                    'model_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'org_id':
                        (str,),
                    'model_id':
                        (str,),
                },
                'attribute_map': {
                    'org_id': 'org_id',
                    'model_id': 'model_id',
                },
                'location_map': {
                    'org_id': 'path',
                    'model_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_reference_profile(
        self,
        org_id,
        dataset_id,
        create_reference_profile_request,
        **kwargs
    ):
        """Returns data needed to uploading the reference profile  # noqa: E501

        Returns data needed to upload the reference profile. Supports uploading segmented reference profiles.              If segments are omitted, provides data needed to upload a single reference profile.              This replaces the deprecated LogReference operation.           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reference_profile(org_id, dataset_id, create_reference_profile_request, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID
            dataset_id (str): The unique model ID in your company.
            create_reference_profile_request (CreateReferenceProfileRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CreateReferenceProfileResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['create_reference_profile_request'] = \
            create_reference_profile_request
        return self.create_reference_profile_endpoint.call_with_http_info(**kwargs)

    def delete_analyzer_results(
        self,
        org_id,
        dataset_id,
        **kwargs
    ):
        """Deletes a set of analyzer results  # noqa: E501

        Deletes a set of analyzer results. Returns false if scheduling deletion encountered some error.            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_analyzer_results(org_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID
            dataset_id (str): The unique dataset ID in your company.

        Keyword Args:
            analyzer_id (str, none_type): [optional]
            start_timestamp (int, none_type): [optional]
            end_timestamp (int, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteAnalyzerResultsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['dataset_id'] = \
            dataset_id
        return self.delete_analyzer_results_endpoint.call_with_http_info(**kwargs)

    def delete_dataset_profiles(
        self,
        org_id,
        dataset_id,
        **kwargs
    ):
        """Deletes a set of dataset profiles  # noqa: E501

        Deletes a set of dataset profiles. Returns false if scheduling deletion encountered some error.         Deletion should usually occur within 1 hour of the request.          Use the [ListDeleteDatasetProfilesRequests](#DatasetProfile/ListDeleteDatasetProfilesRequests)          API to check the status of the deletion request.          Optionally this request also deletes analyzer results between the specified start and end timestamps.             The column_name and before_upload_timestamp scopes are NOT applied to analyzer results deletion, so         make sure you specify a start and end timestamp if setting delete_analyzer_results to true unless         you want to delete all results.           # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dataset_profiles(org_id, dataset_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID
            dataset_id (str): The unique dataset ID in your company.

        Keyword Args:
            profile_start_timestamp (int, none_type): Optional, scope deleting profiles from and more recent than the timestamp. [optional]
            profile_end_timestamp (int, none_type): Optional, scope deleting profiles older than the timestamp. [optional]
            before_upload_timestamp (int, none_type): Optional, scope deleting profiles uploaded on or prior to the timestamp. [optional]
            delete_analyzer_results (bool, none_type): Optional, delete analyzer results for the time range between the start and end timestamp.. [optional]
            column_name (str, none_type): Optional, scope deleting profiles for a specific column. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            DeleteDatasetProfilesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['dataset_id'] = \
            dataset_id
        return self.delete_dataset_profiles_endpoint.call_with_http_info(**kwargs)

    def delete_reference_profile(
        self,
        org_id,
        model_id,
        reference_id,
        **kwargs
    ):
        """Delete a single reference profile  # noqa: E501

        Delete a a Reference Profile. Returns false if the deletion encountered some error.            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_reference_profile(org_id, model_id, reference_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID
            model_id (str): The unique model ID in your company.
            reference_id (str): Unique reference Id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['model_id'] = \
            model_id
        kwargs['reference_id'] = \
            reference_id
        return self.delete_reference_profile_endpoint.call_with_http_info(**kwargs)

    def get_profile_traces(
        self,
        org_id,
        dataset_id,
        trace_id,
        **kwargs
    ):
        """Returns a list for profile traces matching a trace id  # noqa: E501

        Returns a list of profile traces matching a trace id            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_profile_traces(org_id, dataset_id, trace_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str):
            dataset_id (str):
            trace_id (str):

        Keyword Args:
            limit (int, none_type): [optional]
            offset (int, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProfileTracesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['trace_id'] = \
            trace_id
        return self.get_profile_traces_endpoint.call_with_http_info(**kwargs)

    def get_reference_profile(
        self,
        org_id,
        model_id,
        reference_id,
        **kwargs
    ):
        """Returns a single reference profile  # noqa: E501

        Returns a Reference Profile.            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reference_profile(org_id, model_id, reference_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID
            model_id (str): The unique model ID in your company.
            reference_id (str): Unique reference Id.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ReferenceProfileItemResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['model_id'] = \
            model_id
        kwargs['reference_id'] = \
            reference_id
        return self.get_reference_profile_endpoint.call_with_http_info(**kwargs)

    def list_delete_analyzer_results_requests(
        self,
        org_id,
        **kwargs
    ):
        """List requests to delete analyzer results  # noqa: E501

        List the requests to delete analyzer results.            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_delete_analyzer_results_requests(org_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [DeleteAnalyzerResult]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        return self.list_delete_analyzer_results_requests_endpoint.call_with_http_info(**kwargs)

    def list_delete_dataset_profiles_requests(
        self,
        org_id,
        **kwargs
    ):
        """List requests to delete dataset profiles  # noqa: E501

        List the requests to delete dataset profiles.            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_delete_dataset_profiles_requests(org_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [DeleteProfile]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        return self.list_delete_dataset_profiles_requests_endpoint.call_with_http_info(**kwargs)

    def list_profile_traces(
        self,
        org_id,
        dataset_id,
        from_epoch,
        to_epoch,
        **kwargs
    ):
        """Returns a list for profile traces  # noqa: E501

        Returns a list of profile traces.            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_profile_traces(org_id, dataset_id, from_epoch, to_epoch, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID
            dataset_id (str): The unique dataset ID
            from_epoch (int): Milli epoch time that represents the end of the time range to query.
            to_epoch (int): Milli epoch time that represents the end of the time range to query.

        Keyword Args:
            segment ([SegmentTag], none_type): [optional]
            limit (int, none_type): [optional]
            offset (int, none_type): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ProfileTracesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['dataset_id'] = \
            dataset_id
        kwargs['from_epoch'] = \
            from_epoch
        kwargs['to_epoch'] = \
            to_epoch
        return self.list_profile_traces_endpoint.call_with_http_info(**kwargs)

    def list_reference_profiles(
        self,
        org_id,
        model_id,
        **kwargs
    ):
        """Returns a list for reference profiles between the given time range filtered on the upload timestamp  # noqa: E501

        Returns a list of Reference Profiles between a given time range filtered on the upload timestamp.            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reference_profiles(org_id, model_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID
            model_id (str): The unique model ID in your company.

        Keyword Args:
            from_epoch (int, none_type): Milli epoch time that represents the end of the time range to query based on the upload timestamp.. [optional]
            to_epoch (int, none_type): Milli epoch time that represents the end of the time range to query based on the upload timestamp.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            [ReferenceProfileItemResponse]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['model_id'] = \
            model_id
        return self.list_reference_profiles_endpoint.call_with_http_info(**kwargs)

    def list_segments(
        self,
        org_id,
        model_id,
        **kwargs
    ):
        """Returns a list of segments  # noqa: E501

        Returns a list of segments for the dataset.            # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_segments(org_id, model_id, async_req=True)
        >>> result = thread.get()

        Args:
            org_id (str): Your company's unique organization ID
            model_id (str): The unique model ID in your company.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            SegmentListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['org_id'] = \
            org_id
        kwargs['model_id'] = \
            model_id
        return self.list_segments_endpoint.call_with_http_info(**kwargs)

