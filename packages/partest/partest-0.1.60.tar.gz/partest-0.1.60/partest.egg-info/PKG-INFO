Metadata-Version: 2.1
Name: partest
Version: 0.1.60
Summary: This is a module for the rapid implementation of test cases with coverage tracking. This module contains a call counter for specific endpoints and their methods. As well as the function of determining the types of tests that need to be counted.
Home-page: https://github.com/Dec01/partest
Author: dec01
Author-email: parschin.ewg@yandex.ru
Project-URL: Source, https://github.com/Dec01/partest
Keywords: autotest partest test coverage
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: httpx>=0.27.2
Requires-Dist: pyyaml>=6.0.2
Requires-Dist: matplotlib>=3.9.2
Requires-Dist: allure-pytest>=2.8.18
Requires-Dist: pytest-asyncio>=0.23.7
Requires-Dist: pytest==8.3.3

## HI!

This is a framework for API autotests with coverage assessment. Detailed instructions in the process of writing. It is better to check with the author how to use it. Tools are used:

* pytest
* httpx
* allure

Files are required for specific work:

**conftest.py** - it must have a fixture's inside:

```commandline
@pytest.fixture(scope="session")
def api_client(domain):
    return ApiClient(domain=domain)
```
```commandline
@pytest.fixture(scope='session', autouse=True)
def clear_call_data():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤."""
    global call_count, call_type
    api_call_storage.call_count.clear()
    api_call_storage.call_type.clear()
    yield
```

**confpartest.py** - It must have variables inside:

```
swagger_files = {
    'test1': ['local', '../public/swagger/app-openapi.yaml'],
    'test2': ['local', '../public/swagger/app-openapi2.yaml'],
    'test3': ['url', 'https://url.ru']
}

test_types_coverage = ['default', '405', 'param']
```

The project must have a test that displays information about the coverage in allure. The name of it **test_zorro.py**:

```commandline

    async def test_display_final_call_counts(self):
        report_lines = []
        total_coverage_percentage = 0
        total_endpoints = 0
        total_calls_excluding_generation = 0

        for (method, endpoint, description), count in call_count.items():
            types = set(call_type[(method, endpoint, description)])
            total_endpoints += 1

            # –ü–æ–¥—Å—á–µ—Ç –≤—ã–∑–æ–≤–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ç–∏–ø 'generation_data'
            if 'generation_data' not in types:
                total_calls_excluding_generation += count

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–µ—Å—Ç–æ–≤
            coverage_status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ ‚ùå"
            matched_types = set(types).intersection(types)  
            count_matched = len(matched_types)

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            if count_matched == len(types):  # –í—Å–µ —Ç–∏–ø—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                coverage_status = "–ü–æ–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ"
                total_coverage_percentage += 100
            elif count_matched == 2:  
                coverage_status = "–ü–æ–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ 66% üîî"
                total_coverage_percentage += 66
            elif count_matched == 1:  
                coverage_status = "–ü–æ–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–∞ 33% ‚ùå"
                total_coverage_percentage += 33
            else: 
                coverage_status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ ‚ùå"
                total_coverage_percentage += 0

            report_line = (
                f"\n{description}\n–≠–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}\n–ú–µ—Ç–æ–¥: {method} | "
                f"–û–±—Ä–∞—â–µ–Ω–∏–π: {count}, –¢–∏–ø—ã —Ç–µ—Å—Ç–æ–≤: {', '.join(types)}\n{coverage_status}\n"
            )
            report_lines.append(report_line)

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        if total_endpoints > 0:
            average_coverage_percentage = total_coverage_percentage / total_endpoints
        else:
            average_coverage_percentage = 0

        border = "*" * 50
        summary = f"{border}\n–û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {average_coverage_percentage:.2f}%\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∑–æ–≤–æ–≤ (–∏—Å–∫–ª—é—á–∞—è 'generation_data'): {total_calls_excluding_generation}\n{border}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ –Ω–∞—á–∞–ª–æ –æ—Ç—á–µ—Ç–∞
        report_lines.insert(0, summary)

        create_chart(call_count)

        with open('api_call_counts.png', 'rb') as f:
            allure.attach(f.read(), name='–û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è', attachment_type=allure.attachment_type.PNG)

        allure.attach("\n".join(report_lines), name='–û—Ç—á–µ—Ç –ø–æ –≤—ã–∑–æ–≤–∞–º API', attachment_type=allure.attachment_type.TEXT)

        assert True

```


What does the test look like:

```commandline
    async def test_get(self, api_client):
        endpoint = 'https://ya.ru'
        response = await api_client.make_request(
            'GET',
            endpoint,
            params='limit=1',
            expected_status_code=200,
            validate_model=Models.ValidateGet,
            type=types.type_default
        )
        assert response is not None
        assert isinstance(response, dict)
```

All available data that the client can accept:
```
method: str,
endpoint: str,
add_url1: Optional[str] = '',
add_url2: Optional[str] = '',
add_url3: Optional[str] = '',
params: Optional[Dict[str, Any]] = None,
headers: Optional[Dict[str, str]] = None,
data: Optional[Dict[str, Any]] = None,
expected_status_code: Optional[int] = None,
validate_model: Optional[Type[BaseModel]] = None,
type: Optional[str] = None```
