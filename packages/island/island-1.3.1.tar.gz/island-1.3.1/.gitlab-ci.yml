# This file is a template, and might need editing before it works on your project.
# use the official gcc image, based on debian
# can use verions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc

before_script:
  - pwd
  - git clone --depth 1 --branch master https://gitlab.com/atria-soft/ci.git
  - ls -l *
  - ls -l ..
  - apt-get update -qy
  - apt-get install -y python-dev python-pip
  #- pip install setuptools
  - ./setup.py install
  #- export PYTHONPATH=$PYTHONPATH:./lutin/build/lib.linux-x86_64-2.7/:./lutin/build/lib.linux-x86_64-2.7/lutin/:./lutin/build/lib:./lutin/build/lib/lutin/
#  - ./ci/build_send.py --tag=$TAG --status=START;
  

build:
  stage: build
  # instead of calling g++ directly you can also use some build toolkit like make
  # install the necessary build tools when needed
  # before_script: 
  #   - apt update && apt -y install make autoconf 
  script:
    - export TARGET=-tLinux
    - export CONF=-mdebug
    - export BUILDER=-cgcc
    - lutin -w -j4 -C -P $TARGET $BUILDER $COMPILATOR_OPTION $BUS $CONF $GCOV $DISABLE_PACKAGE test-c; STATUS=$?
#    - ./ci/build_send.py --tag=$TAG --status="$STATUS";
#  artifacts:
#    paths:
#      - mybinary
