# This file was generated by Nuitka

# Stubs included by default
import os
import matplotlib.dates
import pandas
import matplotlib
import seaborn
import matplotlib.pyplot
from pathlib import Path
import numpy

def rolling_ema(data: typing.Any, window: typing.Any) -> typing.Any:
    ...
def rolling_wma(data: typing.Any, window: typing.Any) -> typing.Any:
    ...
def load_data(file_path: typing.Any, start_time: typing.Any, end_time: typing.Any) -> typing.Any:
    ...
def rolling_mean_normalize(df: typing.Any, rolling_window: typing.Any) -> typing.Any:
    ...
def rolling_zscore(df: typing.Any, rolling_window: typing.Any) -> typing.Any:
    ...
def rolling_rsi(df: typing.Any, rolling_window: typing.Any) -> typing.Any:
    ...
def rolling_bollinger_bands(df: typing.Any, rolling_window: typing.Any, multiplier: typing.Any) -> typing.Any:
    ...
def calculate_macd(df: typing.Any, short_window: typing.Any, long_window: typing.Any, signal_window: typing.Any) -> typing.Any:
    ...
def entry_exit_threshold(df: typing.Any, rolling_window: typing.Any, threshold: typing.Any, backtest_mode: typing.Any) -> typing.Any:
    ...
def entry_exit_band(df: typing.Any, rolling_window: typing.Any, backtest_mode: typing.Any) -> typing.Any:
    ...
def entry_exit_macd(df: typing.Any, rolling_window1: typing.Any, rolling_window2: typing.Any) -> typing.Any:
    ...
def generate_report(df: typing.Any, param1: typing.Any, param2: typing.Any, fees: typing.Any, sr_multiplier: typing.Any) -> typing.Any:
    ...
def plot_single_diagram(df: typing.Any, report_df: typing.Any) -> typing.Any:
    ...
def plot_heatmap(report_df: typing.Any) -> typing.Any:
    ...
def plot_data_spread(df: typing.Any) -> typing.Any:
    ...
def mean_normalize_backtesting(df: typing.Any, rolling_window: typing.Any, threshold: typing.Any, fees: typing.Any, sr_multiplier: typing.Any, backtest_mode: typing.Any) -> typing.Any:
    ...
def mean_normalize(df: typing.Any, backtest_mode_list: typing.Any, rolling_window_range: typing.Any, threshold_range: typing.Any, fees: typing.Any, sr_multiplier: typing.Any) -> typing.Any:
    ...
def bollinger_bands_backtesting(df: typing.Any, rolling_window: typing.Any, multiplier: typing.Any, fees: typing.Any, sr_multiplier: typing.Any, backtest_mode: typing.Any) -> typing.Any:
    ...
def bollinger_bands(df: typing.Any, backtest_mode_list: typing.Any, rolling_window_range: typing.Any, threshold_range: typing.Any, fees: typing.Any, sr_multiplier: typing.Any) -> typing.Any:
    ...
def rsi_backtesting(df: typing.Any, rolling_window: typing.Any, threshold: typing.Any, fees: typing.Any, sr_multiplier: typing.Any, backtest_mode: typing.Any) -> typing.Any:
    ...
def rsi(df: typing.Any, backtest_mode_list: typing.Any, rolling_window_range: typing.Any, threshold_range: typing.Any, fees: typing.Any, sr_multiplier: typing.Any) -> typing.Any:
    ...
def zscore_backtesting(df: typing.Any, rolling_window: typing.Any, threshold: typing.Any, fees: typing.Any, sr_multiplier: typing.Any, backtest_mode: typing.Any) -> typing.Any:
    ...
def zscore(df: typing.Any, backtest_mode_list: typing.Any, rolling_window_range: typing.Any, threshold_range: typing.Any, fees: typing.Any, sr_multiplier: typing.Any) -> typing.Any:
    ...
def macd_backtesting(df: typing.Any, rolling_window1: typing.Any, rolling_window2: typing.Any, fees: typing.Any, sr_multiplier: typing.Any) -> typing.Any:
    ...
def macd(df: typing.Any, rolling_window1: typing.Any, rolling_window2: typing.Any, fees: typing.Any, sr_multiplier: typing.Any) -> typing.Any:
    ...
def plot_correlation(file_paths: typing.Any, start_time: typing.Any, end_time: typing.Any) -> typing.Any:
    ...
def plot_combined_equity(file_paths: typing.Any, start_time: typing.Any, end_time: typing.Any) -> typing.Any:
    ...

__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import matplotlib
import matplotlib.pyplot
import seaborn
import pathlib
import pandas
import numpy
import os
import matplotlib.dates
import ntpath