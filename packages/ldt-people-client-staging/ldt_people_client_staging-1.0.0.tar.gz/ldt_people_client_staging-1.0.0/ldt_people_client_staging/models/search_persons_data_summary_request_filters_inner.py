# coding: utf-8

"""
    Live Data People API

    This API provides information about people as observed by Live Data

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from ldt_people_client_staging.models.filter_group import FilterGroup
from ldt_people_client_staging.models.search_filter import SearchFilter
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

SEARCHPERSONSDATASUMMARYREQUESTFILTERSINNER_ANY_OF_SCHEMAS = ["FilterGroup", "PersonSearchFilter"]

class SearchPersonsDataSummaryRequestFiltersInner(BaseModel):
    """
    SearchPersonsDataSummaryRequestFiltersInner
    """

    # data type: SearchFilter
    anyof_schema_1_validator: Optional[SearchFilter] = Field(default=None, description="A filter to apply when searching people. You can add a filter for any field of a person and, depending on the data type of the field, the value to filter on. Strings, dates, numbers, and booleans each have their own specific fields that must be used for filtering. You can also specify whether the match should be an exact match, a \"fuzzy\" match, or an \"exists\" match using the `match_type` field.   Use dot-notation to specify fields that are in nested dicts.  To search for multiple criteria within a given job (i.e. \"an engineer at Amazon\"), use a FilterGroup to group the criteria with an `AND` operator. Note that when using this approach the FilterGroup must contain **only** `jobs.` filters within it.  Filters are combined using the `AND` operator. ")
    # data type: FilterGroup
    anyof_schema_2_validator: Optional[FilterGroup] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[FilterGroup, PersonSearchFilter]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "FilterGroup", "PersonSearchFilter" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = SearchPersonsDataSummaryRequestFiltersInner.model_construct()
        error_messages = []
        # validate data type: SearchFilter
        if not isinstance(v, SearchFilter):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SearchFilter`")
        else:
            return v

        # validate data type: FilterGroup
        if not isinstance(v, FilterGroup):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FilterGroup`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in SearchPersonsDataSummaryRequestFiltersInner with anyOf schemas: FilterGroup, PersonSearchFilter. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[SearchFilter] = Field(default=None, description="A filter to apply when searching people. You can add a filter for any field of a person and, depending on the data type of the field, the value to filter on. Strings, dates, numbers, and booleans each have their own specific fields that must be used for filtering. You can also specify whether the match should be an exact match, a \"fuzzy\" match, or an \"exists\" match using the `match_type` field.   Use dot-notation to specify fields that are in nested dicts.  To search for multiple criteria within a given job (i.e. \"an engineer at Amazon\"), use a FilterGroup to group the criteria with an `AND` operator. Note that when using this approach the FilterGroup must contain **only** `jobs.` filters within it.  Filters are combined using the `AND` operator. ")
        try:
            instance.actual_instance = SearchFilter.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[FilterGroup] = None
        try:
            instance.actual_instance = FilterGroup.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SearchPersonsDataSummaryRequestFiltersInner with anyOf schemas: FilterGroup, PersonSearchFilter. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], FilterGroup, PersonSearchFilter]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


