# coding: utf-8

"""
    Moneyball

    Provides company-focused insights based on Live Data

    The version of the OpenAPI document: 1.0.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PostReportsTenureByCohortRequest(BaseModel):
    """
    PostReportsTenureByCohortRequest
    """ # noqa: E501
    companies: List[StrictStr]
    group_by: Optional[List[StrictStr]] = None
    include_grouped_companies: Optional[StrictBool] = None
    slice_size: Optional[Annotated[int, Field(le=10, strict=True, ge=1)]] = 3
    number_of_buckets: Optional[Annotated[int, Field(le=50, strict=True, ge=1)]] = 5
    __properties: ClassVar[List[str]] = ["companies", "group_by", "include_grouped_companies", "slice_size", "number_of_buckets"]

    @field_validator('group_by')
    def group_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['level', 'department']):
                raise ValueError("each list item must be one of ('level', 'department')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostReportsTenureByCohortRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostReportsTenureByCohortRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "companies": obj.get("companies"),
            "group_by": obj.get("group_by"),
            "include_grouped_companies": obj.get("include_grouped_companies"),
            "slice_size": obj.get("slice_size") if obj.get("slice_size") is not None else 3,
            "number_of_buckets": obj.get("number_of_buckets") if obj.get("number_of_buckets") is not None else 5
        })
        return _obj


