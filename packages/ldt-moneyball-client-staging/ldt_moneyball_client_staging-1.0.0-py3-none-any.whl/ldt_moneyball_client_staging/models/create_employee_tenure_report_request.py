# coding: utf-8

"""
    Moneyball

    Provides company-focused insights based on Live Data

    The version of the OpenAPI document: 1.0.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateEmployeeTenureReportRequest(BaseModel):
    """
    CreateEmployeeTenureReportRequest
    """ # noqa: E501
    companies: List[Annotated[str, Field(strict=True)]]
    group_by: Optional[List[StrictStr]] = None
    date_from: Optional[date] = Field(default=None, description="If not provided, defaults to current month (current employees)")
    date_to: Optional[date] = Field(default=None, description="If not provided, defaults to current month (current employees)")
    status: StrictStr = Field(description="Whether the tenure data by month will be for employees that were working that (`current`) month, or employees that departed that month (`departed`)")
    include_grouped_companies: Optional[StrictBool] = False
    __properties: ClassVar[List[str]] = ["companies", "group_by", "date_from", "date_to", "status", "include_grouped_companies"]

    @field_validator('group_by')
    def group_by_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['level', 'department', 'school', 'previous_company']):
                raise ValueError("each list item must be one of ('level', 'department', 'school', 'previous_company')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['current', 'departed']):
            raise ValueError("must be one of enum values ('current', 'departed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateEmployeeTenureReportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateEmployeeTenureReportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "companies": obj.get("companies"),
            "group_by": obj.get("group_by"),
            "date_from": obj.get("date_from"),
            "date_to": obj.get("date_to"),
            "status": obj.get("status") if obj.get("status") is not None else 'departed',
            "include_grouped_companies": obj.get("include_grouped_companies") if obj.get("include_grouped_companies") is not None else False
        })
        return _obj


