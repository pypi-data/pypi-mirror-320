import{d,a as m}from"./disclose-version.BjBLbfIf.js";import"./legacy.b-VaXUeO.js";import{f}from"./index-client.BoCi2Vgn.js";import{s as b}from"./index.DxvZjEHL.js";import{l as g,s as j}from"./props.Cy3ILhV4.js";import{I as y,b as _,s as S,c as k}from"./index.Dvh8W8ZQ.js";import{w as c,g as h}from"./index.CZPF9jM2.js";import{g as p}from"./entry.C16cB7Ci.js";function E(s,t){const o=g(t,["children","$$slots","$$events","$$legacy"]);y(s,j({name:"play"},()=>o,{iconNode:[["polygon",{points:"6 3 20 12 6 21 6 3"}]],children:(e,i)=>{var n=d(),r=f(n);b(r,t,"default",{},null),m(e,n)},$$slots:{default:!0}}))}const l=c(null),u=c({currentJob:null,jobStatus:null,jobDetails:null,taskStatusCounts:{}});async function w(s,t,o){let a="started";for(;!["completed","failed","not_found"].includes(a);){await new Promise(e=>setTimeout(e,1e3));try{const e=await _(s,t);a=e.status;let i={};if(e.task_status_map&&Object.keys(e.task_status_map).length>0&&(i=Object.values(e.task_status_map).reduce((n,r)=>(n[r]=(n[r]||0)+1,n),{})),u.set({currentJob:t,jobStatus:a,jobDetails:e,taskStatusCounts:i}),a==="completed")await o();else if(a==="failed")break}catch(e){console.error("Error polling job status:",e);break}}}async function C(s,t){l.set({type:"experiment",projectId:s}),p("/")}async function T(s,t,o){l.set({type:"task",projectId:s,challengeId:t}),p("/")}async function N(s){const t=h(l);if(t)try{const a=(t.type==="experiment"?await S(t.projectId):await k(t.projectId,t.challengeId)).job_id;u.update(e=>({...e,currentJob:a,jobStatus:"started",jobDetails:null,taskStatusCounts:{}})),await w(t.projectId,a,s)}catch(o){console.error("Error executing pending run:",o),u.update(a=>({...a,jobStatus:"error"}))}finally{l.set(null)}}export{E as P,l as a,T as b,N as e,C as h,u as j,w as p};
