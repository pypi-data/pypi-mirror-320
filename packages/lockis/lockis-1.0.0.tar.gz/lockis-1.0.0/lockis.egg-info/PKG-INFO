Metadata-Version: 2.1
Name: lockis
Version: 1.0.0
Summary: Encrypt your private data with aes256+hmac
Home-page: https://github.com/mishakorzik/lockis
Author: MishaKorzhik_He1Zen
Author-email: developer.mishakorzhik@gmail.com
License: Apache 2.0
Project-URL: Bug Tracker, https://github.com/mishakorzik/lockis/issues
Project-URL: Donate, https://www.buymeacoffee.com/misakorzik
Keywords: encryption,private,key,cipher,aes256,hmac,ttl,easy,sha256
Classifier: Development Status :: 5 - Production/Stable
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: 3.14
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Software Development :: Libraries
Requires-Python: >=3.5
Description-Content-Type: text/markdown
Requires-Dist: cryptography>=3.2

# Lockis

Easily encrypt your sensitive data with aes256+hmac and with ttl.

```
# generate secret key (96 bytes)
key = gkey()

# initilize secret key
key = lockis(key)

# encrypt message
key.encrypt()

# decrypt message
key.decrypt(data, ttl=10)
```

You can also specify ttl, this will help protect against replay attacks.

```python
>>> from lockis import gkey, lockis
>>> key = gkey()
>>> key = lockis(key)
>>> key.encrypt(b"hello everyone, its a test message!")
b'EAAAAABnhh92pdLhypQcEsvwh4YUMuwzNg8RiQE2pJLnkT9Ru8tUSXvN6XGi3eeO1q-OiLD_E66pCpymr8Jw_BtrXB6Q1i9SeHe3l-NiCvGRZD2WOEmzjjH7MnyO7Haiw-hHdvs8SFZJgpssxR_tLAEvRaDcV9scC7Gfd2kwmdsok8wrRNvlpkE='
>>> key.decrypt(b'EAAAAABnhh92pdLhypQcEsvwh4YUMuwzNg8RiQE2pJLnkT9Ru8tUSXvN6XGi3eeO1q-OiLD_E66pCpymr8Jw_BtrXB6Q1i9SeHe3l-NiCvGRZD2WOEmzjjH7MnyO7Haiw-hHdvs8SFZJgpssxR_tLAEvRaDcV9scC7Gfd2kwmdsok8wrRNvlpkE=', ttl=60)
hello everyone, its a test message!
```
