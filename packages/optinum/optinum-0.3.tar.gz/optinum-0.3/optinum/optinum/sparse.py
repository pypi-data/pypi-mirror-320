from typing import List, Tuple, Union
import numpy as np
from scipy.linalg import lu, solve

def lu_decomposition(matrix: List[List[float]]) -> Tuple[List[List[float]], List[List[float]]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.
    –û–¥–Ω–∞–∫–æ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –≤—ã—à–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞  A, –ø–æ—Å–∫–æ–ª—å–∫—É —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ L –∏ U –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ L –∏ ùëà —Ç–∞–∫–∂–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ.
    
    :param matrix: –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A
    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö –º–∞—Ç—Ä–∏—Ü (L, U)
    """
    n = len(matrix)
    L = [[0.0] * n for _ in range(n)]
    U = [[0.0] * n for _ in range(n)]
    
    for i in range(n):
        L[i][i] = 1.0
        for j in range(i, n):
            U[i][j] = matrix[i][j] - sum(L[i][k] * U[k][j] for k in range(i))
        for j in range(i + 1, n):
            L[j][i] = (matrix[j][i] - sum(L[j][k] * U[k][i] for k in range(i))) / U[i][i]
    
    return L, U

def forward_substitution(L: List[List[float]], b: List[float]) -> List[float]:
    """
    –†–µ—à–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É L * y = b –º–µ—Ç–æ–¥–æ–º –ø—Ä—è–º–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.
    
    :param L: –ù–∏–∂–Ω—è—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ L
    :param b: –í–µ–∫—Ç–æ—Ä –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ b
    :return: –í–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏—è y
    """
    n = len(L)
    y = [0.0] * n
    for i in range(n):
        y[i] = b[i] - sum(L[i][j] * y[j] for j in range(i))
    return y

def backward_substitution(U: List[List[float]], y: List[float]) -> List[float]:
    """
    –†–µ—à–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É U * x = y –º–µ—Ç–æ–¥–æ–º –æ–±—Ä–∞—Ç–Ω–æ–π –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏.
    
    :param U: –í–µ—Ä—Ö–Ω—è—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ U
    :param y: –í–µ–∫—Ç–æ—Ä –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ y
    :return: –í–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏—è x
    """
    n = len(U)
    x = [0.0] * n
    for i in range(n - 1, -1, -1):
        x[i] = (y[i] - sum(U[i][j] * x[j] for j in range(i + 1, n))) / U[i][i]
    return x

def csr_to_dense(csr_matrix: Tuple[List[float], List[int], List[int]], n: int) -> List[List[float]]:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSR –≤ –ø–ª–æ—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É.
    
    :param csr_matrix: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —Ç—Ä–µ—Ö —Å–ø–∏—Å–∫–æ–≤ (values, column_indices, row_pointers)
    :param n: –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    :return: –ü–ª–æ—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    """
    values, column_indices, row_pointers = csr_matrix
    dense_matrix = [[0.0] * n for _ in range(n)]
    
    for i in range(n):
        row_start = row_pointers[i]
        row_end = row_pointers[i + 1]
        for j in range(row_start, row_end):
            col = column_indices[j]
            dense_matrix[i][col] = values[j]
    
    return dense_matrix

def sparse_lu_solve(matrix: Union[Tuple[List[float], List[int], List[int]], List[List[float]]], b: List[float], n: int, format: str = 'csr') -> List[float]:
    """
    –†–µ—à–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É Ax = b –¥–ª—è —Ä–∞–∑—Ä–µ–∂–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã A, –∑–∞–¥–∞–Ω–Ω–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSR –∏–ª–∏ –ø–ª–æ—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã, 
    –∏—Å–ø–æ–ª—å–∑—É—è LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ.
    –°–ª–æ–∂–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ: O(n^3)
        –ü–æ—Å–ª–µ–¥—É—é—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º: O(n^2)2
    LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü, —É –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å–µ –≤–µ–¥—É—â–∏–µ –≥–ª–∞–≤–Ω—ã–µ –º–∏–Ω–æ—Ä—ã –Ω–µ–≤—ã—Ä–æ–∂–¥–µ–Ω—ã

    :param matrix: –†–∞–∑—Ä–µ–∂–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSR (values, column_indices, row_pointers) –∏–ª–∏ –ø–ª–æ—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
    :param b: –í–µ–∫—Ç–æ—Ä –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ b
    :param n: –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    :param format: –§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã ('csr' –∏–ª–∏ 'dense')
    :return: –í–µ–∫—Ç–æ—Ä —Ä–µ—à–µ–Ω–∏—è x

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    >>> csr_matrix = (
    ...     [4, 3, 5, 6, 8, 2, 9],  # values
    ...     [0, 0, 1, 1, 2, 2, 3],  # column_indices
    ...     [0, 1, 3, 5, 7]         # row_pointers
    ... )
    >>> b = [2, 5, 8, 10]
    >>> n = 4
    >>> x_csr = sparse_lu_solve(csr_matrix, b, n, format='csr')
    >>> print(x_csr)
    [0.5, 0.5, 0.5, 1.0]
    
    """
    if format == 'csr':
        dense_matrix = csr_to_dense(matrix, n)
    elif format == 'dense':
        dense_matrix = matrix
    else:
        raise ValueError("Unsupported matrix format. Use 'csr' or 'dense'.")
    
    L, U = lu_decomposition(dense_matrix)
    y = forward_substitution(L, b)
    x = backward_substitution(U, y)
    return x

if __name__=='__main__':
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    csr_matrix = (
        [4, 3, 5, 6, 8, 2, 9],  # values
        [0, 0, 1, 1, 2, 2, 3],  # column_indices
        [0, 1, 3, 5, 7]         # row_pointers
    )
    b = [2, 5, 8, 10]
    n = 4

    # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–ª—è CSR –º–∞—Ç—Ä–∏—Ü—ã
    x_csr = sparse_lu_solve(csr_matrix, b, n, format='csr')
    print("–†–µ—à–µ–Ω–∏–µ x –¥–ª—è CSR –º–∞—Ç—Ä–∏—Ü—ã:", x_csr)

    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–ª–æ—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    dense_matrix = [
        [4, 0, 0, 0],
        [3, 5, 0, 0],
        [0, 6, 8, 0],
        [0, 0, 2, 9]
    ]

    # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–ª–æ—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
    x_dense = sparse_lu_solve(dense_matrix, b, n, format='dense')
    print("–†–µ—à–µ–Ω–∏–µ x –¥–ª—è –ø–ª–æ—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã:", x_dense)

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ scipy –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π
    dense_matrix_np = np.array([
        [4, 0, 0, 0],
        [3, 5, 0, 0],
        [0, 6, 8, 0],
        [0, 0, 2, 9]
    ])
    b_np = np.array([2, 5, 8, 10])

    # –í—ã–ø–æ–ª–Ω—è–µ–º LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ
    P, L, U = lu(dense_matrix_np)

    # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LU-—Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è
    y_np = solve(L, np.dot(P.T, b_np))
    x_np = solve(U, y_np)

    print("L matrix:\n", L)
    print("U matrix:\n", U)
    print("Solution x:\n", x_np)
