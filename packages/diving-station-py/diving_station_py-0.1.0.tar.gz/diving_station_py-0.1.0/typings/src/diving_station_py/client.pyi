"""
This type stub file was generated by pyright.
"""

from typing import Any
from .event import AsyncEventHandler, ConnectEvent, ControllerInputReceivedEvent, DeviceInfoReceivedEvent, DisconnectEvent, HandBendReceivedEvent, HandQuatReceivedEvent, HapticEvent, WristReceivedEvent
from .protocol import DeviceInfo
from .protocol.constants import HandType

logger = ...
class DivingStationClient:
  """Diving Station Protocol を使用してデータを送受信するためのクラス
  プロトコルの詳細: diving_station_protocol.md
  """
  def __init__(self, ip: str = ..., receive_port: int = ...) -> None:
    ...
  
  async def dispatch(self, event_data: object) -> Any:
    """イベントを対応するハンドラーにディスパッチします。

    Args:
        event_data (EventType): ディスパッチするイベントデータ

    Returns:
        Any: ハンドラーの実行結果
    """
    ...
  
  def on_connect(self, handler: AsyncEventHandler[ConnectEvent]) -> AsyncEventHandler[ConnectEvent]:
    """接続イベントのハンドラーを登録します。

    Args:
        handler (AsyncEventHandler[ConnectEvent]): 接続イベントを処理する非同期ハンドラー

    Returns:
        AsyncEventHandler[ConnectEvent]: デコレートされたイベントハンドラー
    """
    ...
  
  def on_disconnect(self, handler: AsyncEventHandler[DisconnectEvent]) -> AsyncEventHandler[DisconnectEvent]:
    """切断イベントのハンドラーを登録します。

    Args:
        handler (AsyncEventHandler[DisconnectEvent]): 切断イベントを処理する非同期ハンドラー

    Returns:
        AsyncEventHandler[DisconnectEvent]: デコレートされたイベントハンドラー
    """
    ...
  
  def on_device_info_received(self, handler: AsyncEventHandler[DeviceInfoReceivedEvent]) -> AsyncEventHandler[DeviceInfoReceivedEvent]:
    """デバイス情報受信イベントのハンドラーを登録します。

    Args:
        handler (AsyncEventHandler[DeviceInfoReceivedEvent]): デバイス情報イベントを処理する非同期ハンドラー

    Returns:
        AsyncEventHandler[DeviceInfoReceivedEvent]: デコレートされたイベントハンドラー
    """
    ...
  
  def on_hand_bend_received(self, handler: AsyncEventHandler[HandBendReceivedEvent]) -> AsyncEventHandler[HandBendReceivedEvent]:
    """ハンドの曲げデータ受信イベントのハンドラーを登録します。

    Args:
        handler (AsyncEventHandler[HandBendReceivedEvent]): ハンドの曲げデータイベントを処理する非同期ハンドラー

    Returns:
        AsyncEventHandler[HandBendReceivedEvent]: デコレートされたイベントハンドラー
    """
    ...
  
  def on_wrist_received(self, handler: AsyncEventHandler[WristReceivedEvent]) -> AsyncEventHandler[WristReceivedEvent]:
    """手首の回転データ受信イベントのハンドラーを登録します。

    Args:
        handler (AsyncEventHandler[WristReceivedEvent]): 手首の回転データイベントを処理する非同期ハンドラー

    Returns:
        AsyncEventHandler[WristReceivedEvent]: デコレートされたイベントハンドラー
    """
    ...
  
  def on_hand_quat_received(self, handler: AsyncEventHandler[HandQuatReceivedEvent]) -> AsyncEventHandler[HandQuatReceivedEvent]:
    """ハンドのクォータニオンデータ受信イベントのハンドラーを登録します。

    Args:
        handler (AsyncEventHandler[HandQuatReceivedEvent]): ハンドのクォータニオンデータイベントを処理する非同期ハンドラー

    Returns:
        AsyncEventHandler[HandQuatReceivedEvent]: デコレートされたイベントハンドラー
    """
    ...
  
  def on_controller_received(self, handler: AsyncEventHandler[ControllerInputReceivedEvent]) -> AsyncEventHandler[ControllerInputReceivedEvent]:
    """コントローラー入力データ受信イベントのハンドラーを登録します。

    Args:
        handler (AsyncEventHandler[ControllerInputReceivedEvent]): コントローラー入力データイベントを処理する非同期ハンドラー

    Returns:
        AsyncEventHandler[ControllerInputReceivedEvent]: デコレートされたイベントハンドラー
    """
    ...
  
  def on_haptic_received(self, handler: AsyncEventHandler[HapticEvent]) -> AsyncEventHandler[HapticEvent]:
    """ハプティックフィードバックイベントのハンドラーを登録します。

    Args:
        handler (AsyncEventHandler[HapticEvent]): ハプティックフィードバックイベントを処理する非同期ハンドラー

    Returns:
        AsyncEventHandler[HapticEvent]: デコレートされたイベントハンドラー
    """
    ...
  
  @property
  def connected(self) -> bool:
    """接続状態を取得します。

    Returns:
        bool: Diving Stationに接続されている場合はTrue、それ以外はFalse
    """
    ...
  
  @property
  def devices(self) -> list[DeviceInfo]:
    """接続されているデバイス情報のリストを取得します。

    Returns:
        list[DeviceInfo]: デバイス情報のリスト
    """
    ...
  
  async def connect(self): # -> None:
    """Diving Stationに接続します。

    Raises:
        RuntimeError: 既に接続されている場合に発生
    """
    ...
  
  async def disconnect(self): # -> None:
    """Diving Stationから切断します。

    Raises:
        RuntimeError: 接続されていない場合に発生
    """
    ...
  
  async def send_haptic(self, device_id: str, hand_type: HandType, frequency: float = ..., amplitude: float = ..., duration: float = ...): # -> None:
    """デバイスの振動要求を送信します。

    Args:
        device_id (str): デバイスID
        hand_type (HandType): 左右の手の種類
        frequency (float, optional): 振動周波数(Hz). デフォルト値は200。
        amplitude (float, optional): 振動の強さ(0-1). デフォルト値は1.0。
        duration (float, optional): 振動時間(秒). デフォルト値は1.0。
    """
    ...
  


