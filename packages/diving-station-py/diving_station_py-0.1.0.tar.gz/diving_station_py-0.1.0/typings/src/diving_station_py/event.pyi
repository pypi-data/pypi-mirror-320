"""
This type stub file was generated by pyright.
"""

from typing import Any, Awaitable, Callable, Dict, Type, TypeVar
from diving_station_py.protocol.constants import HandType
from diving_station_py.protocol.controller import ControllerInput
from diving_station_py.protocol.device_info import DeviceInfo
from diving_station_py.protocol.hand_bend import HandBend
from diving_station_py.protocol.hand_quat import HandQuaternion
from diving_station_py.protocol.wrist import Wirst

EventType = TypeVar("EventType")
AsyncEventHandler = Callable[[EventType], Awaitable[Any]]
Handlers = Dict[Type[EventType], AsyncEventHandler[EventType]]
def event_handler(event_type: Type[EventType]) -> Callable[[AsyncEventHandler], AsyncEventHandler,]:
  """イベントハンドラ"""
  ...

class ConnectEvent:
  """Diving Station に接続したときに発生するイベント"""
  ...


class DisconnectEvent:
  """Diving Station から切断したときに発生するイベント"""
  ...


class HapticEvent:
  """デバイスが振動した時に発生するイベント"""
  def __init__(self, device_id: str, hand_type: HandType, frequency: float, amplitude: float, duration: float) -> None:
    ...
  


class DeviceInfoReceivedEvent:
  """デバイス情報を受信したときに発生するイベント"""
  def __init__(self, devices: list[DeviceInfo]) -> None:
    ...
  


class HandBendReceivedEvent:
  """手の曲げ情報を受信したときに発生するイベント"""
  def __init__(self, hand_bend: HandBend) -> None:
    ...
  


class HandQuatReceivedEvent:
  """手のクォータニオン情報を受信したときに発生するイベント"""
  def __init__(self, quaternion: HandQuaternion) -> None:
    ...
  


class WristReceivedEvent:
  """手首のクォータニオンを受信したときに発生するイベント"""
  def __init__(self, wrist: Wirst) -> None:
    ...
  


class ControllerInputReceivedEvent:
  """コントローラの入力情報を受信したときに発生するイベント"""
  def __init__(self, controller_input: ControllerInput) -> None:
    ...
  


