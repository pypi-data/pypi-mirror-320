[project]
name = "notify-bridge"
version = "0.1.0"
description = "A bridge for sending notifications to various platforms"
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }
keywords = ["notification", "bridge", "feishu", "dingtalk", "wechat"]
authors = [
    { name = "Long Hao", email = "hal.long@outlook.com" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "anyio>=4.0.0",
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "pillow>=10.0.0",
]

[project.urls]
Homepage = "https://github.com/loonghao/notify-bridge"
Documentation = "https://github.com/loonghao/notify-bridge#readme"
Repository = "https://github.com/loonghao/notify-bridge.git"
Issues = "https://github.com/loonghao/notify-bridge/issues"

[project.entry-points."notify_bridge.notifiers"]
feishu = "notify_bridge.notifiers.feishu:FeishuNotifier"


[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["notify_bridge"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 120
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.nox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
)
'''

[tool.isort]
profile = "black"
atomic = true
include_trailing_comma = true
lines_after_imports = 2
lines_between_types = 1
use_parentheses = true
src_paths = ["notify_bridge", "tests"]
filter_files = true
known_first_party = "notify_bridge"

# Enforce import section headers.
import_heading_future = "Import future modules"
import_heading_stdlib = "Import built-in modules"
import_heading_thirdparty = "Import third-party modules"
import_heading_firstparty = "Import local modules"

force_sort_within_sections = true
force_single_line = true

# All project unrelated unknown imports belong to third-party.
default_section = "THIRDPARTY"
skip_glob = []

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
mypy_path = "src"
packages = ["notify_bridge"]
ignore_missing_imports = true
namespace_packages = false
explicit_package_bases = false
disable_error_code = ["misc", "has-type"]

[tool.ruff]
line-length = 120
target-version = "py310"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = ["E501", "PLR0913", "RUF001", "RUF002", "RUF003"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"noxfile.py" = ["E402", "I001"]
"tests/*" = ["S101"]

[tool.coverage.run]
source = ["notify_bridge"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=notify_bridge --cov-report=term-missing"
