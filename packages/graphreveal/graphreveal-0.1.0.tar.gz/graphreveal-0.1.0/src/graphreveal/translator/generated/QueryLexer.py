# Generated from QueryLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,314,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,4,0,37,8,0,11,0,12,0,38,
        1,0,1,0,1,1,4,1,44,8,1,11,1,12,1,45,1,2,1,2,1,3,1,3,1,3,1,3,3,3,
        54,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,93,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,3,5,105,8,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,161,8,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,3,7,183,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,3,8,198,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,3,12,242,8,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,3,13,263,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,3,14,301,8,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,3,3,0,9,10,
        13,13,32,32,1,0,48,57,2,0,44,44,59,59,334,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        1,36,1,0,0,0,3,43,1,0,0,0,5,47,1,0,0,0,7,53,1,0,0,0,9,92,1,0,0,0,
        11,104,1,0,0,0,13,160,1,0,0,0,15,182,1,0,0,0,17,197,1,0,0,0,19,199,
        1,0,0,0,21,209,1,0,0,0,23,218,1,0,0,0,25,241,1,0,0,0,27,262,1,0,
        0,0,29,300,1,0,0,0,31,302,1,0,0,0,33,309,1,0,0,0,35,37,7,0,0,0,36,
        35,1,0,0,0,37,38,1,0,0,0,38,36,1,0,0,0,38,39,1,0,0,0,39,40,1,0,0,
        0,40,41,6,0,0,0,41,2,1,0,0,0,42,44,7,1,0,0,43,42,1,0,0,0,44,45,1,
        0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,4,1,0,0,0,47,48,7,2,0,0,48,
        6,1,0,0,0,49,50,5,110,0,0,50,51,5,111,0,0,51,54,5,116,0,0,52,54,
        5,33,0,0,53,49,1,0,0,0,53,52,1,0,0,0,54,8,1,0,0,0,55,56,5,118,0,
        0,56,57,5,101,0,0,57,58,5,114,0,0,58,59,5,116,0,0,59,60,5,101,0,
        0,60,93,5,120,0,0,61,62,5,118,0,0,62,63,5,101,0,0,63,64,5,114,0,
        0,64,65,5,116,0,0,65,66,5,105,0,0,66,67,5,99,0,0,67,68,5,101,0,0,
        68,93,5,115,0,0,69,70,5,118,0,0,70,71,5,101,0,0,71,72,5,114,0,0,
        72,73,5,116,0,0,73,74,5,101,0,0,74,75,5,120,0,0,75,76,5,101,0,0,
        76,93,5,115,0,0,77,78,5,118,0,0,78,79,5,101,0,0,79,80,5,114,0,0,
        80,81,5,116,0,0,81,93,5,115,0,0,82,93,5,86,0,0,83,84,5,110,0,0,84,
        85,5,111,0,0,85,86,5,100,0,0,86,93,5,101,0,0,87,88,5,110,0,0,88,
        89,5,111,0,0,89,90,5,100,0,0,90,91,5,101,0,0,91,93,5,115,0,0,92,
        55,1,0,0,0,92,61,1,0,0,0,92,69,1,0,0,0,92,77,1,0,0,0,92,82,1,0,0,
        0,92,83,1,0,0,0,92,87,1,0,0,0,93,10,1,0,0,0,94,95,5,101,0,0,95,96,
        5,100,0,0,96,97,5,103,0,0,97,105,5,101,0,0,98,99,5,101,0,0,99,100,
        5,100,0,0,100,101,5,103,0,0,101,102,5,101,0,0,102,105,5,115,0,0,
        103,105,5,69,0,0,104,94,1,0,0,0,104,98,1,0,0,0,104,103,1,0,0,0,105,
        12,1,0,0,0,106,107,5,98,0,0,107,108,5,108,0,0,108,109,5,111,0,0,
        109,110,5,99,0,0,110,161,5,107,0,0,111,112,5,98,0,0,112,113,5,108,
        0,0,113,114,5,111,0,0,114,115,5,99,0,0,115,116,5,107,0,0,116,161,
        5,115,0,0,117,118,5,98,0,0,118,119,5,105,0,0,119,120,5,99,0,0,120,
        121,5,111,0,0,121,122,5,110,0,0,122,123,5,110,0,0,123,124,5,101,
        0,0,124,125,5,99,0,0,125,126,5,116,0,0,126,127,5,101,0,0,127,128,
        5,100,0,0,128,129,5,32,0,0,129,130,5,99,0,0,130,131,5,111,0,0,131,
        132,5,109,0,0,132,133,5,112,0,0,133,134,5,111,0,0,134,135,5,110,
        0,0,135,136,5,101,0,0,136,137,5,110,0,0,137,161,5,116,0,0,138,139,
        5,98,0,0,139,140,5,105,0,0,140,141,5,99,0,0,141,142,5,111,0,0,142,
        143,5,110,0,0,143,144,5,110,0,0,144,145,5,101,0,0,145,146,5,99,0,
        0,146,147,5,116,0,0,147,148,5,101,0,0,148,149,5,100,0,0,149,150,
        5,32,0,0,150,151,5,99,0,0,151,152,5,111,0,0,152,153,5,109,0,0,153,
        154,5,112,0,0,154,155,5,111,0,0,155,156,5,110,0,0,156,157,5,101,
        0,0,157,158,5,110,0,0,158,159,5,116,0,0,159,161,5,115,0,0,160,106,
        1,0,0,0,160,111,1,0,0,0,160,117,1,0,0,0,160,138,1,0,0,0,161,14,1,
        0,0,0,162,163,5,99,0,0,163,164,5,111,0,0,164,165,5,109,0,0,165,166,
        5,112,0,0,166,167,5,111,0,0,167,168,5,110,0,0,168,169,5,101,0,0,
        169,170,5,110,0,0,170,183,5,116,0,0,171,172,5,99,0,0,172,173,5,111,
        0,0,173,174,5,109,0,0,174,175,5,112,0,0,175,176,5,111,0,0,176,177,
        5,110,0,0,177,178,5,101,0,0,178,179,5,110,0,0,179,180,5,116,0,0,
        180,183,5,115,0,0,181,183,5,67,0,0,182,162,1,0,0,0,182,171,1,0,0,
        0,182,181,1,0,0,0,183,16,1,0,0,0,184,185,5,97,0,0,185,186,5,99,0,
        0,186,187,5,121,0,0,187,188,5,99,0,0,188,189,5,108,0,0,189,190,5,
        105,0,0,190,198,5,99,0,0,191,192,5,102,0,0,192,193,5,111,0,0,193,
        194,5,114,0,0,194,195,5,101,0,0,195,196,5,115,0,0,196,198,5,116,
        0,0,197,184,1,0,0,0,197,191,1,0,0,0,198,18,1,0,0,0,199,200,5,98,
        0,0,200,201,5,105,0,0,201,202,5,112,0,0,202,203,5,97,0,0,203,204,
        5,114,0,0,204,205,5,116,0,0,205,206,5,105,0,0,206,207,5,116,0,0,
        207,208,5,101,0,0,208,20,1,0,0,0,209,210,5,99,0,0,210,211,5,111,
        0,0,211,212,5,109,0,0,212,213,5,112,0,0,213,214,5,108,0,0,214,215,
        5,101,0,0,215,216,5,116,0,0,216,217,5,101,0,0,217,22,1,0,0,0,218,
        219,5,99,0,0,219,220,5,111,0,0,220,221,5,110,0,0,221,222,5,110,0,
        0,222,223,5,101,0,0,223,224,5,99,0,0,224,225,5,116,0,0,225,226,5,
        101,0,0,226,227,5,100,0,0,227,24,1,0,0,0,228,229,5,101,0,0,229,230,
        5,117,0,0,230,231,5,108,0,0,231,232,5,101,0,0,232,233,5,114,0,0,
        233,234,5,105,0,0,234,235,5,97,0,0,235,242,5,110,0,0,236,237,5,101,
        0,0,237,238,5,117,0,0,238,239,5,108,0,0,239,240,5,101,0,0,240,242,
        5,114,0,0,241,228,1,0,0,0,241,236,1,0,0,0,242,26,1,0,0,0,243,244,
        5,104,0,0,244,245,5,97,0,0,245,246,5,109,0,0,246,247,5,105,0,0,247,
        248,5,108,0,0,248,249,5,116,0,0,249,250,5,111,0,0,250,251,5,110,
        0,0,251,252,5,105,0,0,252,253,5,97,0,0,253,263,5,110,0,0,254,255,
        5,104,0,0,255,256,5,97,0,0,256,257,5,109,0,0,257,258,5,105,0,0,258,
        259,5,108,0,0,259,260,5,116,0,0,260,261,5,111,0,0,261,263,5,110,
        0,0,262,243,1,0,0,0,262,254,1,0,0,0,263,28,1,0,0,0,264,265,5,110,
        0,0,265,266,5,111,0,0,266,267,5,32,0,0,267,268,5,105,0,0,268,269,
        5,115,0,0,269,270,5,111,0,0,270,271,5,108,0,0,271,272,5,97,0,0,272,
        273,5,116,0,0,273,274,5,101,0,0,274,275,5,100,0,0,275,276,5,32,0,
        0,276,277,5,118,0,0,277,278,5,101,0,0,278,279,5,114,0,0,279,280,
        5,116,0,0,280,281,5,105,0,0,281,282,5,99,0,0,282,283,5,101,0,0,283,
        301,5,115,0,0,284,285,5,110,0,0,285,286,5,111,0,0,286,287,5,32,0,
        0,287,288,5,105,0,0,288,289,5,115,0,0,289,290,5,111,0,0,290,291,
        5,108,0,0,291,292,5,97,0,0,292,293,5,116,0,0,293,294,5,101,0,0,294,
        295,5,100,0,0,295,296,5,32,0,0,296,301,5,118,0,0,297,298,5,110,0,
        0,298,299,5,105,0,0,299,301,5,118,0,0,300,264,1,0,0,0,300,284,1,
        0,0,0,300,297,1,0,0,0,301,30,1,0,0,0,302,303,5,112,0,0,303,304,5,
        108,0,0,304,305,5,97,0,0,305,306,5,110,0,0,306,307,5,97,0,0,307,
        308,5,114,0,0,308,32,1,0,0,0,309,310,5,116,0,0,310,311,5,114,0,0,
        311,312,5,101,0,0,312,313,5,101,0,0,313,34,1,0,0,0,12,0,38,45,53,
        92,104,160,182,197,241,262,300,1,6,0,0
    ]

class QueryLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    WHITESPACE = 1
    INTEGER = 2
    SEPERATOR = 3
    NOT = 4
    VERTEX = 5
    EDGE = 6
    BLOCK = 7
    COMPONENT = 8
    ACYCLIC = 9
    BIPARTITE = 10
    COMPLETE = 11
    CONNECTED = 12
    EULERIAN = 13
    HAMILTONIAN = 14
    NO_ISOLATED_V = 15
    PLANAR = 16
    TREE = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'bipartite'", "'complete'", "'connected'", "'planar'", "'tree'" ]

    symbolicNames = [ "<INVALID>",
            "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", "EDGE", 
            "BLOCK", "COMPONENT", "ACYCLIC", "BIPARTITE", "COMPLETE", "CONNECTED", 
            "EULERIAN", "HAMILTONIAN", "NO_ISOLATED_V", "PLANAR", "TREE" ]

    ruleNames = [ "WHITESPACE", "INTEGER", "SEPERATOR", "NOT", "VERTEX", 
                  "EDGE", "BLOCK", "COMPONENT", "ACYCLIC", "BIPARTITE", 
                  "COMPLETE", "CONNECTED", "EULERIAN", "HAMILTONIAN", "NO_ISOLATED_V", 
                  "PLANAR", "TREE" ]

    grammarFileName = "QueryLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


