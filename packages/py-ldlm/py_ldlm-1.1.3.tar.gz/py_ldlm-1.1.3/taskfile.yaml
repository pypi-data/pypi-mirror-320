# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Requires
# - grep
# - pcre2grep
# - misspell
# - which
# - curl
# - addlicense (github.com/google/addlicense)

version: 3

dotenv: ['.env']

tasks:

# App tasks
  build:
    desc: "Build packages"
    sources:
      - '**/*.py'
      - '*py'
    generates:
      - 'dist/py_ldlm-*.whl'
      - 'dist/py_ldlm-*.tar.gz'
    cmds:
      - rm -rf dist
      - python -m build

  publish:
    desc: "Publish packages to PyPI"
    preconditions:
      - test "${TWINE_PASSWORD}" != ""
    cmds:
      - task: build
      - python3 -m twine upload dist/*

  protoc:
    desc: "Build language protobuf files"
    sources:
      - ldlm.proto
    generates:
      - ldlm/protos/ldlm_pb2_grpc.py
      - ldlm/protos/ldlm_pb2.py
    cmds:
      - python3 -m grpc_tools.protoc -I. --python_out=ldlm/protos --pyi_out=ldlm/protos --grpc_python_out=ldlm/protos ldlm.proto
      - 2to3 -w -n ldlm/protos/*py
      - addlicense ldlm/protos/*

  docs:
    desc: "Build documentation"
    sources:
      - '**/*.py'
      - '*py'
    dir: docs
    cmds:
      # API docs generated with
      # sphinx-apidoc -e -f -o ./ ../ldlm ../ldlm/protos/ ../ldlm/*client*.py
      # then edited
      - make clean
      - make html

  test:
    desc: "Run unit tests"
    aliases: ["t"]
    sources:
      - "**/*.py"
    cmds:
      - pytest tests

  coverage:
    desc: "Generate coverage"
    aliases: ["cov"]
    sources: 
      - "**/*.py"
    generates:
      - "coverage.lcov"
    cmds:
      - coverage run -m pytest tests
      - coverage lcov
      - coverage report

  clean:
    desc: "Clean up build artifacts and cache"
    cmds:
      # Cache
      - find . -name "*pyc" -delete
      - rm -rf .pytest_cache
      # build artifacts
      - rm -rf dist

# Common tasks
  check:
    desc: "Run pre-build checks on files"
    aliases: ["c", "checks"]
    cmds:
      - task: clean
      - task: googlify
      - task: fmt
      - task: lint
      - misspell ./...
      - task: test
      - task: clean
      - find . -type f -not -name "*.sh" -not -path "./.venv/*" -exec chmod a-x {} \;

  test-clean:
    desc: "Clean test cache and run tests"
    aliases: ["tc"]
    cmds:
      - task: clean
      - task: test

  lint:
    desc: "Run linters"
    sources:
      - '**/*py'
      - '*py'
    cmds:
      - pylint --prefer-stubs=true ldlm
      - mypy ldlm

  fmt:
    desc: "Format the code"
    sources:
      - "**/*.py"
    cmds:
      - find . -name "*py" -not -path "./.venv/*" -not -path "./ldlm/protos/*" -exec yapf -i --style google {} \;
 
  license:
    internal: true
    status:
      - test -f LICENSE
    cmds:
      - curl -o LICENSE https://raw.githubusercontent.com/google/new-project/master/LICENSE

  contributing:
    internal: true
    status:
      - test -f CONTRIBUTING.md
    cmds:
      - curl -o CONTRIBUTING.md https://raw.githubusercontent.com/google/new-project/master/docs/contributing.md

  readme:
    internal: true
    status:
      - test -f README.md
    cmds:
      - printf '# {{.APP_NAME}}\n\n{{.LICENSE}}\n{{.CONTRIBUTING}}\n{{.DISCLAIMER}}' >>README.md
    vars:
      APP_NAME:
        sh: "basename $PWD"
      LICENSE: >
        ## License\n\nApache 2.0; see [`LICENSE`](LICENSE) for details.
      CONTRIBUTING: >
        ## Contributing\n\nSee [`CONTRIBUTING.md`](CONTRIBUTING.md) for details.
      DISCLAIMER: >
        ## Disclaimer\n\nThis project is not an official Google project. It is not supported by
        Google and Google specifically disclaims all warranties as to its quality,
        merchantability, or fitness for a particular purpose.\n

  required_files:
    desc: "Make sure required files exist"
    internal: true
    cmds:
      - task: license
      - task: contributing
      - task: gitignore
      - task: readme

  license_headers:
    desc: "Make sure source files have headers"
    cmds:
      - addlicense -check -ignore '**/.*' -ignore '.*/**' -ignore 'docs/**' ./

  add_license_headers:
    desc: "Make sure source files have headers"
    aliases: ["alh"]
    preconditions:
      - test "{{.CLI_ARGS}}" != ""
    cmds:
      - addlicense -ignore '**/.*' -ignore '.*/**' ./ {{.CLI_ARGS}}

  check_readme_google:
    desc: "Make sure README.md has common items"
    internal: true
    sources:
      - "README.md"
    cmds:
      - pcre2grep -M -q '# Contributing\s*See \[`CONTRIBUTING.md`\].' README.md
      - pcre2grep -M -q "# Disclaimer\s*This project is not an official Google project." README.md
      - pcre2grep -M -q '# License\s*Apache 2.0.' README.md

  googlify:
    desc: "Make sure google checks pass"
    internal: true
    cmds:
      - task: required_files
      - task: check_readme_google
      - task: license_headers 

  gitignore:
    desc: "Make sure .gitignore contains common items"
    internal: true
    status:
      - test -f ./.gitignore
      - grep -E -q '^\.\*$' .gitignore
      - grep -E -q '^\!/\.gitignore$' .gitignore
    cmds:
      - grep -E -q '^\.\*$' .gitignore || printf '.*\n' >>.gitignore
      - grep -E -q '^\!/\.gitignore$' .gitignore || printf '!/.gitignore\n' >>.gitignore


