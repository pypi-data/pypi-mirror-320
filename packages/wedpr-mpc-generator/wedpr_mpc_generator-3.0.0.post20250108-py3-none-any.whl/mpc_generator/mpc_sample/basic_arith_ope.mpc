# PSI_OPTION=True

# BIT_LENGTH = 128

# This file is generated automatically by ams
'''
SELECT 3*(s1.field3 + s2.field3) - s0.field3 AS r0,
       (s0.field1 + s2.field1) / 2 * s1.field1 AS r1
FROM (source0 AS s0
      INNER JOIN source1 AS s1 ON s0.id = s1.id)
INNER JOIN source2 AS s2 ON s0.id = s2.id;
'''

from ppc import *

n_threads = 8
value_type = pfix

pfix.set_precision(16, 47)

SOURCE0 = 0
source0_record_count = $(source0_record_count)
source0_column_count = 4
source0_record = Matrix(source0_record_count, source0_column_count, value_type)

SOURCE1 = 1
source1_record_count = $(source1_record_count)
source1_column_count = 4
source1_record = Matrix(source1_record_count, source1_column_count, value_type)

SOURCE2 = 2
source2_record_count = $(source2_record_count)
source2_column_count = 4
source2_record = Matrix(source2_record_count, source2_column_count, value_type)

# basic arithmetic operation means that all parties have same number of record
result_record = $(source0_record_count)
results = Matrix(result_record, 2, value_type)


def read_data_collection(data_collection, party_id):
    if data_collection.sizes[0] > 0:
        data_collection.input_from(party_id)


def calculate_result_0():
    @for_range_opt(result_record)
    def _(i):
        results[i][0] = 3*(source1_record[i][3]+source2_record[i][3])-source0_record[i][3]


def calculate_result_1():
    @for_range_opt(result_record)
    def _(i):
        results[i][1] = (source0_record[i][1]+source2_record[i][1])/2*source1_record[i][1]


def print_results():
    result_fields = ['r0', 'r1']
    set_display_field_names(result_fields)

    @for_range_opt(result_record)
    def _(i):
        result_values = [results[i][0].reveal(), results[i][1].reveal()]
        display_data(result_values)


def ppc_main():
    read_data_collection(source0_record, SOURCE0)
    read_data_collection(source1_record, SOURCE1)
    read_data_collection(source2_record, SOURCE2)
    calculate_result_0()
    calculate_result_1()

    print_results()


ppc_main()
