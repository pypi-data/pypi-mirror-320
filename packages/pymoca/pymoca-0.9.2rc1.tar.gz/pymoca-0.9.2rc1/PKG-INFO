Metadata-Version: 2.2
Name: pymoca
Version: 0.9.2rc1
Summary: A Modelica to computer algebra system (CAS) translator.
Author: Pymoca Contributors
Maintainer-email: Jack Vreeken <jack@vreeken.me>, Kent Rutan <gs1150e@icloud.com>
License: Copyright (c) 2016-2021, James Goppert and the Pymoca contributors.
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        * Redistributions of source code must retain the above copyright notice, this
          list of conditions and the following disclaimer.
        
        * Redistributions in binary form must reproduce the above copyright notice,
          this list of conditions and the following disclaimer in the documentation
          and/or other materials provided with the distribution.
        
        * Neither the name of pymoca nor the names of its
          contributors may be used to endorse or promote products derived from
          this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
        
Project-URL: homepage, https://github.com/pymoca/pymoca
Keywords: modelica,simulation,compiler
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Other
Classifier: Topic :: Software Development
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Visualization
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Operating System :: Unix
Classifier: Operating System :: MacOS
Classifier: Topic :: Software Development :: Code Generators
Classifier: Topic :: Software Development :: Compilers
Classifier: Topic :: Software Development :: Embedded Systems
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.8.2
Requires-Dist: antlr4-python3-runtime==4.13.*
Provides-Extra: casadi
Requires-Dist: casadi>=3.4.0; extra == "casadi"
Requires-Dist: setuptools>=60.0.0; extra == "casadi"
Provides-Extra: lxml
Requires-Dist: lxml>=3.5.0; extra == "lxml"
Requires-Dist: scipy>=0.13.3; extra == "lxml"
Provides-Extra: sympy
Requires-Dist: sympy<=1.11,>=0.7.6.1; extra == "sympy"
Requires-Dist: scipy>=0.13.3; extra == "sympy"
Requires-Dist: jinja2>=2.10.1; extra == "sympy"
Provides-Extra: examples
Requires-Dist: jupyterlab; extra == "examples"
Requires-Dist: matplotlib; extra == "examples"
Requires-Dist: control<=0.10.0,>=0.9.3.post2; extra == "examples"
Provides-Extra: all
Requires-Dist: pymoca[casadi,examples,lxml,sympy]; extra == "all"

# <img alt="Pymoca" src="branding/icons/pymocalogo.svg" height="60">

A Modelica to computer algebra system (CAS) compiler written in python.


[![CI](https://github.com/pymoca/pymoca/workflows/CI/badge.svg)](https://github.com/pymoca/pymoca/actions?query=workflow%3ACI)
[![Coverage](https://codecov.io/gh/pymoca/pymoca/branch/master/graph/badge.svg)](https://codecov.io/gh/pymoca/pymoca)
[![DOI](https://zenodo.org/badge/20664755.svg)](https://zenodo.org/badge/latestdoi/20664755)


## Install

Python / PyPI:

```bash
pip install pymoca
```

Anaconda / Conda:
1. Install anaconda 3.

2. Setup environment.

```bash
./create_conda_env.sh enduser
. activate pymoca
jupyter notebook
```

## Examples
* [Sympy Example](test/notebooks/Spring.ipynb)
* [Casadi Example](test/notebooks/Casadi.ipynb)
* [ModelicaXML Example](test/notebooks/XML.ipynb)

## Roadmap

### Completed Tasks

* Parsing Modelica
* Sympy Simulation/CAS creation for simple models
* Casadi CAS creation for simple models

### TODO

* Gather requirements and unify Casadi model
* Lazy parsing for reading large libraries
* Support more of Modelica language elements

<!--- vim:ts=4:sw=4:expandtab:
!-->
