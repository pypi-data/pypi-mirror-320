"""
This type stub file was generated by pyright.
"""

import click
from typing import Optional, Type
from .core.plugin import Plugin

"""
This type stub file was generated by pyright.
"""
TEMPLATES_DIR = ...
logger = ...
def setup_logging(debug: bool = ...) -> None:
    """Configure logging based on debug flag and environment variable.
    
    Args:
        debug: If True, set log level to DEBUG
    """
    ...

@click.group()
@click.option("--debug", is_flag=True, help="Enable debug logging")
def cli(debug: bool) -> None:
    """AI Rules CLI tool for managing AI assistant configurations and running AI-powered tools."""
    ...

@cli.command()
@click.argument("assistant_type", type=click.Choice(["windsurf", "cursor", "cli"]))
@click.option("--output-dir", "-o", default=".", help="Output directory for generated files")
def init(assistant_type: str, output_dir: str):
    """Initialize AI assistant configuration files."""
    ...

@cli.group(name="scripts")
def scripts_group():
    """Manage scripts."""
    ...

@scripts_group.command(name="add")
@click.argument("script_path", type=click.Path(exists=True))
@click.option("--name", required=True, help="Alias name for the script")
@click.option("--global", "global_config", is_flag=True, help="Add to global configuration")
def add_script(script_path: str, name: str, global_config: bool):
    """Add a script with an alias."""
    ...

@scripts_group.command(name="list")
def list_scripts():
    """List all registered scripts."""
    ...

@scripts_group.command(name="run")
@click.argument("name")
@click.argument("args", required=False)
def run_script(name: str, args: Optional[str] = ...):
    """Execute a script by its alias."""
    ...

@cli.group()
def plugin():
    """Plugin commands."""
    ...

def create_plugin_command(plugin_class: Type[Plugin]) -> Optional[click.Command]:
    """Create a Click command for a plugin.

    Args:
        plugin_class: Plugin class to create command for.

    Returns:
        click.Command: Created command, or None if creation fails.
    """
    ...

def register_plugins() -> None:
    """Register all available plugins."""
    ...

if __name__ == "__main__":
    ...
