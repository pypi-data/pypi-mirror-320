# coding: utf-8

"""
    Live Data Identity API

    Manage your Live Data organization and user access to your resources

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from ldt_identity_client.models.get_service_accounts200_response_inner_role import GetServiceAccounts200ResponseInnerRole
from ldt_identity_client.models.org import Org
from ldt_identity_client.models.service_account import ServiceAccount
from ldt_identity_client.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class GetServiceAccounts200ResponseInner(BaseModel):
    """
    GetServiceAccounts200ResponseInner
    """ # noqa: E501
    service_account: Optional[ServiceAccount] = Field(default=None, alias="serviceAccount")
    org: Optional[Org] = None
    role: Optional[GetServiceAccounts200ResponseInnerRole] = None
    created_by: Optional[User] = Field(default=None, alias="createdBy")
    __properties: ClassVar[List[str]] = ["serviceAccount", "org", "role", "createdBy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetServiceAccounts200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of service_account
        if self.service_account:
            _dict['serviceAccount'] = self.service_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of org
        if self.org:
            _dict['org'] = self.org.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role:
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_by
        if self.created_by:
            _dict['createdBy'] = self.created_by.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetServiceAccounts200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "serviceAccount": ServiceAccount.from_dict(obj["serviceAccount"]) if obj.get("serviceAccount") is not None else None,
            "org": Org.from_dict(obj["org"]) if obj.get("org") is not None else None,
            "role": GetServiceAccounts200ResponseInnerRole.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "createdBy": User.from_dict(obj["createdBy"]) if obj.get("createdBy") is not None else None
        })
        return _obj


