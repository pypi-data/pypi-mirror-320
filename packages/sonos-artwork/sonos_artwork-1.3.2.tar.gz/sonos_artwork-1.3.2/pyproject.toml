[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.ruff]

target-version = "py312"

[tool.ruff.lint]

select = [
    "A", # flake8-builtins
    #    "ANN", # flake8-annotations
    "ARG",   # flake8-unused-arguments
    "ASYNC", # flake8-async
    "B",     # flake8-bugbear
    #    "BLE",    # flake8-blind-except
    "C4", # flake8-comprehensions
    #    "C90",    # cognitive complexity
    #    "COM",    # flake8-commas
    #    "D", # pydocstyle
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle errors
    "EM",  # flake8-errmsg
    #    "ERA",    # flake8-eradicate
    "EXE", # flake8-executable
    "F",   # pyflakes
    "FA",  # flake8-future-annotations
    #    "FBT",    # boolean trap
    "FLY",  # flynt
    "FURB", # refurb
    #    "G",      # flake8-logging-format
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "INT",  # flake8-gettext
    "ISC",  # implicit-str-concat
    "LOG",  # flake8-logging
    "N",    # pep8-naming
    "PERF", # perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    #    "PL",     # pylint
    #    "PT",     # flake8-pytest-style
    #    "PTH",    # flake8-use-pathlib
    #    "PYI",    # flake8-pyi
    #    "Q",      # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific lints
    "S",    # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    #    "T20",    # flake8-print
    "TCH", # flake8-type-checking
    "TID", # ban relative imports
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "W",   # pycodestyle warnings
    "YTT", # flake8-2020
]

ignore = [
    "ANN101", # missing type annotation for 'self' in method
    "ANN102", # missing type annotation for 'cls' in method
    "B028",   # No explicit `stacklevel` keyword argument found
    "COM812", # ignore when using ruff-format
    "G004",   # Logging statement uses f-string
    "ISC001", # ignore when using ruff-format
    "N818",   # Exception name should be named with an Error suffix
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "S404",   # `subprocess` module is possibly insecure
]

[tool.ruff.format]
quote-style = "preserve"

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests...
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
]

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]
filterwarnings = "error"
xfail_strict = true
addopts = "--cov=sonos --cov-report html --cov-report term --show-capture=all -s"

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    #"raise NotImplementedError",
    "if TYPE_CHECKING:",
    #"@overload",
]