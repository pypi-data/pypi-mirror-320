# coding: utf-8

"""
    UniFi Access API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from uiaccessclient.models.access_policy_schedule import AccessPolicySchedule
from uiaccessclient.models.nfc_card_reference import NfcCardReference
from uiaccessclient.models.pin_code_reference import PinCodeReference
from uiaccessclient.models.resource import Resource
from typing import Optional, Set
from typing_extensions import Self

class Visitor(BaseModel):
    """
    Visitor
    """ # noqa: E501
    id: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    status: Optional[StrictStr] = 'UNKNOWN'
    inviter_id: Optional[StrictStr] = None
    inviter_name: Optional[StrictStr] = None
    mobile_phone: Optional[StrictStr] = None
    remarks: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    visitor_company: Optional[StrictStr] = None
    visit_reason: Optional[StrictStr] = None
    start_time: Optional[StrictStr] = None
    end_time: Optional[StrictStr] = None
    nfc_cards: Optional[List[NfcCardReference]] = None
    pin_code: Optional[PinCodeReference] = None
    schedule_id: Optional[StrictStr] = None
    schedule: Optional[AccessPolicySchedule] = None
    resources: Optional[List[Resource]] = None
    __properties: ClassVar[List[str]] = ["id", "first_name", "last_name", "status", "inviter_id", "inviter_name", "mobile_phone", "remarks", "email", "visitor_company", "visit_reason", "start_time", "end_time", "nfc_cards", "pin_code", "schedule_id", "schedule", "resources"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['UNKNOWN', 'UPCOMING', 'VISITED', 'VISITING', 'CANCELLED', 'NO_VISIT', 'ACTIVE']):
            raise ValueError("must be one of enum values ('UNKNOWN', 'UPCOMING', 'VISITED', 'VISITING', 'CANCELLED', 'NO_VISIT', 'ACTIVE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Visitor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in nfc_cards (list)
        _items = []
        if self.nfc_cards:
            for _item_nfc_cards in self.nfc_cards:
                if _item_nfc_cards:
                    _items.append(_item_nfc_cards.to_dict())
            _dict['nfc_cards'] = _items
        # override the default output from pydantic by calling `to_dict()` of pin_code
        if self.pin_code:
            _dict['pin_code'] = self.pin_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Visitor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "status": obj.get("status") if obj.get("status") is not None else 'UNKNOWN',
            "inviter_id": obj.get("inviter_id"),
            "inviter_name": obj.get("inviter_name"),
            "mobile_phone": obj.get("mobile_phone"),
            "remarks": obj.get("remarks"),
            "email": obj.get("email"),
            "visitor_company": obj.get("visitor_company"),
            "visit_reason": obj.get("visit_reason"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "nfc_cards": [NfcCardReference.from_dict(_item) for _item in obj["nfc_cards"]] if obj.get("nfc_cards") is not None else None,
            "pin_code": PinCodeReference.from_dict(obj["pin_code"]) if obj.get("pin_code") is not None else None,
            "schedule_id": obj.get("schedule_id"),
            "schedule": AccessPolicySchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "resources": [Resource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None
        })
        return _obj


