# coding: utf-8

"""
    UniFi Access API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uiaccessclient.models.access_policy_week_schedule import AccessPolicyWeekSchedule
from uiaccessclient.models.resource import Resource
from typing import Optional, Set
from typing_extensions import Self

class CreateVisitorRequest(BaseModel):
    """
    CreateVisitorRequest
    """ # noqa: E501
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    remarks: Optional[StrictStr] = None
    mobile_phone: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    visitor_company: Optional[StrictStr] = Field(default=None, alias="_visitor_company")
    start_time: Optional[StrictStr] = None
    end_time: Optional[StrictStr] = None
    visit_reason: Optional[StrictStr] = Field(default=None, description="Visit reason, see VisitReason enum.")
    resources: Optional[List[Resource]] = None
    week_schedule: Optional[AccessPolicyWeekSchedule] = None
    __properties: ClassVar[List[str]] = ["first_name", "last_name", "remarks", "mobile_phone", "email", "_visitor_company", "start_time", "end_time", "visit_reason", "resources", "week_schedule"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateVisitorRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of week_schedule
        if self.week_schedule:
            _dict['week_schedule'] = self.week_schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateVisitorRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "remarks": obj.get("remarks"),
            "mobile_phone": obj.get("mobile_phone"),
            "email": obj.get("email"),
            "_visitor_company": obj.get("_visitor_company"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "visit_reason": obj.get("visit_reason"),
            "resources": [Resource.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "week_schedule": AccessPolicyWeekSchedule.from_dict(obj["week_schedule"]) if obj.get("week_schedule") is not None else None
        })
        return _obj


