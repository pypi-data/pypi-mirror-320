# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .document.client import DocumentClient
from .circuit.client import CircuitClient
from .component.client import ComponentClient
from ..types.statement_dictionary import StatementDictionary
from ..types.netlist import Netlist
from ..core.request_options import RequestOptions
from ..types.find_mapping_response import FindMappingResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper
from .document.client import AsyncDocumentClient
from .circuit.client import AsyncCircuitClient
from .component.client import AsyncComponentClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PicClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.document = DocumentClient(client_wrapper=self._client_wrapper)
        self.circuit = CircuitClient(client_wrapper=self._client_wrapper)
        self.component = ComponentClient(client_wrapper=self._client_wrapper)

    def find_mapping(
        self,
        *,
        statements: StatementDictionary,
        netlist: Netlist,
        max_iter: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindMappingResponse:
        """
        Map variables in the constraints to computations on the netlist.

        Parameters
        ----------
        statements : StatementDictionary

        netlist : Netlist

        max_iter : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindMappingResponse
            Successful Response

        Examples
        --------
        from axiomatic import Axiomatic, Netlist, PicInstance, StatementDictionary

        client = Axiomatic(
            api_key="YOUR_API_KEY",
        )
        client.pic.find_mapping(
            statements=StatementDictionary(),
            netlist=Netlist(
                instances={
                    "key": PicInstance(
                        component="component",
                    )
                },
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "pic/circuit/mapping/find",
            method="POST",
            params={
                "max_iter": max_iter,
            },
            json={
                "statements": convert_and_respect_annotation_metadata(
                    object_=statements, annotation=StatementDictionary, direction="write"
                ),
                "netlist": convert_and_respect_annotation_metadata(
                    object_=netlist, annotation=Netlist, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FindMappingResponse,
                    parse_obj_as(
                        type_=FindMappingResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPicClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper
        self.document = AsyncDocumentClient(client_wrapper=self._client_wrapper)
        self.circuit = AsyncCircuitClient(client_wrapper=self._client_wrapper)
        self.component = AsyncComponentClient(client_wrapper=self._client_wrapper)

    async def find_mapping(
        self,
        *,
        statements: StatementDictionary,
        netlist: Netlist,
        max_iter: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> FindMappingResponse:
        """
        Map variables in the constraints to computations on the netlist.

        Parameters
        ----------
        statements : StatementDictionary

        netlist : Netlist

        max_iter : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        FindMappingResponse
            Successful Response

        Examples
        --------
        import asyncio

        from axiomatic import AsyncAxiomatic, Netlist, PicInstance, StatementDictionary

        client = AsyncAxiomatic(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.pic.find_mapping(
                statements=StatementDictionary(),
                netlist=Netlist(
                    instances={
                        "key": PicInstance(
                            component="component",
                        )
                    },
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "pic/circuit/mapping/find",
            method="POST",
            params={
                "max_iter": max_iter,
            },
            json={
                "statements": convert_and_respect_annotation_metadata(
                    object_=statements, annotation=StatementDictionary, direction="write"
                ),
                "netlist": convert_and_respect_annotation_metadata(
                    object_=netlist, annotation=Netlist, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    FindMappingResponse,
                    parse_obj_as(
                        type_=FindMappingResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
