# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .function_call_arguments_value import FunctionCallArgumentsValue
from .function_call_expected_result import FunctionCallExpectedResult
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class FunctionCall(UniversalBaseModel):
    """
    The model describing a function call.
    """

    function_name: str = pydantic.Field()
    """
    The name of the function that is called.
    """

    arguments: typing.Dict[str, FunctionCallArgumentsValue] = pydantic.Field()
    """
    The arguments of the function that is called.
    """

    expected_result: FunctionCallExpectedResult = pydantic.Field()
    """
    The expected result of calling the function with the given arguments on a PIC model.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
