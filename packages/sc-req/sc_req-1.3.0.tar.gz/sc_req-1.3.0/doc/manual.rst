
.. highlight:: rest

Requirement Extension
=====================

``sphinxcontrib.requirement`` is a sphinx extension for managing requirements.
It can be used to:

* declare requirement (id are automatically generated)
* reference requirements (links are automatically generated)
* filer and sort a list of requirements in a table

It is compatible with HTML and LaTeX/PDF output.

Configure Sphinx
----------------

To enable this extension, add ``sphinxcontrib.requirement`` module to extensions
option at :file:`conf.py`.

.. code-block:: python

   # Enabled extensions
   extensions = ['sphinxcontrib.requirement']


Directives
----------

.. rst:directive:: .. req:req:: [title]

    This directive inserts a new requirement.

    By default, the id is generated by incrementing a counter in the scope of the
    requirement prefix. The id can also be explicitely defined using the
    option ``reqid``.

    The directive content can include other Sphinx markups to define bold text,
    bullet list, etc. As a special case, a single and empty *line block* markup (the pipe
    ``|``) can be used to define the beginning of a comment section.

    As the requirement content may be copied multiple times (for instance, if
    included in a requirement table generated by the :rst:dir:`req:reqlist`),
    it is strongly advised to avoid markups or directives that can have side
    effects (for example: ``versionadded``, because they are
    analyzed by the ``changes`` builder).

    This directive accepts the following options:

    * ``reqid``: define the requirement id. If not provided an ID will be generated using
      the format specified with the configuration option ``req_idpattern``
    * ``label``: define an alias that can be used when the ``reqid`` is unkown, for
      example when it is generated by this extension.
      Can be used everywhere in replacement of the ``reqid``, to define links, references, etc.
    * ``csv-file``: an external csv file (separated with ``,``) giving the requirements
      attributes (such as ``reqid``, ``title``, ``content``, etc.).
      The first line must list the field names.
      All requirements are imported and
      created using the other attributes (if specified)
    * ``filter``: a filtering expression used when importing a CSV.
      Example: ``reqid=='0001'``
    * ``sort``: a sorting expression used when importing a CSV.
      Example: ``reqid,-title`` (the character ``-`` is used to reverse the order)
    * ``hidden``: if set (with no value)
      the requirement will not be visible. It will still be visible in the :rst:dir:`req:reqlist`
      output and in the links.

    Other options may be available depending on the :ref:`customization` applied.

.. rst:directive:: .. req:reqlist:: [caption]

    This directive generates a table with the selected requirements defined in
    the document.

    This directive accepts the following options:

    * ``filter``: a filtering expression applied on the full list of requirements defined in the whole document.
      Example: ``reqid=='0001'``
    * ``sort``: a sorting expression used on the filtered list.
      Example: ``reqid,-title`` (the character ``-`` is used to reverse the order)
    * ``fields``: specify the fields to be included in the table.
      Default: ``reqid, title``. Available fields include ``reqid``, ``title`` and ``content`` as well as any
      customized properties. In addition, ``text_title`` and ``text_content`` are made available
      when exporting to CSV: they are cleaner version of title and content.
    * ``headers``: specify the column headers.
      Default is to use the field names.
    * ``hidden``: if set (with no value)
      the list will not be visible.
    * ``csv-file``: an external csv filename, relative to the file containing this directive, where the list
      of requirements will be exported. Only the fields listed in ``fields`` will be included. If ``headers``
      is specified, it will be used for the first line of the CSV

    The default rendering is using ``list-table`` and all its options can be used
    (``width``, ``widths``, ``align``, ``header-rows``, ``stub-columns``).

    The content of the directive can be used to change the rendering from the default list/table to something
    different.

    Example: to just have a plain list of requirement IDs, use as content of this directive::

        {{reqs|join(', ', attribute='reqid')}}


Roles
-----

.. rst:role:: req:req

    This role can be used to insert a reference to a requirement, using its ID.

    It supports reference with the full id (as printed in the output).

    It is working on large documents with multiple rst files.

.. rst:role:: req:ref

    This role can be used to generate links to references to requirements.
    It is useful to list every places where a given requirement is referenced using :rst:role:`req:req`.

    It supports also large documents with multiple rst files.


Configuration File Options
--------------------------

req_reference_text

    The string (at least one character) inserted in the text when using the role :rst:role:`req:ref`.
    Default is Unicode character 2750.

req_reference_pattern

    The pattern of the text used in the reference. Default is to use the reqid.
    
req_idpattern

    A *format* string used when generating a new identifier. This must be an f-string referencing
    the key ``doc`` and ``serial``. Default: ``REQ-{doc}{serial:03d}``

req_html_css

    A string defining the CSS for HTML output

req_latex_preamble

    A string defining the LaTeX preamble

.. _customization:

Customization
-------------

req_options

    A dictionary of additional attributes that can be defined for the requirements. Those attributes
    will be available as additional Sphinx options to the :rst:dir:`req:req` directive.
    For example, to add a priority and a subsystem attributes to the requirements, use:

    .. code-block:: python

        req_options = dict(
            priority="directives.positive_int",
            subsystem="lambda argument: directives.choice(argument, ('sub1', 'sub2', 'sub3'))",
        )

    The added attributes must be defined with a string that will be evaluated in the scope of the requirement module.

    It is also possible to add a new attribute using Python code:
  
    .. code-block:: python

        from docutils.parsers.rst import directives
        from sphinxcontrib.requirement import req
        def yesno(argument):
            return directives.choice(argument, ('yes', 'no'))
        # be aware that docutils/sphinx is lowering the case
        req.ReqDirective.option_spec['answer'] = yesno


req_links

    A dictionary of link definitions that can be used to build links between requirements.
    Each link is defined as a pair of name, corresponding to the two directions of the link.

    Each name can then be used as an option to the :rst:dir:`req:req` directive to define a list
    of linked requirements.

    Each link will then be available as a pseudo field of the requirement built from the link name.

    For example, to define a parent/child relationship between the requirements, use:

    .. code-block:: python

        req_links = {
            "parents":"children",
        }

    In your table, you can then use the pseudo attributes ``_parents`` and ``_children`` to render
    properly the list of requirements (the parents or the children in this example)

To better customize the rendering, you can also place in the root directory of the document the follwing files:

.. list-table:: Customization Files
    :header-rows: 1

    * - File
      - Description

    * - :file:`req.css`
      - The CSS file included in all generated HTML pages

    * - :file:`req.preamble`
      - The LaTeX preamble added when generating PDF

    * - :file:`req.html.jinja2`
      - The Jinja2 template used when generating HTML. Can be used to customize how the requirement ID is rendered
    
    * - :file:`req.latex.jinja2`
      - The Jinja2 template used when generating LaTeX/PDF. Can be used to customize how the requirement ID is rendered

    * - :file:`req.rst.jinja2`
      - The Jinja2 template used to render a requirement. Must output a valid rst document.

    * - :file:`reqlist.rst.jinja2`
      - The Jinja2 template used to render a requirement list. Must output a valid rst document.

Default files are included in this package and will be used when none are available in the document.
