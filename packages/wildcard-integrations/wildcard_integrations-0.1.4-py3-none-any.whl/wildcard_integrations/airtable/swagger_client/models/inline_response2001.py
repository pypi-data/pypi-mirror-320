# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'records': 'list[RecordResponseWithComments]',
        'offset': 'str'
    }

    attribute_map = {
        'records': 'records',
        'offset': 'offset'
    }

    def __init__(self, records=None, offset=None):  # noqa: E501
        """InlineResponse2001 - a model defined in Swagger"""  # noqa: E501
        self._records = None
        self._offset = None
        self.discriminator = None
        self.records = records
        if offset is not None:
            self.offset = offset

    @property
    def records(self):
        """Gets the records of this InlineResponse2001.  # noqa: E501

        A single record with field and cell values  # noqa: E501

        :return: The records of this InlineResponse2001.  # noqa: E501
        :rtype: list[RecordResponseWithComments]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this InlineResponse2001.

        A single record with field and cell values  # noqa: E501

        :param records: The records of this InlineResponse2001.  # noqa: E501
        :type: list[RecordResponseWithComments]
        """
        if records is None:
            raise ValueError("Invalid value for `records`, must not be `None`")  # noqa: E501

        self._records = records

    @property
    def offset(self):
        """Gets the offset of this InlineResponse2001.  # noqa: E501

        If there are more records, the response will contain an offset. Pass this offset into the next request to fetch the next page of records.  # noqa: E501

        :return: The offset of this InlineResponse2001.  # noqa: E501
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this InlineResponse2001.

        If there are more records, the response will contain an offset. Pass this offset into the next request to fetch the next page of records.  # noqa: E501

        :param offset: The offset of this InlineResponse2001.  # noqa: E501
        :type: str
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
