# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldOptions14(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color': 'str',
        'icon': 'str',
        'max': 'float'
    }

    attribute_map = {
        'color': 'color',
        'icon': 'icon',
        'max': 'max'
    }

    def __init__(self, color=None, icon=None, max=None):  # noqa: E501
        """FieldOptions14 - a model defined in Swagger"""  # noqa: E501
        self._color = None
        self._icon = None
        self._max = None
        self.discriminator = None
        if color is not None:
            self.color = color
        if icon is not None:
            self.icon = icon
        if max is not None:
            self.max = max

    @property
    def color(self):
        """Gets the color of this FieldOptions14.  # noqa: E501

        The color of selected icons.  # noqa: E501

        :return: The color of this FieldOptions14.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this FieldOptions14.

        The color of selected icons.  # noqa: E501

        :param color: The color of this FieldOptions14.  # noqa: E501
        :type: str
        """
        allowed_values = ["yellowBright", "orangeBright", "redBright", "pinkBright", "purpleBright", "blueBright", "cyanBright", "tealBright", "greenBright", "grayBright"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"  # noqa: E501
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def icon(self):
        """Gets the icon of this FieldOptions14.  # noqa: E501

        The icon name used to display the rating.  # noqa: E501

        :return: The icon of this FieldOptions14.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this FieldOptions14.

        The icon name used to display the rating.  # noqa: E501

        :param icon: The icon of this FieldOptions14.  # noqa: E501
        :type: str
        """
        allowed_values = ["star", "heart", "thumbsUp", "flag", "dot"]  # noqa: E501
        if icon not in allowed_values:
            raise ValueError(
                "Invalid value for `icon` ({0}), must be one of {1}"  # noqa: E501
                .format(icon, allowed_values)
            )

        self._icon = icon

    @property
    def max(self):
        """Gets the max of this FieldOptions14.  # noqa: E501

        The maximum value for the rating, from 1 to 10 inclusive.  # noqa: E501

        :return: The max of this FieldOptions14.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this FieldOptions14.

        The maximum value for the rating, from 1 to 10 inclusive.  # noqa: E501

        :param max: The max of this FieldOptions14.  # noqa: E501
        :type: float
        """

        self._max = max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldOptions14, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldOptions14):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
