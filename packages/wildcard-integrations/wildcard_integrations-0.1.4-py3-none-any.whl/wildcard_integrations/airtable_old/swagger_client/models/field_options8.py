# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldOptions8(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_reversed': 'bool',
        'linked_table_id': 'str',
        'prefers_single_record_link': 'bool',
        'inverse_link_field_id': 'str',
        'view_id_for_record_selection': 'str'
    }

    attribute_map = {
        'is_reversed': 'isReversed',
        'linked_table_id': 'linkedTableId',
        'prefers_single_record_link': 'prefersSingleRecordLink',
        'inverse_link_field_id': 'inverseLinkFieldId',
        'view_id_for_record_selection': 'viewIdForRecordSelection'
    }

    def __init__(self, is_reversed=None, linked_table_id=None, prefers_single_record_link=None, inverse_link_field_id=None, view_id_for_record_selection=None):  # noqa: E501
        """FieldOptions8 - a model defined in Swagger"""  # noqa: E501
        self._is_reversed = None
        self._linked_table_id = None
        self._prefers_single_record_link = None
        self._inverse_link_field_id = None
        self._view_id_for_record_selection = None
        self.discriminator = None
        if is_reversed is not None:
            self.is_reversed = is_reversed
        if linked_table_id is not None:
            self.linked_table_id = linked_table_id
        if prefers_single_record_link is not None:
            self.prefers_single_record_link = prefers_single_record_link
        if inverse_link_field_id is not None:
            self.inverse_link_field_id = inverse_link_field_id
        if view_id_for_record_selection is not None:
            self.view_id_for_record_selection = view_id_for_record_selection

    @property
    def is_reversed(self):
        """Gets the is_reversed of this FieldOptions8.  # noqa: E501

        Whether the linked records are sorted in reverse order  # noqa: E501

        :return: The is_reversed of this FieldOptions8.  # noqa: E501
        :rtype: bool
        """
        return self._is_reversed

    @is_reversed.setter
    def is_reversed(self, is_reversed):
        """Sets the is_reversed of this FieldOptions8.

        Whether the linked records are sorted in reverse order  # noqa: E501

        :param is_reversed: The is_reversed of this FieldOptions8.  # noqa: E501
        :type: bool
        """

        self._is_reversed = is_reversed

    @property
    def linked_table_id(self):
        """Gets the linked_table_id of this FieldOptions8.  # noqa: E501

        The id of the linked table  # noqa: E501

        :return: The linked_table_id of this FieldOptions8.  # noqa: E501
        :rtype: str
        """
        return self._linked_table_id

    @linked_table_id.setter
    def linked_table_id(self, linked_table_id):
        """Sets the linked_table_id of this FieldOptions8.

        The id of the linked table  # noqa: E501

        :param linked_table_id: The linked_table_id of this FieldOptions8.  # noqa: E501
        :type: str
        """

        self._linked_table_id = linked_table_id

    @property
    def prefers_single_record_link(self):
        """Gets the prefers_single_record_link of this FieldOptions8.  # noqa: E501

        Whether the field prefers a single linked record  # noqa: E501

        :return: The prefers_single_record_link of this FieldOptions8.  # noqa: E501
        :rtype: bool
        """
        return self._prefers_single_record_link

    @prefers_single_record_link.setter
    def prefers_single_record_link(self, prefers_single_record_link):
        """Sets the prefers_single_record_link of this FieldOptions8.

        Whether the field prefers a single linked record  # noqa: E501

        :param prefers_single_record_link: The prefers_single_record_link of this FieldOptions8.  # noqa: E501
        :type: bool
        """

        self._prefers_single_record_link = prefers_single_record_link

    @property
    def inverse_link_field_id(self):
        """Gets the inverse_link_field_id of this FieldOptions8.  # noqa: E501

        The id of the inverse linked field in the linked table  # noqa: E501

        :return: The inverse_link_field_id of this FieldOptions8.  # noqa: E501
        :rtype: str
        """
        return self._inverse_link_field_id

    @inverse_link_field_id.setter
    def inverse_link_field_id(self, inverse_link_field_id):
        """Sets the inverse_link_field_id of this FieldOptions8.

        The id of the inverse linked field in the linked table  # noqa: E501

        :param inverse_link_field_id: The inverse_link_field_id of this FieldOptions8.  # noqa: E501
        :type: str
        """

        self._inverse_link_field_id = inverse_link_field_id

    @property
    def view_id_for_record_selection(self):
        """Gets the view_id_for_record_selection of this FieldOptions8.  # noqa: E501

        The id of the view used to select linked records  # noqa: E501

        :return: The view_id_for_record_selection of this FieldOptions8.  # noqa: E501
        :rtype: str
        """
        return self._view_id_for_record_selection

    @view_id_for_record_selection.setter
    def view_id_for_record_selection(self, view_id_for_record_selection):
        """Sets the view_id_for_record_selection of this FieldOptions8.

        The id of the view used to select linked records  # noqa: E501

        :param view_id_for_record_selection: The view_id_for_record_selection of this FieldOptions8.  # noqa: E501
        :type: str
        """

        self._view_id_for_record_selection = view_id_for_record_selection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldOptions8, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldOptions8):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
