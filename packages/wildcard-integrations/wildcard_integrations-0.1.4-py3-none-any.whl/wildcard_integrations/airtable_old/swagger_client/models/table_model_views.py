# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableModelViews(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'name': 'str',
        'visible_field_ids': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'name': 'name',
        'visible_field_ids': 'visibleFieldIds'
    }

    def __init__(self, id=None, type=None, name=None, visible_field_ids=None):  # noqa: E501
        """TableModelViews - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._name = None
        self._visible_field_ids = None
        self.discriminator = None
        self.id = id
        self.type = type
        self.name = name
        if visible_field_ids is not None:
            self.visible_field_ids = visible_field_ids

    @property
    def id(self):
        """Gets the id of this TableModelViews.  # noqa: E501

        Unique identifier for the view  # noqa: E501

        :return: The id of this TableModelViews.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TableModelViews.

        Unique identifier for the view  # noqa: E501

        :param id: The id of this TableModelViews.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this TableModelViews.  # noqa: E501

        View type, where 'block' represents Gantt View  # noqa: E501

        :return: The type of this TableModelViews.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TableModelViews.

        View type, where 'block' represents Gantt View  # noqa: E501

        :param type: The type of this TableModelViews.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["grid", "form", "calendar", "gallery", "kanban", "timeline", "block"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this TableModelViews.  # noqa: E501

        Name of the view  # noqa: E501

        :return: The name of this TableModelViews.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableModelViews.

        Name of the view  # noqa: E501

        :param name: The name of this TableModelViews.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def visible_field_ids(self):
        """Gets the visible_field_ids of this TableModelViews.  # noqa: E501

        Available on grid views only - list of visible (non-hidden) field IDs, when requested with include query parameter  # noqa: E501

        :return: The visible_field_ids of this TableModelViews.  # noqa: E501
        :rtype: list[str]
        """
        return self._visible_field_ids

    @visible_field_ids.setter
    def visible_field_ids(self, visible_field_ids):
        """Sets the visible_field_ids of this TableModelViews.

        Available on grid views only - list of visible (non-hidden) field IDs, when requested with include query parameter  # noqa: E501

        :param visible_field_ids: The visible_field_ids of this TableModelViews.  # noqa: E501
        :type: list[str]
        """

        self._visible_field_ids = visible_field_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableModelViews, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableModelViews):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
