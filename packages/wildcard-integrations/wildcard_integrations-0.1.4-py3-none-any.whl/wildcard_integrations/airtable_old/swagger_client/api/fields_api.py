# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class FieldsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def airtable_fields_create(self, body, base_id, table_id, **kwargs):  # noqa: E501
        """Create field  # noqa: E501

        Creates a new column and returns the schema for the newly created column.  Refer to field types for supported field types, the write format for field options,  and other specifics for certain field types. Supported field types have a write format shown.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airtable_fields_create(body, base_id, table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool:
        :param FieldConfigRequest body: Field model with name. This identical to Field type and options, with an additional name and description property on all types (required)
        :param str base_id: (required)
        :param str table_id: (required)
        :return: FieldConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airtable_fields_create_with_http_info(body, base_id, table_id, **kwargs)  # noqa: E501
        else:
            (data) = self.airtable_fields_create_with_http_info(body, base_id, table_id, **kwargs)  # noqa: E501
            return data

    def airtable_fields_create_with_http_info(self, body, base_id, table_id, **kwargs):  # noqa: E501
        """Create field  # noqa: E501

        Creates a new column and returns the schema for the newly created column.  Refer to field types for supported field types, the write format for field options,  and other specifics for certain field types. Supported field types have a write format shown.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airtable_fields_create_with_http_info(body, base_id, table_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool:
        :param FieldConfigRequest body: Field model with name. This identical to Field type and options, with an additional name and description property on all types (required)
        :param str base_id: (required)
        :param str table_id: (required)
        :return: FieldConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'base_id', 'table_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airtable_fields_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `airtable_fields_create`")  # noqa: E501
        # verify the required parameter 'base_id' is set
        if ('base_id' not in params or
                params['base_id'] is None):
            raise ValueError("Missing the required parameter `base_id` when calling `airtable_fields_create`")  # noqa: E501
        # verify the required parameter 'table_id' is set
        if ('table_id' not in params or
                params['table_id'] is None):
            raise ValueError("Missing the required parameter `table_id` when calling `airtable_fields_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'base_id' in params:
            path_params['baseId'] = params['base_id']  # noqa: E501
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/meta/bases/{baseId}/tables/{tableId}/fields', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airtable_fields_update(self, body, base_id, table_id, column_id, **kwargs):  # noqa: E501
        """Update field  # noqa: E501

        Updates the name and/or description of a field. At least one of name or description must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airtable_fields_update(body, base_id, table_id, column_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool:
        :param FieldsColumnIdBody body: (required)
        :param str base_id: (required)
        :param str table_id: (required)
        :param str column_id: (required)
        :return: FieldConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airtable_fields_update_with_http_info(body, base_id, table_id, column_id, **kwargs)  # noqa: E501
        else:
            (data) = self.airtable_fields_update_with_http_info(body, base_id, table_id, column_id, **kwargs)  # noqa: E501
            return data

    def airtable_fields_update_with_http_info(self, body, base_id, table_id, column_id, **kwargs):  # noqa: E501
        """Update field  # noqa: E501

        Updates the name and/or description of a field. At least one of name or description must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airtable_fields_update_with_http_info(body, base_id, table_id, column_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool:
        :param FieldsColumnIdBody body: (required)
        :param str base_id: (required)
        :param str table_id: (required)
        :param str column_id: (required)
        :return: FieldConfigResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'base_id', 'table_id', 'column_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airtable_fields_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `airtable_fields_update`")  # noqa: E501
        # verify the required parameter 'base_id' is set
        if ('base_id' not in params or
                params['base_id'] is None):
            raise ValueError("Missing the required parameter `base_id` when calling `airtable_fields_update`")  # noqa: E501
        # verify the required parameter 'table_id' is set
        if ('table_id' not in params or
                params['table_id'] is None):
            raise ValueError("Missing the required parameter `table_id` when calling `airtable_fields_update`")  # noqa: E501
        # verify the required parameter 'column_id' is set
        if ('column_id' not in params or
                params['column_id'] is None):
            raise ValueError("Missing the required parameter `column_id` when calling `airtable_fields_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'base_id' in params:
            path_params['baseId'] = params['base_id']  # noqa: E501
        if 'table_id' in params:
            path_params['tableId'] = params['table_id']  # noqa: E501
        if 'column_id' in params:
            path_params['columnId'] = params['column_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/meta/bases/{baseId}/tables/{tableId}/fields/{columnId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FieldConfigResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
