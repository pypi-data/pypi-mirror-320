# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_address': 'str',
        'history_id': 'str',
        'messages_total': 'int',
        'threads_total': 'int'
    }

    attribute_map = {
        'email_address': 'emailAddress',
        'history_id': 'historyId',
        'messages_total': 'messagesTotal',
        'threads_total': 'threadsTotal'
    }

    def __init__(self, email_address=None, history_id=None, messages_total=None, threads_total=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        self._email_address = None
        self._history_id = None
        self._messages_total = None
        self._threads_total = None
        self.discriminator = None
        if email_address is not None:
            self.email_address = email_address
        if history_id is not None:
            self.history_id = history_id
        if messages_total is not None:
            self.messages_total = messages_total
        if threads_total is not None:
            self.threads_total = threads_total

    @property
    def email_address(self):
        """Gets the email_address of this Profile.  # noqa: E501

        The user's email address.  # noqa: E501

        :return: The email_address of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Profile.

        The user's email address.  # noqa: E501

        :param email_address: The email_address of this Profile.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def history_id(self):
        """Gets the history_id of this Profile.  # noqa: E501

        The ID of the mailbox's current history record.  # noqa: E501

        :return: The history_id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._history_id

    @history_id.setter
    def history_id(self, history_id):
        """Sets the history_id of this Profile.

        The ID of the mailbox's current history record.  # noqa: E501

        :param history_id: The history_id of this Profile.  # noqa: E501
        :type: str
        """

        self._history_id = history_id

    @property
    def messages_total(self):
        """Gets the messages_total of this Profile.  # noqa: E501

        The total number of messages in the mailbox.  # noqa: E501

        :return: The messages_total of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._messages_total

    @messages_total.setter
    def messages_total(self, messages_total):
        """Sets the messages_total of this Profile.

        The total number of messages in the mailbox.  # noqa: E501

        :param messages_total: The messages_total of this Profile.  # noqa: E501
        :type: int
        """

        self._messages_total = messages_total

    @property
    def threads_total(self):
        """Gets the threads_total of this Profile.  # noqa: E501

        The total number of threads in the mailbox.  # noqa: E501

        :return: The threads_total of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._threads_total

    @threads_total.setter
    def threads_total(self, threads_total):
        """Sets the threads_total of this Profile.

        The total number of threads in the mailbox.  # noqa: E501

        :param threads_total: The threads_total of this Profile.  # noqa: E501
        :type: int
        """

        self._threads_total = threads_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
