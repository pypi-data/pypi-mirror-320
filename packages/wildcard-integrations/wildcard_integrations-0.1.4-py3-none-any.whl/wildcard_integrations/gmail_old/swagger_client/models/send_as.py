# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SendAs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'str',
        'is_default': 'bool',
        'is_primary': 'bool',
        'reply_to_address': 'str',
        'send_as_email': 'str',
        'signature': 'str',
        'smtp_msa': 'SmtpMsa',
        'treat_as_alias': 'bool',
        'verification_status': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'is_default': 'isDefault',
        'is_primary': 'isPrimary',
        'reply_to_address': 'replyToAddress',
        'send_as_email': 'sendAsEmail',
        'signature': 'signature',
        'smtp_msa': 'smtpMsa',
        'treat_as_alias': 'treatAsAlias',
        'verification_status': 'verificationStatus'
    }

    def __init__(self, display_name=None, is_default=None, is_primary=None, reply_to_address=None, send_as_email=None, signature=None, smtp_msa=None, treat_as_alias=None, verification_status=None):  # noqa: E501
        """SendAs - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._is_default = None
        self._is_primary = None
        self._reply_to_address = None
        self._send_as_email = None
        self._signature = None
        self._smtp_msa = None
        self._treat_as_alias = None
        self._verification_status = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if is_default is not None:
            self.is_default = is_default
        if is_primary is not None:
            self.is_primary = is_primary
        if reply_to_address is not None:
            self.reply_to_address = reply_to_address
        if send_as_email is not None:
            self.send_as_email = send_as_email
        if signature is not None:
            self.signature = signature
        if smtp_msa is not None:
            self.smtp_msa = smtp_msa
        if treat_as_alias is not None:
            self.treat_as_alias = treat_as_alias
        if verification_status is not None:
            self.verification_status = verification_status

    @property
    def display_name(self):
        """Gets the display_name of this SendAs.  # noqa: E501

        A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.  # noqa: E501

        :return: The display_name of this SendAs.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this SendAs.

        A name that appears in the \"From:\" header for mail sent using this alias. For custom \"from\" addresses, when this is empty, Gmail will populate the \"From:\" header with the name that is used for the primary address associated with the account. If the admin has disabled the ability for users to update their name format, requests to update this field for the primary login will silently fail.  # noqa: E501

        :param display_name: The display_name of this SendAs.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def is_default(self):
        """Gets the is_default of this SendAs.  # noqa: E501

        Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.  # noqa: E501

        :return: The is_default of this SendAs.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this SendAs.

        Whether this address is selected as the default \"From:\" address in situations such as composing a new message or sending a vacation auto-reply. Every Gmail account has exactly one default send-as address, so the only legal value that clients may write to this field is `true`. Changing this from `false` to `true` for an address will result in this field becoming `false` for the other previous default address.  # noqa: E501

        :param is_default: The is_default of this SendAs.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def is_primary(self):
        """Gets the is_primary of this SendAs.  # noqa: E501

        Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.  # noqa: E501

        :return: The is_primary of this SendAs.  # noqa: E501
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this SendAs.

        Whether this address is the primary address used to login to the account. Every Gmail account has exactly one primary address, and it cannot be deleted from the collection of send-as aliases. This field is read-only.  # noqa: E501

        :param is_primary: The is_primary of this SendAs.  # noqa: E501
        :type: bool
        """

        self._is_primary = is_primary

    @property
    def reply_to_address(self):
        """Gets the reply_to_address of this SendAs.  # noqa: E501

        An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header.  # noqa: E501

        :return: The reply_to_address of this SendAs.  # noqa: E501
        :rtype: str
        """
        return self._reply_to_address

    @reply_to_address.setter
    def reply_to_address(self, reply_to_address):
        """Sets the reply_to_address of this SendAs.

        An optional email address that is included in a \"Reply-To:\" header for mail sent using this alias. If this is empty, Gmail will not generate a \"Reply-To:\" header.  # noqa: E501

        :param reply_to_address: The reply_to_address of this SendAs.  # noqa: E501
        :type: str
        """

        self._reply_to_address = reply_to_address

    @property
    def send_as_email(self):
        """Gets the send_as_email of this SendAs.  # noqa: E501

        The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create.  # noqa: E501

        :return: The send_as_email of this SendAs.  # noqa: E501
        :rtype: str
        """
        return self._send_as_email

    @send_as_email.setter
    def send_as_email(self, send_as_email):
        """Sets the send_as_email of this SendAs.

        The email address that appears in the \"From:\" header for mail sent using this alias. This is read-only for all operations except create.  # noqa: E501

        :param send_as_email: The send_as_email of this SendAs.  # noqa: E501
        :type: str
        """

        self._send_as_email = send_as_email

    @property
    def signature(self):
        """Gets the signature of this SendAs.  # noqa: E501

        An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.  # noqa: E501

        :return: The signature of this SendAs.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this SendAs.

        An optional HTML signature that is included in messages composed with this alias in the Gmail web UI. This signature is added to new emails only.  # noqa: E501

        :param signature: The signature of this SendAs.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def smtp_msa(self):
        """Gets the smtp_msa of this SendAs.  # noqa: E501


        :return: The smtp_msa of this SendAs.  # noqa: E501
        :rtype: SmtpMsa
        """
        return self._smtp_msa

    @smtp_msa.setter
    def smtp_msa(self, smtp_msa):
        """Sets the smtp_msa of this SendAs.


        :param smtp_msa: The smtp_msa of this SendAs.  # noqa: E501
        :type: SmtpMsa
        """

        self._smtp_msa = smtp_msa

    @property
    def treat_as_alias(self):
        """Gets the treat_as_alias of this SendAs.  # noqa: E501

        Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases.  # noqa: E501

        :return: The treat_as_alias of this SendAs.  # noqa: E501
        :rtype: bool
        """
        return self._treat_as_alias

    @treat_as_alias.setter
    def treat_as_alias(self, treat_as_alias):
        """Sets the treat_as_alias of this SendAs.

        Whether Gmail should treat this address as an alias for the user's primary email address. This setting only applies to custom \"from\" aliases.  # noqa: E501

        :param treat_as_alias: The treat_as_alias of this SendAs.  # noqa: E501
        :type: bool
        """

        self._treat_as_alias = treat_as_alias

    @property
    def verification_status(self):
        """Gets the verification_status of this SendAs.  # noqa: E501

        Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.  # noqa: E501

        :return: The verification_status of this SendAs.  # noqa: E501
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this SendAs.

        Indicates whether this address has been verified for use as a send-as alias. Read-only. This setting only applies to custom \"from\" aliases.  # noqa: E501

        :param verification_status: The verification_status of this SendAs.  # noqa: E501
        :type: str
        """
        allowed_values = ["verificationStatusUnspecified", "accepted", "pending"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"  # noqa: E501
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SendAs, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendAs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
