# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CseKeyPair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disable_time': 'str',
        'enablement_state': 'str',
        'key_pair_id': 'str',
        'pem': 'str',
        'pkcs7': 'str',
        'private_key_metadata': 'list[CsePrivateKeyMetadata]',
        'subject_email_addresses': 'list[str]'
    }

    attribute_map = {
        'disable_time': 'disableTime',
        'enablement_state': 'enablementState',
        'key_pair_id': 'keyPairId',
        'pem': 'pem',
        'pkcs7': 'pkcs7',
        'private_key_metadata': 'privateKeyMetadata',
        'subject_email_addresses': 'subjectEmailAddresses'
    }

    def __init__(self, disable_time=None, enablement_state=None, key_pair_id=None, pem=None, pkcs7=None, private_key_metadata=None, subject_email_addresses=None):  # noqa: E501
        """CseKeyPair - a model defined in Swagger"""  # noqa: E501
        self._disable_time = None
        self._enablement_state = None
        self._key_pair_id = None
        self._pem = None
        self._pkcs7 = None
        self._private_key_metadata = None
        self._subject_email_addresses = None
        self.discriminator = None
        if disable_time is not None:
            self.disable_time = disable_time
        if enablement_state is not None:
            self.enablement_state = enablement_state
        if key_pair_id is not None:
            self.key_pair_id = key_pair_id
        if pem is not None:
            self.pem = pem
        if pkcs7 is not None:
            self.pkcs7 = pkcs7
        if private_key_metadata is not None:
            self.private_key_metadata = private_key_metadata
        if subject_email_addresses is not None:
            self.subject_email_addresses = subject_email_addresses

    @property
    def disable_time(self):
        """Gets the disable_time of this CseKeyPair.  # noqa: E501

        Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.  # noqa: E501

        :return: The disable_time of this CseKeyPair.  # noqa: E501
        :rtype: str
        """
        return self._disable_time

    @disable_time.setter
    def disable_time(self, disable_time):
        """Sets the disable_time of this CseKeyPair.

        Output only. If a key pair is set to `DISABLED`, the time that the key pair's state changed from `ENABLED` to `DISABLED`. This field is present only when the key pair is in state `DISABLED`.  # noqa: E501

        :param disable_time: The disable_time of this CseKeyPair.  # noqa: E501
        :type: str
        """

        self._disable_time = disable_time

    @property
    def enablement_state(self):
        """Gets the enablement_state of this CseKeyPair.  # noqa: E501

        Output only. The current state of the key pair.  # noqa: E501

        :return: The enablement_state of this CseKeyPair.  # noqa: E501
        :rtype: str
        """
        return self._enablement_state

    @enablement_state.setter
    def enablement_state(self, enablement_state):
        """Sets the enablement_state of this CseKeyPair.

        Output only. The current state of the key pair.  # noqa: E501

        :param enablement_state: The enablement_state of this CseKeyPair.  # noqa: E501
        :type: str
        """
        allowed_values = ["stateUnspecified", "enabled", "disabled"]  # noqa: E501
        if enablement_state not in allowed_values:
            raise ValueError(
                "Invalid value for `enablement_state` ({0}), must be one of {1}"  # noqa: E501
                .format(enablement_state, allowed_values)
            )

        self._enablement_state = enablement_state

    @property
    def key_pair_id(self):
        """Gets the key_pair_id of this CseKeyPair.  # noqa: E501

        Output only. The immutable ID for the client-side encryption S/MIME key pair.  # noqa: E501

        :return: The key_pair_id of this CseKeyPair.  # noqa: E501
        :rtype: str
        """
        return self._key_pair_id

    @key_pair_id.setter
    def key_pair_id(self, key_pair_id):
        """Sets the key_pair_id of this CseKeyPair.

        Output only. The immutable ID for the client-side encryption S/MIME key pair.  # noqa: E501

        :param key_pair_id: The key_pair_id of this CseKeyPair.  # noqa: E501
        :type: str
        """

        self._key_pair_id = key_pair_id

    @property
    def pem(self):
        """Gets the pem of this CseKeyPair.  # noqa: E501

        Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.  # noqa: E501

        :return: The pem of this CseKeyPair.  # noqa: E501
        :rtype: str
        """
        return self._pem

    @pem.setter
    def pem(self, pem):
        """Sets the pem of this CseKeyPair.

        Output only. The public key and its certificate chain, in [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.  # noqa: E501

        :param pem: The pem of this CseKeyPair.  # noqa: E501
        :type: str
        """

        self._pem = pem

    @property
    def pkcs7(self):
        """Gets the pkcs7 of this CseKeyPair.  # noqa: E501

        Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.  # noqa: E501

        :return: The pkcs7 of this CseKeyPair.  # noqa: E501
        :rtype: str
        """
        return self._pkcs7

    @pkcs7.setter
    def pkcs7(self, pkcs7):
        """Sets the pkcs7 of this CseKeyPair.

        Input only. The public key and its certificate chain. The chain must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and use PEM encoding and ASCII armor.  # noqa: E501

        :param pkcs7: The pkcs7 of this CseKeyPair.  # noqa: E501
        :type: str
        """

        self._pkcs7 = pkcs7

    @property
    def private_key_metadata(self):
        """Gets the private_key_metadata of this CseKeyPair.  # noqa: E501

        Metadata for instances of this key pair's private key.  # noqa: E501

        :return: The private_key_metadata of this CseKeyPair.  # noqa: E501
        :rtype: list[CsePrivateKeyMetadata]
        """
        return self._private_key_metadata

    @private_key_metadata.setter
    def private_key_metadata(self, private_key_metadata):
        """Sets the private_key_metadata of this CseKeyPair.

        Metadata for instances of this key pair's private key.  # noqa: E501

        :param private_key_metadata: The private_key_metadata of this CseKeyPair.  # noqa: E501
        :type: list[CsePrivateKeyMetadata]
        """

        self._private_key_metadata = private_key_metadata

    @property
    def subject_email_addresses(self):
        """Gets the subject_email_addresses of this CseKeyPair.  # noqa: E501

        Output only. The email address identities that are specified on the leaf certificate.  # noqa: E501

        :return: The subject_email_addresses of this CseKeyPair.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_email_addresses

    @subject_email_addresses.setter
    def subject_email_addresses(self, subject_email_addresses):
        """Sets the subject_email_addresses of this CseKeyPair.

        Output only. The email address identities that are specified on the leaf certificate.  # noqa: E501

        :param subject_email_addresses: The subject_email_addresses of this CseKeyPair.  # noqa: E501
        :type: list[str]
        """

        self._subject_email_addresses = subject_email_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CseKeyPair, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CseKeyPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
