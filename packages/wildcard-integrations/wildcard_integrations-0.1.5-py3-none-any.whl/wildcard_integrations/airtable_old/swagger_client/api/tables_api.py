# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class TablesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def airtable_tables_create(self, body, base_id, **kwargs):  # noqa: E501
        """Create table  # noqa: E501

        Creates a new table and returns the schema for the newly created table.  Refer to field types for supported field types, the write format for field options, and other specifics for certain field types. Supported field types have a write format shown.  At least one field must be specified. The first field in the fields array will be used as the table's primary field and must be a supported primary field type. Fields must have case-insensitive unique names within the table.  A default grid view will be created with all fields visible.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airtable_tables_create(body, base_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool:
        :param BaseIdTablesBody body: (required)
        :param str base_id: (required)
        :return: TableModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airtable_tables_create_with_http_info(body, base_id, **kwargs)  # noqa: E501
        else:
            (data) = self.airtable_tables_create_with_http_info(body, base_id, **kwargs)  # noqa: E501
            return data

    def airtable_tables_create_with_http_info(self, body, base_id, **kwargs):  # noqa: E501
        """Create table  # noqa: E501

        Creates a new table and returns the schema for the newly created table.  Refer to field types for supported field types, the write format for field options, and other specifics for certain field types. Supported field types have a write format shown.  At least one field must be specified. The first field in the fields array will be used as the table's primary field and must be a supported primary field type. Fields must have case-insensitive unique names within the table.  A default grid view will be created with all fields visible.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airtable_tables_create_with_http_info(body, base_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool:
        :param BaseIdTablesBody body: (required)
        :param str base_id: (required)
        :return: TableModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'base_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airtable_tables_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `airtable_tables_create`")  # noqa: E501
        # verify the required parameter 'base_id' is set
        if ('base_id' not in params or
                params['base_id'] is None):
            raise ValueError("Missing the required parameter `base_id` when calling `airtable_tables_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'base_id' in params:
            path_params['baseId'] = params['base_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/meta/bases/{baseId}/tables', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def airtable_tables_update(self, body, base_id, table_id_or_name, **kwargs):  # noqa: E501
        """Update table  # noqa: E501

        Updates the name and/or description of a table. At least one of name or description must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airtable_tables_update(body, base_id, table_id_or_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool:
        :param TablesTableIdOrNameBody body: (required)
        :param str base_id: (required)
        :param str table_id_or_name: (required)
        :return: TableModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.airtable_tables_update_with_http_info(body, base_id, table_id_or_name, **kwargs)  # noqa: E501
        else:
            (data) = self.airtable_tables_update_with_http_info(body, base_id, table_id_or_name, **kwargs)  # noqa: E501
            return data

    def airtable_tables_update_with_http_info(self, body, base_id, table_id_or_name, **kwargs):  # noqa: E501
        """Update table  # noqa: E501

        Updates the name and/or description of a table. At least one of name or description must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.airtable_tables_update_with_http_info(body, base_id, table_id_or_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool:
        :param TablesTableIdOrNameBody body: (required)
        :param str base_id: (required)
        :param str table_id_or_name: (required)
        :return: TableModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'base_id', 'table_id_or_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method airtable_tables_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `airtable_tables_update`")  # noqa: E501
        # verify the required parameter 'base_id' is set
        if ('base_id' not in params or
                params['base_id'] is None):
            raise ValueError("Missing the required parameter `base_id` when calling `airtable_tables_update`")  # noqa: E501
        # verify the required parameter 'table_id_or_name' is set
        if ('table_id_or_name' not in params or
                params['table_id_or_name'] is None):
            raise ValueError("Missing the required parameter `table_id_or_name` when calling `airtable_tables_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'base_id' in params:
            path_params['baseId'] = params['base_id']  # noqa: E501
        if 'table_id_or_name' in params:
            path_params['tableIdOrName'] = params['table_id_or_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/meta/bases/{baseId}/tables/{tableIdOrName}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TableModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
