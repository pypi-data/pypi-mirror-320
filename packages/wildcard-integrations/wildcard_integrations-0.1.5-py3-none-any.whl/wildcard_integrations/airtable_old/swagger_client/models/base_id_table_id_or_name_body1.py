# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BaseIdTableIdOrNameBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fields': 'dict(str, object)',
        'records': 'list[BaseIdtableIdOrNameRecords1]',
        'return_fields_by_field_id': 'bool',
        'typecast': 'bool'
    }

    attribute_map = {
        'fields': 'fields',
        'records': 'records',
        'return_fields_by_field_id': 'returnFieldsByFieldId',
        'typecast': 'typecast'
    }

    def __init__(self, fields=None, records=None, return_fields_by_field_id=False, typecast=False):  # noqa: E501
        """BaseIdTableIdOrNameBody1 - a model defined in Swagger"""  # noqa: E501
        self._fields = None
        self._records = None
        self._return_fields_by_field_id = None
        self._typecast = None
        self.discriminator = None
        if fields is not None:
            self.fields = fields
        if records is not None:
            self.records = records
        if return_fields_by_field_id is not None:
            self.return_fields_by_field_id = return_fields_by_field_id
        if typecast is not None:
            self.typecast = typecast

    @property
    def fields(self):
        """Gets the fields of this BaseIdTableIdOrNameBody1.  # noqa: E501

        Create a single record  # noqa: E501

        :return: The fields of this BaseIdTableIdOrNameBody1.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this BaseIdTableIdOrNameBody1.

        Create a single record  # noqa: E501

        :param fields: The fields of this BaseIdTableIdOrNameBody1.  # noqa: E501
        :type: dict(str, object)
        """

        self._fields = fields

    @property
    def records(self):
        """Gets the records of this BaseIdTableIdOrNameBody1.  # noqa: E501

        Create multiple records (up to 10)  # noqa: E501

        :return: The records of this BaseIdTableIdOrNameBody1.  # noqa: E501
        :rtype: list[BaseIdtableIdOrNameRecords1]
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this BaseIdTableIdOrNameBody1.

        Create multiple records (up to 10)  # noqa: E501

        :param records: The records of this BaseIdTableIdOrNameBody1.  # noqa: E501
        :type: list[BaseIdtableIdOrNameRecords1]
        """

        self._records = records

    @property
    def return_fields_by_field_id(self):
        """Gets the return_fields_by_field_id of this BaseIdTableIdOrNameBody1.  # noqa: E501

        Return fields keyed by field ID instead of name  # noqa: E501

        :return: The return_fields_by_field_id of this BaseIdTableIdOrNameBody1.  # noqa: E501
        :rtype: bool
        """
        return self._return_fields_by_field_id

    @return_fields_by_field_id.setter
    def return_fields_by_field_id(self, return_fields_by_field_id):
        """Sets the return_fields_by_field_id of this BaseIdTableIdOrNameBody1.

        Return fields keyed by field ID instead of name  # noqa: E501

        :param return_fields_by_field_id: The return_fields_by_field_id of this BaseIdTableIdOrNameBody1.  # noqa: E501
        :type: bool
        """

        self._return_fields_by_field_id = return_fields_by_field_id

    @property
    def typecast(self):
        """Gets the typecast of this BaseIdTableIdOrNameBody1.  # noqa: E501

        Attempt to convert string values to appropriate types  # noqa: E501

        :return: The typecast of this BaseIdTableIdOrNameBody1.  # noqa: E501
        :rtype: bool
        """
        return self._typecast

    @typecast.setter
    def typecast(self, typecast):
        """Sets the typecast of this BaseIdTableIdOrNameBody1.

        Attempt to convert string values to appropriate types  # noqa: E501

        :param typecast: The typecast of this BaseIdTableIdOrNameBody1.  # noqa: E501
        :type: bool
        """

        self._typecast = typecast

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BaseIdTableIdOrNameBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseIdTableIdOrNameBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
