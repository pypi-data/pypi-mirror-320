# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldOptions11(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_id_in_linked_table': 'str',
        'record_link_field_id': 'str',
        'result': 'object'
    }

    attribute_map = {
        'field_id_in_linked_table': 'fieldIdInLinkedTable',
        'record_link_field_id': 'recordLinkFieldId',
        'result': 'result'
    }

    def __init__(self, field_id_in_linked_table=None, record_link_field_id=None, result=None):  # noqa: E501
        """FieldOptions11 - a model defined in Swagger"""  # noqa: E501
        self._field_id_in_linked_table = None
        self._record_link_field_id = None
        self._result = None
        self.discriminator = None
        if field_id_in_linked_table is not None:
            self.field_id_in_linked_table = field_id_in_linked_table
        if record_link_field_id is not None:
            self.record_link_field_id = record_link_field_id
        if result is not None:
            self.result = result

    @property
    def field_id_in_linked_table(self):
        """Gets the field_id_in_linked_table of this FieldOptions11.  # noqa: E501

        The id of the field in the linked table  # noqa: E501

        :return: The field_id_in_linked_table of this FieldOptions11.  # noqa: E501
        :rtype: str
        """
        return self._field_id_in_linked_table

    @field_id_in_linked_table.setter
    def field_id_in_linked_table(self, field_id_in_linked_table):
        """Sets the field_id_in_linked_table of this FieldOptions11.

        The id of the field in the linked table  # noqa: E501

        :param field_id_in_linked_table: The field_id_in_linked_table of this FieldOptions11.  # noqa: E501
        :type: str
        """

        self._field_id_in_linked_table = field_id_in_linked_table

    @property
    def record_link_field_id(self):
        """Gets the record_link_field_id of this FieldOptions11.  # noqa: E501

        The id of the linked field in the same table  # noqa: E501

        :return: The record_link_field_id of this FieldOptions11.  # noqa: E501
        :rtype: str
        """
        return self._record_link_field_id

    @record_link_field_id.setter
    def record_link_field_id(self, record_link_field_id):
        """Sets the record_link_field_id of this FieldOptions11.

        The id of the linked field in the same table  # noqa: E501

        :param record_link_field_id: The record_link_field_id of this FieldOptions11.  # noqa: E501
        :type: str
        """

        self._record_link_field_id = record_link_field_id

    @property
    def result(self):
        """Gets the result of this FieldOptions11.  # noqa: E501

        The computed result of the rollup  # noqa: E501

        :return: The result of this FieldOptions11.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this FieldOptions11.

        The computed result of the rollup  # noqa: E501

        :param result: The result of this FieldOptions11.  # noqa: E501
        :type: object
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldOptions11, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldOptions11):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
