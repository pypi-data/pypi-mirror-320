# coding: utf-8

"""
    Brave Web Search API

    The Brave Web Search API allows developers to integrate web search capabilities from the Brave Search engine into their applications.  It supports querying Brave's index with advanced options for filtering, pagination, and customizing the search results format.  Designed for developers building tools like search engines, content discovery platforms, or analytics applications.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'query': 'InlineResponse200Query',
        'web': 'InlineResponse200Web'
    }

    attribute_map = {
        'type': 'type',
        'query': 'query',
        'web': 'web'
    }

    def __init__(self, type=None, query=None, web=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._query = None
        self._web = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if query is not None:
            self.query = query
        if web is not None:
            self.web = web

    @property
    def type(self):
        """Gets the type of this InlineResponse200.  # noqa: E501

        The type of API result, e.g., `search`.  # noqa: E501

        :return: The type of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse200.

        The type of API result, e.g., `search`.  # noqa: E501

        :param type: The type of this InlineResponse200.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def query(self):
        """Gets the query of this InlineResponse200.  # noqa: E501


        :return: The query of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200Query
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this InlineResponse200.


        :param query: The query of this InlineResponse200.  # noqa: E501
        :type: InlineResponse200Query
        """

        self._query = query

    @property
    def web(self):
        """Gets the web of this InlineResponse200.  # noqa: E501


        :return: The web of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200Web
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this InlineResponse200.


        :param web: The web of this InlineResponse200.  # noqa: E501
        :type: InlineResponse200Web
        """

        self._web = web

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
