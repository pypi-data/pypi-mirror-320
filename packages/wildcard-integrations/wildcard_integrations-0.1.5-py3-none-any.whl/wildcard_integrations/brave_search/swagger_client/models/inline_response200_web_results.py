# coding: utf-8

"""
    Brave Web Search API

    The Brave Web Search API allows developers to integrate web search capabilities from the Brave Search engine into their applications.  It supports querying Brave's index with advanced options for filtering, pagination, and customizing the search results format.  Designed for developers building tools like search engines, content discovery platforms, or analytics applications.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200WebResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'url': 'str',
        'description': 'str'
    }

    attribute_map = {
        'title': 'title',
        'url': 'url',
        'description': 'description'
    }

    def __init__(self, title=None, url=None, description=None):  # noqa: E501
        """InlineResponse200WebResults - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._url = None
        self._description = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url
        if description is not None:
            self.description = description

    @property
    def title(self):
        """Gets the title of this InlineResponse200WebResults.  # noqa: E501

        The title of the webpage.  # noqa: E501

        :return: The title of this InlineResponse200WebResults.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse200WebResults.

        The title of the webpage.  # noqa: E501

        :param title: The title of this InlineResponse200WebResults.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this InlineResponse200WebResults.  # noqa: E501

        The full URL for the webpage.  # noqa: E501

        :return: The url of this InlineResponse200WebResults.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InlineResponse200WebResults.

        The full URL for the webpage.  # noqa: E501

        :param url: The url of this InlineResponse200WebResults.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def description(self):
        """Gets the description of this InlineResponse200WebResults.  # noqa: E501

        A summary or snippet from the webpage.  # noqa: E501

        :return: The description of this InlineResponse200WebResults.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse200WebResults.

        A summary or snippet from the webpage.  # noqa: E501

        :param description: The description of this InlineResponse200WebResults.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200WebResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200WebResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
