# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2009(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_time': 'datetime',
        'last_updated_time': 'datetime',
        'text': 'str',
        'parent_comment_id': 'str',
        'mentioned': 'dict(str, UserMentioned)',
        'reactions': 'list[InlineResponse2009Reactions]',
        'author': 'InlineResponse2009Author'
    }

    attribute_map = {
        'id': 'id',
        'created_time': 'createdTime',
        'last_updated_time': 'lastUpdatedTime',
        'text': 'text',
        'parent_comment_id': 'parentCommentId',
        'mentioned': 'mentioned',
        'reactions': 'reactions',
        'author': 'author'
    }

    def __init__(self, id=None, created_time=None, last_updated_time=None, text=None, parent_comment_id=None, mentioned=None, reactions=None, author=None):  # noqa: E501
        """InlineResponse2009 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_time = None
        self._last_updated_time = None
        self._text = None
        self._parent_comment_id = None
        self._mentioned = None
        self._reactions = None
        self._author = None
        self.discriminator = None
        self.id = id
        self.created_time = created_time
        if last_updated_time is not None:
            self.last_updated_time = last_updated_time
        self.text = text
        if parent_comment_id is not None:
            self.parent_comment_id = parent_comment_id
        if mentioned is not None:
            self.mentioned = mentioned
        if reactions is not None:
            self.reactions = reactions
        self.author = author

    @property
    def id(self):
        """Gets the id of this InlineResponse2009.  # noqa: E501

        A comment ID  # noqa: E501

        :return: The id of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2009.

        A comment ID  # noqa: E501

        :param id: The id of this InlineResponse2009.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_time(self):
        """Gets the created_time of this InlineResponse2009.  # noqa: E501

        Creation timestamp  # noqa: E501

        :return: The created_time of this InlineResponse2009.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this InlineResponse2009.

        Creation timestamp  # noqa: E501

        :param created_time: The created_time of this InlineResponse2009.  # noqa: E501
        :type: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")  # noqa: E501

        self._created_time = created_time

    @property
    def last_updated_time(self):
        """Gets the last_updated_time of this InlineResponse2009.  # noqa: E501

        Last update timestamp  # noqa: E501

        :return: The last_updated_time of this InlineResponse2009.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated_time

    @last_updated_time.setter
    def last_updated_time(self, last_updated_time):
        """Sets the last_updated_time of this InlineResponse2009.

        Last update timestamp  # noqa: E501

        :param last_updated_time: The last_updated_time of this InlineResponse2009.  # noqa: E501
        :type: datetime
        """

        self._last_updated_time = last_updated_time

    @property
    def text(self):
        """Gets the text of this InlineResponse2009.  # noqa: E501

        The comment text, may contain user mentions  # noqa: E501

        :return: The text of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this InlineResponse2009.

        The comment text, may contain user mentions  # noqa: E501

        :param text: The text of this InlineResponse2009.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def parent_comment_id(self):
        """Gets the parent_comment_id of this InlineResponse2009.  # noqa: E501

        ID of parent comment if this is a reply  # noqa: E501

        :return: The parent_comment_id of this InlineResponse2009.  # noqa: E501
        :rtype: str
        """
        return self._parent_comment_id

    @parent_comment_id.setter
    def parent_comment_id(self, parent_comment_id):
        """Sets the parent_comment_id of this InlineResponse2009.

        ID of parent comment if this is a reply  # noqa: E501

        :param parent_comment_id: The parent_comment_id of this InlineResponse2009.  # noqa: E501
        :type: str
        """

        self._parent_comment_id = parent_comment_id

    @property
    def mentioned(self):
        """Gets the mentioned of this InlineResponse2009.  # noqa: E501


        :return: The mentioned of this InlineResponse2009.  # noqa: E501
        :rtype: dict(str, UserMentioned)
        """
        return self._mentioned

    @mentioned.setter
    def mentioned(self, mentioned):
        """Sets the mentioned of this InlineResponse2009.


        :param mentioned: The mentioned of this InlineResponse2009.  # noqa: E501
        :type: dict(str, UserMentioned)
        """

        self._mentioned = mentioned

    @property
    def reactions(self):
        """Gets the reactions of this InlineResponse2009.  # noqa: E501


        :return: The reactions of this InlineResponse2009.  # noqa: E501
        :rtype: list[InlineResponse2009Reactions]
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this InlineResponse2009.


        :param reactions: The reactions of this InlineResponse2009.  # noqa: E501
        :type: list[InlineResponse2009Reactions]
        """

        self._reactions = reactions

    @property
    def author(self):
        """Gets the author of this InlineResponse2009.  # noqa: E501


        :return: The author of this InlineResponse2009.  # noqa: E501
        :rtype: InlineResponse2009Author
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this InlineResponse2009.


        :param author: The author of this InlineResponse2009.  # noqa: E501
        :type: InlineResponse2009Author
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
