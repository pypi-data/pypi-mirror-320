# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Thread(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'history_id': 'str',
        'id': 'str',
        'messages': 'list[Message]',
        'snippet': 'str'
    }

    attribute_map = {
        'history_id': 'historyId',
        'id': 'id',
        'messages': 'messages',
        'snippet': 'snippet'
    }

    def __init__(self, history_id=None, id=None, messages=None, snippet=None):  # noqa: E501
        """Thread - a model defined in Swagger"""  # noqa: E501
        self._history_id = None
        self._id = None
        self._messages = None
        self._snippet = None
        self.discriminator = None
        if history_id is not None:
            self.history_id = history_id
        if id is not None:
            self.id = id
        if messages is not None:
            self.messages = messages
        if snippet is not None:
            self.snippet = snippet

    @property
    def history_id(self):
        """Gets the history_id of this Thread.  # noqa: E501

        The ID of the last history record that modified this thread.  # noqa: E501

        :return: The history_id of this Thread.  # noqa: E501
        :rtype: str
        """
        return self._history_id

    @history_id.setter
    def history_id(self, history_id):
        """Sets the history_id of this Thread.

        The ID of the last history record that modified this thread.  # noqa: E501

        :param history_id: The history_id of this Thread.  # noqa: E501
        :type: str
        """

        self._history_id = history_id

    @property
    def id(self):
        """Gets the id of this Thread.  # noqa: E501

        The unique ID of the thread.  # noqa: E501

        :return: The id of this Thread.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Thread.

        The unique ID of the thread.  # noqa: E501

        :param id: The id of this Thread.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def messages(self):
        """Gets the messages of this Thread.  # noqa: E501

        The list of messages in the thread.  # noqa: E501

        :return: The messages of this Thread.  # noqa: E501
        :rtype: list[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Thread.

        The list of messages in the thread.  # noqa: E501

        :param messages: The messages of this Thread.  # noqa: E501
        :type: list[Message]
        """

        self._messages = messages

    @property
    def snippet(self):
        """Gets the snippet of this Thread.  # noqa: E501

        A short part of the message text.  # noqa: E501

        :return: The snippet of this Thread.  # noqa: E501
        :rtype: str
        """
        return self._snippet

    @snippet.setter
    def snippet(self, snippet):
        """Sets the snippet of this Thread.

        A short part of the message text.  # noqa: E501

        :param snippet: The snippet of this Thread.  # noqa: E501
        :type: str
        """

        self._snippet = snippet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Thread, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Thread):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
