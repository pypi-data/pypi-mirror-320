# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PopSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_window': 'str',
        'disposition': 'str'
    }

    attribute_map = {
        'access_window': 'accessWindow',
        'disposition': 'disposition'
    }

    def __init__(self, access_window=None, disposition=None):  # noqa: E501
        """PopSettings - a model defined in Swagger"""  # noqa: E501
        self._access_window = None
        self._disposition = None
        self.discriminator = None
        if access_window is not None:
            self.access_window = access_window
        if disposition is not None:
            self.disposition = disposition

    @property
    def access_window(self):
        """Gets the access_window of this PopSettings.  # noqa: E501

        The range of messages which are accessible via POP.  # noqa: E501

        :return: The access_window of this PopSettings.  # noqa: E501
        :rtype: str
        """
        return self._access_window

    @access_window.setter
    def access_window(self, access_window):
        """Sets the access_window of this PopSettings.

        The range of messages which are accessible via POP.  # noqa: E501

        :param access_window: The access_window of this PopSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["accessWindowUnspecified", "disabled", "fromNowOn", "allMail"]  # noqa: E501
        if access_window not in allowed_values:
            raise ValueError(
                "Invalid value for `access_window` ({0}), must be one of {1}"  # noqa: E501
                .format(access_window, allowed_values)
            )

        self._access_window = access_window

    @property
    def disposition(self):
        """Gets the disposition of this PopSettings.  # noqa: E501

        The action that will be executed on a message after it has been fetched via POP.  # noqa: E501

        :return: The disposition of this PopSettings.  # noqa: E501
        :rtype: str
        """
        return self._disposition

    @disposition.setter
    def disposition(self, disposition):
        """Sets the disposition of this PopSettings.

        The action that will be executed on a message after it has been fetched via POP.  # noqa: E501

        :param disposition: The disposition of this PopSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["dispositionUnspecified", "leaveInInbox", "archive", "trash", "markRead"]  # noqa: E501
        if disposition not in allowed_values:
            raise ValueError(
                "Invalid value for `disposition` ({0}), must be one of {1}"  # noqa: E501
                .format(disposition, allowed_values)
            )

        self._disposition = disposition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PopSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PopSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
