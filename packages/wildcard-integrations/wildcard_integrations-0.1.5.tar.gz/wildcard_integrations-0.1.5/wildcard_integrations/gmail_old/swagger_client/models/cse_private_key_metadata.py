# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CsePrivateKeyMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kacls_key_metadata': 'KaclsKeyMetadata',
        'private_key_metadata_id': 'str'
    }

    attribute_map = {
        'kacls_key_metadata': 'kaclsKeyMetadata',
        'private_key_metadata_id': 'privateKeyMetadataId'
    }

    def __init__(self, kacls_key_metadata=None, private_key_metadata_id=None):  # noqa: E501
        """CsePrivateKeyMetadata - a model defined in Swagger"""  # noqa: E501
        self._kacls_key_metadata = None
        self._private_key_metadata_id = None
        self.discriminator = None
        if kacls_key_metadata is not None:
            self.kacls_key_metadata = kacls_key_metadata
        if private_key_metadata_id is not None:
            self.private_key_metadata_id = private_key_metadata_id

    @property
    def kacls_key_metadata(self):
        """Gets the kacls_key_metadata of this CsePrivateKeyMetadata.  # noqa: E501


        :return: The kacls_key_metadata of this CsePrivateKeyMetadata.  # noqa: E501
        :rtype: KaclsKeyMetadata
        """
        return self._kacls_key_metadata

    @kacls_key_metadata.setter
    def kacls_key_metadata(self, kacls_key_metadata):
        """Sets the kacls_key_metadata of this CsePrivateKeyMetadata.


        :param kacls_key_metadata: The kacls_key_metadata of this CsePrivateKeyMetadata.  # noqa: E501
        :type: KaclsKeyMetadata
        """

        self._kacls_key_metadata = kacls_key_metadata

    @property
    def private_key_metadata_id(self):
        """Gets the private_key_metadata_id of this CsePrivateKeyMetadata.  # noqa: E501

        Output only. The immutable ID for the private key metadata instance.  # noqa: E501

        :return: The private_key_metadata_id of this CsePrivateKeyMetadata.  # noqa: E501
        :rtype: str
        """
        return self._private_key_metadata_id

    @private_key_metadata_id.setter
    def private_key_metadata_id(self, private_key_metadata_id):
        """Sets the private_key_metadata_id of this CsePrivateKeyMetadata.

        Output only. The immutable ID for the private key metadata instance.  # noqa: E501

        :param private_key_metadata_id: The private_key_metadata_id of this CsePrivateKeyMetadata.  # noqa: E501
        :type: str
        """

        self._private_key_metadata_id = private_key_metadata_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsePrivateKeyMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsePrivateKeyMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
