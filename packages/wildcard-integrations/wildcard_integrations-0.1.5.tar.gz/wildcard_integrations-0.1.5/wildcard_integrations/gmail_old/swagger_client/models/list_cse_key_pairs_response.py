# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListCseKeyPairsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cse_key_pairs': 'list[CseKeyPair]',
        'next_page_token': 'str'
    }

    attribute_map = {
        'cse_key_pairs': 'cseKeyPairs',
        'next_page_token': 'nextPageToken'
    }

    def __init__(self, cse_key_pairs=None, next_page_token=None):  # noqa: E501
        """ListCseKeyPairsResponse - a model defined in Swagger"""  # noqa: E501
        self._cse_key_pairs = None
        self._next_page_token = None
        self.discriminator = None
        if cse_key_pairs is not None:
            self.cse_key_pairs = cse_key_pairs
        if next_page_token is not None:
            self.next_page_token = next_page_token

    @property
    def cse_key_pairs(self):
        """Gets the cse_key_pairs of this ListCseKeyPairsResponse.  # noqa: E501

        One page of the list of CSE key pairs installed for the user.  # noqa: E501

        :return: The cse_key_pairs of this ListCseKeyPairsResponse.  # noqa: E501
        :rtype: list[CseKeyPair]
        """
        return self._cse_key_pairs

    @cse_key_pairs.setter
    def cse_key_pairs(self, cse_key_pairs):
        """Sets the cse_key_pairs of this ListCseKeyPairsResponse.

        One page of the list of CSE key pairs installed for the user.  # noqa: E501

        :param cse_key_pairs: The cse_key_pairs of this ListCseKeyPairsResponse.  # noqa: E501
        :type: list[CseKeyPair]
        """

        self._cse_key_pairs = cse_key_pairs

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListCseKeyPairsResponse.  # noqa: E501

        Pagination token to be passed to a subsequent ListCseKeyPairs call in order to retrieve the next page of key pairs. If this value is not returned, then no further pages remain.  # noqa: E501

        :return: The next_page_token of this ListCseKeyPairsResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListCseKeyPairsResponse.

        Pagination token to be passed to a subsequent ListCseKeyPairs call in order to retrieve the next page of key pairs. If this value is not returned, then no further pages remain.  # noqa: E501

        :param next_page_token: The next_page_token of this ListCseKeyPairsResponse.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListCseKeyPairsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListCseKeyPairsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
