# coding: utf-8

"""
    Brave Web Search API

    The Brave Web Search API allows developers to integrate web search capabilities from the Brave Search engine into their applications.  It supports querying Brave's index with advanced options for filtering, pagination, and customizing the search results format.  Designed for developers building tools like search engines, content discovery platforms, or analytics applications.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200Query(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original': 'str',
        'altered': 'str'
    }

    attribute_map = {
        'original': 'original',
        'altered': 'altered'
    }

    def __init__(self, original=None, altered=None):  # noqa: E501
        """InlineResponse200Query - a model defined in Swagger"""  # noqa: E501
        self._original = None
        self._altered = None
        self.discriminator = None
        if original is not None:
            self.original = original
        if altered is not None:
            self.altered = altered

    @property
    def original(self):
        """Gets the original of this InlineResponse200Query.  # noqa: E501

        The original query term submitted by the user.  # noqa: E501

        :return: The original of this InlineResponse200Query.  # noqa: E501
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this InlineResponse200Query.

        The original query term submitted by the user.  # noqa: E501

        :param original: The original of this InlineResponse200Query.  # noqa: E501
        :type: str
        """

        self._original = original

    @property
    def altered(self):
        """Gets the altered of this InlineResponse200Query.  # noqa: E501

        The query term after optional spellcheck or corrections.  # noqa: E501

        :return: The altered of this InlineResponse200Query.  # noqa: E501
        :rtype: str
        """
        return self._altered

    @altered.setter
    def altered(self, altered):
        """Sets the altered of this InlineResponse200Query.

        The query term after optional spellcheck or corrections.  # noqa: E501

        :param altered: The altered of this InlineResponse200Query.  # noqa: E501
        :type: str
        """

        self._altered = altered

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200Query, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200Query):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
