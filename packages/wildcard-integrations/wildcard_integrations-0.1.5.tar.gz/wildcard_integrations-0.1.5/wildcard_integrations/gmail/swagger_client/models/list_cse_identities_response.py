# coding: utf-8

"""
    Gmail API

    The Gmail API lets you view and manage Gmail mailbox data like threads, messages, and labels.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ListCseIdentitiesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cse_identities': 'list[CseIdentity]',
        'next_page_token': 'str'
    }

    attribute_map = {
        'cse_identities': 'cseIdentities',
        'next_page_token': 'nextPageToken'
    }

    def __init__(self, cse_identities=None, next_page_token=None):  # noqa: E501
        """ListCseIdentitiesResponse - a model defined in Swagger"""  # noqa: E501
        self._cse_identities = None
        self._next_page_token = None
        self.discriminator = None
        if cse_identities is not None:
            self.cse_identities = cse_identities
        if next_page_token is not None:
            self.next_page_token = next_page_token

    @property
    def cse_identities(self):
        """Gets the cse_identities of this ListCseIdentitiesResponse.  # noqa: E501

        One page of the list of CSE identities configured for the user.  # noqa: E501

        :return: The cse_identities of this ListCseIdentitiesResponse.  # noqa: E501
        :rtype: list[CseIdentity]
        """
        return self._cse_identities

    @cse_identities.setter
    def cse_identities(self, cse_identities):
        """Sets the cse_identities of this ListCseIdentitiesResponse.

        One page of the list of CSE identities configured for the user.  # noqa: E501

        :param cse_identities: The cse_identities of this ListCseIdentitiesResponse.  # noqa: E501
        :type: list[CseIdentity]
        """

        self._cse_identities = cse_identities

    @property
    def next_page_token(self):
        """Gets the next_page_token of this ListCseIdentitiesResponse.  # noqa: E501

        Pagination token to be passed to a subsequent ListCseIdentities call in order to retrieve the next page of identities. If this value is not returned or is the empty string, then no further pages remain.  # noqa: E501

        :return: The next_page_token of this ListCseIdentitiesResponse.  # noqa: E501
        :rtype: str
        """
        return self._next_page_token

    @next_page_token.setter
    def next_page_token(self, next_page_token):
        """Sets the next_page_token of this ListCseIdentitiesResponse.

        Pagination token to be passed to a subsequent ListCseIdentities call in order to retrieve the next page of identities. If this value is not returned or is the empty string, then no further pages remain.  # noqa: E501

        :param next_page_token: The next_page_token of this ListCseIdentitiesResponse.  # noqa: E501
        :type: str
        """

        self._next_page_token = next_page_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ListCseIdentitiesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListCseIdentitiesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
