# coding: utf-8

"""
    Airtable API

    OpenAPI spec for Airtable's REST API  # noqa: E501

    OpenAPI spec version: 2024-12-27
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2009Reactions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emoji': 'InlineResponse2008Emoji',
        'reacting_user': 'InlineResponse2009ReactingUser'
    }

    attribute_map = {
        'emoji': 'emoji',
        'reacting_user': 'reactingUser'
    }

    def __init__(self, emoji=None, reacting_user=None):  # noqa: E501
        """InlineResponse2009Reactions - a model defined in Swagger"""  # noqa: E501
        self._emoji = None
        self._reacting_user = None
        self.discriminator = None
        if emoji is not None:
            self.emoji = emoji
        if reacting_user is not None:
            self.reacting_user = reacting_user

    @property
    def emoji(self):
        """Gets the emoji of this InlineResponse2009Reactions.  # noqa: E501


        :return: The emoji of this InlineResponse2009Reactions.  # noqa: E501
        :rtype: InlineResponse2008Emoji
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this InlineResponse2009Reactions.


        :param emoji: The emoji of this InlineResponse2009Reactions.  # noqa: E501
        :type: InlineResponse2008Emoji
        """

        self._emoji = emoji

    @property
    def reacting_user(self):
        """Gets the reacting_user of this InlineResponse2009Reactions.  # noqa: E501


        :return: The reacting_user of this InlineResponse2009Reactions.  # noqa: E501
        :rtype: InlineResponse2009ReactingUser
        """
        return self._reacting_user

    @reacting_user.setter
    def reacting_user(self, reacting_user):
        """Sets the reacting_user of this InlineResponse2009Reactions.


        :param reacting_user: The reacting_user of this InlineResponse2009Reactions.  # noqa: E501
        :type: InlineResponse2009ReactingUser
        """

        self._reacting_user = reacting_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2009Reactions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2009Reactions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
