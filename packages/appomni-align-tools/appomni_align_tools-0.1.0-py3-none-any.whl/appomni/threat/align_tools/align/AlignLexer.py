# Generated from ../../../antlr4/align/Align.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,276,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
        12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,5,15,124,8,
        15,10,15,12,15,127,9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,144,8,17,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
        187,8,20,1,21,1,21,1,21,1,21,5,21,193,8,21,10,21,12,21,196,9,21,
        1,21,1,21,1,21,1,21,1,21,5,21,203,8,21,10,21,12,21,206,9,21,1,21,
        3,21,209,8,21,1,22,1,22,1,22,1,22,1,22,3,22,216,8,22,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,3,24,225,8,24,1,25,1,25,1,25,1,26,1,26,1,
        26,1,26,1,26,1,26,3,26,236,8,26,1,27,1,27,1,27,1,28,4,28,242,8,28,
        11,28,12,28,243,1,29,4,29,247,8,29,11,29,12,29,248,1,30,4,30,252,
        8,30,11,30,12,30,253,1,30,1,30,1,30,5,30,259,8,30,10,30,12,30,262,
        9,30,1,31,4,31,265,8,31,11,31,12,31,266,1,32,1,32,3,32,271,8,32,
        1,33,1,33,1,34,1,34,0,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,1,0,8,2,0,9,9,32,32,2,0,10,10,13,13,3,
        0,10,10,13,13,39,39,3,0,10,10,13,13,34,34,3,0,43,43,45,45,124,124,
        1,0,48,57,1,0,97,122,1,0,65,90,299,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,74,1,0,0,0,5,76,1,0,
        0,0,7,78,1,0,0,0,9,80,1,0,0,0,11,82,1,0,0,0,13,90,1,0,0,0,15,100,
        1,0,0,0,17,104,1,0,0,0,19,106,1,0,0,0,21,108,1,0,0,0,23,110,1,0,
        0,0,25,112,1,0,0,0,27,115,1,0,0,0,29,117,1,0,0,0,31,121,1,0,0,0,
        33,130,1,0,0,0,35,143,1,0,0,0,37,145,1,0,0,0,39,149,1,0,0,0,41,186,
        1,0,0,0,43,208,1,0,0,0,45,215,1,0,0,0,47,217,1,0,0,0,49,224,1,0,
        0,0,51,226,1,0,0,0,53,235,1,0,0,0,55,237,1,0,0,0,57,241,1,0,0,0,
        59,246,1,0,0,0,61,251,1,0,0,0,63,264,1,0,0,0,65,270,1,0,0,0,67,272,
        1,0,0,0,69,274,1,0,0,0,71,72,5,105,0,0,72,73,5,102,0,0,73,2,1,0,
        0,0,74,75,5,40,0,0,75,4,1,0,0,0,76,77,5,41,0,0,77,6,1,0,0,0,78,79,
        5,123,0,0,79,8,1,0,0,0,80,81,5,125,0,0,81,10,1,0,0,0,82,83,5,102,
        0,0,83,84,5,111,0,0,84,85,5,114,0,0,85,86,5,101,0,0,86,87,5,97,0,
        0,87,88,5,99,0,0,88,89,5,104,0,0,89,12,1,0,0,0,90,91,5,100,0,0,91,
        92,5,117,0,0,92,93,5,112,0,0,93,94,5,108,0,0,94,95,5,105,0,0,95,
        96,5,99,0,0,96,97,5,97,0,0,97,98,5,116,0,0,98,99,5,101,0,0,99,14,
        1,0,0,0,100,101,5,118,0,0,101,102,5,97,0,0,102,103,5,114,0,0,103,
        16,1,0,0,0,104,105,5,61,0,0,105,18,1,0,0,0,106,107,5,91,0,0,107,
        20,1,0,0,0,108,109,5,93,0,0,109,22,1,0,0,0,110,111,5,36,0,0,111,
        24,1,0,0,0,112,113,5,36,0,0,113,114,5,123,0,0,114,26,1,0,0,0,115,
        116,5,44,0,0,116,28,1,0,0,0,117,118,7,0,0,0,118,119,1,0,0,0,119,
        120,6,14,0,0,120,30,1,0,0,0,121,125,5,35,0,0,122,124,8,1,0,0,123,
        122,1,0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,
        128,1,0,0,0,127,125,1,0,0,0,128,129,6,15,0,0,129,32,1,0,0,0,130,
        131,7,1,0,0,131,132,1,0,0,0,132,133,6,16,0,0,133,34,1,0,0,0,134,
        135,5,116,0,0,135,136,5,114,0,0,136,137,5,117,0,0,137,144,5,101,
        0,0,138,139,5,102,0,0,139,140,5,97,0,0,140,141,5,108,0,0,141,142,
        5,115,0,0,142,144,5,101,0,0,143,134,1,0,0,0,143,138,1,0,0,0,144,
        36,1,0,0,0,145,146,5,110,0,0,146,147,5,111,0,0,147,148,5,116,0,0,
        148,38,1,0,0,0,149,150,5,101,0,0,150,151,5,120,0,0,151,152,5,105,
        0,0,152,153,5,115,0,0,153,154,5,116,0,0,154,155,5,115,0,0,155,40,
        1,0,0,0,156,157,5,61,0,0,157,187,5,61,0,0,158,159,5,33,0,0,159,187,
        5,61,0,0,160,161,5,115,0,0,161,162,5,116,0,0,162,163,5,97,0,0,163,
        164,5,114,0,0,164,165,5,116,0,0,165,166,5,115,0,0,166,167,5,95,0,
        0,167,168,5,119,0,0,168,169,5,105,0,0,169,170,5,116,0,0,170,187,
        5,104,0,0,171,172,5,99,0,0,172,173,5,111,0,0,173,174,5,110,0,0,174,
        175,5,116,0,0,175,176,5,97,0,0,176,177,5,105,0,0,177,178,5,110,0,
        0,178,187,5,115,0,0,179,180,5,109,0,0,180,181,5,97,0,0,181,182,5,
        116,0,0,182,183,5,99,0,0,183,184,5,104,0,0,184,185,5,101,0,0,185,
        187,5,115,0,0,186,156,1,0,0,0,186,158,1,0,0,0,186,160,1,0,0,0,186,
        171,1,0,0,0,186,179,1,0,0,0,187,42,1,0,0,0,188,194,5,39,0,0,189,
        193,8,2,0,0,190,191,5,92,0,0,191,193,5,39,0,0,192,189,1,0,0,0,192,
        190,1,0,0,0,193,196,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,
        197,1,0,0,0,196,194,1,0,0,0,197,209,5,39,0,0,198,204,5,34,0,0,199,
        203,8,3,0,0,200,201,5,92,0,0,201,203,5,34,0,0,202,199,1,0,0,0,202,
        200,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,
        207,1,0,0,0,206,204,1,0,0,0,207,209,5,34,0,0,208,188,1,0,0,0,208,
        198,1,0,0,0,209,44,1,0,0,0,210,211,5,97,0,0,211,212,5,110,0,0,212,
        216,5,100,0,0,213,214,5,111,0,0,214,216,5,114,0,0,215,210,1,0,0,
        0,215,213,1,0,0,0,216,46,1,0,0,0,217,218,5,105,0,0,218,219,5,110,
        0,0,219,48,1,0,0,0,220,225,3,57,28,0,221,225,3,53,26,0,222,225,3,
        55,27,0,223,225,3,51,25,0,224,220,1,0,0,0,224,221,1,0,0,0,224,222,
        1,0,0,0,224,223,1,0,0,0,225,50,1,0,0,0,226,227,7,4,0,0,227,228,3,
        53,26,0,228,52,1,0,0,0,229,230,3,57,28,0,230,231,5,46,0,0,231,232,
        3,57,28,0,232,236,1,0,0,0,233,234,5,46,0,0,234,236,3,57,28,0,235,
        229,1,0,0,0,235,233,1,0,0,0,236,54,1,0,0,0,237,238,7,4,0,0,238,239,
        3,57,28,0,239,56,1,0,0,0,240,242,3,59,29,0,241,240,1,0,0,0,242,243,
        1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,58,1,0,0,0,245,247,7,
        5,0,0,246,245,1,0,0,0,247,248,1,0,0,0,248,246,1,0,0,0,248,249,1,
        0,0,0,249,60,1,0,0,0,250,252,3,65,32,0,251,250,1,0,0,0,252,253,1,
        0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,260,1,0,0,0,255,259,5,
        95,0,0,256,259,3,65,32,0,257,259,3,59,29,0,258,255,1,0,0,0,258,256,
        1,0,0,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,
        1,0,0,0,261,62,1,0,0,0,262,260,1,0,0,0,263,265,3,65,32,0,264,263,
        1,0,0,0,265,266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,64,1,
        0,0,0,268,271,3,69,34,0,269,271,3,67,33,0,270,268,1,0,0,0,270,269,
        1,0,0,0,271,66,1,0,0,0,272,273,7,6,0,0,273,68,1,0,0,0,274,275,7,
        7,0,0,275,70,1,0,0,0,19,0,125,143,186,192,194,202,204,208,215,224,
        235,243,248,253,258,260,266,270,1,6,0,0
    ]

class AlignLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    COMMA = 14
    SPACE = 15
    COMMENT = 16
    NEWLINE = 17
    BOOL = 18
    NEGATE = 19
    EXISTS = 20
    OPERATOR = 21
    QUOTED_STRING = 22
    BOOLEAN_OPERATOR = 23
    IN = 24
    NUMBER = 25
    SIGNED_DECIMAL = 26
    DECIMAL = 27
    SIGNED_INT = 28
    INT = 29
    DIGIT = 30
    NAME = 31
    WORD = 32
    LETTER = 33
    LCASE_LETTER = 34
    UCASE_LETTER = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'('", "')'", "'{'", "'}'", "'foreach'", "'duplicate'", 
            "'var'", "'='", "'['", "']'", "'$'", "'${'", "','", "'not'", 
            "'exists'", "'in'" ]

    symbolicNames = [ "<INVALID>",
            "COMMA", "SPACE", "COMMENT", "NEWLINE", "BOOL", "NEGATE", "EXISTS", 
            "OPERATOR", "QUOTED_STRING", "BOOLEAN_OPERATOR", "IN", "NUMBER", 
            "SIGNED_DECIMAL", "DECIMAL", "SIGNED_INT", "INT", "DIGIT", "NAME", 
            "WORD", "LETTER", "LCASE_LETTER", "UCASE_LETTER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "COMMA", 
                  "SPACE", "COMMENT", "NEWLINE", "BOOL", "NEGATE", "EXISTS", 
                  "OPERATOR", "QUOTED_STRING", "BOOLEAN_OPERATOR", "IN", 
                  "NUMBER", "SIGNED_DECIMAL", "DECIMAL", "SIGNED_INT", "INT", 
                  "DIGIT", "NAME", "WORD", "LETTER", "LCASE_LETTER", "UCASE_LETTER" ]

    grammarFileName = "Align.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


