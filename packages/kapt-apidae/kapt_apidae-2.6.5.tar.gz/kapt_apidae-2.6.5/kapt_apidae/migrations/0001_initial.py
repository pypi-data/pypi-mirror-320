# Generated by Django 2.1.12 on 2019-09-13 12:04

# Third party
from django.db import migrations, models
import django.db.models.deletion

# Local application / specific library imports
import kapt_apidae.models_methods


class Migration(migrations.Migration):
    initial = True

    dependencies = [("contenttypes", "0002_remove_content_type_name")]

    operations = [
        migrations.CreateModel(
            name="AgrementsGroupAccommodation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "agrement_identifier",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Agrement identifier",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="BaseElement",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=500, verbose_name="Label")),
                (
                    "label_fr",
                    models.CharField(max_length=500, null=True, verbose_name="Label"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                ("order", models.IntegerField(verbose_name="Ordering number")),
                ("active", models.BooleanField(default=True, verbose_name="Active")),
                (
                    "family",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="family_set",
                        to="kapt_apidae.BaseElement",
                        verbose_name="Element family",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children_set",
                        to="kapt_apidae.BaseElement",
                        verbose_name="Element family",
                    ),
                ),
            ],
            options={
                "verbose_name": "Base element",
                "verbose_name_plural": "Base elements",
            },
            bases=(models.Model, kapt_apidae.models_methods.BaseElementMethods),
        ),
        migrations.CreateModel(
            name="BaseElementType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        db_index=True, max_length=500, unique=True, verbose_name="Label"
                    ),
                ),
            ],
            options={
                "verbose_name": "Base element type",
                "verbose_name_plural": "Base element types",
            },
        ),
        migrations.CreateModel(
            name="BookingOrganisation",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
            ],
            options={
                "verbose_name": "Booking organisation",
                "verbose_name_plural": "Booking organisations",
            },
            bases=(models.Model, kapt_apidae.models_methods.BookingOrganisationMethods),
        ),
        migrations.CreateModel(
            name="ClosurePeriod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "closure_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Exceptional opening days"
                    ),
                ),
                (
                    "closure_special_date",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PREMIER_JANVIER", "First of January"),
                            ("PREMIER_MAI", "First of May"),
                            ("HUIT_MAI", "Height of May"),
                            ("QUATORZE_JUILLET", "Fourteen of July"),
                            ("QUINZE_AOUT", "Fifteen of August"),
                            ("PREMIER_NOVEMBRE", "First of November"),
                            ("ONZE_NOVEMBRE", "Eleven of November"),
                            ("VINGT_CINQ_DECEMBRE", "Twenty-five of December"),
                            ("BERCHTOLDSTAG", "Berchtoldstag"),
                            ("SAINT_JOSEPH", "Saint joseph"),
                            ("VENDREDI_SAINT", "Vendredi saint"),
                            ("LUNDI_PAQUES", "Lundi paques"),
                            ("ASCENSION", "Ascension"),
                            ("LUNDI_PENTECOTE", "Lundi pentecote"),
                            ("FETE_DIEU", "Fete die"),
                            ("LUNDI_DU_JEUNE_FEDERAL", "Lundi du jeune federal"),
                            ("IMMACULEE_CONCEPTION", "Immaculee conception"),
                        ],
                        max_length=500,
                        null=True,
                        verbose_name="Special closure date",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CommunicationInfo",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.CharField(max_length=2048, null=True, verbose_name="Label"),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_apidae.BaseElement",
                        verbose_name="Communication type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Communication info",
                "verbose_name_plural": "Communication infos",
            },
            bases=(models.Model, kapt_apidae.models_methods.CommunicationInfoMethods),
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=500, null=True, verbose_name="First name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=500, null=True, verbose_name="Last name"
                    ),
                ),
                (
                    "position",
                    models.CharField(
                        max_length=500, null=True, verbose_name="Position"
                    ),
                ),
                (
                    "position_fr",
                    models.CharField(
                        max_length=500, null=True, verbose_name="Position"
                    ),
                ),
                (
                    "is_referent",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        verbose_name="This contact is the referent",
                    ),
                ),
                (
                    "function",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="function_contact_object_set",
                        to="kapt_apidae.BaseElement",
                        verbose_name="Function",
                    ),
                ),
                (
                    "internal_communications",
                    models.ManyToManyField(
                        blank=True,
                        related_name="internal_communication_contact_object_set",
                        to="kapt_apidae.CommunicationInfo",
                        verbose_name="Internal communication",
                    ),
                ),
                (
                    "title",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="title_contact_object_set",
                        to="kapt_apidae.BaseElement",
                        verbose_name="Title",
                    ),
                ),
            ],
            options={"verbose_name": "Contact", "verbose_name_plural": "Contacts"},
            bases=(models.Model, kapt_apidae.models_methods.ContactMethods),
        ),
        migrations.CreateModel(
            name="DayOpeningChoices",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "day",
                    models.CharField(
                        choices=[
                            ("LUNDI", "Monday"),
                            ("MARDI", "Tuesday"),
                            ("MERCREDI", "Wednesday"),
                            ("JEUDI", "Thursday"),
                            ("VENDREDI", "Friday"),
                            ("SAMEDI", "Saturday"),
                            ("DIMANCHE", "Sunday"),
                            ("TOUS", "Everyday"),
                        ],
                        max_length=500,
                        verbose_name="Opening days",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Description",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Technical name",
                    ),
                ),
                (
                    "text",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "text_fr",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "theme",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="theme_set",
                        to="kapt_apidae.BaseElement",
                        verbose_name="Theme",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ExceptionalOpeningDate",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(verbose_name="Exceptional opening date")),
            ],
        ),
        migrations.CreateModel(
            name="ImportApidaeKaptravelLog",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "launch_date",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created on"),
                ),
                (
                    "objects_modified",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="Number of touristic objects modified"
                    ),
                ),
                (
                    "objects_added",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="Number of touristic objects added"
                    ),
                ),
                (
                    "errors",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="Number of errors"
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(blank=True, null=True, verbose_name="Ends on"),
                ),
                (
                    "duration",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Duration (seconds)"
                    ),
                ),
                (
                    "launch_options",
                    models.CharField(
                        blank=True,
                        max_length=2000,
                        null=True,
                        verbose_name="Command launch options",
                    ),
                ),
                (
                    "coherence_test_passed",
                    models.BooleanField(
                        default=False, verbose_name="Coherence test passed"
                    ),
                ),
            ],
            options={
                "verbose_name": "Import apidae to kaptravel log",
                "verbose_name_plural": "Import apidae to kaptravel logs",
            },
        ),
        migrations.CreateModel(
            name="ImportsApidaeSettings",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(auto_now_add=True, verbose_name="Created on"),
                ),
                (
                    "modified_on",
                    models.DateTimeField(auto_now=True, verbose_name="Modified on"),
                ),
                (
                    "projetId",
                    models.IntegerField(verbose_name="APIDAE website identifier"),
                ),
                (
                    "statut",
                    models.CharField(
                        choices=[
                            ("SUCCESS", "Export Apidae generated"),
                            ("ERROR", "Export Apidae failed"),
                            ("DOWNLOAD_ERROR", "Downloading Error"),
                            ("EXTRACTION_ERROR", "Extraction Error"),
                            ("IMPORT_ERROR", "Import Error"),
                            ("NOTIFICATION_ERROR", "Apidae notification Error"),
                            ("TERMINATED", "Export integrated"),
                        ],
                        max_length=500,
                        verbose_name="Export statut",
                    ),
                ),
                (
                    "ponctuel",
                    models.BooleanField(default=False, verbose_name="Ponctuel"),
                ),
                (
                    "reinitialisation",
                    models.BooleanField(default=False, verbose_name="Reinitialisation"),
                ),
                (
                    "urlRecuperation",
                    models.CharField(
                        blank=True,
                        max_length=2000,
                        null=True,
                        verbose_name="URL de récupération de l'export",
                    ),
                ),
                (
                    "urlConfirmation",
                    models.CharField(
                        blank=True,
                        max_length=2000,
                        null=True,
                        verbose_name="URL de confirmation de prise en compte",
                    ),
                ),
                (
                    "file_downloaded",
                    models.BooleanField(
                        default=False, verbose_name="File has been downloaded"
                    ),
                ),
                (
                    "file_extracted",
                    models.BooleanField(
                        default=False, verbose_name="File has been extracted"
                    ),
                ),
                (
                    "import_launched",
                    models.BooleanField(
                        default=False, verbose_name="Import has been launched"
                    ),
                ),
                (
                    "import_complete",
                    models.BooleanField(
                        default=False, verbose_name="Import has been completed"
                    ),
                ),
            ],
            options={"abstract": False},
        ),
        migrations.CreateModel(
            name="LinkType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "link_type",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Link type"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Locality",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="Name")),
                (
                    "code",
                    models.CharField(
                        db_index=True, max_length=500, verbose_name="code"
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        db_index=True, max_length=500, verbose_name="Zip code"
                    ),
                ),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_apidae.BaseElement",
                        verbose_name="Country",
                    ),
                ),
            ],
            options={"verbose_name": "Locality", "verbose_name_plural": "Localities"},
        ),
        migrations.CreateModel(
            name="MeetingRoom",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "max_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Max capacity"
                    ),
                ),
                (
                    "surface_area",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Surface area"
                    ),
                ),
                (
                    "height",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Height"
                    ),
                ),
                (
                    "natural_lighting",
                    models.BooleanField(default=False, verbose_name="Natural lighting"),
                ),
                (
                    "minimum_price",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Minimum price"
                    ),
                ),
                (
                    "maximum_price",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Maximum price"
                    ),
                ),
                (
                    "day_minimum_price",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Day minimum price"
                    ),
                ),
                (
                    "day_maximum_price",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Day maximum price"
                    ),
                ),
                (
                    "resident_minimum_price",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Resident minimum price"
                    ),
                ),
                (
                    "resident_maximum_price",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Resident maximum price"
                    ),
                ),
            ],
            bases=(models.Model, kapt_apidae.models_methods.MeetingRoomMethods),
        ),
        migrations.CreateModel(
            name="MonthDayOpeningChoices",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "monthday",
                    models.CharField(
                        choices=[
                            ("D_1ER_LUNDI", "First Lundi"),
                            ("D_2EME_LUNDI", "Second Lundi"),
                            ("D_3EME_LUNDI", "Third Lundi"),
                            ("D_4EME_LUNDI", "Fourth Lundi"),
                            ("D_DERNIER_LUNDI", "Last Lundi"),
                            ("D_1ER_MARDI", "First Mardi"),
                            ("D_2EME_MARDI", "Second Mardi"),
                            ("D_3EME_MARDI", "Third Mardi"),
                            ("D_4EME_MARDI", "Fourth Mardi"),
                            ("D_DERNIER_MARDI", "Last Mardi"),
                            ("D_1ER_MERCREDI", "First Mercredi"),
                            ("D_2EME_MERCREDI", "Second Mercredi"),
                            ("D_3EME_MERCREDI", "Third Mercredi"),
                            ("D_4EME_MERCREDI", "Fourth Mercredi"),
                            ("D_DERNIER_MERCREDI", "Last Mercredi"),
                            ("D_1ER_JEUDI", "First Jeudi"),
                            ("D_2EME_JEUDI", "Second Jeudi"),
                            ("D_3EME_JEUDI", "Third Jeudi"),
                            ("D_4EME_JEUDI", "Fourth Jeudi"),
                            ("D_DERNIER_JEUDI", "Last Jeudi"),
                            ("D_1ER_VENDREDI", "First Vendredi"),
                            ("D_2EME_VENDREDI", "Second Vendredi"),
                            ("D_3EME_VENDREDI", "Third Vendredi"),
                            ("D_4EME_VENDREDI", "Fourth Vendredi"),
                            ("D_DERNIER_VENDREDI", "Last Vendredi"),
                            ("D_1ER_SAMEDI", "First Samedi"),
                            ("D_2EME_SAMEDI", "Second Samedi"),
                            ("D_3EME_SAMEDI", "Third Samedi"),
                            ("D_4EME_SAMEDI", "Fourth Samedi"),
                            ("D_DERNIER_SAMEDI", "Last Samedi"),
                            ("D_1ER_DIMANCHE", "First Dimanche"),
                            ("D_2EME_DIMANCHE", "Second Dimanche"),
                            ("D_3EME_DIMANCHE", "Third Dimanche"),
                            ("D_4EME_DIMANCHE", "Fourth Dimanche"),
                            ("D_DERNIER_DIMANCHE", "Last Dimanche"),
                        ],
                        max_length=500,
                        verbose_name="Opening days",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Multimedia",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("IMAGE", "Picture"),
                            ("DOCUMENT", "Document"),
                            ("SON", "Sound"),
                            ("VIDEO", "Video"),
                            ("PLAN", "Plan"),
                            ("LOGO", "Logo"),
                            ("WEBCAM", "Webcam"),
                            ("VISITE_VIRTUELLE", "Virtual tour"),
                            ("BROCHURE_VIRTUELLE", "Virtual booklet"),
                            ("BON_PLAN", "Good deal"),
                            ("CHAINE_YOUTUBE", "Youtube channel"),
                            ("CHAINE_DAILYMOTION", "Dailymotion channel"),
                            ("GALERIE_FLICKR", "Flickr gallery"),
                            ("WEBCAM_360", "360 webcam"),
                            ("APPLICATION_IPHONE", "iPhone application"),
                            ("APPLICATION_IPAD", "iPad application"),
                            ("APPLICATION_ANDROID", "Android application"),
                            (
                                "APPLICATION_ANDROID_TABLETTE",
                                "Android tablet application",
                            ),
                        ],
                        max_length=500,
                        verbose_name="Type",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True, max_length=1000, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "name_fr",
                    models.CharField(
                        blank=True, max_length=1000, null=True, verbose_name="Name"
                    ),
                ),
                (
                    "legend",
                    models.CharField(
                        blank=True, max_length=2000, null=True, verbose_name="Legend"
                    ),
                ),
                (
                    "legend_fr",
                    models.CharField(
                        blank=True, max_length=2000, null=True, verbose_name="Legend"
                    ),
                ),
                (
                    "copyright",
                    models.CharField(
                        blank=True, max_length=1000, null=True, verbose_name="Copyright"
                    ),
                ),
                (
                    "copyright_fr",
                    models.CharField(
                        blank=True, max_length=1000, null=True, verbose_name="Copyright"
                    ),
                ),
                (
                    "remark",
                    models.CharField(
                        blank=True, max_length=1000, null=True, verbose_name="Remark"
                    ),
                ),
                (
                    "remark_fr",
                    models.CharField(
                        blank=True, max_length=1000, null=True, verbose_name="Remark"
                    ),
                ),
            ],
            options={
                "verbose_name": "Multimedia",
                "verbose_name_plural": "Multimedias",
            },
            bases=(models.Model, kapt_apidae.models_methods.MultimediaMethods),
        ),
        migrations.CreateModel(
            name="MultimediaFile",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("locale", models.CharField(max_length=500, verbose_name="Language")),
                (
                    "url",
                    models.URLField(
                        blank=True, max_length=2048, null=True, verbose_name="Url"
                    ),
                ),
                (
                    "list_url",
                    models.URLField(
                        blank=True,
                        max_length=2048,
                        null=True,
                        verbose_name="Url for list display",
                    ),
                ),
                (
                    "details_url",
                    models.URLField(
                        blank=True,
                        max_length=2048,
                        null=True,
                        verbose_name="Url for details display",
                    ),
                ),
                (
                    "slideshow_url",
                    models.URLField(
                        blank=True,
                        max_length=2048,
                        null=True,
                        verbose_name="Url for slide show display",
                    ),
                ),
                (
                    "extension",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Extension"
                    ),
                ),
                (
                    "file_name",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="File name"
                    ),
                ),
                (
                    "size",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="File size"
                    ),
                ),
                (
                    "height",
                    models.IntegerField(blank=True, null=True, verbose_name="Hauteur"),
                ),
                (
                    "width",
                    models.IntegerField(blank=True, null=True, verbose_name="Largeur"),
                ),
                (
                    "modification_date",
                    models.DateTimeField(verbose_name="Last modified on"),
                ),
            ],
            options={
                "verbose_name": "Multimedia file",
                "verbose_name_plural": "Multimedia files",
            },
            bases=(models.Model, kapt_apidae.models_methods.MultimediaFileMethods),
        ),
        migrations.CreateModel(
            name="OpeningPeriod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("beginning", models.DateField(verbose_name="Beginning date")),
                ("ending", models.DateField(verbose_name="Ending date")),
                (
                    "label",
                    models.CharField(max_length=500, null=True, verbose_name="Label"),
                ),
                (
                    "label_fr",
                    models.CharField(max_length=500, null=True, verbose_name="Label"),
                ),
                (
                    "further_hourly_informations",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Further hourly informations",
                    ),
                ),
                (
                    "further_hourly_informations_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Further hourly informations",
                    ),
                ),
                (
                    "opening_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Opening time"
                    ),
                ),
                (
                    "closing_time",
                    models.TimeField(
                        blank=True, null=True, verbose_name="Closing time"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            (
                                "OUVERTURE_SAUF",
                                "Opened everyday on this period except on the days specified on DailyOpening",
                            ),
                            (
                                "OUVERTURE_TOUS_LES_JOURS",
                                "Opened everyday on this period",
                            ),
                            (
                                "OUVERTURE_SEMAINE",
                                "Opened everyday specified on DailyOpening",
                            ),
                            (
                                "OUVERTURE_MOIS",
                                "Opened everyday specified on MonthlyOpening",
                            ),
                        ],
                        max_length=500,
                        verbose_name="Period type",
                    ),
                ),
                (
                    "every_years",
                    models.BooleanField(
                        default=False, verbose_name="Period is repeated every years"
                    ),
                ),
                (
                    "daily_opening",
                    models.ManyToManyField(
                        blank=True,
                        to="kapt_apidae.DayOpeningChoices",
                        verbose_name="Daily opening days",
                    ),
                ),
                (
                    "exceptional_opening",
                    models.ManyToManyField(
                        blank=True,
                        to="kapt_apidae.ExceptionalOpeningDate",
                        verbose_name="Exceptional opening days",
                    ),
                ),
                (
                    "monthly_opening",
                    models.ManyToManyField(
                        blank=True,
                        to="kapt_apidae.MonthDayOpeningChoices",
                        verbose_name="Monthly opening days",
                    ),
                ),
            ],
            bases=(models.Model, kapt_apidae.models_methods.OpeningPeriodMethods),
        ),
        migrations.CreateModel(
            name="PriceDescription",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "minimum_price",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Minimum price"
                    ),
                ),
                (
                    "maximum_price",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Maximum price"
                    ),
                ),
                (
                    "additionnal_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Additional description"
                    ),
                ),
                (
                    "additionnal_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Additional description"
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_apidae.BaseElement",
                        verbose_name="Price type",
                    ),
                ),
            ],
            bases=(models.Model, kapt_apidae.models_methods.PriceDescriptionMethods),
        ),
        migrations.CreateModel(
            name="PricingPeriod",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("beginning", models.DateField(verbose_name="Beginning date")),
                ("ending", models.DateField(verbose_name="Ending date")),
                (
                    "prices_description",
                    models.ManyToManyField(
                        blank=True,
                        related_name="pricing_periods",
                        to="kapt_apidae.PriceDescription",
                        verbose_name="Prices description",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_apidae.BaseElement",
                        verbose_name="Pricing type",
                    ),
                ),
            ],
            bases=(models.Model, kapt_apidae.models_methods.PricingPeriodMethods),
        ),
        migrations.CreateModel(
            name="RoomLayout",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Capacity"
                    ),
                ),
                (
                    "layout",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_apidae.BaseElement",
                        verbose_name="Room layout",
                    ),
                ),
            ],
            bases=(models.Model, kapt_apidae.models_methods.RoomLayoutMethods),
        ),
        migrations.CreateModel(
            name="Selection",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=500, verbose_name="Label")),
            ],
            options={"verbose_name": "Selection", "verbose_name_plural": "Selections"},
            bases=(models.Model, kapt_apidae.models_methods.SelectionMethods),
        ),
        migrations.CreateModel(
            name="TouristicObject",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "aspect",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        choices=[
                            (1, "HIVER"),
                            (2, "ETE"),
                            (3, "HANDICAP"),
                            (4, "TOURISME_AFFAIRES"),
                            (5, "GROUPES"),
                            (6, "PRESTATAIRE_ACTIVITES"),
                        ],
                        null=True,
                        verbose_name="Aspect",
                    ),
                ),
                (
                    "apidae_identifier",
                    models.IntegerField(verbose_name="Apidae Identifier"),
                ),
                ("label", models.CharField(max_length=500, verbose_name="Label")),
                (
                    "label_fr",
                    models.CharField(max_length=500, null=True, verbose_name="Label"),
                ),
                (
                    "publication_state",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PUBLISHED", "Published"),
                            ("HIDDEN", "Hidden"),
                            ("DELETED", "Deleted"),
                        ],
                        max_length=500,
                        null=True,
                        verbose_name="Publication state",
                    ),
                ),
                (
                    "is_linked_object",
                    models.BooleanField(
                        default=False, verbose_name="Is a linked object"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Creation date"
                    ),
                ),
                (
                    "last_update",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last update"
                    ),
                ),
                (
                    "siret",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="SIRET"
                    ),
                ),
                (
                    "ape_naf",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="APE or NAF code",
                    ),
                ),
                (
                    "rcs",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="RCS code"
                    ),
                ),
                (
                    "license_authorization_number",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="License authorization number",
                    ),
                ),
                (
                    "short_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Short description"
                    ),
                ),
                (
                    "short_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Short description"
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "description_fr",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
                (
                    "good_deal",
                    models.TextField(blank=True, null=True, verbose_name="Good deal"),
                ),
                (
                    "good_deal_fr",
                    models.TextField(blank=True, null=True, verbose_name="Good deal"),
                ),
                (
                    "address_1",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Address"
                    ),
                ),
                (
                    "address_2",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Address (second line)",
                    ),
                ),
                (
                    "address_3",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Address (third line)",
                    ),
                ),
                (
                    "zip_code",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        max_length=500,
                        null=True,
                        verbose_name="Zip code",
                    ),
                ),
                (
                    "distribution_office",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Distribution office",
                    ),
                ),
                (
                    "cedex",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Cedex"
                    ),
                ),
                (
                    "state",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="State"
                    ),
                ),
                (
                    "landmark",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Landmark"
                    ),
                ),
                (
                    "place",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Place"
                    ),
                ),
                (
                    "place_name",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Place name"
                    ),
                ),
                (
                    "altitude",
                    models.IntegerField(
                        blank=True, db_index=True, null=True, verbose_name="Altitude"
                    ),
                ),
                (
                    "max_altitude",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Maximum altitude",
                    ),
                ),
                (
                    "min_altitude",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Minimum altitude",
                    ),
                ),
                (
                    "max_altitude_accommodation",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Maximum altitude for the accommodation",
                    ),
                ),
                (
                    "min_altitude_accommodation",
                    models.IntegerField(
                        blank=True,
                        db_index=True,
                        null=True,
                        verbose_name="Minimum altitude for the accommodation",
                    ),
                ),
                (
                    "access_means",
                    models.TextField(
                        blank=True, null=True, verbose_name="Access means"
                    ),
                ),
                (
                    "access_means_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Access means"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=25,
                        max_digits=27,
                        null=True,
                        verbose_name="Latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        db_index=True,
                        decimal_places=24,
                        max_digits=27,
                        null=True,
                        verbose_name="Longitude",
                    ),
                ),
                (
                    "links_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Links description"
                    ),
                ),
                (
                    "links_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Links description"
                    ),
                ),
                (
                    "further_welcoming_informations",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Further welcoming informations",
                    ),
                ),
                (
                    "further_welcoming_informations_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Further welcoming informations",
                    ),
                ),
                (
                    "group_min_size",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Group minimum size"
                    ),
                ),
                (
                    "group_max_size",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Group maximum size"
                    ),
                ),
                (
                    "minimum_age",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Minimum age"
                    ),
                ),
                (
                    "maximum_age",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Maximum age"
                    ),
                ),
                (
                    "minimum_age_unit",
                    models.CharField(
                        blank=True,
                        choices=[("MOIS", "Months"), ("ANNEE", "Years")],
                        max_length=500,
                        null=True,
                        verbose_name="Minimum age unit",
                    ),
                ),
                (
                    "maximum_age_unit",
                    models.CharField(
                        blank=True,
                        choices=[("MOIS", "Months"), ("ANNEE", "Years")],
                        max_length=500,
                        null=True,
                        verbose_name="Maximum age unit",
                    ),
                ),
                (
                    "opening_textual_description",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Opening textual description",
                    ),
                ),
                (
                    "opening_textual_description_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Opening textual description",
                    ),
                ),
                (
                    "open_all_year",
                    models.CharField(
                        blank=True,
                        choices=[("OUVERT_TOUTE_L_ANNEE", "Open all year")],
                        max_length=500,
                        null=True,
                        verbose_name="Open all year",
                    ),
                ),
                (
                    "temporarily_closed",
                    models.CharField(
                        blank=True,
                        choices=[("FERME_TEMPORAIREMENT", "Temporarily closed")],
                        max_length=500,
                        null=True,
                        verbose_name="Temporarily closed",
                    ),
                ),
                ("is_free", models.BooleanField(default=True, verbose_name="Is free")),
                (
                    "pricing_textual_description",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Pricing textual description",
                    ),
                ),
                (
                    "pricing_textual_description_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Pricing textual description",
                    ),
                ),
                (
                    "additional_pricing_description",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Additional pricing description",
                    ),
                ),
                (
                    "additional_booking_informations",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Additional booking informations",
                    ),
                ),
                (
                    "additional_booking_informations_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Additional booking informations",
                    ),
                ),
                (
                    "business_tourism_provided",
                    models.BooleanField(
                        default=False, verbose_name="Business tourism provided"
                    ),
                ),
                (
                    "equipped_meeting_rooms_quantity",
                    models.SmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Equipped meeting rooms quantity",
                    ),
                ),
                (
                    "business_tourism_max_capacity",
                    models.SmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Business tourism max capacity",
                    ),
                ),
                (
                    "adjustable_rooms_quantity",
                    models.SmallIntegerField(
                        blank=True, null=True, verbose_name="Adjustable rooms quantity"
                    ),
                ),
                (
                    "is_visitable",
                    models.BooleanField(default=False, verbose_name="Is visitable ?"),
                ),
                (
                    "group_visit_average_time",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Group visit average time"
                    ),
                ),
                (
                    "individual_visit_average_time",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Individual visit average time",
                    ),
                ),
                (
                    "additional_visit_informations",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Additional visit informations",
                    ),
                ),
                (
                    "additional_visit_informations_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Additional visit informations",
                    ),
                ),
                (
                    "last_import",
                    models.DateTimeField(verbose_name="Last import in kapt_apidae"),
                ),
                (
                    "meta_data",
                    models.TextField(blank=True, null=True, verbose_name="Meta data"),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(models.Model, kapt_apidae.models_methods.TouristicObjectMethods),
        ),
        migrations.CreateModel(
            name="TouristicObjectOwner",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=500, null=True, verbose_name="Name"),
                ),
                (
                    "department",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Department"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Creation date"
                    ),
                ),
                (
                    "last_update",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Last update"
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kapt_apidae.BaseElement",
                        verbose_name="Owner type",
                    ),
                ),
            ],
            options={
                "verbose_name": "Object owner",
                "verbose_name_plural": "Object owners",
            },
            bases=(
                models.Model,
                kapt_apidae.models_methods.TouristicObjectOwnerMethods,
            ),
        ),
        migrations.CreateModel(
            name="VariableAttribute",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("label", models.CharField(max_length=500, verbose_name="Label")),
                (
                    "description",
                    models.TextField(blank=True, null=True, verbose_name="Description"),
                ),
            ],
            options={
                "verbose_name": "Variable attribute",
                "verbose_name_plural": "Variable attributes",
            },
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "session_duration",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Session duration"
                    ),
                ),
                (
                    "frequency",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Frequency"
                    ),
                ),
                (
                    "recipient",
                    models.PositiveIntegerField(
                        blank=True, null=True, verbose_name="Recipient"
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.ActivityMethods,
            ),
        ),
        migrations.CreateModel(
            name="AllInclusiveTrip",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "days_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Days quantity"
                    ),
                ),
                (
                    "nights_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Nights quantity"
                    ),
                ),
                (
                    "location_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Location description"
                    ),
                ),
                (
                    "location_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Location description"
                    ),
                ),
                (
                    "accommodation_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Accommodation description"
                    ),
                ),
                (
                    "accommodation_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Accommodation description"
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.AllInclusiveTripMethods,
            ),
        ),
        migrations.CreateModel(
            name="Area",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "is_destination",
                    models.NullBooleanField(verbose_name="Is destination"),
                ),
                (
                    "shops_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Number of shops"
                    ),
                ),
                (
                    "restaurants_quantity",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Number of restaurants"
                    ),
                ),
                (
                    "short_description_winter",
                    models.TextField(
                        blank=True, null=True, verbose_name="Short description winter"
                    ),
                ),
                (
                    "short_description_winter_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Short description winter"
                    ),
                ),
                (
                    "description_winter",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description winter"
                    ),
                ),
                (
                    "description_winter_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Description winter"
                    ),
                ),
                (
                    "snowshoes_trail_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Snowshoes trail quantity"
                    ),
                ),
                (
                    "snowshoes_trail_kilometers",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Snowshoes trail kilometers"
                    ),
                ),
                (
                    "pedestrian_route_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Pedestrian routes quantity"
                    ),
                ),
                (
                    "pedestrian_route_kilometers",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Pedestrian routes kilometers",
                    ),
                ),
                (
                    "minimum_age_ski_teaching",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Minimum age for ski teaching",
                    ),
                ),
                (
                    "minimum_age_ski_teaching_fr",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Minimum age for ski teaching",
                    ),
                ),
                (
                    "kindergarten_age_groups",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Kindergarten age groups",
                    ),
                ),
                (
                    "kindergarten_age_groups_fr",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Kindergarten age groups",
                    ),
                ),
                (
                    "camper_van_car_park",
                    models.NullBooleanField(verbose_name="Camper van car park"),
                ),
                (
                    "campsite_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Campsite quantity"
                    ),
                ),
                (
                    "tourism_residences_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Tourism residences quantity",
                    ),
                ),
                (
                    "holiday_resorts_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Holiday resorts quantity"
                    ),
                ),
                (
                    "snow_caravans_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Snow caravans quantity"
                    ),
                ),
                (
                    "ranked_resting_places_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Ranked resting places quantity",
                    ),
                ),
                (
                    "non_classified_hotels_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Non-classified hotels quantity",
                    ),
                ),
                (
                    "no_stars_hotels_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="No stars hotels quantity"
                    ),
                ),
                (
                    "one_star_hotels_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="One star hotels quantity"
                    ),
                ),
                (
                    "two_star_hotels_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Two star hotels quantity"
                    ),
                ),
                (
                    "three_star_hotels_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Three star hotels quantity"
                    ),
                ),
                (
                    "four_star_hotels_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Four star hotels quantity"
                    ),
                ),
                (
                    "five_star_hotels_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Five star hotels quantity"
                    ),
                ),
                (
                    "four_star_luxury_hotels_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Four star luxury hotels quantity",
                    ),
                ),
                (
                    "resting_places_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Resting places description"
                    ),
                ),
                (
                    "resting_places_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Resting places description"
                    ),
                ),
                (
                    "accommodations_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Accommodations description"
                    ),
                ),
                (
                    "accommodations_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Accommodations description"
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.AreaMethods,
            ),
        ),
        migrations.CreateModel(
            name="BusinessAndService",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                )
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.BusinessAndServiceMethods,
            ),
        ),
        migrations.CreateModel(
            name="CelebrationAndManifestation",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                )
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.CelebrationAndManifestationMethods,
            ),
        ),
        migrations.CreateModel(
            name="CulturalHeritage",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                )
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.CulturalHeritageMethods,
            ),
        ),
        migrations.CreateModel(
            name="Equipment",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "difference_in_level",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Level difference"
                    ),
                ),
                (
                    "distance",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Distance"
                    ),
                ),
                (
                    "daily_duration",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Daily duration"
                    ),
                ),
                (
                    "mobility_duration",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Mobility duration"
                    ),
                ),
                (
                    "itinerary_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLER_ITINERANCE", "One way"),
                            ("ALLER_RETOUR", "Round-trip"),
                            ("BOUCLE", "Loop"),
                        ],
                        max_length=500,
                        null=True,
                        verbose_name="Itinerary type",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.EquipmentMethods,
            ),
        ),
        migrations.CreateModel(
            name="GroupAccommodation",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "ranking_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Ranking date"
                    ),
                ),
                (
                    "ranking_identifier",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Ranking identifier",
                    ),
                ),
                (
                    "naturism",
                    models.BooleanField(default=False, verbose_name="Naturism"),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Capacity"
                    ),
                ),
                (
                    "youth_and_sports_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Youth and sports capacity"
                    ),
                ),
                (
                    "national_education_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="National education capacity",
                    ),
                ),
                (
                    "safety_committee_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Safety committee capacity"
                    ),
                ),
                (
                    "middle_size_dormitory_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Middle size dormitory capacity",
                    ),
                ),
                (
                    "king_size_dormitory_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="King size dormitory capacity",
                    ),
                ),
                (
                    "reduced_mobility_accommodations_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Reduced mobility accommodations quantity",
                    ),
                ),
                (
                    "one_person_accommodations_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="One person accommodations quantity",
                    ),
                ),
                (
                    "two_persons_accommodations_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Two persons accommodations quantity",
                    ),
                ),
                (
                    "three_persons_accommodations_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Three persons accommodations quantity",
                    ),
                ),
                (
                    "four_persons_accommodations_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Four persons accommodations quantity",
                    ),
                ),
                (
                    "five_persons_accommodations_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Five persons accommodations quantity",
                    ),
                ),
                (
                    "six_persons_accommodations_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Six persons accommodations quantity",
                    ),
                ),
                (
                    "more_than_six_persons_accommodations_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="More than six persons accommodations quantity",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.GroupAccommodationMethods,
            ),
        ),
        migrations.CreateModel(
            name="HotelAccommodation",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "ranking_identifier",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Ranking identifier",
                    ),
                ),
                (
                    "ranking_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Ranking date"
                    ),
                ),
                (
                    "ranked_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Ranked rooms quantity"
                    ),
                ),
                (
                    "hotel_declared_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Hotel declared rooms quantity",
                    ),
                ),
                (
                    "max_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Max capacity"
                    ),
                ),
                (
                    "single_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Single rooms quantity"
                    ),
                ),
                (
                    "double_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Double rooms quantity"
                    ),
                ),
                (
                    "suite_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Suite rooms quantity"
                    ),
                ),
                (
                    "reduced_mobility_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Reduced mobility rooms quantity",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.HotelAccommodationMethods,
            ),
        ),
        migrations.CreateModel(
            name="NaturalHeritage",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "marked_trail",
                    models.BooleanField(default=False, verbose_name="Marked trail"),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.NaturalHeritageMethods,
            ),
        ),
        migrations.CreateModel(
            name="OutDoorHotelAccommodation",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "ranking_identifier",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Ranking identifier",
                    ),
                ),
                (
                    "ranking_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Ranking date"
                    ),
                ),
                (
                    "surface_area",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Surface area"
                    ),
                ),
                (
                    "naturism",
                    models.BooleanField(default=False, verbose_name="Naturism"),
                ),
                (
                    "snow_caravans",
                    models.BooleanField(
                        default=False, verbose_name="Caravaneige/snow caravans"
                    ),
                ),
                (
                    "ranked_campingplot_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Ranked campingplot quantity",
                    ),
                ),
                (
                    "passing_campingplot_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Passing campingplot quantity",
                    ),
                ),
                (
                    "rental_passing_campingplot_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Rental passing campingplot quantity",
                    ),
                ),
                (
                    "naked_passing_campingplot_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Naked passing campingplot quantity",
                    ),
                ),
                (
                    "residential_campingplot_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Residential campingplot quantity",
                    ),
                ),
                (
                    "snow_caravans_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Snow caravans campingplot quantity",
                    ),
                ),
                (
                    "tents_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Tents campingplot quantity"
                    ),
                ),
                (
                    "caravans_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Caravans campingplot quantity",
                    ),
                ),
                (
                    "campervan_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Campervan quantity"
                    ),
                ),
                (
                    "mobilhome_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Mobilehome quantity"
                    ),
                ),
                (
                    "tents_rental_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Tents rental quantity"
                    ),
                ),
                (
                    "bungalow_rental_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Bungalow rental quantity"
                    ),
                ),
                (
                    "caravans_rental_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Caravans rental quantity"
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.OutDoorHotelAccommodationMethods,
            ),
        ),
        migrations.CreateModel(
            name="RentalAccommodation",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "last_visit_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Last visit date"
                    ),
                ),
                (
                    "ranking_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Ranking date"
                    ),
                ),
                (
                    "ranking_identifier",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Ranking identifier",
                    ),
                ),
                (
                    "label_authorization_identifier",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Label authorization identifier",
                    ),
                ),
                (
                    "naturism",
                    models.BooleanField(default=False, verbose_name="Naturism"),
                ),
                (
                    "capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Accommodation capacity"
                    ),
                ),
                (
                    "max_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Max capacity"
                    ),
                ),
                (
                    "double_beds_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Double beds quantity"
                    ),
                ),
                (
                    "single_beds_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Single beds quantity"
                    ),
                ),
                (
                    "surface_area",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Surface area"
                    ),
                ),
                (
                    "rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Rooms quantity"
                    ),
                ),
                (
                    "bedrooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Bedrooms quantity"
                    ),
                ),
                (
                    "floors_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Floors quantity"
                    ),
                ),
                (
                    "floor_number",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Floor number",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.RentalAccommodationMethods,
            ),
        ),
        migrations.CreateModel(
            name="Restaurant",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "chef_name",
                    models.CharField(
                        blank=True, max_length=1000, null=True, verbose_name="Chef name"
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        blank=True,
                        max_length=1000,
                        null=True,
                        verbose_name="Brand name",
                    ),
                ),
                (
                    "rooms_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Rooms description"
                    ),
                ),
                (
                    "rooms_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Rooms description"
                    ),
                ),
                (
                    "rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Rooms quantity"
                    ),
                ),
                (
                    "air_conditioned_rooms_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Air-conditioned rooms quantity",
                    ),
                ),
                (
                    "maximum_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Maximum capacity"
                    ),
                ),
                (
                    "patio_capacity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Patio capacity"
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.RestaurantMethods,
            ),
        ),
        migrations.CreateModel(
            name="SkiingArea",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "linked_domain_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Linked domain description"
                    ),
                ),
                (
                    "linked_domain_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Linked domain description"
                    ),
                ),
                (
                    "free_ski_pass_conditions",
                    models.TextField(
                        blank=True, null=True, verbose_name="Free ski pass conditions"
                    ),
                ),
                (
                    "free_ski_pass_conditions_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Free ski pass conditions"
                    ),
                ),
                (
                    "ski_pass_identifier",
                    models.TextField(
                        blank=True, null=True, verbose_name="Ski pass identifier"
                    ),
                ),
                (
                    "ski_pass_identifier_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Ski pass identifier"
                    ),
                ),
                (
                    "children_validity_conditions",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Children validity conditions",
                    ),
                ),
                (
                    "children_validity_conditions_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Children validity conditions",
                    ),
                ),
                (
                    "senior_validity_conditions",
                    models.TextField(
                        blank=True, null=True, verbose_name="Senior validity conditions"
                    ),
                ),
                (
                    "senior_validity_conditions_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="Senior validity conditions"
                    ),
                ),
                (
                    "artificial_snow",
                    models.BooleanField(default=False, verbose_name="Artificial snow"),
                ),
                (
                    "free_ski_lift",
                    models.BooleanField(default=False, verbose_name="Free ski lift"),
                ),
                (
                    "snow_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="Snow description"
                    ),
                ),
                (
                    "ski_trail_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Ski trail quantity"
                    ),
                ),
                (
                    "ski_trail_km",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Ski trail kilometers"
                    ),
                ),
                (
                    "green_trail_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Green ski trail quantity"
                    ),
                ),
                (
                    "green_trail_km",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Green ski trail kilometers"
                    ),
                ),
                (
                    "blue_trail_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Blue ski trail quantity"
                    ),
                ),
                (
                    "blue_trail_km",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Blue ski trail kilometers"
                    ),
                ),
                (
                    "red_trail_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Red ski trail quantity"
                    ),
                ),
                (
                    "red_trail_km",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Red ski trail kilometers"
                    ),
                ),
                (
                    "black_trail_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Black ski trail quantity"
                    ),
                ),
                (
                    "black_trail_km",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Black ski trail kilometers"
                    ),
                ),
                (
                    "skating_km",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Skating kilometers"
                    ),
                ),
                (
                    "aerial_lift_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Aerial lift quantity"
                    ),
                ),
                (
                    "platter_lift_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Platter lift quantity"
                    ),
                ),
                (
                    "chairlift_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Chairlift quantity"
                    ),
                ),
                (
                    "cable_car_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Cable car quantity"
                    ),
                ),
                (
                    "aerial_tramway_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Aerial tramway quantity"
                    ),
                ),
                (
                    "other_lift_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Other lift quantity"
                    ),
                ),
                (
                    "pedestrian_accessible_lift_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Pedestrian accessible lift quantity",
                    ),
                ),
                (
                    "handiski_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True, null=True, verbose_name="Handiski quantity"
                    ),
                ),
                (
                    "cross_country_skiing_quantity",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Cross-country skiing quantity",
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.SkiingAreaMethods,
            ),
        ),
        migrations.CreateModel(
            name="Structure",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                )
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.StructureMethods,
            ),
        ),
        migrations.CreateModel(
            name="Tasting",
            fields=[
                (
                    "touristicobject_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="kapt_apidae.TouristicObject",
                    ),
                ),
                (
                    "aoc",
                    models.BooleanField(
                        default=False, verbose_name="Appellation d'origine controlée"
                    ),
                ),
                (
                    "quality_charter_description",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Quality charter description",
                    ),
                ),
                (
                    "quality_charter_description_fr",
                    models.TextField(
                        blank=True,
                        null=True,
                        verbose_name="Quality charter description",
                    ),
                ),
                (
                    "aoc_description",
                    models.TextField(
                        blank=True, null=True, verbose_name="'AOC' description"
                    ),
                ),
                (
                    "aoc_description_fr",
                    models.TextField(
                        blank=True, null=True, verbose_name="'AOC' description"
                    ),
                ),
                (
                    "local_area",
                    models.CharField(
                        blank=True, max_length=500, null=True, verbose_name="Local area"
                    ),
                ),
            ],
            options={"abstract": False, "base_manager_name": "objects"},
            bases=(
                "kapt_apidae.touristicobject",
                kapt_apidae.models_methods.TastingMethods,
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="accessibility_informations",
            field=models.ManyToManyField(
                blank=True,
                related_name="accessibility_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Accessibility informations",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="accessibility_labels",
            field=models.ManyToManyField(
                blank=True,
                related_name="accessibility_labels_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Accessibility labels",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="accommodation_rooms",
            field=models.ManyToManyField(
                blank=True,
                related_name="accommodation_rooms_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Accommodation rooms",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="activities",
            field=models.ManyToManyField(
                blank=True,
                related_name="activity_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Activities",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="additional_opening_periods_description",
            field=models.ManyToManyField(
                blank=True,
                related_name="additional_opening_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Additional opening periods description",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="audio_guide_languages",
            field=models.ManyToManyField(
                blank=True,
                related_name="audio_guide_languages_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Audio-guide languages",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="booking_organisations",
            field=models.ManyToManyField(
                blank=True,
                to="kapt_apidae.BookingOrganisation",
                verbose_name="Booking organisations",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="business_tourism_rooms_equipments",
            field=models.ManyToManyField(
                blank=True,
                related_name="business_tourism_rooms_equipments_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Business tourism rooms equipments",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="business_tourism_rooms_equipped_for",
            field=models.ManyToManyField(
                blank=True,
                related_name="business_tourism_rooms_equipped_for_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Business tourism rooms equipped for",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="catering_rooms",
            field=models.ManyToManyField(
                blank=True,
                related_name="catering_rooms_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Catering rooms",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="comfort_services",
            field=models.ManyToManyField(
                blank=True,
                related_name="comfort_services_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Comfort services",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="curtural_activities",
            field=models.ManyToManyField(
                blank=True,
                related_name="cultural_activities_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Cultural activities",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="customers_type",
            field=models.ManyToManyField(
                blank=True,
                related_name="customers_type_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Customer type",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="documentation_languages",
            field=models.ManyToManyField(
                blank=True,
                related_name="documentation_languages_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Documentation languages",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="environment",
            field=models.ManyToManyField(
                blank=True,
                related_name="environment_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Environment of the object",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="equipments",
            field=models.ManyToManyField(
                blank=True,
                related_name="equipment_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Equipments",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="exceptional_closure_dates",
            field=models.ManyToManyField(
                blank=True,
                to="kapt_apidae.ClosurePeriod",
                verbose_name="Closure periods",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="external_communications",
            field=models.ManyToManyField(
                blank=True,
                related_name="external_communication_objects_set",
                to="kapt_apidae.CommunicationInfo",
                verbose_name="External communication",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="external_contacts",
            field=models.ManyToManyField(
                blank=True,
                related_name="external_contact_objects_set",
                to="kapt_apidae.Contact",
                verbose_name="External contacts",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="geographical_perimeter",
            field=models.ManyToManyField(
                blank=True,
                related_name="geographical_perimeter_objects_set",
                to="kapt_apidae.Locality",
                verbose_name="Localities in the geographical area of the object",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="group_visit_services",
            field=models.ManyToManyField(
                blank=True,
                related_name="group_visit_services_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Group visit services",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="individual_visit_services",
            field=models.ManyToManyField(
                blank=True,
                related_name="individual_visit_services_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Individual visit services",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="information_organisation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="informed_objects_set",
                to="kapt_apidae.TouristicObject",
                verbose_name="Information organisation",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="information_panels_languages",
            field=models.ManyToManyField(
                blank=True,
                related_name="information_panels_languages_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Audio-guide languages",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="internal_communications",
            field=models.ManyToManyField(
                blank=True,
                related_name="internal_communication_objects_set",
                to="kapt_apidae.CommunicationInfo",
                verbose_name="Internal communication",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="internal_contacts",
            field=models.ManyToManyField(
                blank=True,
                related_name="internal_contact_objects_set",
                to="kapt_apidae.Contact",
                verbose_name="Internal contacts",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="linked_objects",
            field=models.ManyToManyField(
                blank=True,
                related_name="linked_objects_set",
                through="kapt_apidae.LinkType",
                to="kapt_apidae.TouristicObject",
                verbose_name="Linked related objects",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="links",
            field=models.ManyToManyField(
                blank=True,
                related_name="httplink_objects_set",
                to="kapt_apidae.Multimedia",
                verbose_name="HTTP links",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="locality",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="locality_objects_set",
                to="kapt_apidae.Locality",
                verbose_name="Locality",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="management_organisation",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="managed_objects_set",
                to="kapt_apidae.TouristicObject",
                verbose_name="Management organisation",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="management_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="management_type_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Management type",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="meeting_rooms",
            field=models.ManyToManyField(
                blank=True,
                related_name="meeting_rooms_objects_set",
                to="kapt_apidae.MeetingRoom",
                verbose_name="Meeting rooms",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="offers_labels",
            field=models.ManyToManyField(
                blank=True,
                related_name="offers_labels_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Offers labels",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="opening_periods",
            field=models.ManyToManyField(
                blank=True,
                to="kapt_apidae.OpeningPeriod",
                verbose_name="Opening periods",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="opening_periods_description",
            field=models.ManyToManyField(
                blank=True,
                related_name="opening_periods_description_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Opening periods description",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="owner",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="kapt_apidae.TouristicObjectOwner",
                verbose_name="Object owner",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="payment_methods",
            field=models.ManyToManyField(
                blank=True,
                related_name="payment_methods_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Payment methods",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="pictures",
            field=models.ManyToManyField(
                blank=True,
                related_name="picture_objects_set",
                to="kapt_apidae.Multimedia",
                verbose_name="Pictures",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="polymorphic_ctype",
            field=models.ForeignKey(
                editable=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="polymorphic_kapt_apidae.touristicobject_set+",
                to="contenttypes.ContentType",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="pricing_periods",
            field=models.ManyToManyField(
                blank=True,
                related_name="pricing_periods_objects_set",
                to="kapt_apidae.PricingPeriod",
                verbose_name="Pricing periods",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="services",
            field=models.ManyToManyField(
                blank=True,
                related_name="service_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Services",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="spoken_languages",
            field=models.ManyToManyField(
                blank=True,
                related_name="spoken_languages_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Spoken languages",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="sports_activities",
            field=models.ManyToManyField(
                blank=True,
                related_name="sports_activities_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Sports activities",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="variable_attributes",
            field=models.ManyToManyField(
                blank=True,
                to="kapt_apidae.VariableAttribute",
                verbose_name="Variable attributes",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="visit_languages",
            field=models.ManyToManyField(
                blank=True,
                related_name="visit_languages_objects_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Visit languages",
            ),
        ),
        migrations.AddField(
            model_name="selection",
            name="touristic_objects",
            field=models.ManyToManyField(
                blank=True,
                to="kapt_apidae.TouristicObject",
                verbose_name="Touristic objects",
            ),
        ),
        migrations.AddField(
            model_name="multimedia",
            name="files",
            field=models.ManyToManyField(
                to="kapt_apidae.MultimediaFile", verbose_name="Multimedia files"
            ),
        ),
        migrations.AddField(
            model_name="meetingroom",
            name="layouts",
            field=models.ManyToManyField(
                blank=True,
                to="kapt_apidae.RoomLayout",
                verbose_name="Meeting rooms layouts",
            ),
        ),
        migrations.AddField(
            model_name="linktype",
            name="touristic_linked_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="touristic_linked_object",
                to="kapt_apidae.TouristicObject",
            ),
        ),
        migrations.AddField(
            model_name="linktype",
            name="touristic_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="touristic_object",
                to="kapt_apidae.TouristicObject",
            ),
        ),
        migrations.AddField(
            model_name="description",
            name="touristic_object",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="descriptions",
                to="kapt_apidae.TouristicObject",
                verbose_name="Touristic object",
            ),
        ),
        migrations.AddField(
            model_name="bookingorganisation",
            name="external_communications",
            field=models.ManyToManyField(
                blank=True,
                related_name="external_communication_booking_organisation_set",
                to="kapt_apidae.CommunicationInfo",
                verbose_name="External communication",
            ),
        ),
        migrations.AddField(
            model_name="bookingorganisation",
            name="internal_communications",
            field=models.ManyToManyField(
                blank=True,
                related_name="internal_communication_booking_organisation_set",
                to="kapt_apidae.CommunicationInfo",
                verbose_name="Internal communication",
            ),
        ),
        migrations.AddField(
            model_name="bookingorganisation",
            name="referent_structure",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_apidae.TouristicObject",
                verbose_name="Referent structure",
            ),
        ),
        migrations.AddField(
            model_name="bookingorganisation",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="baseelement",
            name="type",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="kapt_apidae.BaseElementType",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="agrementsgroupaccommodation",
            name="agrement",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="agrement_group_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Agrement",
            ),
        ),
        migrations.AddField(
            model_name="touristicobject",
            name="areas",
            field=models.ManyToManyField(
                blank=True,
                related_name="area_objects_set",
                to="kapt_apidae.Area",
                verbose_name="Areas",
            ),
        ),
        migrations.AddField(
            model_name="tasting",
            name="aop_aoc_igps",
            field=models.ManyToManyField(
                blank=True,
                related_name="aop_aoc_igps_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Aop aoc igps",
            ),
        ),
        migrations.AddField(
            model_name="tasting",
            name="goods_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="goods_types_tasting_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Goods types",
            ),
        ),
        migrations.AddField(
            model_name="tasting",
            name="operators_status",
            field=models.ManyToManyField(
                blank=True,
                related_name="operators_status_tasting_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Operators status",
            ),
        ),
        migrations.AddField(
            model_name="tasting",
            name="production_area",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="production_area_tasting_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Production area",
            ),
        ),
        migrations.AddField(
            model_name="tasting",
            name="production_region",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="production_region_tasting_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Production region",
            ),
        ),
        migrations.AddField(
            model_name="tasting",
            name="quality_charter",
            field=models.ManyToManyField(
                blank=True,
                related_name="quality_charter_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Quality charter",
            ),
        ),
        migrations.AddField(
            model_name="structure",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_structure_structures_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="skiingarea",
            name="classification",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="classification_skiing_area_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Classification",
            ),
        ),
        migrations.AddField(
            model_name="skiingarea",
            name="egps",
            field=models.ManyToManyField(
                blank=True,
                related_name="egps_skiingarea_set",
                to="kapt_apidae.TouristicObject",
                verbose_name="EGPS",
            ),
        ),
        migrations.AddField(
            model_name="skiingarea",
            name="parents_ski_resorts",
            field=models.ManyToManyField(
                blank=True,
                related_name="parents_ski_resorts_skiingarea_set",
                to="kapt_apidae.TouristicObject",
                verbose_name="Parents ski resorts",
            ),
        ),
        migrations.AddField(
            model_name="skiingarea",
            name="subarea_ski_resorts",
            field=models.ManyToManyField(
                blank=True,
                related_name="subarea_ski_resorts_skiingarea_set",
                to="kapt_apidae.TouristicObject",
                verbose_name="Subarea ski resorts",
            ),
        ),
        migrations.AddField(
            model_name="skiingarea",
            name="types",
            field=models.ManyToManyField(
                related_name="types_skiing_area_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Types",
            ),
        ),
        migrations.AddField(
            model_name="restaurant",
            name="categories",
            field=models.ManyToManyField(
                blank=True,
                related_name="categories_restaurant_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Categories",
            ),
        ),
        migrations.AddField(
            model_name="restaurant",
            name="chains",
            field=models.ManyToManyField(
                blank=True,
                related_name="chains_restaurant_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Chains",
            ),
        ),
        migrations.AddField(
            model_name="restaurant",
            name="guides_ranking",
            field=models.ManyToManyField(
                blank=True,
                related_name="guides_ranking_restaurant_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Guides ranking",
            ),
        ),
        migrations.AddField(
            model_name="restaurant",
            name="ranking",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="ranking_restaurant_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Ranking",
            ),
        ),
        migrations.AddField(
            model_name="restaurant",
            name="specialities",
            field=models.ManyToManyField(
                blank=True,
                related_name="specialities_restaurant_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Specialities",
            ),
        ),
        migrations.AddField(
            model_name="restaurant",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_restaurant_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="rentalaccommodation",
            name="habitation_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="habitation_types_rental_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Habitation types",
            ),
        ),
        migrations.AddField(
            model_name="rentalaccommodation",
            name="label_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="label_type_rental_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Label type",
            ),
        ),
        migrations.AddField(
            model_name="rentalaccommodation",
            name="labels",
            field=models.ManyToManyField(
                blank=True,
                related_name="labels_rental_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Labels",
            ),
        ),
        migrations.AddField(
            model_name="rentalaccommodation",
            name="prefectural_classification",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="prefectural_classification_rental_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Prefectural classification",
            ),
        ),
        migrations.AddField(
            model_name="rentalaccommodation",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_rental_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="outdoorhotelaccommodation",
            name="chains",
            field=models.ManyToManyField(
                blank=True,
                related_name="chains_outdoor_hotel_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Chains",
            ),
        ),
        migrations.AddField(
            model_name="outdoorhotelaccommodation",
            name="labels",
            field=models.ManyToManyField(
                blank=True,
                related_name="labels_outdoor_hotel_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Labels",
            ),
        ),
        migrations.AddField(
            model_name="outdoorhotelaccommodation",
            name="ranking",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="ranking_outdoor_hotel_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Ranking",
            ),
        ),
        migrations.AddField(
            model_name="outdoorhotelaccommodation",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_outdoor_hotel_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="naturalheritage",
            name="categories",
            field=models.ManyToManyField(
                blank=True,
                related_name="categories_natural_heritage_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Natural heriatage categories",
            ),
        ),
        migrations.AddField(
            model_name="naturalheritage",
            name="rankings",
            field=models.ManyToManyField(
                related_name="rankings_natural_heritage_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Rankings",
            ),
        ),
        migrations.AddField(
            model_name="hotelaccommodation",
            name="chains",
            field=models.ManyToManyField(
                blank=True,
                related_name="chains_hotel_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Chains",
            ),
        ),
        migrations.AddField(
            model_name="hotelaccommodation",
            name="labels",
            field=models.ManyToManyField(
                blank=True,
                related_name="labels_hotel_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Labels",
            ),
        ),
        migrations.AddField(
            model_name="hotelaccommodation",
            name="ranking",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="ranking_hotel_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Ranking",
            ),
        ),
        migrations.AddField(
            model_name="hotelaccommodation",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_hotel_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="groupaccommodation",
            name="accommodations_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="accommodations_types_group_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Accommodations types",
            ),
        ),
        migrations.AddField(
            model_name="groupaccommodation",
            name="agrements",
            field=models.ManyToManyField(
                blank=True,
                related_name="agrements_group_accommodation_set",
                through="kapt_apidae.AgrementsGroupAccommodation",
                to="kapt_apidae.BaseElement",
                verbose_name="Agrements",
            ),
        ),
        migrations.AddField(
            model_name="groupaccommodation",
            name="chain_and_label",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="chain_and_label_group_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Chain and label",
            ),
        ),
        migrations.AddField(
            model_name="groupaccommodation",
            name="housing_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="housing_types_group_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Housing types",
            ),
        ),
        migrations.AddField(
            model_name="groupaccommodation",
            name="labels",
            field=models.ManyToManyField(
                blank=True,
                related_name="labels_group_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Labels",
            ),
        ),
        migrations.AddField(
            model_name="groupaccommodation",
            name="prefectural_classification",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="prefectural_classification_group_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Prefectural classification",
            ),
        ),
        migrations.AddField(
            model_name="groupaccommodation",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_group_accommodation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="equipment",
            name="equipment_activities",
            field=models.ManyToManyField(
                related_name="activities_equipment_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Activities",
            ),
        ),
        migrations.AddField(
            model_name="equipment",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_equipment_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="culturalheritage",
            name="categories",
            field=models.ManyToManyField(
                blank=True,
                related_name="categories_cultural_heritage_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Cultural heriatage categories",
            ),
        ),
        migrations.AddField(
            model_name="culturalheritage",
            name="subjects",
            field=models.ManyToManyField(
                blank=True,
                related_name="subjects_cultural_heritage_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Cultural heritage subjects",
            ),
        ),
        migrations.AddField(
            model_name="culturalheritage",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_cultural_heritage_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="celebrationandmanifestation",
            name="categories",
            field=models.ManyToManyField(
                blank=True,
                related_name="categories_celebration_and_manifestation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Celebrations and Manifestations categories",
            ),
        ),
        migrations.AddField(
            model_name="celebrationandmanifestation",
            name="generic_type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="generic_type_celebration_and_manifestation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Celebrations and Manifestations generic type",
            ),
        ),
        migrations.AddField(
            model_name="celebrationandmanifestation",
            name="manifestation_reach",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="reach_celebration_and_manifestation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Manifestation reach/impact",
            ),
        ),
        migrations.AddField(
            model_name="celebrationandmanifestation",
            name="manifestation_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="manifestation_types_celebration_and_manifestation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Manifestation types",
            ),
        ),
        migrations.AddField(
            model_name="celebrationandmanifestation",
            name="subjects",
            field=models.ManyToManyField(
                blank=True,
                related_name="subjects_celebration_and_manifestation_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Celebrations and Manifestations subjects",
            ),
        ),
        migrations.AddField(
            model_name="businessandservice",
            name="detailed_types",
            field=models.ManyToManyField(
                related_name="detailed_types_business_and_service_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Detailed types",
            ),
        ),
        migrations.AddField(
            model_name="businessandservice",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_business_and_service_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="area",
            name="labels",
            field=models.ManyToManyField(
                related_name="labels_area_areas_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Labels",
            ),
        ),
        migrations.AddField(
            model_name="area",
            name="linked_ski_resorts",
            field=models.ManyToManyField(
                blank=True,
                related_name="linked_ski_resorts_areas_set",
                to="kapt_apidae.TouristicObject",
                verbose_name="Linked ski resorts",
            ),
        ),
        migrations.AddField(
            model_name="area",
            name="rankings",
            field=models.ManyToManyField(
                related_name="rankings_area_areas_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Rankings",
            ),
        ),
        migrations.AddField(
            model_name="area",
            name="ski_resorts_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="ski_resorts_types_areas_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Ski resorts types",
            ),
        ),
        migrations.AddField(
            model_name="area",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_area_areas_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
        migrations.AddField(
            model_name="allinclusivetrip",
            name="accommodations_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="accommodations_types_all_inclusive_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Accommodations types",
            ),
        ),
        migrations.AddField(
            model_name="allinclusivetrip",
            name="activities_category",
            field=models.ManyToManyField(
                blank=True,
                related_name="activity_category_all_inclusive_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Activities category",
            ),
        ),
        migrations.AddField(
            model_name="allinclusivetrip",
            name="transports_types",
            field=models.ManyToManyField(
                blank=True,
                related_name="transports_types_all_inclusive_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Transports types",
            ),
        ),
        migrations.AddField(
            model_name="agrementsgroupaccommodation",
            name="group_accommodation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="group_accommodation_group_accommodation_set",
                to="kapt_apidae.GroupAccommodation",
                verbose_name="Group accommodation",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="categories",
            field=models.ManyToManyField(
                related_name="categories_activity_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Categories",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="cultural_activities",
            field=models.ManyToManyField(
                related_name="cultural_activities_activity_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Cultural activities",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="durations",
            field=models.ManyToManyField(
                related_name="durations_activity_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Durations",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="sport_activities",
            field=models.ManyToManyField(
                related_name="sport_activities_activity_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Sport activities",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="type",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="type_activity_set",
                to="kapt_apidae.BaseElement",
                verbose_name="Type",
            ),
        ),
    ]
