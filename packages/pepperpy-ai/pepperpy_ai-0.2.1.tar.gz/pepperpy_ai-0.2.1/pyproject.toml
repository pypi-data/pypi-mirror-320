[tool.poetry]
name = "pepperpy-ai"
version = "0.2.1"
description = "A flexible AI library with modular provider support"
authors = ["Felipe Pimentel <felipe@pepperpy.ai>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "pepperpy_ai" }]
repository = "https://github.com/pimentel/pepperpy-ai"
documentation = "https://docs.pepperpy.ai"
keywords = ["ai", "llm", "nlp", "machine-learning"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

# Core dependencies - keep minimal
[tool.poetry.dependencies]
python = "^3.12"
aiohttp = "^3.11.11"
click = "^8.1.8"
requests = "^2.32.3"
python-dotenv = "^1.0.1"
# Development dependencies
pepperpy-core = "*"

# Optional dependencies for providers
openai = { version = "1.59.7", optional = true }
anthropic = { version = "0.42.0", optional = true }

# Optional dependencies for capabilities
numpy = { version = "2.2.1", optional = true }
sentence-transformers = { version = "3.3.1", optional = true }
async-generator = "^1.10"

[tool.poetry.group.dev.dependencies]
black = "^24.10.0"
isort = "^5.13.2"
ruff = "^0.9.1"
mypy = "^1.14.1"
bandit = "^1.8.2"
pre-commit = "^4.0.1"
pyclean = "^3.1.0"

# Test dependencies
[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-asyncio = "^0.25.2"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"

# Documentation dependencies
[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.49"

# Optional feature sets (extras)
[tool.poetry.extras]
openai = ["openai"]
anthropic = ["anthropic"]
rag = ["numpy", "sentence-transformers"]
all-providers = ["openai", "anthropic"]
all-capabilities = ["numpy", "sentence-transformers"]
complete = ["openai", "anthropic", "numpy", "sentence-transformers"]

[tool.poetry.scripts]
pepperpy = "pepperpy_ai.cli:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "B",   # flake8-bugbear
    "W",   # pycodestyle warnings
    "I",   # isort
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "RUF", # Ruff-specific rules
]
ignore = ["D107"] # Missing docstring in __init__
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "TID252", "ANN201"]
"pepperpy_ai/types.py" = ["D"]              # Ignore docstring requirements in types.py

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.isort]
known-first-party = ["pepperpy_ai"]
known-third-party = [
    "pepperpy_core",
    "openai",
    "anthropic",
    "numpy",
    "sentence_transformers",
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["pepperpy_ai.*"]
ignore_missing_imports = true


[tool.semantic_release]
version_variables = ["pyproject.toml:version"]
commit_author = "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
commit_parser = "angular"
branch = "main"
upload_to_pypi = true
build_command = "poetry build"
repository = "pepperpy-ai"
repository_owner = "felipepimentel"

[tool.semantic_release.remote]
type = "github"
token = "${GH_TOKEN}"

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
upload_to_repository = true

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.publish.pypi]
build = true
remove_dist = true
token = "${POETRY_PYPI_TOKEN_PYPI}"
