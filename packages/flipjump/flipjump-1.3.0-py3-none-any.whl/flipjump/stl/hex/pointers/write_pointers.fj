// ---------- Write Pointers


ns hex {
    //  Time Complexity: w(0.75@+5)  + 11@+25
    // Space Complexity: w(0.75@+29) + 11@+112
    //   like:  *ptr = src
    // src is a hex. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def write_hex ptr, src < hex.pointers.read_byte {
        .pointers.set_flip_and_jump_pointers ptr
        .pointers.read_byte_from_inners_ptrs
        .xor hex.pointers.read_byte, src
        .pointers.xor_hex_to_flip_ptr hex.pointers.read_byte
    }

    //  Time Complexity: w(0.75@+5)  + 15@+37
    // Space Complexity: w(0.75@+29) + 15@+176
    //   like:  *ptr = 0
    // ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def zero_ptr ptr < hex.pointers.read_byte {
        .pointers.set_flip_and_jump_pointers ptr
        .pointers.read_byte_from_inners_ptrs
        .pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
    }

    //  Time Complexity: w(0.75@+5)  + 17@+37
    // Space Complexity: w(0.75@+29) + 17@+200
    //   like:  *ptr = src[:2]
    // src is a hex[:2]. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def write_byte ptr, src < hex.pointers.read_byte {
        .pointers.set_flip_and_jump_pointers ptr
        .pointers.read_byte_from_inners_ptrs
        .xor 2, hex.pointers.read_byte, src
        .pointers.xor_byte_to_flip_ptr hex.pointers.read_byte
    }
}



// ---------- Multi Read Write Pointers


ns hex {
    //  Time Complexity: w(0.75@+5)  + 20@+39
    // Space Complexity: w(1.13@+32) + 16@+167
    //   like:  *ptr = src
    //          ptr++
    // src is a hex. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def write_hex_and_inc ptr, src {
        .write_hex ptr, src
        .ptr_inc ptr
    }

    //  Time Complexity:  n(w(0.75@+5)  + 20@+39)
    // Space Complexity:  n(w(1.13@+32) + 16@+167)
    //   like:  *ptr[:n] = src[:n]
    // src is a hex[:n]. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def write_hex n, ptr, src {
        rep(n, i) .write_hex_and_inc ptr, src + i*dw
        .ptr_sub ptr, n
    }

    //  Time Complexity: w(0.75@+5)  + 26@+51
    // Space Complexity: w(1.13@+32) + 22@+255
    //   like:  *ptr = src[:2]
    //          ptr++
    // src is a hex[:2]. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def write_byte_and_inc ptr, src {
        .write_byte ptr, src
        .ptr_inc ptr
    }

    //  Time Complexity: n(w(0.75@+5)  + 26@+51)
    // Space Complexity: n(w(1.13@+32) + 22@+255)
    //   like:  *ptr[:n] = src[:2n]
    // src is a hex[:2n]. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def write_byte n, ptr, src {
        rep(n, i) .write_byte_and_inc ptr, src + i*2*dw
        .ptr_sub ptr, n
    }
}
