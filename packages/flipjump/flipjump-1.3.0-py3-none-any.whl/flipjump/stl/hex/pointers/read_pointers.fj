// ---------- Read Pointers


ns hex {
    //  Time Complexity: w(0.75@+ 5) + 7@+13
    // Space Complexity: w(0.75@+29) + 7@+48
    //   like:  dst = *ptr
    // dst is a hex. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def read_hex dst, ptr {
        .zero dst
        .xor_hex_from_ptr dst, ptr
    }

    //  Time Complexity: w(0.75@+ 5) + 9@+13
    // Space Complexity: w(0.75@+29) + 9@+72
    //   like:  dst[:2] = *ptr
    // dst is a hex[:2]. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def read_byte dst, ptr {
        .zero 2, dst
        .xor_byte_from_ptr dst, ptr
    }
}



// ---------- Multi Read Pointers


ns hex {
    //  Time Complexity: w(0.75@+ 5) + 16@+27
    // Space Complexity: w(1.13@+32) + 12@+103
    //   like:  dst = *ptr
    //          ptr++
    // dst is a hex. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def read_hex_and_inc dst, ptr {
        .read_hex dst, ptr
        .ptr_inc ptr
    }

    //  Time Complexity: n(w(0.75@+ 5) + 16@+27)
    // Space Complexity: n(w(1.13@+32) + 12@+103)
    //   like:  dst[:n] = *ptr[:n]
    // dst is a hex[:n]. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def read_hex n, dst, ptr {
        rep(n, i) .read_hex_and_inc dst + i*dw, ptr
        .ptr_sub ptr, n
    }

    //  Time Complexity: w(0.75@+ 5) + 18@+27
    // Space Complexity: w(1.13@+32) + 14@+127
    //   like:  dst[:2] = *ptr
    //          ptr++
    // dst is a hex[:2]. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def read_byte_and_inc dst, ptr {
        .read_byte dst, ptr
        .ptr_inc ptr
    }

    //  Time Complexity: n(w(0.75@+ 5) + 18@+27)
    // Space Complexity: n(w(1.13@+32) + 14@+127)
    //   like:  dst[:2n] = *ptr[:n]
    // dst is a hex[:2n]. ptr is a hex[:w/4] that holds an address, which we assume is dw-aligned.
    def read_byte n, dst, ptr {
        rep(n, i) .read_byte_and_inc dst + i*2*dw, ptr
        .ptr_sub ptr, n
    }
}
