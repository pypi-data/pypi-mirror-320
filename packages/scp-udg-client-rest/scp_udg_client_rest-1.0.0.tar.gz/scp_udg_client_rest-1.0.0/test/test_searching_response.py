# coding: utf-8

"""
    UrbanDatasetGateway - OpenAPI 3.0

    https://smartcityplatform.enea.it/#/en/specification/communication/2.0/

    The version of the OpenAPI document: 2.0.0
    Contact: tito.brasolin@kerberos.energy
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from scp_udg_client_rest.models.searching_response import SearchingResponse

class TestSearchingResponse(unittest.TestCase):
    """SearchingResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SearchingResponse:
        """Test SearchingResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SearchingResponse`
        """
        model = SearchingResponse()
        if include_optional:
            return SearchingResponse(
                code = '',
                message = '',
                dataset = [
                    scp_udg_client_rest.models.scps_urbandataset_schema20.ScpsUrbandatasetSchema20(
                        urban_dataset = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset.ScpsUrbandatasetSchema20_UrbanDataset(
                            context = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_context.ScpsUrbandatasetSchema20_UrbanDataset_context(
                                producer = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_context_producer.ScpsUrbandatasetSchema20_UrbanDataset_context_producer(
                                    id = '', 
                                    scheme_id = '', ), 
                                time_zone = '', 
                                timestamp = 'iR2M8880-03-31T10:01:39', 
                                coordinates = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_context_coordinates.ScpsUrbandatasetSchema20_UrbanDataset_context_coordinates(
                                    format = '', 
                                    latitude = 1.337, 
                                    longitude = 1.337, 
                                    height = 1.337, ), 
                                language = '', 
                                note = '', ), 
                            specification = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_specification.ScpsUrbandatasetSchema20_UrbanDataset_specification(
                                version = '', 
                                id = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_specification_id.ScpsUrbandatasetSchema20_UrbanDataset_specification_id(
                                    value = '', 
                                    scheme_id = '', ), 
                                name = '', 
                                uri = '', 
                                properties = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_specification_properties.ScpsUrbandatasetSchema20_UrbanDataset_specification_properties(
                                    property_definition = [
                                        scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_specification_properties_property_definition_inner.ScpsUrbandatasetSchema20_UrbanDataset_specification_properties_propertyDefinition_inner(
                                            property_name = '', 
                                            property_description = '', 
                                            data_type = '', 
                                            code_list = '', 
                                            unit_of_measure = '', 
                                            measurement_type = '', 
                                            sub_properties = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_specification_properties_property_definition_inner_sub_properties.ScpsUrbandatasetSchema20_UrbanDataset_specification_properties_propertyDefinition_inner_subProperties(
                                                property_name = [
                                                    ''
                                                    ], ), )
                                        ], ), ), 
                            values = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_values.ScpsUrbandatasetSchema20_UrbanDataset_values(
                                line = [
                                    scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_values_line_inner.ScpsUrbandatasetSchema20_UrbanDataset_values_line_inner(
                                        description = '', 
                                        timestamp = '', 
                                        period = scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_values_line_inner_period.ScpsUrbandatasetSchema20_UrbanDataset_values_line_inner_period(
                                            start_ts = 'iR2M8880-03-31T10:01:39', 
                                            end_ts = 'iR2M8880-03-31T10:01:39', ), 
                                        property = [
                                            scp_udg_client_rest.models.scps_urbandataset_schema20_urban_dataset_values_line_inner_property_inner.ScpsUrbandatasetSchema20_UrbanDataset_values_line_inner_property_inner(
                                                name = '', 
                                                val = '', )
                                            ], )
                                    ], ), ), )
                    ],
                detail = ''
            )
        else:
            return SearchingResponse(
                code = '',
                message = '',
        )
        """

    def testSearchingResponse(self):
        """Test SearchingResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
