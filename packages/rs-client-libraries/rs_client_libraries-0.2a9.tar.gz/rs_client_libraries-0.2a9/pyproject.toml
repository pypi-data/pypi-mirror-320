[project]
name = "rs-client-libraries"
version = "0.0.0" # see: https://github.com/mtkennerly/poetry-dynamic-versioning

[tool.poetry]
name = "rs-client-libraries"
version = "0.2a9"
description = "Copernicus Sentinel rs-client library and processing workflows."
license = "Apache-2.0"
authors = ["ESA under contract with Airbus and CS <ops_coprs@airbus.com>"]
readme = "README.adoc"
homepage = "https://home.rs-python.eu/"
repository = "https://github.com/RS-PYTHON/rs-client-libraries"
documentation = "https://home.rs-python.eu/rs-documentation/rs-client-libraries/docs/doc/"
keywords = ["stac", "copernicus", "sentinel", "processing"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: OpenTelemetry",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Software Development :: Libraries :: Python Modules"
]

packages = [
    { include = "rs_client" },
    { include = "rs_common" },
    { include = "rs_workflows" },
]

# This root project is not used in release production.
# It's only used by the CI/CD to run pytest, pylint, mypy etc... on the whole github project.

# All the dependencies for release are set in the sub-projects
[tool.poetry.dependencies]
python = "^3.11"
prefect = "^2.14.21"
numpy = "2.1.2"
prefect-dask = "^0.2.6"
opentelemetry-distro = "^0.48b0" # then run 'poetry run opentelemetry-bootstrap -a install'
opentelemetry-instrumentation-aws-lambda = "^0.48b0"
opentelemetry-test-utils = "^0.48b0"
opentelemetry-exporter-otlp = "^1.27.0"
python-logging-loki = "^0.3.1"
cachetools = "^5.3.3"
pystac = "^1.10.1"
pystac-client = "^0.8.1"
starlette = "^0.38.4"
python-dateutil = "^2.9.0.post0"
shapely = "^2.0.6"

[tool.poetry.group.dev]
optional = true

# All the dev dependencies are set here so they can be used by the CI.
[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-error-for-skips = "^2.0.2"
black = "==24.3.0"
mypy = "^1.6.1"
pre-commit = "^3.5.0"
bandit = "^1.7.5"
safety = "^3.2.0"
pylint = "^3.0.3"
pytest-docker = "^2.0.1"
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"
flake8 = "^6.1.0"
flake8-pyproject = "^1.2.3"
responses = "^0.25.0"

[tool.poetry.group.demo.dependencies] # for hybrid mode
jupyterlab = "^4.2.1"
boto3 = "^1.34.91"
papermill = "^2.6.0"

[tool.poetry-dynamic-versioning] # needs: poetry self add "poetry-dynamic-versioning[plugin]"
enable = false
metadata = false

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.black]
line-length = 120

[tool.pytest.ini_options]
markers = [
    "unit", # mark a test as unittest
    "integration", # mark a test as integration test
]
asyncio_mode = "auto"

[tool.mypy]
warn_redundant_casts = true
# Force analyze of partially annotate function signatures
check_untyped_defs = true
ignore_missing_imports = true

[tool.flake8]
max-line-length = 120
# per-file-ignores = [
#     '__init__.py:F401',
# ]

[tool.pylint.messages_control]
max-line-length=120
disable = "logging-fstring-interpolation"

[tool.pylint.MASTER]
ignore-paths = '^docs/.*$'

[tool.pylint.MISCELLANEOUS]
notes = ["XXX"] # no errors on TODO and FIXME

[tool.pylint.SIMILARITIES]
# Minimum lines number of a similarity FIXME.
min-similarity-lines=10

[tool.bandit.assert_used]
skips = ['*/test_*.py']
