[tool.poetry]
name = "ai-app-lab"
packages = [{ include = "ark" }]
version = "0.0.1"
description = ""
authors = ["wangsen.0914 <wangsen.0914@bytedance.com>"]
readme = "README.md"

[tool.poetry.dependencies]
volcengine = ">= 1.0.146"
python = ">=3.8.1,<3.12.0"
langchain = ">=0.1.0,<=0.2.0"
langchain_core = "0.1.52"
fastapi = ">=0.100.0,<1.0.0"
uvicorn = ">=0.22.0,<0.30.0"
opentelemetry-api = ">=1.22.0,<2.0.0"
pydantic = ">=2.0.0,<3.0.0"
opentelemetry-exporter-otlp = ">=1.22.0,<2.0.0"
jinja2 = "^3.1.2"
structlog = ">=23.1.0,<25.0.0"
pypdf = { version =">=4.0.0,<5.0.0", optional = true}
ray = { version = ">=2.9.0,<3.0.0", optional = true }
pandas = { version = ">=1.3.5,<3.0.0", optional = true }
docker = { version = "^7.0.0", optional = true }
typer = { version = "^0.9.0", optional = true }
python-docx = { version = "^1.1.0", optional=true}
opentelemetry-sdk = ">=1.22.0,<2.0.0"
tos = '2.6.8'
volcengine-python-sdk = ">=1.0.95"
httpx = ">=0.27.0"
pytz = "2020.5"
tenacity = "8.3.0"
uvloop = ">=0.19.0"
orjson = "<3.10.7"
aiofiles = "23.2.1"

[build-system]
requires = ["poetry"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
ark = "ark.cli.cli:app"

[tool.poetry.group.release]
optional = true

[tool.poetry.group.release.dependencies]
python-semantic-release = "^9.4.2"

[tool.semantic_release]
version_toml = [
    "pyproject.toml:tool.poetry.version"
]
branch = "master"
upload_to_pypi = false
upload_to_release = false
build_command = "pip install poetry && poetry build"

[tool.semantic_release.remote]
type = "gitlab"


[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.5"
mypy = "^1.8.0"


[tool.poetry.group.typing]
optional = true

[tool.poetry.group.typing.dependencies]
types-pyyaml = "^6.0.12.2"
types-requests = "^2.28.11.5"


[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
setuptools = "^67.6.1"
python-semantic-release = "^9.4.2"
pre-commit = "^3.3.3"


[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
# The only dependencies that should be added are
# dependencies used for running tests (e.g., pytest, freezegun, response).
# Any dependencies that do not meet that criteria will be removed.
pytest = "^7.3.0"
freezegun = "^1.2.2"
pytest-mock = "^3.10.0"
syrupy = "^4.0.2"
pytest-watcher = "^0.3.4"
pytest-asyncio = "^0.21.1"
grandalf = "^0.8"
watchdog = "4.0.1"

[tool.ruff]
lint.select = [
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
]
exclude = ["ark/component/prompts"]

[tool.mypy]
disallow_untyped_defs = "True"
ignore_missing_imports = "True"
exclude = ["tests", "scripts"]

[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
# --snapshot-warn-unused    Prints a warning on unused snapshots rather than fail the test suite.
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
    "requires: mark tests as requiring a specific library",
    "asyncio: mark tests as requiring asyncio",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"

[tool.poetry.extras]
flask = ["flask"]
ray = ["ray"]
cli = ["docker", "typer"]
