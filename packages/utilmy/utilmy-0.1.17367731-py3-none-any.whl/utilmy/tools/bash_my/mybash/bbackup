#!/bin/bash

USAGE=$(
    cat <<-END
    Perform various useful operations on the folders/directories

    Usage:
      bbackup all [PATTERN] [OUTPUT_FILE]
        Example: bbackup all "*.txt" backup_all_files.tar.gz

      bbackup recentfile [DIRECTORY] [OUTPUT_FILE] [PERIOD] [MAX_DEPTH]
        Example: bbackup recentfile ~/Documents/ recent_backup.tar.gz -10 10

      bbackup smallfile [DIRECTORY] [OUTPUT_FILE] [PERIOD] [MAX_DEPTH] [MAX_SIZE]
        Example: bbackup smallfile ~/Documents/ small_backup.tar.gz -10 10 1M

      bbackup dotfile [DIRECTORY] [OUTPUT_FILE] [MAX_DEPTH]
        Example: bbackup dotfile ~/ dotfiles_backup.tar.gz 10

      bbackup folderonly [DIRECTORY] [OUTPUT_DIRECTORY] [MAX_DEPTH]
        Example: bbackup folderonly ~/ ~/zbackup/folder_structure 2
END
)

#### Global Config. #################################
# set -x  # Output commands being run.
set -e # Exit on error.

#### Global vars ###################################
FUNAME=$(basename "$0")
YMD=$(date '+%Y%m%d')
this_file_path=$(dirname "$0")

#### Import utils #################################
if [ -f "$this_file_path/utils/util_stable.sh" ]; then
    source "$this_file_path/utils/util_stable.sh"
else
    echo "Warning: utils/util_stable.sh not found, proceeding without it."
fi

### Function Definitions ##################################
date_now() {
    date +"$1"
}

### Input Params and Defaults ##################################
[ $# -eq 0 ] && echo -e "$USAGE" && exit 1 ### No input, print doc
task=$1
shift

### Core ######################################################
if [[ "$task" == "all" ]]; then
    dtnow=$(date_now '%Y%m%d')
    pattern=${1:-'./*'}
    fileout=${2:-"$HOME/zbackup/$dtnow/backup_all_200.tar.gz"}
    mkdir -p "$(dirname "$fileout")"

    echo "Backing up files matching pattern: $pattern"
    echo "Output file: $fileout"

    # Using find to ensure relative paths are used
    find . -path "$pattern" -print0 | tar --null -czvf "$fileout" --files-from -

    echo "Backup completed: $fileout"
    exit 0

elif [[ "$task" == "recentfile" ]]; then
    dtnow=$(date_now '%Y%m%d')
    dirin=${1:-"$PWD"}
    fileout=${2:-"$HOME/zbackup/$dtnow/backup_recent_200.tar.gz"}
    period=${3:--10}
    maxdepth=${4:-100}
    dircurr=$(pwd)
    cd "$dirin"
    echo "$(pwd)"
    mkdir -p "$(dirname "$fileout")"
    find . -maxdepth "$maxdepth" -mtime "$period" -type f ! -name '*.DS_Store' -print0 | tar --null -czvf "$fileout" --files-from -
    cd "$dircurr"
    echo "Backup completed: $fileout"
    exit 0

elif [[ "$task" == "smallfile" ]]; then
    dtnow=$(date_now '%Y%m%d')
    dirin=${1:-"$PWD"}
    fileout=${2:-"$HOME/zbackup/$dtnow/backup_small_200.tar.gz"}
    period=${3:--10}
    maxdepth=${4:-100}
    maxsize=${5:-"1M"}
    dircurr=$(pwd)
    cd "$dirin"
    echo "$(pwd)"
    mkdir -p "$(dirname "$fileout")"
    find . -maxdepth "$maxdepth" -mtime "$period" -size -"$maxsize" -type f ! -name '*.DS_Store' -print0 | tar --null -czvf "$fileout" --files-from -
    cd "$dircurr"
    echo "Backup completed: $fileout"
    exit 0

elif [[ "$task" == "dotfile" ]]; then
    dtnow=$(date_now '%Y%m%d')
    dirin=${1:-"$HOME"}
    fileout=${2:-"$HOME/zbackup/$dtnow/dotfiles.tar.gz"}
    maxdepth=${3:-10}
    dircurr=$(pwd)
    cd "$dirin"
    echo "$(pwd)"
    mkdir -p "$(dirname "$fileout")"
    find . -maxdepth "$maxdepth" -name ".*" ! -name '*.DS_Store' -size -10M -type f,d -print0 | tar --null -czvf "$fileout" --files-from -
    cd "$dircurr"
    echo "Dotfiles backup completed: $fileout"
    exit 0

elif [[ "$task" == "folderonly" ]]; then
    dtnow=$(date_now '%Y%m%d')
    dirin=${1:-"./"}
    dirout=${2:-"$HOME/zbackup/$dtnow/foldernames"}
    maxdepth=${3:-2}
    mkdir -p "$dirout"
    find "$dirin" -type d -maxdepth "$maxdepth" ! -name 'Library' | while read -r dir; do
        mkdir -p "$dirout/${dir#$dirin}"
    done
    echo "Folder structure copied to $dirout"
    exit 0

else
    echo "$USAGE"
    exit 1
fi
: '
# List the files and directories
user@example$ ls
files  logs  projects  scripts  temp  utils

# Backup all files and directories
user@example$ ./bbackup all
Backing up files matching pattern: ./*
Output file: ~/zbackup/20240613/backup_all_200.tar.gz
./files/
./files/sample_data.csv
./files/sample_data.json
./logs/
./logs/app.log
./logs/error.log
./projects/
./projects/project1/
./projects/project1/main.py
./projects/project2/
./projects/project2/index.html
./scripts/
./scripts/deploy.sh
./scripts/start.sh
./temp/
./temp/tempfile.txt
./utils/
./utils/helper.sh
Backup completed: ~/zbackup/20240613/backup_all_200.tar.gz

# List the files and directories again
user@example$ ls
files  logs  projects  scripts  temp  utils

# Backup recent files from a specific directory
user@example$ ./bbackup recentfile ./projects/ ./recentfiles_example.tar.gz -10 10
./projects
./project1/main.py
./project2/index.html
Backup completed: ./recentfiles_example.tar.gz

# Backup small files
user@example$ ./bbackup smallfile ./projects/ ./smallfiles_example.tar.gz -10 10 1M
./projects
./project1/config.yaml
./project2/README.md
Backup completed: ./smallfiles_example.tar.gz

# Backup dotfiles
user@example$ ./bbackup dotfile ./ ./dotfiles_example.tar.gz 10
./
./.bashrc
./.zshrc
./.gitconfig
Backup completed: ./dotfiles_example.tar.gz

# Backup folder structure only
user@example$ ./bbackup folderonly ./ ./folder_structure 2
Folder structure copied to ./folder_structure




'
