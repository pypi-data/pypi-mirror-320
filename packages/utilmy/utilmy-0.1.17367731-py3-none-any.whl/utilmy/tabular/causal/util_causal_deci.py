# -*- coding: utf-8 -*-
"""causal inference causica multi_investment_sales_attribution.ipynb
Docs::


        Automatically generated by Colaboratory.

        Original file is located at
            https://colab.research.google.com/drive/1AFPuqOCwj2VVPbWNTNdHFnFrwmoBaRQR

        <h1 align="left">Multi-investment Attribution: Distinguish the Effects of Multiple Outreach Efforts</h1>

        <img src="https://www.microsoft.com/en-us/research/uploads/prod/2020/05/Attribution.png" width="400">

        A software company would like to know whether its multiple outreach efforts to their business customers are successful in boosting sales. They would also like to learn how to better target different incentives to different customers. In other words, they would like to learn the **treatment effect** of each investment on customers' total expenditure on the company’s products: particularly the **heterogeneous treatment effect**.

        In an ideal world, the company would run experiments where each customer would receive a random assortment of investments. However, this approach can be logistically prohibitive or strategically unsound: the company might not have the resources to design such experiments or they might not want to risk major revenue losses by randomizing their incentives to top customers.

        In this notebook, we show how tools from the [Causica](https://github.com/microsoft/causica), library can use historical investment data to learn the effects of multiple investments.

        For this exercise, we create simulated data that recreates some key characteristics of real data from a software company facing this type of decision. Simulating data protects the company’s privacy. Because we create the data, we are also in the unusual position of knowing the true causal graph and true effects of each investments, so we can compare the results of our estimation to this ground truth.

        In the next section, we introduce this simulated data. We then discover the causal graph, the relationship between each variable in the simulated data. With this generated graph, we use estimate the personalized treatment effects for each customer.

        ## Environment Setup
        It might be necessary to install `graphviz` and `pygraphviz` for improved visualisations of the graphs.

        For Ubuntu with poetry, run
        ```
        sudo apt-get install graphviz libgraphviz-dev
        ```

## Install

   pip install causica==0.3.4
   # pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 torchtext==0.14.1 torchdata==0.5.1 --extra-index-url https://download.pytorch.org/whl/cu117

   pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

   pip install utilmy


        torch                            2.0.1+cu118
        torchaudio                       2.0.2+cu118
        torchdata                        0.5.1
        torchmetrics                     1.1.2
        torchsummary                     1.5.1
        torchtext                        0.14.1
        torchvision                      0.15.2+cu118



    https://colab.research.google.com/drive/1o7R_hwtky2zpxksNyyxRxqQrMRIo7snl#scrollTo=YMXBjoHFp0Lc



    <h1 align="left">Multi-investment Attribution: Distinguish the Effects of Multiple Outreach Efforts</h1>

    <img src="https://www.microsoft.com/en-us/research/uploads/prod/2020/05/Attribution.png" width="400">

    A software company would like to know whether its multiple outreach efforts to their business customers are successful in boosting sales. They would also like to learn how to better target different incentives to different customers. In other words, they would like to learn the **treatment effect** of each investment on customers' total expenditure on the company’s products: particularly the **heterogeneous treatment effect**.

    In an ideal world, the company would run experiments where each customer would receive a random assortment of investments. However, this approach can be logistically prohibitive or strategically unsound: the company might not have the resources to design such experiments or they might not want to risk major revenue losses by randomizing their incentives to top customers.



    For this exercise, we create simulated data that recreates some key characteristics of real data from a software company facing this type of decision. Simulating data protects the company’s privacy. Because we create the data, we are also in the unusual position of knowing the true causal graph and true effects of each investments, so we can compare the results of our estimation to this ground truth.

    In the next section, we introduce this simulated data. We then discover the causal graph, the relationship between each variable in the simulated data. With this generated graph, we use estimate the personalized treatment effects for each customer.

    !pip install matplotlib

    ! pip install causica==0.3.4

    ! pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 torchtext==0.14.1 torchdata==0.5.1 --extra-index-url https://download.pytorch.org/whl/cu117

    ! pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

    !pip install utilmy


"""
import os, warnings, json, fsspec, networkx as nx
import numpy as np, pandas as pd, fire
from operator import itemgetter
import matplotlib.pyplot as plt

from utilmy import log

import torch
import pytorch_lightning as pl
from pytorch_lightning.callbacks import TQDMProgressBar
from tensordict import TensorDict

from causica.datasets.causica_dataset_format import CAUSICA_DATASETS_PATH, Variable
from causica.distributions import ContinuousNoiseDist
from causica.lightning.data_modules.basic_data_module import BasicDECIDataModule
from causica.lightning.modules.deci_module import DECIModule
from causica.sem.sem_distribution import SEMDistributionModule
from causica.sem.structural_equation_model import ite
from causica.training.auglag import AugLagLRConfig

# Suppress warnings
warnings.filterwarnings("ignore")





###############################################################################################
def test(test_run=False):

    log("##### Data load only #########################################")
    df, variables_spec = data_load()
    dag_true           = dag_groundtruth(df)
    constraint_matrix  = dag_constraints_setup(df)


    log("#### DECI setup. ############################################")
    data_module      = deci_init(df, variables_spec)
    lightning_module = deci_model_create(constraint_matrix)
    model_path       = deci_model_fit(lightning_module, data_module)


    log("#### Call prediction functions with the loaded model")
    sem, datam  = deci_model_load(model_path)
    dfate = deci_predict_ate(datam, sem)
    dfite = deci_predict_ite(datam, sem)




###############################################################################################
##### Data loading ############################################################################
def data_load():
    root_path = CAUSICA_DATASETS_PATH + "causal_ai_suite"
    root_path = "https://azuastoragepublic.z6.web.core.windows.net/causal_ai_suite"

    df = pd.read_csv(root_path + "/multi_attribution_data_20220819.csv")

    variables_path = root_path + "/multi_attribution_data_20220819_data_types.json"
    with fsspec.open(variables_path, mode="r", encoding="utf-8") as f:
        variables_spec = json.load(f)["variables"]

    print("Data Shape:", df.shape)
    print(df.head())
    return df, variables_spec



def dag_groundtruth(df, dir_dag=None):
    outcome = "Revenue"
    treatment_columns = ["Tech Support", "Discount", "New Engagement Strategy"]

    ground_truth_effects = df.loc[:, "Direct Treatment Effect: Tech Support":]

    ground_truth_ites = {
        treatment: ground_truth_effects[f"Total Treatment Effect: {treatment}"] for treatment in treatment_columns
    }

    ground_truth_ates = {key: val.mean(axis=0) for key, val in ground_truth_ites.items()}


    adjacency_path = root_path + "/true_graph_gml_string.txt" if dir_dag is None else dir_dag
    with fsspec.open(adjacency_path, mode="r", encoding="utf-8") as f:
        true_adj = nx.parse_gml(f.read())

    fig, axis = plt.subplots(1, 1, figsize=(8, 8))
    labels = {node: i for i, node in enumerate(true_adj.nodes)}

    try:
        layout = nx.nx_agraph.graphviz_layout(true_adj, prog="dot")
    except (ModuleNotFoundError, ImportError):
        layout = nx.layout.spring_layout(true_adj)

    for node, i in labels.items():
        axis.scatter(layout[node][0], layout[node][1], label=f"{i}: {node}")
    axis.legend()
    nx.draw_networkx(true_adj, pos=layout, with_labels=True, arrows=True, labels=labels, ax=axis)



def dag_constraints_setup(df):

    node_name_to_idx   = {coli:i for i,coli in df.columns }
    num_nodes = len(node_name_to_idx)
    constraint_matrix = np.full((num_nodes, num_nodes), np.nan, dtype=np.float32)

    revenue_idx = node_name_to_idx["Revenue"]
    planning_summit_idx = node_name_to_idx["Planning Summit"]
    constraint_matrix[revenue_idx, :] = 0.0
    constraint_matrix[revenue_idx, planning_summit_idx] = np.nan

    non_child_nodes = [
        "Commercial Flag",
        "Major Flag",
        "SMC Flag",
        "PC Count",
        "Employee Count",
        "Global Flag",
        "Size",
    ]
    non_child_idxs = itemgetter(*non_child_nodes)(node_name_to_idx)
    constraint_matrix[:, non_child_idxs] = 0.0

    engagement_nodes = ["Tech Support", "Discount", "New Engagement Strategy"]
    engagement_idxs = itemgetter(*engagement_nodes)(node_name_to_idx)
    for i in engagement_idxs:
        constraint_matrix[engagement_idxs, i] = 0.0

    return constraint_matrix




############################################################################################
############################################################################################
def deci_init(df, variables_spec, ytarget_col="Global Flag", ytarget_val="Revenue"):
    data_module = BasicDECIDataModule(
        df.loc[:, ytarget_col:ytarget_val],
        variables=[Variable.from_dict(d) for d in variables_spec],
        batch_size=1024,
        normalize=True,
    )
    num_nodes = len(data_module.dataset_train.keys())

    assert set(df.columns) == set(data_module.dataset_train.keys()), 'mismatch'

    return data_module



def deci_model_create(constraint_matrix):
    pl.seed_everything(seed=1)  # set the random seed

    lightning_module = DECIModule(
        noise_dist=ContinuousNoiseDist.GAUSSIAN,
        prior_sparsity_lambda=1.0,
        init_rho=1.0,
        init_alpha=0.0,
        auglag_config=AugLagLRConfig(lr_init_dict={"vardist": 1e-2, "icgnn": 3e-4, "noise_dist": 3e-3}),
    )

    lightning_module.constraint_matrix = torch.tensor(constraint_matrix)

    return lightning_module



def deci_model_fit(lightning_module, data_module, dirout='./'):
    trainer = pl.Trainer(
        accelerator="auto",
        max_epochs=2000,
        fast_dev_run=test_run,
        callbacks=[TQDMProgressBar(refresh_rate=19)],
        enable_checkpointing=False,
    )

    trainer.fit(lightning_module, datamodule=data_module)

    # Save the trained model
    torch.save(lightning_module, dirout + "/deci_lightning_module.pt")
    torch.save(data_module,      dirout + "/deci_data_module.pt")

    print(f"Model saved to {dirout}")
    return dirout




#########################################################################################################
#########################################################################################################
def deci_model_load(dirin="./deci.pt"):
    sem_module: SEMDistributionModule = torch.load(dirin + "/deci_lightning_module.pt")
    data_module: SEMDistributionModule = torch.load(dirin + "/deci_data_module.pt")

    sem = sem_module().mode

    deci_plot_network(graph_array= sem.graph.cpu().numpy() , 
                      ddict_names= dict(enumerate(data_module.dataset_train.keys())) ) 

    return sem_module, data_module


def deci_plot_network(graph_array, ddict_names, dirout):
    graph = nx.from_numpy_array(sem.graph.cpu().numpy(), create_using=nx.DiGraph)
    graph = nx.relabel_nodes(graph, dict(enumerate(data_module.dataset_train.keys())))

    fig, axis = plt.subplots(1, 1, figsize=(8, 8))

    for node, i in labels.items():
        axis.scatter(layout[node][0], layout[node][1], label=f"{i}: {node}")
    axis.legend()
    nx.draw_networkx(graph, pos=layout, with_labels=True, arrows=True, labels=labels, ax=axis)
    nx.save(dirout +"/dag.png")



def deci_predict_ate(data_module, sem, num_samples=10):
    revenue_estimated_ate = {}
    sample_shape = torch.Size([num_samples])
    transform    = data_module.normalizer.transform_modules[outcome]().inv

    for treatment in treatment_columns:
        intervention_a = TensorDict({treatment: torch.tensor([1.0])}, batch_size=tuple())
        intervention_b = TensorDict({treatment: torch.tensor([0.0])}, batch_size=tuple())

        rev_a_samples = transform(sem.do(interventions=intervention_a).sample(sample_shape)[outcome])
        rev_b_samples = transform(sem.do(interventions=intervention_b).sample(sample_shape)[outcome])

        ate_mean = rev_a_samples.mean(0) - rev_b_samples.mean(0)
        ate_std = np.sqrt((rev_a_samples.var(0) + rev_b_samples.var(0)) / num_samples)

        revenue_estimated_ate[treatment] = (
            ate_mean.cpu().numpy()[0],
            ate_std.cpu().numpy()[0],
        )
    revenue_estimated_ate

    fig, axes = plt.subplots(1, len(revenue_estimated_ate), figsize=(15, 5))

    for i, (treatment, (ate, std)) in enumerate(revenue_estimated_ate.items()):
        axes[i].errorbar(
            0, ate, yerr=std * 1.96, fmt="o", color="black", mfc="white", mec="black", ms=5, capsize=3,
        )
        axes[i].axhline(0, color="gray", linestyle="--")
        axes[i].set_title(f"ATE of {treatment}")
    return  revenue_estimated_ate



def deci_predict_ite(data_module sem):
    revenue_estimated_ites = {}
    num_samples = 10 if test_run else 20000
    sample_shape = torch.Size([num_samples])
    transform = data_module.normalizer.transform_modules[outcome]().inv

    for treatment in treatment_columns:
        intervention_a = TensorDict({treatment: torch.tensor([1.0])}, batch_size=tuple())
        intervention_b = TensorDict({treatment: torch.tensor([0.0])}, batch_size=tuple())

        rev_a_samples = transform(sem.do(interventions=intervention_a).sample(sample_shape)[outcome])
        rev_b_samples = transform(sem.do(interventions=intervention_b).sample(sample_shape)[outcome])

        ite_samples = rev_a_samples - rev_b_samples

        ite_mean = ite_samples.mean(0)
        ite_std = np.sqrt(ite_samples.var(0) / num_samples)

        revenue_estimated_ites[treatment] = (
            ite_mean.cpu().numpy()[0],
            ite_std.cpu().numpy()[0],
        )


    fig, axes = plt.subplots(1, len(revenue_estimated_ites), figsize=(15, 5))

    for i, (treatment, (ite, std)) in enumerate(revenue_estimated_ites.items()):
        axes[i].errorbar(
            0, ite, yerr=std * 1.96, fmt="o", color="black", mfc="white", mec="black", ms=5, capsize=3,
        )
        axes[i].axhline(0, color="gray", linestyle="--")
        axes[i].set_title(f"ITE of {treatment}")

    return revenue_estimated_ites



####################################################################################################
def doc():
        """# Data

        The simulated dataset contains 10,000 customers.

        We create one outcome of interest:

        Feature Name | Type | Details
        :--- |:--- |:---
        **Revenue** | continuous | \$ Annual revenue from customer given by the amount of software purchased

        We consider three possible treatments, the interventions whose impact we wish to measure:

        Feature Name | Type | Details
        :--- |:--- |:---
        **Tech Support** | binary | whether the customer received tech support during the year
        **Discount** | binary | whether the customer was given a discount during the year
        **New Strategy** | binary | whether the customer was targeted for a new engagement strategy with different outreach behaviors

        Finally, we consider a variety of additional customer characteristics that may affect revenue. Including these types of features is crucial for causal analysis in order to map the full causal graph and separate the true effects of treatments on outcomes from other correlation generated by other influences.

        Feature Name | Type | Details
        :--- |:--- |:---
        **Global Flag** | binary | whether the customer has global offices
        **Major Flag** | binary | whether the customer is a large consumer in their industry (as opposed to SMC - Small Medium Corporation - or SMB - Small Medium Business)
        **SMC Flag** | binary | whether the customer is a Small Medium Corporation (SMC, as opposed to major and SMB)
        **Commercial Flag** | binary | whether the customer's business is commercial (as opposed to public secor)
        **Planning Summit** | binary | whether a sales team member held an outreach event with the customer during the year
        **New Product Adoption** | binary | whether the customer signed a contract for any new products during the year
        **IT Spend** | continuous | \$ spent on IT-related purchases
        **Employee Count** | continuous | number of employees
        **PC Count** | continuous | number of PCs used by the customer
        **Size** | continuous | customer's total revenue in the previous calendar year

        In simulating the data, we maintain some key characteristics of the data from the real company example, including some correlation patterns between features and some potentially difficult data characteristics, such as large outliers.

        #### Import the Simulated Data
        """



def piplist():
    ss="""
        Package                          Version
        -------------------------------- ------------
        absl-py                          1.4.0
        aiohttp                          3.8.5
        aiosignal                        1.3.1
        alabaster                        0.7.13
        albumentations                   1.3.1
        alembic                          1.12.0
        altair                           4.2.2
        antlr4-python3-runtime           4.9.3
        anyio                            3.7.1
        appdirs                          1.4.4
        argon2-cffi                      23.1.0
        argon2-cffi-bindings             21.2.0
        array-record                     0.4.1
        arviz                            0.15.1
        astropy                          5.3.3
        astunparse                       1.6.3
        async-timeout                    4.0.3
        attrs                            23.1.0
        audioread                        3.0.0
        autograd                         1.6.2
        azure-common                     1.1.28
        azure-core                       1.29.4
        azure-identity                   1.14.0
        azure-mgmt-core                  1.4.0
        azure-storage-blob               12.13.0
        azureml-mlflow                   1.53.0
        Babel                            2.12.1
        backcall                         0.2.0
        beautifulsoup4                   4.11.2
        bleach                           6.0.0
        blinker                          1.4
        blis                             0.7.10
        blosc2                           2.0.0
        bokeh                            3.2.2
        bqplot                           0.12.40
        branca                           0.6.0
        build                            1.0.3
        CacheControl                     0.13.1
        cached-property                  1.5.2
        cachetools                       5.3.1
        catalogue                        2.0.9
        causica                          0.3.4
        certifi                          2023.7.22
        cffi                             1.15.1
        chardet                          5.2.0
        charset-normalizer               3.2.0
        chex                             0.1.6
        click                            8.1.7
        click-plugins                    1.1.1
        cligj                            0.7.2
        cloudpickle                      2.2.1
        cmake                            3.27.4.1
        cmdstanpy                        1.1.0
        colorcet                         3.0.1
        colorlover                       0.3.0
        colour                           0.1.5
        community                        1.0.0b1
        confection                       0.1.2
        cons                             0.4.6
        contextlib2                      21.6.0
        contourpy                        1.1.0
        convertdate                      2.4.0
        cryptography                     41.0.3
        cufflinks                        0.17.3
        cvxopt                           1.3.2
        cvxpy                            1.3.2
        cycler                           0.11.0
        cymem                            2.0.7
        Cython                           3.0.2
        dask                             2023.8.1
        databricks-cli                   0.17.7
        dataclasses-json                 0.5.14
        datascience                      0.17.6
        db-dtypes                        1.1.1
        dbus-python                      1.2.18
        debugpy                          1.6.6
        decorator                        4.4.2
        defusedxml                       0.7.1
        distributed                      2023.8.1
        distro                           1.7.0
        dlib                             19.24.2
        dm-tree                          0.1.8
        docker                           6.1.3
        docstring-parser                 0.15
        docutils                         0.18.1
        dopamine-rl                      4.0.6
        duckdb                           0.8.1
        earthengine-api                  0.1.368
        easydict                         1.10
        ecos                             2.0.12
        editdistance                     0.6.2
        eerepr                           0.0.4
        en-core-web-sm                   3.6.0
        entrypoints                      0.4
        ephem                            4.1.4
        et-xmlfile                       1.1.0
        etils                            1.4.1
        etuples                          0.3.9
        exceptiongroup                   1.1.3
        fastai                           2.7.12
        fastcore                         1.5.29
        fastdownload                     0.0.7
        fastjsonschema                   2.18.0
        fastprogress                     1.0.3
        fastrlock                        0.8.2
        filelock                         3.12.2
        Fiona                            1.9.4.post1
        firebase-admin                   5.3.0
        Flask                            2.2.5
        flatbuffers                      23.5.26
        flax                             0.6.4
        folium                           0.14.0
        fonttools                        4.42.1
        frozendict                       2.3.8
        frozenlist                       1.4.0
        fsspec                           2023.6.0
        future                           0.18.3
        gast                             0.4.0
        gcsfs                            2023.6.0
        GDAL                             3.4.3
        gdown                            4.6.6
        geemap                           0.26.0
        gensim                           4.3.2
        geocoder                         1.38.1
        geographiclib                    2.0
        geopandas                        0.13.2
        geopy                            2.3.0
        gin-config                       0.5.0
        gitdb                            4.0.10
        GitPython                        3.1.36
        glob2                            0.7
        google                           2.0.3
        google-api-core                  2.11.1
        google-api-python-client         2.84.0
        google-auth                      2.17.3
        google-auth-httplib2             0.1.0
        google-auth-oauthlib             0.4.6
        google-cloud-bigquery            3.10.0
        google-cloud-bigquery-connection 1.12.1
        google-cloud-bigquery-storage    2.22.0
        google-cloud-core                2.3.3
        google-cloud-datastore           2.15.2
        google-cloud-firestore           2.11.1
        google-cloud-functions           1.13.2
        google-cloud-language            2.9.1
        google-cloud-storage             2.8.0
        google-cloud-translate           3.11.3
        google-colab                     1.0.0
        google-crc32c                    1.5.0
        google-pasta                     0.2.0
        google-resumable-media           2.6.0
        googleapis-common-protos         1.60.0
        googledrivedownloader            0.4
        graphviz                         0.20.1
        greenlet                         2.0.2
        grpc-google-iam-v1               0.12.6
        grpcio                           1.57.0
        grpcio-status                    1.48.2
        gspread                          3.4.2
        gspread-dataframe                3.3.1
        gunicorn                         21.2.0
        gym                              0.25.2
        gym-notices                      0.0.8
        h5netcdf                         1.2.0
        h5py                             3.9.0
        holidays                         0.32
        holoviews                        1.17.1
        html5lib                         1.1
        httpimport                       1.3.1
        httplib2                         0.22.0
        humanize                         4.7.0
        hydra-core                       1.3.2
        hyperopt                         0.2.7
        idna                             3.4
        imageio                          2.31.3
        imageio-ffmpeg                   0.4.8
        imagesize                        1.4.1
        imbalanced-learn                 0.10.1
        imgaug                           0.4.0
        importlib-metadata               6.8.0
        importlib-resources              6.0.1
        imutils                          0.5.4
        inflect                          7.0.0
        iniconfig                        2.0.0
        intel-openmp                     2023.2.0
        ipyevents                        2.0.2
        ipyfilechooser                   0.6.0
        ipykernel                        5.5.6
        ipyleaflet                       0.17.3
        ipython                          7.34.0
        ipython-genutils                 0.2.0
        ipython-sql                      0.5.0
        ipytree                          0.2.2
        ipywidgets                       7.7.1
        isodate                          0.6.1
        itsdangerous                     2.1.2
        jax                              0.3.25
        jaxlib                           0.3.25
        jedi                             0.19.0
        jeepney                          0.7.1
        jieba                            0.42.1
        Jinja2                           3.1.2
        joblib                           1.3.2
        jsonargparse                     4.20.1
        jsonpickle                       3.0.2
        jsonschema                       4.19.0
        jsonschema-specifications        2023.7.1
        jupyter-client                   6.1.12
        jupyter-console                  6.1.0
        jupyter_core                     5.3.1
        jupyter-server                   1.24.0
        jupyterlab-pygments              0.2.2
        jupyterlab-widgets               3.0.8
        kaggle                           1.5.16
        keras                            2.12.0
        keyring                          23.5.0
        kiwisolver                       1.4.5
        langcodes                        3.3.0
        launchpadlib                     1.10.16
        lazr.restfulclient               0.14.4
        lazr.uri                         1.0.6
        lazy_loader                      0.3
        libclang                         16.0.6
        librosa                          0.10.1
        lightgbm                         4.0.0
        lightning-utilities              0.9.0
        linkify-it-py                    2.0.2
        lit                              16.0.6
        llvmlite                         0.39.1
        locket                           1.0.0
        logical-unification              0.4.6
        LunarCalendar                    0.0.9
        lxml                             4.9.3
        Mako                             1.2.4
        Markdown                         3.4.4
        markdown-it-py                   3.0.0
        MarkupSafe                       2.1.3
        marshmallow                      3.20.1
        matplotlib                       3.7.1
        matplotlib-inline                0.1.6
        matplotlib-venn                  0.11.9
        mdit-py-plugins                  0.4.0
        mdurl                            0.1.2
        miniKanren                       1.0.3
        missingno                        0.5.2
        mistune                          0.8.4
        mizani                           0.9.3
        mkl                              2023.2.0
        ml-dtypes                        0.2.0
        mlflow                           2.7.1
        mlflow-skinny                    2.7.1
        mlxtend                          0.22.0
        more-itertools                   10.1.0
        moviepy                          1.0.3
        mpmath                           1.3.0
        msal                             1.24.0
        msal-extensions                  1.0.0
        msgpack                          1.0.5
        msrest                           0.7.1
        multidict                        6.0.4
        multipledispatch                 1.0.0
        multitasking                     0.0.11
        murmurhash                       1.0.9
        music21                          9.1.0
        mypy-extensions                  1.0.0
        natsort                          8.4.0
        nbclassic                        1.0.0
        nbclient                         0.8.0
        nbconvert                        6.5.4
        nbformat                         5.9.2
        nest-asyncio                     1.5.7
        networkx                         3.1
        nibabel                          4.0.2
        nltk                             3.8.1
        notebook                         6.5.5
        notebook_shim                    0.2.3
        numba                            0.56.4
        numexpr                          2.8.5
        numpy                            1.23.5
        nvidia-cublas-cu11               11.10.3.66
        nvidia-cuda-cupti-cu11           11.7.101
        nvidia-cuda-nvrtc-cu11           11.7.99
        nvidia-cuda-runtime-cu11         11.7.99
        nvidia-cudnn-cu11                8.5.0.96
        nvidia-cufft-cu11                10.9.0.58
        nvidia-curand-cu11               10.2.10.91
        nvidia-cusolver-cu11             11.4.0.1
        nvidia-cusparse-cu11             11.7.4.91
        nvidia-nccl-cu11                 2.14.3
        nvidia-nvtx-cu11                 11.7.91
        oauth2client                     4.1.3
        oauthlib                         3.2.2
        omegaconf                        2.3.0
        opencv-contrib-python            4.8.0.76
        opencv-python                    4.8.0.76
        opencv-python-headless           4.8.0.76
        openpyxl                         3.1.2
        opt-einsum                       3.3.0
        optax                            0.1.7
        orbax                            0.1.2
        orbax-checkpoint                 0.3.5
        osqp                             0.6.2.post8
        packaging                        23.1
        pandas                           1.5.3
        pandas-datareader                0.10.0
        pandas-gbq                       0.17.9
        pandocfilters                    1.5.0
        panel                            1.2.2
        param                            1.13.0
        parso                            0.8.3
        partd                            1.4.0
        pathlib                          1.0.1
        pathy                            0.10.2
        patsy                            0.5.3
        pexpect                          4.8.0
        pickleshare                      0.7.5
        Pillow                           9.4.0
        pip                              23.1.2
        pip-tools                        6.13.0
        platformdirs                     3.10.0
        plotly                           5.15.0
        plotnine                         0.12.3
        pluggy                           1.3.0
        polars                           0.17.3
        pooch                            1.7.0
        portalocker                      2.8.2
        portpicker                       1.5.2
        prefetch-generator               1.0.3
        preshed                          3.0.8
        prettytable                      3.8.0
        proglog                          0.1.10
        progressbar2                     4.2.0
        prometheus-client                0.17.1
        promise                          2.3
        prompt-toolkit                   3.0.39
        prophet                          1.1.4
        proto-plus                       1.22.3
        protobuf                         3.20.3
        psutil                           5.9.5
        psycopg2                         2.9.7
        ptyprocess                       0.7.0
        py-cpuinfo                       9.0.0
        py4j                             0.10.9.7
        pyarrow                          9.0.0
        pyasn1                           0.5.0
        pyasn1-modules                   0.3.0
        pycocotools                      2.0.7
        pycparser                        2.21
        pyct                             0.5.0
        pydantic                         1.10.12
        pydata-google-auth               1.8.2
        pydot                            1.4.2
        pydot-ng                         2.0.0
        pydotplus                        2.0.2
        PyDrive                          1.3.1
        PyDrive2                         1.6.3
        pyerfa                           2.0.0.3
        pygame                           2.5.1
        Pygments                         2.16.1
        PyGObject                        3.42.1
        PyJWT                            2.3.0
        pymc                             5.7.2
        PyMeeus                          0.5.12
        pymystem3                        0.2.0
        PyOpenGL                         3.1.7
        pyOpenSSL                        23.2.0
        pyparsing                        3.1.1
        pyperclip                        1.8.2
        pyproj                           3.6.0
        pyproject_hooks                  1.0.0
        pyshp                            2.3.1
        PySocks                          1.7.1
        pytensor                         2.14.2
        pytest                           7.4.1
        python-apt                       0.0.0
        python-box                       7.1.1
        python-dateutil                  2.8.2
        python-louvain                   0.16
        python-slugify                   8.0.1
        python-utils                     3.7.0
        pytorch-lightning                1.9.5
        pytz                             2023.3.post1
        pyviz_comms                      3.0.0
        PyWavelets                       1.4.1
        PyYAML                           6.0.1
        pyzmq                            23.2.1
        qdldl                            0.1.7.post0
        qudida                           0.0.4
        querystring-parser               1.2.4
        ratelim                          0.1.6
        referencing                      0.30.2
        regex                            2023.6.3
        requests                         2.31.0
        requests-oauthlib                1.3.1
        requirements-parser              0.5.0
        rich                             13.5.2
        rpds-py                          0.10.2
        rpy2                             3.4.2
        rsa                              4.9
        scikit-image                     0.19.3
        scikit-learn                     1.2.2
        scipy                            1.11.2
        scooby                           0.7.2
        scs                              3.2.3
        seaborn                          0.12.2
        SecretStorage                    3.3.1
        Send2Trash                       1.8.2
        setuptools                       67.7.2
        shapely                          2.0.1
        six                              1.16.0
        sklearn-pandas                   2.2.0
        smart-open                       6.4.0
        smmap                            5.0.1
        sniffio                          1.3.0
        snowballstemmer                  2.2.0
        sortedcontainers                 2.4.0
        soundfile                        0.12.1
        soupsieve                        2.5
        soxr                             0.3.6
        spacy                            3.6.1
        spacy-legacy                     3.0.12
        spacy-loggers                    1.0.4
        Sphinx                           5.0.2
        sphinxcontrib-applehelp          1.0.7
        sphinxcontrib-devhelp            1.0.5
        sphinxcontrib-htmlhelp           2.0.4
        sphinxcontrib-jsmath             1.0.1
        sphinxcontrib-qthelp             1.0.6
        sphinxcontrib-serializinghtml    1.1.9
        SQLAlchemy                       2.0.20
        sqlparse                         0.4.4
        srsly                            2.4.7
        statsmodels                      0.14.0
        sympy                            1.12
        tables                           3.8.0
        tabulate                         0.9.0
        tbb                              2021.10.0
        tblib                            2.0.0
        tenacity                         8.2.3
        tensorboard                      2.12.0
        tensorboard-data-server          0.7.1
        tensorboard-plugin-wit           1.8.1
        tensorboardX                     2.6.2.2
        tensordict                       0.1.2
        tensorflow                       2.12.0
        tensorflow-datasets              4.9.2
        tensorflow-estimator             2.12.0
        tensorflow-gcs-config            2.12.0
        tensorflow-hub                   0.14.0
        tensorflow-io-gcs-filesystem     0.33.0
        tensorflow-metadata              1.14.0
        tensorflow-probability           0.20.1
        tensorstore                      0.1.41
        termcolor                        2.3.0
        terminado                        0.17.1
        text-unidecode                   1.3
        textblob                         0.17.1
        tf-slim                          1.1.0
        thinc                            8.1.12
        threadpoolctl                    3.2.0
        tifffile                         2023.8.30
        tinycss2                         1.2.1
        toml                             0.10.2
        tomli                            2.0.1
        toolz                            0.12.0
        torch                            2.0.1+cu118
        torchaudio                       2.0.2+cu118
        torchdata                        0.5.1
        torchmetrics                     1.1.2
        torchsummary                     1.5.1
        torchtext                        0.14.1
        torchvision                      0.15.2+cu118
        tornado                          6.3.2
        tqdm                             4.66.1
        traitlets                        5.7.1
        traittypes                       0.2.1
        triton                           2.0.0
        tweepy                           4.13.0
        typer                            0.9.0
        types-PyYAML                     6.0.12.11
        types-setuptools                 68.2.0.0
        typeshed-client                  2.3.0
        typing_extensions                4.8.0
        typing-inspect                   0.9.0
        tzlocal                          5.0.1
        uc-micro-py                      1.0.2
        uritemplate                      4.1.1
        urllib3                          1.26.16
        vega-datasets                    0.9.0
        wadllib                          1.3.6
        wasabi                           1.1.2
        wcwidth                          0.2.6
        webcolors                        1.13
        webencodings                     0.5.1
        websocket-client                 1.6.2
        Werkzeug                         2.3.7
        wheel                            0.41.2
        widgetsnbextension               3.6.5
        wordcloud                        1.9.2
        wrapt                            1.14.1
        xarray                           2023.7.0
        xarray-einstats                  0.6.0
        xgboost                          1.7.6
        xlrd                             2.0.1
        xyzservices                      2023.7.0
        yarl                             1.9.2
        yellowbrick                      1.5
        yfinance                         0.2.28
        zict                             3.0.0
        zipp                             3.16.2
    """






###################################################################################################
if __name__ == "__main__":
    fire.Fire()




