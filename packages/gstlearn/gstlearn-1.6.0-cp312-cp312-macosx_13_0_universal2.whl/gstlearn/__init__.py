# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _gstlearn
else:
    import _gstlearn

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_SwigPyIterator

    def value(self):
        return _gstlearn.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _gstlearn.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _gstlearn.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _gstlearn.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _gstlearn.SwigPyIterator_equal(self, x)

    def copy(self):
        return _gstlearn.SwigPyIterator_copy(self)

    def next(self):
        return _gstlearn.SwigPyIterator_next(self)

    def __next__(self):
        return _gstlearn.SwigPyIterator___next__(self)

    def previous(self):
        return _gstlearn.SwigPyIterator_previous(self)

    def advance(self, n):
        return _gstlearn.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _gstlearn.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _gstlearn.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _gstlearn.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _gstlearn.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _gstlearn.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _gstlearn.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _gstlearn:
_gstlearn.SwigPyIterator_swigregister(SwigPyIterator)
class DoNotUseVectorIntStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVectorIntStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVectorIntStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVectorIntStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVectorIntStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVectorIntStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVectorIntStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVectorIntStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVectorIntStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVectorIntStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVectorIntStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVectorIntStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVectorIntStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVectorIntStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVectorIntStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVectorIntStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVectorIntStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVectorIntStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVectorIntStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVectorIntStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVectorIntStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVectorIntStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVectorIntStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVectorIntStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVectorIntStd_swiginit(self, _gstlearn.new_DoNotUseVectorIntStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVectorIntStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVectorIntStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVectorIntStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVectorIntStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVectorIntStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVectorIntStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVectorIntStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVectorIntStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVectorIntStd

# Register DoNotUseVectorIntStd in _gstlearn:
_gstlearn.DoNotUseVectorIntStd_swigregister(DoNotUseVectorIntStd)
class DoNotUseVectorDoubleStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVectorDoubleStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVectorDoubleStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVectorDoubleStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVectorDoubleStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVectorDoubleStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVectorDoubleStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVectorDoubleStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVectorDoubleStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVectorDoubleStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVectorDoubleStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVectorDoubleStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVectorDoubleStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVectorDoubleStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVectorDoubleStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVectorDoubleStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVectorDoubleStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVectorDoubleStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVectorDoubleStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVectorDoubleStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVectorDoubleStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVectorDoubleStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVectorDoubleStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVectorDoubleStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVectorDoubleStd_swiginit(self, _gstlearn.new_DoNotUseVectorDoubleStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVectorDoubleStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVectorDoubleStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVectorDoubleStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVectorDoubleStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVectorDoubleStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVectorDoubleStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVectorDoubleStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVectorDoubleStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVectorDoubleStd

# Register DoNotUseVectorDoubleStd in _gstlearn:
_gstlearn.DoNotUseVectorDoubleStd_swigregister(DoNotUseVectorDoubleStd)
class DoNotUseVectorStringStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVectorStringStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVectorStringStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVectorStringStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVectorStringStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVectorStringStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVectorStringStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVectorStringStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVectorStringStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVectorStringStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVectorStringStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVectorStringStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVectorStringStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVectorStringStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVectorStringStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVectorStringStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVectorStringStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVectorStringStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVectorStringStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVectorStringStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVectorStringStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVectorStringStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVectorStringStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVectorStringStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVectorStringStd_swiginit(self, _gstlearn.new_DoNotUseVectorStringStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVectorStringStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVectorStringStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVectorStringStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVectorStringStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVectorStringStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVectorStringStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVectorStringStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVectorStringStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVectorStringStd

# Register DoNotUseVectorStringStd in _gstlearn:
_gstlearn.DoNotUseVectorStringStd_swigregister(DoNotUseVectorStringStd)
class DoNotUseVectorFloatStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVectorFloatStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVectorFloatStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVectorFloatStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVectorFloatStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVectorFloatStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVectorFloatStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVectorFloatStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVectorFloatStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVectorFloatStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVectorFloatStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVectorFloatStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVectorFloatStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVectorFloatStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVectorFloatStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVectorFloatStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVectorFloatStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVectorFloatStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVectorFloatStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVectorFloatStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVectorFloatStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVectorFloatStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVectorFloatStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVectorFloatStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVectorFloatStd_swiginit(self, _gstlearn.new_DoNotUseVectorFloatStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVectorFloatStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVectorFloatStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVectorFloatStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVectorFloatStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVectorFloatStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVectorFloatStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVectorFloatStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVectorFloatStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVectorFloatStd

# Register DoNotUseVectorFloatStd in _gstlearn:
_gstlearn.DoNotUseVectorFloatStd_swigregister(DoNotUseVectorFloatStd)
class DoNotUseVectorUCharStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVectorUCharStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVectorUCharStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVectorUCharStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVectorUCharStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVectorUCharStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVectorUCharStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVectorUCharStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVectorUCharStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVectorUCharStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVectorUCharStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVectorUCharStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVectorUCharStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVectorUCharStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVectorUCharStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVectorUCharStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVectorUCharStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVectorUCharStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVectorUCharStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVectorUCharStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVectorUCharStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVectorUCharStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVectorUCharStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVectorUCharStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVectorUCharStd_swiginit(self, _gstlearn.new_DoNotUseVectorUCharStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVectorUCharStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVectorUCharStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVectorUCharStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVectorUCharStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVectorUCharStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVectorUCharStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVectorUCharStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVectorUCharStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVectorUCharStd

# Register DoNotUseVectorUCharStd in _gstlearn:
_gstlearn.DoNotUseVectorUCharStd_swigregister(DoNotUseVectorUCharStd)
class DoNotUseVectorBoolStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVectorBoolStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVectorBoolStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVectorBoolStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVectorBoolStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVectorBoolStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVectorBoolStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVectorBoolStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVectorBoolStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVectorBoolStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVectorBoolStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVectorBoolStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVectorBoolStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVectorBoolStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVectorBoolStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVectorBoolStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVectorBoolStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVectorBoolStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVectorBoolStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVectorBoolStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVectorBoolStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVectorBoolStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVectorBoolStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVectorBoolStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVectorBoolStd_swiginit(self, _gstlearn.new_DoNotUseVectorBoolStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVectorBoolStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVectorBoolStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVectorBoolStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVectorBoolStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVectorBoolStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVectorBoolStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVectorBoolStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVectorBoolStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVectorBoolStd

# Register DoNotUseVectorBoolStd in _gstlearn:
_gstlearn.DoNotUseVectorBoolStd_swigregister(DoNotUseVectorBoolStd)
class DoNotUseVVectorIntStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVVectorIntStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVVectorIntStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVVectorIntStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVVectorIntStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVVectorIntStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVVectorIntStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVVectorIntStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVVectorIntStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVVectorIntStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVVectorIntStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVVectorIntStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVVectorIntStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVVectorIntStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVVectorIntStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVVectorIntStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVVectorIntStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVVectorIntStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVVectorIntStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVVectorIntStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVVectorIntStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVVectorIntStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVVectorIntStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVVectorIntStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVVectorIntStd_swiginit(self, _gstlearn.new_DoNotUseVVectorIntStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVVectorIntStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVVectorIntStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVVectorIntStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVVectorIntStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVVectorIntStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVVectorIntStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVVectorIntStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVVectorIntStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVVectorIntStd

# Register DoNotUseVVectorIntStd in _gstlearn:
_gstlearn.DoNotUseVVectorIntStd_swigregister(DoNotUseVVectorIntStd)
class DoNotUseVVectorDoubleStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVVectorDoubleStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVVectorDoubleStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVVectorDoubleStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVVectorDoubleStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVVectorDoubleStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVVectorDoubleStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVVectorDoubleStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVVectorDoubleStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVVectorDoubleStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVVectorDoubleStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVVectorDoubleStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVVectorDoubleStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVVectorDoubleStd_swiginit(self, _gstlearn.new_DoNotUseVVectorDoubleStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVVectorDoubleStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVVectorDoubleStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVVectorDoubleStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVVectorDoubleStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVVectorDoubleStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVVectorDoubleStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVVectorDoubleStd

# Register DoNotUseVVectorDoubleStd in _gstlearn:
_gstlearn.DoNotUseVVectorDoubleStd_swigregister(DoNotUseVVectorDoubleStd)
class DoNotUseVVectorFloatStd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.DoNotUseVVectorFloatStd_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.DoNotUseVVectorFloatStd___nonzero__(self)

    def __bool__(self):
        return _gstlearn.DoNotUseVVectorFloatStd___bool__(self)

    def __len__(self):
        return _gstlearn.DoNotUseVVectorFloatStd___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.DoNotUseVVectorFloatStd___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.DoNotUseVVectorFloatStd___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.DoNotUseVVectorFloatStd___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.DoNotUseVVectorFloatStd___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.DoNotUseVVectorFloatStd___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.DoNotUseVVectorFloatStd___setitem__(self, *args)

    def pop(self):
        return _gstlearn.DoNotUseVVectorFloatStd_pop(self)

    def append(self, x):
        return _gstlearn.DoNotUseVVectorFloatStd_append(self, x)

    def empty(self):
        return _gstlearn.DoNotUseVVectorFloatStd_empty(self)

    def size(self):
        return _gstlearn.DoNotUseVVectorFloatStd_size(self)

    def swap(self, v):
        return _gstlearn.DoNotUseVVectorFloatStd_swap(self, v)

    def begin(self):
        return _gstlearn.DoNotUseVVectorFloatStd_begin(self)

    def end(self):
        return _gstlearn.DoNotUseVVectorFloatStd_end(self)

    def rbegin(self):
        return _gstlearn.DoNotUseVVectorFloatStd_rbegin(self)

    def rend(self):
        return _gstlearn.DoNotUseVVectorFloatStd_rend(self)

    def clear(self):
        return _gstlearn.DoNotUseVVectorFloatStd_clear(self)

    def get_allocator(self):
        return _gstlearn.DoNotUseVVectorFloatStd_get_allocator(self)

    def pop_back(self):
        return _gstlearn.DoNotUseVVectorFloatStd_pop_back(self)

    def erase(self, *args):
        return _gstlearn.DoNotUseVVectorFloatStd_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.DoNotUseVVectorFloatStd_swiginit(self, _gstlearn.new_DoNotUseVVectorFloatStd(*args))

    def push_back(self, x):
        return _gstlearn.DoNotUseVVectorFloatStd_push_back(self, x)

    def front(self):
        return _gstlearn.DoNotUseVVectorFloatStd_front(self)

    def back(self):
        return _gstlearn.DoNotUseVVectorFloatStd_back(self)

    def assign(self, n, x):
        return _gstlearn.DoNotUseVVectorFloatStd_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.DoNotUseVVectorFloatStd_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.DoNotUseVVectorFloatStd_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.DoNotUseVVectorFloatStd_reserve(self, n)

    def capacity(self):
        return _gstlearn.DoNotUseVVectorFloatStd_capacity(self)
    __swig_destroy__ = _gstlearn.delete_DoNotUseVVectorFloatStd

# Register DoNotUseVVectorFloatStd in _gstlearn:
_gstlearn.DoNotUseVVectorFloatStd_swigregister(DoNotUseVVectorFloatStd)
class VectorECov(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorECov_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorECov___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorECov___bool__(self)

    def __len__(self):
        return _gstlearn.VectorECov___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorECov___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorECov___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorECov___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorECov___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorECov___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorECov___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorECov_pop(self)

    def append(self, x):
        return _gstlearn.VectorECov_append(self, x)

    def empty(self):
        return _gstlearn.VectorECov_empty(self)

    def size(self):
        return _gstlearn.VectorECov_size(self)

    def swap(self, v):
        return _gstlearn.VectorECov_swap(self, v)

    def begin(self):
        return _gstlearn.VectorECov_begin(self)

    def end(self):
        return _gstlearn.VectorECov_end(self)

    def rbegin(self):
        return _gstlearn.VectorECov_rbegin(self)

    def rend(self):
        return _gstlearn.VectorECov_rend(self)

    def clear(self):
        return _gstlearn.VectorECov_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorECov_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorECov_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorECov_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorECov_swiginit(self, _gstlearn.new_VectorECov(*args))

    def push_back(self, x):
        return _gstlearn.VectorECov_push_back(self, x)

    def front(self):
        return _gstlearn.VectorECov_front(self)

    def back(self):
        return _gstlearn.VectorECov_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorECov_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorECov_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorECov_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorECov_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorECov_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorECov

# Register VectorECov in _gstlearn:
_gstlearn.VectorECov_swigregister(VectorECov)
class VectorEStatOption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorEStatOption_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorEStatOption___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorEStatOption___bool__(self)

    def __len__(self):
        return _gstlearn.VectorEStatOption___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorEStatOption___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorEStatOption___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorEStatOption___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorEStatOption___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorEStatOption___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorEStatOption___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorEStatOption_pop(self)

    def append(self, x):
        return _gstlearn.VectorEStatOption_append(self, x)

    def empty(self):
        return _gstlearn.VectorEStatOption_empty(self)

    def size(self):
        return _gstlearn.VectorEStatOption_size(self)

    def swap(self, v):
        return _gstlearn.VectorEStatOption_swap(self, v)

    def begin(self):
        return _gstlearn.VectorEStatOption_begin(self)

    def end(self):
        return _gstlearn.VectorEStatOption_end(self)

    def rbegin(self):
        return _gstlearn.VectorEStatOption_rbegin(self)

    def rend(self):
        return _gstlearn.VectorEStatOption_rend(self)

    def clear(self):
        return _gstlearn.VectorEStatOption_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorEStatOption_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorEStatOption_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorEStatOption_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorEStatOption_swiginit(self, _gstlearn.new_VectorEStatOption(*args))

    def push_back(self, x):
        return _gstlearn.VectorEStatOption_push_back(self, x)

    def front(self):
        return _gstlearn.VectorEStatOption_front(self)

    def back(self):
        return _gstlearn.VectorEStatOption_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorEStatOption_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorEStatOption_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorEStatOption_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorEStatOption_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorEStatOption_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorEStatOption

# Register VectorEStatOption in _gstlearn:
_gstlearn.VectorEStatOption_swigregister(VectorEStatOption)
class VectorESelectivity(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorESelectivity_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorESelectivity___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorESelectivity___bool__(self)

    def __len__(self):
        return _gstlearn.VectorESelectivity___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorESelectivity___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorESelectivity___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorESelectivity___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorESelectivity___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorESelectivity___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorESelectivity___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorESelectivity_pop(self)

    def append(self, x):
        return _gstlearn.VectorESelectivity_append(self, x)

    def empty(self):
        return _gstlearn.VectorESelectivity_empty(self)

    def size(self):
        return _gstlearn.VectorESelectivity_size(self)

    def swap(self, v):
        return _gstlearn.VectorESelectivity_swap(self, v)

    def begin(self):
        return _gstlearn.VectorESelectivity_begin(self)

    def end(self):
        return _gstlearn.VectorESelectivity_end(self)

    def rbegin(self):
        return _gstlearn.VectorESelectivity_rbegin(self)

    def rend(self):
        return _gstlearn.VectorESelectivity_rend(self)

    def clear(self):
        return _gstlearn.VectorESelectivity_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorESelectivity_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorESelectivity_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorESelectivity_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorESelectivity_swiginit(self, _gstlearn.new_VectorESelectivity(*args))

    def push_back(self, x):
        return _gstlearn.VectorESelectivity_push_back(self, x)

    def front(self):
        return _gstlearn.VectorESelectivity_front(self)

    def back(self):
        return _gstlearn.VectorESelectivity_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorESelectivity_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorESelectivity_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorESelectivity_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorESelectivity_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorESelectivity_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorESelectivity

# Register VectorESelectivity in _gstlearn:
_gstlearn.VectorESelectivity_swigregister(VectorESelectivity)
class VectorDirParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorDirParam_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorDirParam___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorDirParam___bool__(self)

    def __len__(self):
        return _gstlearn.VectorDirParam___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorDirParam___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorDirParam___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorDirParam___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorDirParam___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorDirParam___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorDirParam___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorDirParam_pop(self)

    def append(self, x):
        return _gstlearn.VectorDirParam_append(self, x)

    def empty(self):
        return _gstlearn.VectorDirParam_empty(self)

    def size(self):
        return _gstlearn.VectorDirParam_size(self)

    def swap(self, v):
        return _gstlearn.VectorDirParam_swap(self, v)

    def begin(self):
        return _gstlearn.VectorDirParam_begin(self)

    def end(self):
        return _gstlearn.VectorDirParam_end(self)

    def rbegin(self):
        return _gstlearn.VectorDirParam_rbegin(self)

    def rend(self):
        return _gstlearn.VectorDirParam_rend(self)

    def clear(self):
        return _gstlearn.VectorDirParam_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorDirParam_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorDirParam_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorDirParam_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorDirParam_swiginit(self, _gstlearn.new_VectorDirParam(*args))

    def push_back(self, x):
        return _gstlearn.VectorDirParam_push_back(self, x)

    def front(self):
        return _gstlearn.VectorDirParam_front(self)

    def back(self):
        return _gstlearn.VectorDirParam_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorDirParam_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorDirParam_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorDirParam_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorDirParam_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorDirParam_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorDirParam

# Register VectorDirParam in _gstlearn:
_gstlearn.VectorDirParam_swigregister(VectorDirParam)
class VectorPolyElem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorPolyElem_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorPolyElem___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorPolyElem___bool__(self)

    def __len__(self):
        return _gstlearn.VectorPolyElem___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorPolyElem___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorPolyElem___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorPolyElem___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorPolyElem___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorPolyElem___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorPolyElem___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorPolyElem_pop(self)

    def append(self, x):
        return _gstlearn.VectorPolyElem_append(self, x)

    def empty(self):
        return _gstlearn.VectorPolyElem_empty(self)

    def size(self):
        return _gstlearn.VectorPolyElem_size(self)

    def swap(self, v):
        return _gstlearn.VectorPolyElem_swap(self, v)

    def begin(self):
        return _gstlearn.VectorPolyElem_begin(self)

    def end(self):
        return _gstlearn.VectorPolyElem_end(self)

    def rbegin(self):
        return _gstlearn.VectorPolyElem_rbegin(self)

    def rend(self):
        return _gstlearn.VectorPolyElem_rend(self)

    def clear(self):
        return _gstlearn.VectorPolyElem_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorPolyElem_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorPolyElem_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorPolyElem_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorPolyElem_swiginit(self, _gstlearn.new_VectorPolyElem(*args))

    def push_back(self, x):
        return _gstlearn.VectorPolyElem_push_back(self, x)

    def front(self):
        return _gstlearn.VectorPolyElem_front(self)

    def back(self):
        return _gstlearn.VectorPolyElem_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorPolyElem_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorPolyElem_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorPolyElem_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorPolyElem_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorPolyElem_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorPolyElem

# Register VectorPolyElem in _gstlearn:
_gstlearn.VectorPolyElem_swigregister(VectorPolyElem)
class VectorInterval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorInterval_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorInterval___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorInterval___bool__(self)

    def __len__(self):
        return _gstlearn.VectorInterval___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorInterval___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorInterval___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorInterval___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorInterval___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorInterval___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorInterval___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorInterval_pop(self)

    def append(self, x):
        return _gstlearn.VectorInterval_append(self, x)

    def empty(self):
        return _gstlearn.VectorInterval_empty(self)

    def size(self):
        return _gstlearn.VectorInterval_size(self)

    def swap(self, v):
        return _gstlearn.VectorInterval_swap(self, v)

    def begin(self):
        return _gstlearn.VectorInterval_begin(self)

    def end(self):
        return _gstlearn.VectorInterval_end(self)

    def rbegin(self):
        return _gstlearn.VectorInterval_rbegin(self)

    def rend(self):
        return _gstlearn.VectorInterval_rend(self)

    def clear(self):
        return _gstlearn.VectorInterval_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorInterval_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorInterval_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorInterval_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorInterval_swiginit(self, _gstlearn.new_VectorInterval(*args))

    def push_back(self, x):
        return _gstlearn.VectorInterval_push_back(self, x)

    def front(self):
        return _gstlearn.VectorInterval_front(self)

    def back(self):
        return _gstlearn.VectorInterval_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorInterval_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorInterval_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorInterval_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorInterval_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorInterval_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorInterval

# Register VectorInterval in _gstlearn:
_gstlearn.VectorInterval_swigregister(VectorInterval)
class VectorEPostStat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorEPostStat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorEPostStat___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorEPostStat___bool__(self)

    def __len__(self):
        return _gstlearn.VectorEPostStat___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorEPostStat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorEPostStat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorEPostStat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorEPostStat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorEPostStat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorEPostStat___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorEPostStat_pop(self)

    def append(self, x):
        return _gstlearn.VectorEPostStat_append(self, x)

    def empty(self):
        return _gstlearn.VectorEPostStat_empty(self)

    def size(self):
        return _gstlearn.VectorEPostStat_size(self)

    def swap(self, v):
        return _gstlearn.VectorEPostStat_swap(self, v)

    def begin(self):
        return _gstlearn.VectorEPostStat_begin(self)

    def end(self):
        return _gstlearn.VectorEPostStat_end(self)

    def rbegin(self):
        return _gstlearn.VectorEPostStat_rbegin(self)

    def rend(self):
        return _gstlearn.VectorEPostStat_rend(self)

    def clear(self):
        return _gstlearn.VectorEPostStat_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorEPostStat_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorEPostStat_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorEPostStat_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorEPostStat_swiginit(self, _gstlearn.new_VectorEPostStat(*args))

    def push_back(self, x):
        return _gstlearn.VectorEPostStat_push_back(self, x)

    def front(self):
        return _gstlearn.VectorEPostStat_front(self)

    def back(self):
        return _gstlearn.VectorEPostStat_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorEPostStat_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorEPostStat_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorEPostStat_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorEPostStat_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorEPostStat_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorEPostStat

# Register VectorEPostStat in _gstlearn:
_gstlearn.VectorEPostStat_swigregister(VectorEPostStat)
class VectorSpacePoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorSpacePoint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorSpacePoint___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorSpacePoint___bool__(self)

    def __len__(self):
        return _gstlearn.VectorSpacePoint___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorSpacePoint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorSpacePoint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorSpacePoint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorSpacePoint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorSpacePoint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorSpacePoint___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorSpacePoint_pop(self)

    def append(self, x):
        return _gstlearn.VectorSpacePoint_append(self, x)

    def empty(self):
        return _gstlearn.VectorSpacePoint_empty(self)

    def size(self):
        return _gstlearn.VectorSpacePoint_size(self)

    def swap(self, v):
        return _gstlearn.VectorSpacePoint_swap(self, v)

    def begin(self):
        return _gstlearn.VectorSpacePoint_begin(self)

    def end(self):
        return _gstlearn.VectorSpacePoint_end(self)

    def rbegin(self):
        return _gstlearn.VectorSpacePoint_rbegin(self)

    def rend(self):
        return _gstlearn.VectorSpacePoint_rend(self)

    def clear(self):
        return _gstlearn.VectorSpacePoint_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorSpacePoint_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorSpacePoint_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorSpacePoint_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorSpacePoint_swiginit(self, _gstlearn.new_VectorSpacePoint(*args))

    def push_back(self, x):
        return _gstlearn.VectorSpacePoint_push_back(self, x)

    def front(self):
        return _gstlearn.VectorSpacePoint_front(self)

    def back(self):
        return _gstlearn.VectorSpacePoint_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorSpacePoint_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorSpacePoint_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorSpacePoint_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorSpacePoint_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorSpacePoint_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorSpacePoint

# Register VectorSpacePoint in _gstlearn:
_gstlearn.VectorSpacePoint_swigregister(VectorSpacePoint)
class VectorABiTargetCheck(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorABiTargetCheck_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorABiTargetCheck___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorABiTargetCheck___bool__(self)

    def __len__(self):
        return _gstlearn.VectorABiTargetCheck___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorABiTargetCheck___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorABiTargetCheck___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorABiTargetCheck___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorABiTargetCheck___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorABiTargetCheck___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorABiTargetCheck___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorABiTargetCheck_pop(self)

    def append(self, x):
        return _gstlearn.VectorABiTargetCheck_append(self, x)

    def empty(self):
        return _gstlearn.VectorABiTargetCheck_empty(self)

    def size(self):
        return _gstlearn.VectorABiTargetCheck_size(self)

    def swap(self, v):
        return _gstlearn.VectorABiTargetCheck_swap(self, v)

    def begin(self):
        return _gstlearn.VectorABiTargetCheck_begin(self)

    def end(self):
        return _gstlearn.VectorABiTargetCheck_end(self)

    def rbegin(self):
        return _gstlearn.VectorABiTargetCheck_rbegin(self)

    def rend(self):
        return _gstlearn.VectorABiTargetCheck_rend(self)

    def clear(self):
        return _gstlearn.VectorABiTargetCheck_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorABiTargetCheck_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorABiTargetCheck_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorABiTargetCheck_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorABiTargetCheck_swiginit(self, _gstlearn.new_VectorABiTargetCheck(*args))

    def push_back(self, x):
        return _gstlearn.VectorABiTargetCheck_push_back(self, x)

    def front(self):
        return _gstlearn.VectorABiTargetCheck_front(self)

    def back(self):
        return _gstlearn.VectorABiTargetCheck_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorABiTargetCheck_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorABiTargetCheck_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorABiTargetCheck_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorABiTargetCheck_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorABiTargetCheck_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorABiTargetCheck

# Register VectorABiTargetCheck in _gstlearn:
_gstlearn.VectorABiTargetCheck_swigregister(VectorABiTargetCheck)
class VectorProjMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorProjMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorProjMatrix___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorProjMatrix___bool__(self)

    def __len__(self):
        return _gstlearn.VectorProjMatrix___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorProjMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorProjMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorProjMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorProjMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorProjMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorProjMatrix___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorProjMatrix_pop(self)

    def append(self, x):
        return _gstlearn.VectorProjMatrix_append(self, x)

    def empty(self):
        return _gstlearn.VectorProjMatrix_empty(self)

    def size(self):
        return _gstlearn.VectorProjMatrix_size(self)

    def swap(self, v):
        return _gstlearn.VectorProjMatrix_swap(self, v)

    def begin(self):
        return _gstlearn.VectorProjMatrix_begin(self)

    def end(self):
        return _gstlearn.VectorProjMatrix_end(self)

    def rbegin(self):
        return _gstlearn.VectorProjMatrix_rbegin(self)

    def rend(self):
        return _gstlearn.VectorProjMatrix_rend(self)

    def clear(self):
        return _gstlearn.VectorProjMatrix_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorProjMatrix_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorProjMatrix_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorProjMatrix_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorProjMatrix_swiginit(self, _gstlearn.new_VectorProjMatrix(*args))

    def push_back(self, x):
        return _gstlearn.VectorProjMatrix_push_back(self, x)

    def front(self):
        return _gstlearn.VectorProjMatrix_front(self)

    def back(self):
        return _gstlearn.VectorProjMatrix_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorProjMatrix_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorProjMatrix_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorProjMatrix_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorProjMatrix_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorProjMatrix_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorProjMatrix

# Register VectorProjMatrix in _gstlearn:
_gstlearn.VectorProjMatrix_swigregister(VectorProjMatrix)
class VectorConstProjMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorConstProjMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorConstProjMatrix___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorConstProjMatrix___bool__(self)

    def __len__(self):
        return _gstlearn.VectorConstProjMatrix___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorConstProjMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorConstProjMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorConstProjMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorConstProjMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorConstProjMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorConstProjMatrix___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorConstProjMatrix_pop(self)

    def append(self, x):
        return _gstlearn.VectorConstProjMatrix_append(self, x)

    def empty(self):
        return _gstlearn.VectorConstProjMatrix_empty(self)

    def size(self):
        return _gstlearn.VectorConstProjMatrix_size(self)

    def swap(self, v):
        return _gstlearn.VectorConstProjMatrix_swap(self, v)

    def begin(self):
        return _gstlearn.VectorConstProjMatrix_begin(self)

    def end(self):
        return _gstlearn.VectorConstProjMatrix_end(self)

    def rbegin(self):
        return _gstlearn.VectorConstProjMatrix_rbegin(self)

    def rend(self):
        return _gstlearn.VectorConstProjMatrix_rend(self)

    def clear(self):
        return _gstlearn.VectorConstProjMatrix_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorConstProjMatrix_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorConstProjMatrix_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorConstProjMatrix_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorConstProjMatrix_swiginit(self, _gstlearn.new_VectorConstProjMatrix(*args))

    def push_back(self, x):
        return _gstlearn.VectorConstProjMatrix_push_back(self, x)

    def front(self):
        return _gstlearn.VectorConstProjMatrix_front(self)

    def back(self):
        return _gstlearn.VectorConstProjMatrix_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorConstProjMatrix_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorConstProjMatrix_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorConstProjMatrix_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorConstProjMatrix_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorConstProjMatrix_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorConstProjMatrix

# Register VectorConstProjMatrix in _gstlearn:
_gstlearn.VectorConstProjMatrix_swigregister(VectorConstProjMatrix)
class VectorConstIProj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorConstIProj_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorConstIProj___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorConstIProj___bool__(self)

    def __len__(self):
        return _gstlearn.VectorConstIProj___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorConstIProj___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorConstIProj___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorConstIProj___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorConstIProj___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorConstIProj___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorConstIProj___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorConstIProj_pop(self)

    def append(self, x):
        return _gstlearn.VectorConstIProj_append(self, x)

    def empty(self):
        return _gstlearn.VectorConstIProj_empty(self)

    def size(self):
        return _gstlearn.VectorConstIProj_size(self)

    def swap(self, v):
        return _gstlearn.VectorConstIProj_swap(self, v)

    def begin(self):
        return _gstlearn.VectorConstIProj_begin(self)

    def end(self):
        return _gstlearn.VectorConstIProj_end(self)

    def rbegin(self):
        return _gstlearn.VectorConstIProj_rbegin(self)

    def rend(self):
        return _gstlearn.VectorConstIProj_rend(self)

    def clear(self):
        return _gstlearn.VectorConstIProj_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorConstIProj_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorConstIProj_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorConstIProj_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorConstIProj_swiginit(self, _gstlearn.new_VectorConstIProj(*args))

    def push_back(self, x):
        return _gstlearn.VectorConstIProj_push_back(self, x)

    def front(self):
        return _gstlearn.VectorConstIProj_front(self)

    def back(self):
        return _gstlearn.VectorConstIProj_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorConstIProj_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorConstIProj_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorConstIProj_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorConstIProj_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorConstIProj_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorConstIProj

# Register VectorConstIProj in _gstlearn:
_gstlearn.VectorConstIProj_swigregister(VectorConstIProj)
class VVectorConstProjMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VVectorConstProjMatrix_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VVectorConstProjMatrix___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VVectorConstProjMatrix___bool__(self)

    def __len__(self):
        return _gstlearn.VVectorConstProjMatrix___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VVectorConstProjMatrix___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VVectorConstProjMatrix___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VVectorConstProjMatrix___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VVectorConstProjMatrix___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VVectorConstProjMatrix___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VVectorConstProjMatrix___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VVectorConstProjMatrix_pop(self)

    def append(self, x):
        return _gstlearn.VVectorConstProjMatrix_append(self, x)

    def empty(self):
        return _gstlearn.VVectorConstProjMatrix_empty(self)

    def size(self):
        return _gstlearn.VVectorConstProjMatrix_size(self)

    def swap(self, v):
        return _gstlearn.VVectorConstProjMatrix_swap(self, v)

    def begin(self):
        return _gstlearn.VVectorConstProjMatrix_begin(self)

    def end(self):
        return _gstlearn.VVectorConstProjMatrix_end(self)

    def rbegin(self):
        return _gstlearn.VVectorConstProjMatrix_rbegin(self)

    def rend(self):
        return _gstlearn.VVectorConstProjMatrix_rend(self)

    def clear(self):
        return _gstlearn.VVectorConstProjMatrix_clear(self)

    def get_allocator(self):
        return _gstlearn.VVectorConstProjMatrix_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VVectorConstProjMatrix_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VVectorConstProjMatrix_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VVectorConstProjMatrix_swiginit(self, _gstlearn.new_VVectorConstProjMatrix(*args))

    def push_back(self, x):
        return _gstlearn.VVectorConstProjMatrix_push_back(self, x)

    def front(self):
        return _gstlearn.VVectorConstProjMatrix_front(self)

    def back(self):
        return _gstlearn.VVectorConstProjMatrix_back(self)

    def assign(self, n, x):
        return _gstlearn.VVectorConstProjMatrix_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VVectorConstProjMatrix_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VVectorConstProjMatrix_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VVectorConstProjMatrix_reserve(self, n)

    def capacity(self):
        return _gstlearn.VVectorConstProjMatrix_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VVectorConstProjMatrix

# Register VVectorConstProjMatrix in _gstlearn:
_gstlearn.VVectorConstProjMatrix_swigregister(VVectorConstProjMatrix)
class VVectorConstIProj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VVectorConstIProj_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VVectorConstIProj___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VVectorConstIProj___bool__(self)

    def __len__(self):
        return _gstlearn.VVectorConstIProj___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VVectorConstIProj___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VVectorConstIProj___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VVectorConstIProj___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VVectorConstIProj___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VVectorConstIProj___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VVectorConstIProj___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VVectorConstIProj_pop(self)

    def append(self, x):
        return _gstlearn.VVectorConstIProj_append(self, x)

    def empty(self):
        return _gstlearn.VVectorConstIProj_empty(self)

    def size(self):
        return _gstlearn.VVectorConstIProj_size(self)

    def swap(self, v):
        return _gstlearn.VVectorConstIProj_swap(self, v)

    def begin(self):
        return _gstlearn.VVectorConstIProj_begin(self)

    def end(self):
        return _gstlearn.VVectorConstIProj_end(self)

    def rbegin(self):
        return _gstlearn.VVectorConstIProj_rbegin(self)

    def rend(self):
        return _gstlearn.VVectorConstIProj_rend(self)

    def clear(self):
        return _gstlearn.VVectorConstIProj_clear(self)

    def get_allocator(self):
        return _gstlearn.VVectorConstIProj_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VVectorConstIProj_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VVectorConstIProj_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VVectorConstIProj_swiginit(self, _gstlearn.new_VVectorConstIProj(*args))

    def push_back(self, x):
        return _gstlearn.VVectorConstIProj_push_back(self, x)

    def front(self):
        return _gstlearn.VVectorConstIProj_front(self)

    def back(self):
        return _gstlearn.VVectorConstIProj_back(self)

    def assign(self, n, x):
        return _gstlearn.VVectorConstIProj_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VVectorConstIProj_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VVectorConstIProj_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VVectorConstIProj_reserve(self, n)

    def capacity(self):
        return _gstlearn.VVectorConstIProj_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VVectorConstIProj

# Register VVectorConstIProj in _gstlearn:
_gstlearn.VVectorConstIProj_swigregister(VVectorConstIProj)
class VectorMeshes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _gstlearn.VectorMeshes_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _gstlearn.VectorMeshes___nonzero__(self)

    def __bool__(self):
        return _gstlearn.VectorMeshes___bool__(self)

    def __len__(self):
        return _gstlearn.VectorMeshes___len__(self)

    def __getslice__(self, i, j):
        return _gstlearn.VectorMeshes___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _gstlearn.VectorMeshes___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _gstlearn.VectorMeshes___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _gstlearn.VectorMeshes___delitem__(self, *args)

    def __getitem__(self, *args):
        return _gstlearn.VectorMeshes___getitem__(self, *args)

    def __setitem__(self, *args):
        return _gstlearn.VectorMeshes___setitem__(self, *args)

    def pop(self):
        return _gstlearn.VectorMeshes_pop(self)

    def append(self, x):
        return _gstlearn.VectorMeshes_append(self, x)

    def empty(self):
        return _gstlearn.VectorMeshes_empty(self)

    def size(self):
        return _gstlearn.VectorMeshes_size(self)

    def swap(self, v):
        return _gstlearn.VectorMeshes_swap(self, v)

    def begin(self):
        return _gstlearn.VectorMeshes_begin(self)

    def end(self):
        return _gstlearn.VectorMeshes_end(self)

    def rbegin(self):
        return _gstlearn.VectorMeshes_rbegin(self)

    def rend(self):
        return _gstlearn.VectorMeshes_rend(self)

    def clear(self):
        return _gstlearn.VectorMeshes_clear(self)

    def get_allocator(self):
        return _gstlearn.VectorMeshes_get_allocator(self)

    def pop_back(self):
        return _gstlearn.VectorMeshes_pop_back(self)

    def erase(self, *args):
        return _gstlearn.VectorMeshes_erase(self, *args)

    def __init__(self, *args):
        _gstlearn.VectorMeshes_swiginit(self, _gstlearn.new_VectorMeshes(*args))

    def push_back(self, x):
        return _gstlearn.VectorMeshes_push_back(self, x)

    def front(self):
        return _gstlearn.VectorMeshes_front(self)

    def back(self):
        return _gstlearn.VectorMeshes_back(self)

    def assign(self, n, x):
        return _gstlearn.VectorMeshes_assign(self, n, x)

    def resize(self, *args):
        return _gstlearn.VectorMeshes_resize(self, *args)

    def insert(self, *args):
        return _gstlearn.VectorMeshes_insert(self, *args)

    def reserve(self, n):
        return _gstlearn.VectorMeshes_reserve(self, n)

    def capacity(self):
        return _gstlearn.VectorMeshes_capacity(self)
    __swig_destroy__ = _gstlearn.delete_VectorMeshes

# Register VectorMeshes in _gstlearn:
_gstlearn.VectorMeshes_swigregister(VectorMeshes)
class VectorTInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.VectorTInt_swiginit(self, _gstlearn.new_VectorTInt(*args))
    __swig_destroy__ = _gstlearn.delete_VectorTInt

    def getVector(self):
        return _gstlearn.VectorTInt_getVector(self)

    def getVectorPtr(self):
        return _gstlearn.VectorTInt_getVectorPtr(self)

    def __eq__(self, other):
        return _gstlearn.VectorTInt___eq__(self, other)

    def __ne__(self, other):
        return _gstlearn.VectorTInt___ne__(self, other)

    def __lt__(self, other):
        return _gstlearn.VectorTInt___lt__(self, other)

    def __le__(self, other):
        return _gstlearn.VectorTInt___le__(self, other)

    def __gt__(self, other):
        return _gstlearn.VectorTInt___gt__(self, other)

    def __ge__(self, other):
        return _gstlearn.VectorTInt___ge__(self, other)

    def getAt(self, pos):
        return _gstlearn.VectorTInt_getAt(self, pos)

    def setAt(self, pos, v):
        return _gstlearn.VectorTInt_setAt(self, pos, v)

    def length(self):
        return _gstlearn.VectorTInt_length(self)

    def front(self, *args):
        return _gstlearn.VectorTInt_front(self, *args)

    def back(self, *args):
        return _gstlearn.VectorTInt_back(self, *args)

    def data(self, *args):
        return _gstlearn.VectorTInt_data(self, *args)

    def constData(self):
        return _gstlearn.VectorTInt_constData(self)

    def subdata(self, *args):
        return _gstlearn.VectorTInt_subdata(self, *args)

    def empty(self):
        return _gstlearn.VectorTInt_empty(self)

    def size(self):
        return _gstlearn.VectorTInt_size(self)

    def reserve(self, new_cap):
        return _gstlearn.VectorTInt_reserve(self, new_cap)

    def capacity(self):
        return _gstlearn.VectorTInt_capacity(self)

    def clear(self):
        return _gstlearn.VectorTInt_clear(self)

    def insert(self, *args):
        return _gstlearn.VectorTInt_insert(self, *args)

    def remove(self, *args):
        return _gstlearn.VectorTInt_remove(self, *args)

    def erase(self, *args):
        return _gstlearn.VectorTInt_erase(self, *args)

    def push_back(self, value):
        return _gstlearn.VectorTInt_push_back(self, value)

    def push_front(self, value):
        return _gstlearn.VectorTInt_push_front(self, value)

    def resize(self, *args):
        return _gstlearn.VectorTInt_resize(self, *args)

    def begin(self, *args):
        return _gstlearn.VectorTInt_begin(self, *args)

    def cbegin(self):
        return _gstlearn.VectorTInt_cbegin(self)

    def end(self, *args):
        return _gstlearn.VectorTInt_end(self, *args)

    def cend(self):
        return _gstlearn.VectorTInt_cend(self)

    def rbegin(self):
        return _gstlearn.VectorTInt_rbegin(self)

    def crbegin(self):
        return _gstlearn.VectorTInt_crbegin(self)

    def rend(self):
        return _gstlearn.VectorTInt_rend(self)

    def crend(self):
        return _gstlearn.VectorTInt_crend(self)

    def swap(self, other):
        return _gstlearn.VectorTInt_swap(self, other)

    def contains(self, value):
        return _gstlearn.VectorTInt_contains(self, value)

    def fill(self, value, size=0):
        return _gstlearn.VectorTInt_fill(self, value, size)

    def toString(self, strfmt=None):
        return _gstlearn.VectorTInt_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.VectorTInt_display(self, strfmt)

    def __repr__(self):
        return _gstlearn.VectorTInt___repr__(self)

# Register VectorTInt in _gstlearn:
_gstlearn.VectorTInt_swigregister(VectorTInt)
class VectorTDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VectorTDouble_swiginit(self, _gstlearn.new_VectorTDouble(*args))
    __swig_destroy__ = _gstlearn.delete_VectorTDouble

    def getVector(self):
        return _gstlearn.VectorTDouble_getVector(self)

    def getVectorPtr(self):
        return _gstlearn.VectorTDouble_getVectorPtr(self)

    def __eq__(self, other):
        return _gstlearn.VectorTDouble___eq__(self, other)

    def __ne__(self, other):
        return _gstlearn.VectorTDouble___ne__(self, other)

    def __lt__(self, other):
        return _gstlearn.VectorTDouble___lt__(self, other)

    def __le__(self, other):
        return _gstlearn.VectorTDouble___le__(self, other)

    def __gt__(self, other):
        return _gstlearn.VectorTDouble___gt__(self, other)

    def __ge__(self, other):
        return _gstlearn.VectorTDouble___ge__(self, other)

    def getAt(self, pos):
        return _gstlearn.VectorTDouble_getAt(self, pos)

    def setAt(self, pos, v):
        return _gstlearn.VectorTDouble_setAt(self, pos, v)

    def length(self):
        return _gstlearn.VectorTDouble_length(self)

    def front(self, *args):
        return _gstlearn.VectorTDouble_front(self, *args)

    def back(self, *args):
        return _gstlearn.VectorTDouble_back(self, *args)

    def data(self, *args):
        return _gstlearn.VectorTDouble_data(self, *args)

    def constData(self):
        return _gstlearn.VectorTDouble_constData(self)

    def subdata(self, *args):
        return _gstlearn.VectorTDouble_subdata(self, *args)

    def empty(self):
        return _gstlearn.VectorTDouble_empty(self)

    def size(self):
        return _gstlearn.VectorTDouble_size(self)

    def reserve(self, new_cap):
        return _gstlearn.VectorTDouble_reserve(self, new_cap)

    def capacity(self):
        return _gstlearn.VectorTDouble_capacity(self)

    def clear(self):
        return _gstlearn.VectorTDouble_clear(self)

    def insert(self, *args):
        return _gstlearn.VectorTDouble_insert(self, *args)

    def remove(self, *args):
        return _gstlearn.VectorTDouble_remove(self, *args)

    def erase(self, *args):
        return _gstlearn.VectorTDouble_erase(self, *args)

    def push_back(self, value):
        return _gstlearn.VectorTDouble_push_back(self, value)

    def push_front(self, value):
        return _gstlearn.VectorTDouble_push_front(self, value)

    def resize(self, *args):
        return _gstlearn.VectorTDouble_resize(self, *args)

    def begin(self, *args):
        return _gstlearn.VectorTDouble_begin(self, *args)

    def cbegin(self):
        return _gstlearn.VectorTDouble_cbegin(self)

    def end(self, *args):
        return _gstlearn.VectorTDouble_end(self, *args)

    def cend(self):
        return _gstlearn.VectorTDouble_cend(self)

    def rbegin(self):
        return _gstlearn.VectorTDouble_rbegin(self)

    def crbegin(self):
        return _gstlearn.VectorTDouble_crbegin(self)

    def rend(self):
        return _gstlearn.VectorTDouble_rend(self)

    def crend(self):
        return _gstlearn.VectorTDouble_crend(self)

    def swap(self, other):
        return _gstlearn.VectorTDouble_swap(self, other)

    def contains(self, value):
        return _gstlearn.VectorTDouble_contains(self, value)

    def fill(self, value, size=0):
        return _gstlearn.VectorTDouble_fill(self, value, size)

    def toString(self, strfmt=None):
        return _gstlearn.VectorTDouble_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.VectorTDouble_display(self, strfmt)

# Register VectorTDouble in _gstlearn:
_gstlearn.VectorTDouble_swigregister(VectorTDouble)
class VectorTFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VectorTFloat_swiginit(self, _gstlearn.new_VectorTFloat(*args))
    __swig_destroy__ = _gstlearn.delete_VectorTFloat

    def getVector(self):
        return _gstlearn.VectorTFloat_getVector(self)

    def getVectorPtr(self):
        return _gstlearn.VectorTFloat_getVectorPtr(self)

    def __eq__(self, other):
        return _gstlearn.VectorTFloat___eq__(self, other)

    def __ne__(self, other):
        return _gstlearn.VectorTFloat___ne__(self, other)

    def __lt__(self, other):
        return _gstlearn.VectorTFloat___lt__(self, other)

    def __le__(self, other):
        return _gstlearn.VectorTFloat___le__(self, other)

    def __gt__(self, other):
        return _gstlearn.VectorTFloat___gt__(self, other)

    def __ge__(self, other):
        return _gstlearn.VectorTFloat___ge__(self, other)

    def getAt(self, pos):
        return _gstlearn.VectorTFloat_getAt(self, pos)

    def setAt(self, pos, v):
        return _gstlearn.VectorTFloat_setAt(self, pos, v)

    def length(self):
        return _gstlearn.VectorTFloat_length(self)

    def front(self, *args):
        return _gstlearn.VectorTFloat_front(self, *args)

    def back(self, *args):
        return _gstlearn.VectorTFloat_back(self, *args)

    def data(self, *args):
        return _gstlearn.VectorTFloat_data(self, *args)

    def constData(self):
        return _gstlearn.VectorTFloat_constData(self)

    def subdata(self, *args):
        return _gstlearn.VectorTFloat_subdata(self, *args)

    def empty(self):
        return _gstlearn.VectorTFloat_empty(self)

    def size(self):
        return _gstlearn.VectorTFloat_size(self)

    def reserve(self, new_cap):
        return _gstlearn.VectorTFloat_reserve(self, new_cap)

    def capacity(self):
        return _gstlearn.VectorTFloat_capacity(self)

    def clear(self):
        return _gstlearn.VectorTFloat_clear(self)

    def insert(self, *args):
        return _gstlearn.VectorTFloat_insert(self, *args)

    def remove(self, *args):
        return _gstlearn.VectorTFloat_remove(self, *args)

    def erase(self, *args):
        return _gstlearn.VectorTFloat_erase(self, *args)

    def push_back(self, value):
        return _gstlearn.VectorTFloat_push_back(self, value)

    def push_front(self, value):
        return _gstlearn.VectorTFloat_push_front(self, value)

    def resize(self, *args):
        return _gstlearn.VectorTFloat_resize(self, *args)

    def begin(self, *args):
        return _gstlearn.VectorTFloat_begin(self, *args)

    def cbegin(self):
        return _gstlearn.VectorTFloat_cbegin(self)

    def end(self, *args):
        return _gstlearn.VectorTFloat_end(self, *args)

    def cend(self):
        return _gstlearn.VectorTFloat_cend(self)

    def rbegin(self):
        return _gstlearn.VectorTFloat_rbegin(self)

    def crbegin(self):
        return _gstlearn.VectorTFloat_crbegin(self)

    def rend(self):
        return _gstlearn.VectorTFloat_rend(self)

    def crend(self):
        return _gstlearn.VectorTFloat_crend(self)

    def swap(self, other):
        return _gstlearn.VectorTFloat_swap(self, other)

    def contains(self, value):
        return _gstlearn.VectorTFloat_contains(self, value)

    def fill(self, value, size=0):
        return _gstlearn.VectorTFloat_fill(self, value, size)

    def toString(self, strfmt=None):
        return _gstlearn.VectorTFloat_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.VectorTFloat_display(self, strfmt)

# Register VectorTFloat in _gstlearn:
_gstlearn.VectorTFloat_swigregister(VectorTFloat)
class VectorBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VectorBool_swiginit(self, _gstlearn.new_VectorBool(*args))
    __swig_destroy__ = _gstlearn.delete_VectorBool

    def getVector(self):
        return _gstlearn.VectorBool_getVector(self)

    def getVectorPtr(self):
        return _gstlearn.VectorBool_getVectorPtr(self)

    def __eq__(self, other):
        return _gstlearn.VectorBool___eq__(self, other)

    def __ne__(self, other):
        return _gstlearn.VectorBool___ne__(self, other)

    def __lt__(self, other):
        return _gstlearn.VectorBool___lt__(self, other)

    def __le__(self, other):
        return _gstlearn.VectorBool___le__(self, other)

    def __gt__(self, other):
        return _gstlearn.VectorBool___gt__(self, other)

    def __ge__(self, other):
        return _gstlearn.VectorBool___ge__(self, other)

    def getAt(self, pos):
        return _gstlearn.VectorBool_getAt(self, pos)

    def setAt(self, pos, v):
        return _gstlearn.VectorBool_setAt(self, pos, v)

    def length(self):
        return _gstlearn.VectorBool_length(self)

    def front(self, *args):
        return _gstlearn.VectorBool_front(self, *args)

    def back(self, *args):
        return _gstlearn.VectorBool_back(self, *args)

    def data(self, *args):
        return _gstlearn.VectorBool_data(self, *args)

    def constData(self):
        return _gstlearn.VectorBool_constData(self)

    def subdata(self, *args):
        return _gstlearn.VectorBool_subdata(self, *args)

    def empty(self):
        return _gstlearn.VectorBool_empty(self)

    def size(self):
        return _gstlearn.VectorBool_size(self)

    def reserve(self, new_cap):
        return _gstlearn.VectorBool_reserve(self, new_cap)

    def capacity(self):
        return _gstlearn.VectorBool_capacity(self)

    def clear(self):
        return _gstlearn.VectorBool_clear(self)

    def insert(self, *args):
        return _gstlearn.VectorBool_insert(self, *args)

    def remove(self, *args):
        return _gstlearn.VectorBool_remove(self, *args)

    def erase(self, *args):
        return _gstlearn.VectorBool_erase(self, *args)

    def push_back(self, value):
        return _gstlearn.VectorBool_push_back(self, value)

    def push_front(self, value):
        return _gstlearn.VectorBool_push_front(self, value)

    def resize(self, *args):
        return _gstlearn.VectorBool_resize(self, *args)

    def begin(self, *args):
        return _gstlearn.VectorBool_begin(self, *args)

    def cbegin(self):
        return _gstlearn.VectorBool_cbegin(self)

    def end(self, *args):
        return _gstlearn.VectorBool_end(self, *args)

    def cend(self):
        return _gstlearn.VectorBool_cend(self)

    def rbegin(self):
        return _gstlearn.VectorBool_rbegin(self)

    def crbegin(self):
        return _gstlearn.VectorBool_crbegin(self)

    def rend(self):
        return _gstlearn.VectorBool_rend(self)

    def crend(self):
        return _gstlearn.VectorBool_crend(self)

    def swap(self, other):
        return _gstlearn.VectorBool_swap(self, other)

    def contains(self, value):
        return _gstlearn.VectorBool_contains(self, value)

    def fill(self, value, size=0):
        return _gstlearn.VectorBool_fill(self, value, size)

    def toString(self, strfmt=None):
        return _gstlearn.VectorBool_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.VectorBool_display(self, strfmt)

# Register VectorBool in _gstlearn:
_gstlearn.VectorBool_swigregister(VectorBool)
class VectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VectorString_swiginit(self, _gstlearn.new_VectorString(*args))
    __swig_destroy__ = _gstlearn.delete_VectorString

    def getVector(self):
        return _gstlearn.VectorString_getVector(self)

    def getVectorPtr(self):
        return _gstlearn.VectorString_getVectorPtr(self)

    def __eq__(self, other):
        return _gstlearn.VectorString___eq__(self, other)

    def __ne__(self, other):
        return _gstlearn.VectorString___ne__(self, other)

    def __lt__(self, other):
        return _gstlearn.VectorString___lt__(self, other)

    def __le__(self, other):
        return _gstlearn.VectorString___le__(self, other)

    def __gt__(self, other):
        return _gstlearn.VectorString___gt__(self, other)

    def __ge__(self, other):
        return _gstlearn.VectorString___ge__(self, other)

    def getAt(self, pos):
        return _gstlearn.VectorString_getAt(self, pos)

    def setAt(self, pos, v):
        return _gstlearn.VectorString_setAt(self, pos, v)

    def length(self):
        return _gstlearn.VectorString_length(self)

    def front(self, *args):
        return _gstlearn.VectorString_front(self, *args)

    def back(self, *args):
        return _gstlearn.VectorString_back(self, *args)

    def data(self, *args):
        return _gstlearn.VectorString_data(self, *args)

    def constData(self):
        return _gstlearn.VectorString_constData(self)

    def subdata(self, *args):
        return _gstlearn.VectorString_subdata(self, *args)

    def empty(self):
        return _gstlearn.VectorString_empty(self)

    def size(self):
        return _gstlearn.VectorString_size(self)

    def reserve(self, new_cap):
        return _gstlearn.VectorString_reserve(self, new_cap)

    def capacity(self):
        return _gstlearn.VectorString_capacity(self)

    def clear(self):
        return _gstlearn.VectorString_clear(self)

    def insert(self, *args):
        return _gstlearn.VectorString_insert(self, *args)

    def remove(self, *args):
        return _gstlearn.VectorString_remove(self, *args)

    def erase(self, *args):
        return _gstlearn.VectorString_erase(self, *args)

    def push_back(self, value):
        return _gstlearn.VectorString_push_back(self, value)

    def push_front(self, value):
        return _gstlearn.VectorString_push_front(self, value)

    def resize(self, *args):
        return _gstlearn.VectorString_resize(self, *args)

    def begin(self, *args):
        return _gstlearn.VectorString_begin(self, *args)

    def cbegin(self):
        return _gstlearn.VectorString_cbegin(self)

    def end(self, *args):
        return _gstlearn.VectorString_end(self, *args)

    def cend(self):
        return _gstlearn.VectorString_cend(self)

    def rbegin(self):
        return _gstlearn.VectorString_rbegin(self)

    def crbegin(self):
        return _gstlearn.VectorString_crbegin(self)

    def rend(self):
        return _gstlearn.VectorString_rend(self)

    def crend(self):
        return _gstlearn.VectorString_crend(self)

    def swap(self, other):
        return _gstlearn.VectorString_swap(self, other)

    def contains(self, value):
        return _gstlearn.VectorString_contains(self, value)

    def fill(self, value, size=0):
        return _gstlearn.VectorString_fill(self, value, size)

    def toString(self, strfmt=None):
        return _gstlearn.VectorString_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.VectorString_display(self, strfmt)

# Register VectorString in _gstlearn:
_gstlearn.VectorString_swigregister(VectorString)
class VectorInt(VectorTInt):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.VectorInt_swiginit(self, _gstlearn.new_VectorInt(*args))
    __swig_destroy__ = _gstlearn.delete_VectorInt

    def isSame(self, other, eps=1.e-10):
        return _gstlearn.VectorInt_isSame(self, other, eps)

    def sum(self):
        return _gstlearn.VectorInt_sum(self)

    def minimum(self):
        return _gstlearn.VectorInt_minimum(self)

    def maximum(self):
        return _gstlearn.VectorInt_maximum(self)

    def mean(self):
        return _gstlearn.VectorInt_mean(self)

    def norm(self):
        return _gstlearn.VectorInt_norm(self)

    def innerProduct(self, v):
        return _gstlearn.VectorInt_innerProduct(self, v)

    def add(self, *args):
        return _gstlearn.VectorInt_add(self, *args)

    def subtract(self, *args):
        return _gstlearn.VectorInt_subtract(self, *args)

    def multiply(self, *args):
        return _gstlearn.VectorInt_multiply(self, *args)

    def divide(self, *args):
        return _gstlearn.VectorInt_divide(self, *args)

    def __repr__(self):
        return _gstlearn.VectorInt___repr__(self)

# Register VectorInt in _gstlearn:
_gstlearn.VectorInt_swigregister(VectorInt)
class VectorDouble(VectorTDouble):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.VectorDouble_swiginit(self, _gstlearn.new_VectorDouble(*args))
    __swig_destroy__ = _gstlearn.delete_VectorDouble

    def isSame(self, other, eps=1.e-10):
        return _gstlearn.VectorDouble_isSame(self, other, eps)

    def sum(self):
        return _gstlearn.VectorDouble_sum(self)

    def minimum(self):
        return _gstlearn.VectorDouble_minimum(self)

    def maximum(self):
        return _gstlearn.VectorDouble_maximum(self)

    def mean(self):
        return _gstlearn.VectorDouble_mean(self)

    def norm(self):
        return _gstlearn.VectorDouble_norm(self)

    def innerProduct(self, v):
        return _gstlearn.VectorDouble_innerProduct(self, v)

    def add(self, *args):
        return _gstlearn.VectorDouble_add(self, *args)

    def subtract(self, *args):
        return _gstlearn.VectorDouble_subtract(self, *args)

    def multiply(self, *args):
        return _gstlearn.VectorDouble_multiply(self, *args)

    def divide(self, *args):
        return _gstlearn.VectorDouble_divide(self, *args)

    def __repr__(self):
        return _gstlearn.VectorDouble___repr__(self)

# Register VectorDouble in _gstlearn:
_gstlearn.VectorDouble_swigregister(VectorDouble)
class VectorFloat(VectorTFloat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.VectorFloat_swiginit(self, _gstlearn.new_VectorFloat(*args))
    __swig_destroy__ = _gstlearn.delete_VectorFloat

    def isSame(self, other, eps=1.e-10):
        return _gstlearn.VectorFloat_isSame(self, other, eps)

    def sum(self):
        return _gstlearn.VectorFloat_sum(self)

    def minimum(self):
        return _gstlearn.VectorFloat_minimum(self)

    def maximum(self):
        return _gstlearn.VectorFloat_maximum(self)

    def mean(self):
        return _gstlearn.VectorFloat_mean(self)

    def norm(self):
        return _gstlearn.VectorFloat_norm(self)

    def innerProduct(self, v):
        return _gstlearn.VectorFloat_innerProduct(self, v)

    def add(self, *args):
        return _gstlearn.VectorFloat_add(self, *args)

    def subtract(self, *args):
        return _gstlearn.VectorFloat_subtract(self, *args)

    def multiply(self, *args):
        return _gstlearn.VectorFloat_multiply(self, *args)

    def divide(self, *args):
        return _gstlearn.VectorFloat_divide(self, *args)

    def __repr__(self):
        return _gstlearn.VectorFloat___repr__(self)

# Register VectorFloat in _gstlearn:
_gstlearn.VectorFloat_swigregister(VectorFloat)
class VectorUChar(VectorBool):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.VectorUChar_swiginit(self, _gstlearn.new_VectorUChar(*args))
    __swig_destroy__ = _gstlearn.delete_VectorUChar

    def isSame(self, other, eps=1.e-10):
        return _gstlearn.VectorUChar_isSame(self, other, eps)

    def sum(self):
        return _gstlearn.VectorUChar_sum(self)

    def minimum(self):
        return _gstlearn.VectorUChar_minimum(self)

    def maximum(self):
        return _gstlearn.VectorUChar_maximum(self)

    def mean(self):
        return _gstlearn.VectorUChar_mean(self)

    def norm(self):
        return _gstlearn.VectorUChar_norm(self)

    def innerProduct(self, v):
        return _gstlearn.VectorUChar_innerProduct(self, v)

    def add(self, *args):
        return _gstlearn.VectorUChar_add(self, *args)

    def subtract(self, *args):
        return _gstlearn.VectorUChar_subtract(self, *args)

    def multiply(self, *args):
        return _gstlearn.VectorUChar_multiply(self, *args)

    def divide(self, *args):
        return _gstlearn.VectorUChar_divide(self, *args)

    def __repr__(self):
        return _gstlearn.VectorUChar___repr__(self)

# Register VectorUChar in _gstlearn:
_gstlearn.VectorUChar_swigregister(VectorUChar)
class VectorVectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VectorVectorInt_swiginit(self, _gstlearn.new_VectorVectorInt(*args))
    __swig_destroy__ = _gstlearn.delete_VectorVectorInt

    def getVector(self):
        return _gstlearn.VectorVectorInt_getVector(self)

    def getVectorPtr(self):
        return _gstlearn.VectorVectorInt_getVectorPtr(self)

    def __eq__(self, other):
        return _gstlearn.VectorVectorInt___eq__(self, other)

    def __ne__(self, other):
        return _gstlearn.VectorVectorInt___ne__(self, other)

    def __lt__(self, other):
        return _gstlearn.VectorVectorInt___lt__(self, other)

    def __le__(self, other):
        return _gstlearn.VectorVectorInt___le__(self, other)

    def __gt__(self, other):
        return _gstlearn.VectorVectorInt___gt__(self, other)

    def __ge__(self, other):
        return _gstlearn.VectorVectorInt___ge__(self, other)

    def getAt(self, pos):
        return _gstlearn.VectorVectorInt_getAt(self, pos)

    def setAt(self, pos, v):
        return _gstlearn.VectorVectorInt_setAt(self, pos, v)

    def length(self):
        return _gstlearn.VectorVectorInt_length(self)

    def front(self, *args):
        return _gstlearn.VectorVectorInt_front(self, *args)

    def back(self, *args):
        return _gstlearn.VectorVectorInt_back(self, *args)

    def data(self, *args):
        return _gstlearn.VectorVectorInt_data(self, *args)

    def constData(self):
        return _gstlearn.VectorVectorInt_constData(self)

    def subdata(self, *args):
        return _gstlearn.VectorVectorInt_subdata(self, *args)

    def empty(self):
        return _gstlearn.VectorVectorInt_empty(self)

    def size(self):
        return _gstlearn.VectorVectorInt_size(self)

    def reserve(self, new_cap):
        return _gstlearn.VectorVectorInt_reserve(self, new_cap)

    def capacity(self):
        return _gstlearn.VectorVectorInt_capacity(self)

    def clear(self):
        return _gstlearn.VectorVectorInt_clear(self)

    def insert(self, *args):
        return _gstlearn.VectorVectorInt_insert(self, *args)

    def remove(self, *args):
        return _gstlearn.VectorVectorInt_remove(self, *args)

    def erase(self, *args):
        return _gstlearn.VectorVectorInt_erase(self, *args)

    def push_back(self, value):
        return _gstlearn.VectorVectorInt_push_back(self, value)

    def push_front(self, value):
        return _gstlearn.VectorVectorInt_push_front(self, value)

    def resize(self, *args):
        return _gstlearn.VectorVectorInt_resize(self, *args)

    def begin(self, *args):
        return _gstlearn.VectorVectorInt_begin(self, *args)

    def cbegin(self):
        return _gstlearn.VectorVectorInt_cbegin(self)

    def end(self, *args):
        return _gstlearn.VectorVectorInt_end(self, *args)

    def cend(self):
        return _gstlearn.VectorVectorInt_cend(self)

    def rbegin(self):
        return _gstlearn.VectorVectorInt_rbegin(self)

    def crbegin(self):
        return _gstlearn.VectorVectorInt_crbegin(self)

    def rend(self):
        return _gstlearn.VectorVectorInt_rend(self)

    def crend(self):
        return _gstlearn.VectorVectorInt_crend(self)

    def swap(self, other):
        return _gstlearn.VectorVectorInt_swap(self, other)

    def contains(self, value):
        return _gstlearn.VectorVectorInt_contains(self, value)

    def fill(self, value, size=0):
        return _gstlearn.VectorVectorInt_fill(self, value, size)

    def toString(self, strfmt=None):
        return _gstlearn.VectorVectorInt_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.VectorVectorInt_display(self, strfmt)

# Register VectorVectorInt in _gstlearn:
_gstlearn.VectorVectorInt_swigregister(VectorVectorInt)
class VectorVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VectorVectorDouble_swiginit(self, _gstlearn.new_VectorVectorDouble(*args))
    __swig_destroy__ = _gstlearn.delete_VectorVectorDouble

    def getVector(self):
        return _gstlearn.VectorVectorDouble_getVector(self)

    def getVectorPtr(self):
        return _gstlearn.VectorVectorDouble_getVectorPtr(self)

    def __eq__(self, other):
        return _gstlearn.VectorVectorDouble___eq__(self, other)

    def __ne__(self, other):
        return _gstlearn.VectorVectorDouble___ne__(self, other)

    def __lt__(self, other):
        return _gstlearn.VectorVectorDouble___lt__(self, other)

    def __le__(self, other):
        return _gstlearn.VectorVectorDouble___le__(self, other)

    def __gt__(self, other):
        return _gstlearn.VectorVectorDouble___gt__(self, other)

    def __ge__(self, other):
        return _gstlearn.VectorVectorDouble___ge__(self, other)

    def getAt(self, pos):
        return _gstlearn.VectorVectorDouble_getAt(self, pos)

    def setAt(self, pos, v):
        return _gstlearn.VectorVectorDouble_setAt(self, pos, v)

    def length(self):
        return _gstlearn.VectorVectorDouble_length(self)

    def front(self, *args):
        return _gstlearn.VectorVectorDouble_front(self, *args)

    def back(self, *args):
        return _gstlearn.VectorVectorDouble_back(self, *args)

    def data(self, *args):
        return _gstlearn.VectorVectorDouble_data(self, *args)

    def constData(self):
        return _gstlearn.VectorVectorDouble_constData(self)

    def subdata(self, *args):
        return _gstlearn.VectorVectorDouble_subdata(self, *args)

    def empty(self):
        return _gstlearn.VectorVectorDouble_empty(self)

    def size(self):
        return _gstlearn.VectorVectorDouble_size(self)

    def reserve(self, new_cap):
        return _gstlearn.VectorVectorDouble_reserve(self, new_cap)

    def capacity(self):
        return _gstlearn.VectorVectorDouble_capacity(self)

    def clear(self):
        return _gstlearn.VectorVectorDouble_clear(self)

    def insert(self, *args):
        return _gstlearn.VectorVectorDouble_insert(self, *args)

    def remove(self, *args):
        return _gstlearn.VectorVectorDouble_remove(self, *args)

    def erase(self, *args):
        return _gstlearn.VectorVectorDouble_erase(self, *args)

    def push_back(self, value):
        return _gstlearn.VectorVectorDouble_push_back(self, value)

    def push_front(self, value):
        return _gstlearn.VectorVectorDouble_push_front(self, value)

    def resize(self, *args):
        return _gstlearn.VectorVectorDouble_resize(self, *args)

    def begin(self, *args):
        return _gstlearn.VectorVectorDouble_begin(self, *args)

    def cbegin(self):
        return _gstlearn.VectorVectorDouble_cbegin(self)

    def end(self, *args):
        return _gstlearn.VectorVectorDouble_end(self, *args)

    def cend(self):
        return _gstlearn.VectorVectorDouble_cend(self)

    def rbegin(self):
        return _gstlearn.VectorVectorDouble_rbegin(self)

    def crbegin(self):
        return _gstlearn.VectorVectorDouble_crbegin(self)

    def rend(self):
        return _gstlearn.VectorVectorDouble_rend(self)

    def crend(self):
        return _gstlearn.VectorVectorDouble_crend(self)

    def swap(self, other):
        return _gstlearn.VectorVectorDouble_swap(self, other)

    def contains(self, value):
        return _gstlearn.VectorVectorDouble_contains(self, value)

    def fill(self, value, size=0):
        return _gstlearn.VectorVectorDouble_fill(self, value, size)

    def toString(self, strfmt=None):
        return _gstlearn.VectorVectorDouble_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.VectorVectorDouble_display(self, strfmt)

# Register VectorVectorDouble in _gstlearn:
_gstlearn.VectorVectorDouble_swigregister(VectorVectorDouble)
class VectorVectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VectorVectorFloat_swiginit(self, _gstlearn.new_VectorVectorFloat(*args))
    __swig_destroy__ = _gstlearn.delete_VectorVectorFloat

    def getVector(self):
        return _gstlearn.VectorVectorFloat_getVector(self)

    def getVectorPtr(self):
        return _gstlearn.VectorVectorFloat_getVectorPtr(self)

    def __eq__(self, other):
        return _gstlearn.VectorVectorFloat___eq__(self, other)

    def __ne__(self, other):
        return _gstlearn.VectorVectorFloat___ne__(self, other)

    def __lt__(self, other):
        return _gstlearn.VectorVectorFloat___lt__(self, other)

    def __le__(self, other):
        return _gstlearn.VectorVectorFloat___le__(self, other)

    def __gt__(self, other):
        return _gstlearn.VectorVectorFloat___gt__(self, other)

    def __ge__(self, other):
        return _gstlearn.VectorVectorFloat___ge__(self, other)

    def getAt(self, pos):
        return _gstlearn.VectorVectorFloat_getAt(self, pos)

    def setAt(self, pos, v):
        return _gstlearn.VectorVectorFloat_setAt(self, pos, v)

    def length(self):
        return _gstlearn.VectorVectorFloat_length(self)

    def front(self, *args):
        return _gstlearn.VectorVectorFloat_front(self, *args)

    def back(self, *args):
        return _gstlearn.VectorVectorFloat_back(self, *args)

    def data(self, *args):
        return _gstlearn.VectorVectorFloat_data(self, *args)

    def constData(self):
        return _gstlearn.VectorVectorFloat_constData(self)

    def subdata(self, *args):
        return _gstlearn.VectorVectorFloat_subdata(self, *args)

    def empty(self):
        return _gstlearn.VectorVectorFloat_empty(self)

    def size(self):
        return _gstlearn.VectorVectorFloat_size(self)

    def reserve(self, new_cap):
        return _gstlearn.VectorVectorFloat_reserve(self, new_cap)

    def capacity(self):
        return _gstlearn.VectorVectorFloat_capacity(self)

    def clear(self):
        return _gstlearn.VectorVectorFloat_clear(self)

    def insert(self, *args):
        return _gstlearn.VectorVectorFloat_insert(self, *args)

    def remove(self, *args):
        return _gstlearn.VectorVectorFloat_remove(self, *args)

    def erase(self, *args):
        return _gstlearn.VectorVectorFloat_erase(self, *args)

    def push_back(self, value):
        return _gstlearn.VectorVectorFloat_push_back(self, value)

    def push_front(self, value):
        return _gstlearn.VectorVectorFloat_push_front(self, value)

    def resize(self, *args):
        return _gstlearn.VectorVectorFloat_resize(self, *args)

    def begin(self, *args):
        return _gstlearn.VectorVectorFloat_begin(self, *args)

    def cbegin(self):
        return _gstlearn.VectorVectorFloat_cbegin(self)

    def end(self, *args):
        return _gstlearn.VectorVectorFloat_end(self, *args)

    def cend(self):
        return _gstlearn.VectorVectorFloat_cend(self)

    def rbegin(self):
        return _gstlearn.VectorVectorFloat_rbegin(self)

    def crbegin(self):
        return _gstlearn.VectorVectorFloat_crbegin(self)

    def rend(self):
        return _gstlearn.VectorVectorFloat_rend(self)

    def crend(self):
        return _gstlearn.VectorVectorFloat_crend(self)

    def swap(self, other):
        return _gstlearn.VectorVectorFloat_swap(self, other)

    def contains(self, value):
        return _gstlearn.VectorVectorFloat_contains(self, value)

    def fill(self, value, size=0):
        return _gstlearn.VectorVectorFloat_fill(self, value, size)

    def toString(self, strfmt=None):
        return _gstlearn.VectorVectorFloat_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.VectorVectorFloat_display(self, strfmt)

# Register VectorVectorFloat in _gstlearn:
_gstlearn.VectorVectorFloat_swigregister(VectorVectorFloat)
class ICloneable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ICloneable

    def clone(self):
        return _gstlearn.ICloneable_clone(self)

# Register ICloneable in _gstlearn:
_gstlearn.ICloneable_swigregister(ICloneable)
EPSILON1 = _gstlearn.EPSILON1
EPSILON2 = _gstlearn.EPSILON2
EPSILON3 = _gstlearn.EPSILON3
EPSILON4 = _gstlearn.EPSILON4
EPSILON5 = _gstlearn.EPSILON5
EPSILON6 = _gstlearn.EPSILON6
EPSILON7 = _gstlearn.EPSILON7
EPSILON8 = _gstlearn.EPSILON8
EPSILON9 = _gstlearn.EPSILON9
EPSILON10 = _gstlearn.EPSILON10
EPSILON12 = _gstlearn.EPSILON12
EPSILON13 = _gstlearn.EPSILON13
EPSILON20 = _gstlearn.EPSILON20
EPSGRAD = _gstlearn.EPSGRAD
TEST = _gstlearn.TEST
TEST_COMP = _gstlearn.TEST_COMP
ITEST = _gstlearn.ITEST
ASCII_TEST = _gstlearn.ASCII_TEST
BUFFER_LENGTH = _gstlearn.BUFFER_LENGTH
STRING_LENGTH = _gstlearn.STRING_LENGTH
LOCAL_SIZE = _gstlearn.LOCAL_SIZE
LONG_SIZE = _gstlearn.LONG_SIZE
GV_PI = _gstlearn.GV_PI
GV_EE = _gstlearn.GV_EE
MAX_INT = _gstlearn.MAX_INT
MAX_PARAM = _gstlearn.MAX_PARAM
MAX_EXP = _gstlearn.MAX_EXP
THRESH_INF = _gstlearn.THRESH_INF
THRESH_SUP = _gstlearn.THRESH_SUP
EARTH_RADIUS = _gstlearn.EARTH_RADIUS
class Koption(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    calcul = property(_gstlearn.Koption_calcul_get, _gstlearn.Koption_calcul_set)
    ndim = property(_gstlearn.Koption_ndim_get, _gstlearn.Koption_ndim_set)
    ntot = property(_gstlearn.Koption_ntot_get, _gstlearn.Koption_ntot_set)
    ndisc = property(_gstlearn.Koption_ndisc_get, _gstlearn.Koption_ndisc_set)
    disc1 = property(_gstlearn.Koption_disc1_get, _gstlearn.Koption_disc1_set)
    disc2 = property(_gstlearn.Koption_disc2_get, _gstlearn.Koption_disc2_set)
    flag_data_disc = property(_gstlearn.Koption_flag_data_disc_get, _gstlearn.Koption_flag_data_disc_set)
    dsize = property(_gstlearn.Koption_dsize_get, _gstlearn.Koption_dsize_set)

    def __init__(self):
        _gstlearn.Koption_swiginit(self, _gstlearn.new_Koption())
    __swig_destroy__ = _gstlearn.delete_Koption

# Register Koption in _gstlearn:
_gstlearn.Koption_swigregister(Koption)
class StrMod(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    norder = property(_gstlearn.StrMod_norder_get, _gstlearn.StrMod_norder_set)
    nmodel = property(_gstlearn.StrMod_nmodel_get, _gstlearn.StrMod_nmodel_set)
    npar_init = property(_gstlearn.StrMod_npar_init_get, _gstlearn.StrMod_npar_init_set)
    models = property(_gstlearn.StrMod_models_get, _gstlearn.StrMod_models_set)
    optvar = property(_gstlearn.StrMod_optvar_get, _gstlearn.StrMod_optvar_set)
    user_data = property(_gstlearn.StrMod_user_data_get, _gstlearn.StrMod_user_data_set)
    parid = property(_gstlearn.StrMod_parid_get, _gstlearn.StrMod_parid_set)
    covtab = property(_gstlearn.StrMod_covtab_get, _gstlearn.StrMod_covtab_set)

    def __init__(self):
        _gstlearn.StrMod_swiginit(self, _gstlearn.new_StrMod())
    __swig_destroy__ = _gstlearn.delete_StrMod

# Register StrMod in _gstlearn:
_gstlearn.StrMod_swigregister(StrMod)
class Props(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    case_facies = property(_gstlearn.Props_case_facies_get, _gstlearn.Props_case_facies_set)
    case_stat = property(_gstlearn.Props_case_stat_get, _gstlearn.Props_case_stat_set)
    case_prop_interp = property(_gstlearn.Props_case_prop_interp_get, _gstlearn.Props_case_prop_interp_set)
    ngrf = property(_gstlearn.Props_ngrf_get, _gstlearn.Props_ngrf_set)
    nfac = property(_gstlearn.Props_nfac_get, _gstlearn.Props_nfac_set)
    nfaccur = property(_gstlearn.Props_nfaccur_get, _gstlearn.Props_nfaccur_set)
    nfacprod = property(_gstlearn.Props_nfacprod_get, _gstlearn.Props_nfacprod_set)
    nfacmax = property(_gstlearn.Props_nfacmax_get, _gstlearn.Props_nfacmax_set)
    mode = property(_gstlearn.Props_mode_get, _gstlearn.Props_mode_set)
    propfix = property(_gstlearn.Props_propfix_get, _gstlearn.Props_propfix_set)
    propmem = property(_gstlearn.Props_propmem_get, _gstlearn.Props_propmem_set)
    propwrk = property(_gstlearn.Props_propwrk_get, _gstlearn.Props_propwrk_set)
    proploc = property(_gstlearn.Props_proploc_get, _gstlearn.Props_proploc_set)
    coor = property(_gstlearn.Props_coor_get, _gstlearn.Props_coor_set)
    dbprop = property(_gstlearn.Props_dbprop_get, _gstlearn.Props_dbprop_set)

    def __init__(self):
        _gstlearn.Props_swiginit(self, _gstlearn.new_Props())
    __swig_destroy__ = _gstlearn.delete_Props

# Register Props in _gstlearn:
_gstlearn.Props_swigregister(Props)
class Modif_Categorical(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ipgs = property(_gstlearn.Modif_Categorical_ipgs_get, _gstlearn.Modif_Categorical_ipgs_set)
    flag_used = property(_gstlearn.Modif_Categorical_flag_used_get, _gstlearn.Modif_Categorical_flag_used_set)
    rule = property(_gstlearn.Modif_Categorical_rule_get, _gstlearn.Modif_Categorical_rule_set)
    propdef = property(_gstlearn.Modif_Categorical_propdef_get, _gstlearn.Modif_Categorical_propdef_set)

    def __init__(self):
        _gstlearn.Modif_Categorical_swiginit(self, _gstlearn.new_Modif_Categorical())
    __swig_destroy__ = _gstlearn.delete_Modif_Categorical

# Register Modif_Categorical in _gstlearn:
_gstlearn.Modif_Categorical_swigregister(Modif_Categorical)
class SubPlan(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    coor = property(_gstlearn.SubPlan_coor_get, _gstlearn.SubPlan_coor_set)
    intercept = property(_gstlearn.SubPlan_intercept_get, _gstlearn.SubPlan_intercept_set)
    value = property(_gstlearn.SubPlan_value_get, _gstlearn.SubPlan_value_set)
    rndval = property(_gstlearn.SubPlan_rndval_get, _gstlearn.SubPlan_rndval_set)

    def __init__(self):
        _gstlearn.SubPlan_swiginit(self, _gstlearn.new_SubPlan())
    __swig_destroy__ = _gstlearn.delete_SubPlan

# Register SubPlan in _gstlearn:
_gstlearn.SubPlan_swigregister(SubPlan)
class SubPlanes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nplan = property(_gstlearn.SubPlanes_nplan_get, _gstlearn.SubPlanes_nplan_set)
    plans = property(_gstlearn.SubPlanes_plans_get, _gstlearn.SubPlanes_plans_set)

    def __init__(self):
        _gstlearn.SubPlanes_swiginit(self, _gstlearn.new_SubPlanes())
    __swig_destroy__ = _gstlearn.delete_SubPlanes

# Register SubPlanes in _gstlearn:
_gstlearn.SubPlanes_swigregister(SubPlanes)
class QSimu(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    QCtt = property(_gstlearn.QSimu_QCtt_get, _gstlearn.QSimu_QCtt_set)
    QCtd = property(_gstlearn.QSimu_QCtd_get, _gstlearn.QSimu_QCtd_set)

    def __init__(self):
        _gstlearn.QSimu_swiginit(self, _gstlearn.new_QSimu())
    __swig_destroy__ = _gstlearn.delete_QSimu

# Register QSimu in _gstlearn:
_gstlearn.QSimu_swigregister(QSimu)
class Cheb_Elem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ncoeffs = property(_gstlearn.Cheb_Elem_ncoeffs_get, _gstlearn.Cheb_Elem_ncoeffs_set)
    ncmax = property(_gstlearn.Cheb_Elem_ncmax_get, _gstlearn.Cheb_Elem_ncmax_set)
    ndisc = property(_gstlearn.Cheb_Elem_ndisc_get, _gstlearn.Cheb_Elem_ndisc_set)
    power = property(_gstlearn.Cheb_Elem_power_get, _gstlearn.Cheb_Elem_power_set)
    a = property(_gstlearn.Cheb_Elem_a_get, _gstlearn.Cheb_Elem_a_set)
    b = property(_gstlearn.Cheb_Elem_b_get, _gstlearn.Cheb_Elem_b_set)
    v1 = property(_gstlearn.Cheb_Elem_v1_get, _gstlearn.Cheb_Elem_v1_set)
    v2 = property(_gstlearn.Cheb_Elem_v2_get, _gstlearn.Cheb_Elem_v2_set)
    tol = property(_gstlearn.Cheb_Elem_tol_get, _gstlearn.Cheb_Elem_tol_set)
    coeffs = property(_gstlearn.Cheb_Elem_coeffs_get, _gstlearn.Cheb_Elem_coeffs_set)

    def __init__(self):
        _gstlearn.Cheb_Elem_swiginit(self, _gstlearn.new_Cheb_Elem())
    __swig_destroy__ = _gstlearn.delete_Cheb_Elem

# Register Cheb_Elem in _gstlearn:
_gstlearn.Cheb_Elem_swigregister(Cheb_Elem)
class SPDE_SS_Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mesh_dbin = property(_gstlearn.SPDE_SS_Option_mesh_dbin_get, _gstlearn.SPDE_SS_Option_mesh_dbin_set)
    mesh_dbout = property(_gstlearn.SPDE_SS_Option_mesh_dbout_get, _gstlearn.SPDE_SS_Option_mesh_dbout_set)
    triswitch = property(_gstlearn.SPDE_SS_Option_triswitch_get, _gstlearn.SPDE_SS_Option_triswitch_set)

    def __init__(self):
        _gstlearn.SPDE_SS_Option_swiginit(self, _gstlearn.new_SPDE_SS_Option())
    __swig_destroy__ = _gstlearn.delete_SPDE_SS_Option

# Register SPDE_SS_Option in _gstlearn:
_gstlearn.SPDE_SS_Option_swigregister(SPDE_SS_Option)
class SPDE_Option(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    options = property(_gstlearn.SPDE_Option_options_get, _gstlearn.SPDE_Option_options_set)

    def __init__(self):
        _gstlearn.SPDE_Option_swiginit(self, _gstlearn.new_SPDE_Option())
    __swig_destroy__ = _gstlearn.delete_SPDE_Option

# Register SPDE_Option in _gstlearn:
_gstlearn.SPDE_Option_swigregister(SPDE_Option)
class CTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    res = property(_gstlearn.CTable_res_get, _gstlearn.CTable_res_set)

    def __init__(self):
        _gstlearn.CTable_swiginit(self, _gstlearn.new_CTable())
    __swig_destroy__ = _gstlearn.delete_CTable

# Register CTable in _gstlearn:
_gstlearn.CTable_swigregister(CTable)
class CTables(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nconf = property(_gstlearn.CTables_nconf_get, _gstlearn.CTables_nconf_set)
    ndisc = property(_gstlearn.CTables_ndisc_get, _gstlearn.CTables_ndisc_set)
    flag_cumul = property(_gstlearn.CTables_flag_cumul_get, _gstlearn.CTables_flag_cumul_set)
    cmin = property(_gstlearn.CTables_cmin_get, _gstlearn.CTables_cmin_set)
    cmax = property(_gstlearn.CTables_cmax_get, _gstlearn.CTables_cmax_set)
    dc = property(_gstlearn.CTables_dc_get, _gstlearn.CTables_dc_set)
    dp = property(_gstlearn.CTables_dp_get, _gstlearn.CTables_dp_set)
    v = property(_gstlearn.CTables_v_get, _gstlearn.CTables_v_set)
    CT = property(_gstlearn.CTables_CT_get, _gstlearn.CTables_CT_set)

    def __init__(self):
        _gstlearn.CTables_swiginit(self, _gstlearn.new_CTables())
    __swig_destroy__ = _gstlearn.delete_CTables

# Register CTables in _gstlearn:
_gstlearn.CTables_swigregister(CTables)
class Local_Split(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    oper = property(_gstlearn.Local_Split_oper_get, _gstlearn.Local_Split_oper_set)
    nrule = property(_gstlearn.Local_Split_nrule_get, _gstlearn.Local_Split_nrule_set)
    nbyrule = property(_gstlearn.Local_Split_nbyrule_get, _gstlearn.Local_Split_nbyrule_set)
    Srules = property(_gstlearn.Local_Split_Srules_get, _gstlearn.Local_Split_Srules_set)
    Sfipos = property(_gstlearn.Local_Split_Sfipos_get, _gstlearn.Local_Split_Sfipos_set)
    old_relem = property(_gstlearn.Local_Split_old_relem_get, _gstlearn.Local_Split_old_relem_set)
    relems = property(_gstlearn.Local_Split_relems_get, _gstlearn.Local_Split_relems_set)

    def __init__(self):
        _gstlearn.Local_Split_swiginit(self, _gstlearn.new_Local_Split())
    __swig_destroy__ = _gstlearn.delete_Local_Split

# Register Local_Split in _gstlearn:
_gstlearn.Local_Split_swigregister(Local_Split)
class Local_Relem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    facies = property(_gstlearn.Local_Relem_facies_get, _gstlearn.Local_Relem_facies_set)
    nrule = property(_gstlearn.Local_Relem_nrule_get, _gstlearn.Local_Relem_nrule_set)
    nbyrule = property(_gstlearn.Local_Relem_nbyrule_get, _gstlearn.Local_Relem_nbyrule_set)
    nsplit = property(_gstlearn.Local_Relem_nsplit_get, _gstlearn.Local_Relem_nsplit_set)
    Rrules = property(_gstlearn.Local_Relem_Rrules_get, _gstlearn.Local_Relem_Rrules_set)
    Rfipos = property(_gstlearn.Local_Relem_Rfipos_get, _gstlearn.Local_Relem_Rfipos_set)
    old_split = property(_gstlearn.Local_Relem_old_split_get, _gstlearn.Local_Relem_old_split_set)
    splits = property(_gstlearn.Local_Relem_splits_get, _gstlearn.Local_Relem_splits_set)

    def __init__(self):
        _gstlearn.Local_Relem_swiginit(self, _gstlearn.new_Local_Relem())
    __swig_destroy__ = _gstlearn.delete_Local_Relem

# Register Local_Relem in _gstlearn:
_gstlearn.Local_Relem_swigregister(Local_Relem)

def variogram_pgs(db, varioparam, ruleprop, flag_rho=0, opt_correl=2):
    return _gstlearn.variogram_pgs(db, varioparam, ruleprop, flag_rho, opt_correl)

def model_auto_fit(*args, **kwargs):
    return _gstlearn.model_auto_fit(*args, **kwargs)

def vmap_auto_fit(*args, **kwargs):
    return _gstlearn.vmap_auto_fit(*args, **kwargs)

def set_test_discrete(flag_discret):
    return _gstlearn.set_test_discrete(flag_discret)

def model_pgs(db, varioparam, ruleprop, model1, model2=None):
    return _gstlearn.model_pgs(db, varioparam, ruleprop, model1, model2)

def krigsum(*args, **kwargs):
    return _gstlearn.krigsum(*args, **kwargs)

def declustering(*args, **kwargs):
    return _gstlearn.declustering(*args, **kwargs)

def simpgs(*args, **kwargs):
    return _gstlearn.simpgs(*args, **kwargs)

def simbipgs(*args, **kwargs):
    return _gstlearn.simbipgs(*args, **kwargs)

def simsph_mesh(mesh, model, sphepar, seed=54523, verbose=0):
    return _gstlearn.simsph_mesh(mesh, model, sphepar, seed, verbose)

def fluid_extract(dbgrid, name_facies, name_fluid, name_poro, name_date, nfacies, nfluids, facies0, fluid0, ntime, time0, dtime, verbose=False):
    return _gstlearn.fluid_extract(dbgrid, name_facies, name_fluid, name_poro, name_date, nfacies, nfluids, facies0, fluid0, ntime, time0, dtime, verbose)

def simpgs_spde(dbin, dbout, ruleprop, model1, model2, triswitch, gext, flag_gaus, flag_prop, flag_check, flag_show, nfacies, seed, nbsimu, gibbs_nburn, gibbs_niter, ngibbs_int, verbose, percent):
    return _gstlearn.simpgs_spde(dbin, dbout, ruleprop, model1, model2, triswitch, gext, flag_gaus, flag_prop, flag_check, flag_show, nfacies, seed, nbsimu, gibbs_nburn, gibbs_niter, ngibbs_int, verbose, percent)

def db_proportion_estimate(*args, **kwargs):
    return _gstlearn.db_proportion_estimate(*args, **kwargs)

def gibbs_sampler(*args, **kwargs):
    return _gstlearn.gibbs_sampler(*args, **kwargs)
class AEnum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def getKey(self):
        return _gstlearn.AEnum_getKey(self)

    def getValue(self):
        return _gstlearn.AEnum_getValue(self)

    def getDescr(self):
        return _gstlearn.AEnum_getDescr(self)

    def __lt__(self, e):
        return _gstlearn.AEnum___lt__(self, e)

    def __le__(self, e):
        return _gstlearn.AEnum___le__(self, e)

    def __gt__(self, e):
        return _gstlearn.AEnum___gt__(self, e)

    def __ge__(self, e):
        return _gstlearn.AEnum___ge__(self, e)

    def __eq__(self, e):
        return _gstlearn.AEnum___eq__(self, e)

    def __ne__(self, e):
        return _gstlearn.AEnum___ne__(self, e)

    def isSmaller(self, e):
        return _gstlearn.AEnum_isSmaller(self, e)

    def isSmallerOrEqual(self, e):
        return _gstlearn.AEnum_isSmallerOrEqual(self, e)

    def isGreater(self, e):
        return _gstlearn.AEnum_isGreater(self, e)

    def isGreaterOrEqual(self, e):
        return _gstlearn.AEnum_isGreaterOrEqual(self, e)

    def isEqual(self, e):
        return _gstlearn.AEnum_isEqual(self, e)

    def isDifferent(self, e):
        return _gstlearn.AEnum_isDifferent(self, e)

    def printEnum(self):
        return _gstlearn.AEnum_printEnum(self)

# Register AEnum in _gstlearn:
_gstlearn.AEnum_swigregister(AEnum)
class EKrigOptIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EKrigOptIterator

    def __init__(self, arg2):
        _gstlearn.EKrigOptIterator_swiginit(self, _gstlearn.new_EKrigOptIterator(arg2))

    def __ref__(self):
        return _gstlearn.EKrigOptIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EKrigOptIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EKrigOptIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EKrigOptIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EKrigOptIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EKrigOptIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EKrigOptIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EKrigOptIterator_getDescr(self)

# Register EKrigOptIterator in _gstlearn:
_gstlearn.EKrigOptIterator_swigregister(EKrigOptIterator)
class EKrigOpt(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EKrigOpt

    def __init__(self, *args):
        _gstlearn.EKrigOpt_swiginit(self, _gstlearn.new_EKrigOpt(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EKrigOpt_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EKrigOpt_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EKrigOpt_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EKrigOpt_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EKrigOpt_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EKrigOpt_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EKrigOpt_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EKrigOpt_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EKrigOpt_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EKrigOpt_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EKrigOpt_fromValues(values)
    E_POINT = _gstlearn.EKrigOpt_E_POINT
    E_BLOCK = _gstlearn.EKrigOpt_E_BLOCK
    E_DRIFT = _gstlearn.EKrigOpt_E_DRIFT
    E_DGM = _gstlearn.EKrigOpt_E_DGM

    def toEnum(self):
        return _gstlearn.EKrigOpt_toEnum(self)

# Register EKrigOpt in _gstlearn:
_gstlearn.EKrigOpt_swigregister(EKrigOpt)
cvar = _gstlearn.cvar
EKrigOpt.POINT = _gstlearn.cvar.EKrigOpt_POINT
EKrigOpt.BLOCK = _gstlearn.cvar.EKrigOpt_BLOCK
EKrigOpt.DRIFT = _gstlearn.cvar.EKrigOpt_DRIFT
EKrigOpt.DGM = _gstlearn.cvar.EKrigOpt_DGM

class ESPDECalcModeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ESPDECalcModeIterator

    def __init__(self, arg2):
        _gstlearn.ESPDECalcModeIterator_swiginit(self, _gstlearn.new_ESPDECalcModeIterator(arg2))

    def __ref__(self):
        return _gstlearn.ESPDECalcModeIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ESPDECalcModeIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ESPDECalcModeIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ESPDECalcModeIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ESPDECalcModeIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ESPDECalcModeIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ESPDECalcModeIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ESPDECalcModeIterator_getDescr(self)

# Register ESPDECalcModeIterator in _gstlearn:
_gstlearn.ESPDECalcModeIterator_swigregister(ESPDECalcModeIterator)
class ESPDECalcMode(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ESPDECalcMode

    def __init__(self, *args):
        _gstlearn.ESPDECalcMode_swiginit(self, _gstlearn.new_ESPDECalcMode(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ESPDECalcMode_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ESPDECalcMode_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ESPDECalcMode_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ESPDECalcMode_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ESPDECalcMode_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ESPDECalcMode_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ESPDECalcMode_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ESPDECalcMode_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ESPDECalcMode_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ESPDECalcMode_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ESPDECalcMode_fromValues(values)
    E_KRIGING = _gstlearn.ESPDECalcMode_E_KRIGING
    E_KRIGVAR = _gstlearn.ESPDECalcMode_E_KRIGVAR
    E_SIMUCOND = _gstlearn.ESPDECalcMode_E_SIMUCOND
    E_SIMUNONCOND = _gstlearn.ESPDECalcMode_E_SIMUNONCOND

    def toEnum(self):
        return _gstlearn.ESPDECalcMode_toEnum(self)

# Register ESPDECalcMode in _gstlearn:
_gstlearn.ESPDECalcMode_swigregister(ESPDECalcMode)
ESPDECalcMode.KRIGING = _gstlearn.cvar.ESPDECalcMode_KRIGING
ESPDECalcMode.KRIGVAR = _gstlearn.cvar.ESPDECalcMode_KRIGVAR
ESPDECalcMode.SIMUCOND = _gstlearn.cvar.ESPDECalcMode_SIMUCOND
ESPDECalcMode.SIMUNONCOND = _gstlearn.cvar.ESPDECalcMode_SIMUNONCOND

class EAnamIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EAnamIterator

    def __init__(self, arg2):
        _gstlearn.EAnamIterator_swiginit(self, _gstlearn.new_EAnamIterator(arg2))

    def __ref__(self):
        return _gstlearn.EAnamIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EAnamIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EAnamIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EAnamIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EAnamIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EAnamIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EAnamIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EAnamIterator_getDescr(self)

# Register EAnamIterator in _gstlearn:
_gstlearn.EAnamIterator_swigregister(EAnamIterator)
class EAnam(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EAnam

    def __init__(self, *args):
        _gstlearn.EAnam_swiginit(self, _gstlearn.new_EAnam(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EAnam_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EAnam_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EAnam_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EAnam_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EAnam_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EAnam_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EAnam_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EAnam_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EAnam_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EAnam_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EAnam_fromValues(values)
    E_UNKNOWN = _gstlearn.EAnam_E_UNKNOWN
    E_EXTERNAL = _gstlearn.EAnam_E_EXTERNAL
    E_HERMITIAN = _gstlearn.EAnam_E_HERMITIAN
    E_EMPIRICAL = _gstlearn.EAnam_E_EMPIRICAL
    E_DISCRETE_DD = _gstlearn.EAnam_E_DISCRETE_DD
    E_DISCRETE_IR = _gstlearn.EAnam_E_DISCRETE_IR

    def toEnum(self):
        return _gstlearn.EAnam_toEnum(self)

# Register EAnam in _gstlearn:
_gstlearn.EAnam_swigregister(EAnam)
EAnam.UNKNOWN = _gstlearn.cvar.EAnam_UNKNOWN
EAnam.EXTERNAL = _gstlearn.cvar.EAnam_EXTERNAL
EAnam.HERMITIAN = _gstlearn.cvar.EAnam_HERMITIAN
EAnam.EMPIRICAL = _gstlearn.cvar.EAnam_EMPIRICAL
EAnam.DISCRETE_DD = _gstlearn.cvar.EAnam_DISCRETE_DD
EAnam.DISCRETE_IR = _gstlearn.cvar.EAnam_DISCRETE_IR

class ECstIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECstIterator

    def __init__(self, arg2):
        _gstlearn.ECstIterator_swiginit(self, _gstlearn.new_ECstIterator(arg2))

    def __ref__(self):
        return _gstlearn.ECstIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ECstIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ECstIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ECstIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ECstIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ECstIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ECstIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ECstIterator_getDescr(self)

# Register ECstIterator in _gstlearn:
_gstlearn.ECstIterator_swigregister(ECstIterator)
class ECst(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECst

    def __init__(self, *args):
        _gstlearn.ECst_swiginit(self, _gstlearn.new_ECst(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ECst_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ECst_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ECst_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ECst_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ECst_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ECst_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ECst_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ECst_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ECst_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ECst_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ECst_fromValues(values)
    E_NTCAR = _gstlearn.ECst_E_NTCAR
    E_NTDEC = _gstlearn.ECst_E_NTDEC
    E_NTROW = _gstlearn.ECst_E_NTROW
    E_NTCOL = _gstlearn.ECst_E_NTCOL
    E_NTBATCH = _gstlearn.ECst_E_NTBATCH
    E_NTNAME = _gstlearn.ECst_E_NTNAME
    E_NTRANK = _gstlearn.ECst_E_NTRANK
    E_NPROC = _gstlearn.ECst_E_NPROC
    E_LOCMOD = _gstlearn.ECst_E_LOCMOD

    def toEnum(self):
        return _gstlearn.ECst_toEnum(self)

# Register ECst in _gstlearn:
_gstlearn.ECst_swigregister(ECst)
ECst.NTCAR = _gstlearn.cvar.ECst_NTCAR
ECst.NTDEC = _gstlearn.cvar.ECst_NTDEC
ECst.NTROW = _gstlearn.cvar.ECst_NTROW
ECst.NTCOL = _gstlearn.cvar.ECst_NTCOL
ECst.NTBATCH = _gstlearn.cvar.ECst_NTBATCH
ECst.NTNAME = _gstlearn.cvar.ECst_NTNAME
ECst.NTRANK = _gstlearn.cvar.ECst_NTRANK
ECst.NPROC = _gstlearn.cvar.ECst_NPROC
ECst.LOCMOD = _gstlearn.cvar.ECst_LOCMOD

class EDbgIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EDbgIterator

    def __init__(self, arg2):
        _gstlearn.EDbgIterator_swiginit(self, _gstlearn.new_EDbgIterator(arg2))

    def __ref__(self):
        return _gstlearn.EDbgIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EDbgIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EDbgIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EDbgIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EDbgIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EDbgIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EDbgIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EDbgIterator_getDescr(self)

# Register EDbgIterator in _gstlearn:
_gstlearn.EDbgIterator_swigregister(EDbgIterator)
class EDbg(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EDbg

    def __init__(self, *args):
        _gstlearn.EDbg_swiginit(self, _gstlearn.new_EDbg(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EDbg_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EDbg_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EDbg_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EDbg_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EDbg_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EDbg_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EDbg_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EDbg_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EDbg_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EDbg_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EDbg_fromValues(values)
    E_INTERFACE = _gstlearn.EDbg_E_INTERFACE
    E_DB = _gstlearn.EDbg_E_DB
    E_NBGH = _gstlearn.EDbg_E_NBGH
    E_MODEL = _gstlearn.EDbg_E_MODEL
    E_KRIGING = _gstlearn.EDbg_E_KRIGING
    E_SIMULATE = _gstlearn.EDbg_E_SIMULATE
    E_RESULTS = _gstlearn.EDbg_E_RESULTS
    E_VARIOGRAM = _gstlearn.EDbg_E_VARIOGRAM
    E_CONVERGE = _gstlearn.EDbg_E_CONVERGE
    E_CONDEXP = _gstlearn.EDbg_E_CONDEXP
    E_BAYES = _gstlearn.EDbg_E_BAYES
    E_MORPHO = _gstlearn.EDbg_E_MORPHO
    E_PROPS = _gstlearn.EDbg_E_PROPS
    E_UPSCALE = _gstlearn.EDbg_E_UPSCALE
    E_SPDE = _gstlearn.EDbg_E_SPDE

    def toEnum(self):
        return _gstlearn.EDbg_toEnum(self)

# Register EDbg in _gstlearn:
_gstlearn.EDbg_swigregister(EDbg)
EDbg.INTERFACE = _gstlearn.cvar.EDbg_INTERFACE
EDbg.DB = _gstlearn.cvar.EDbg_DB
EDbg.NBGH = _gstlearn.cvar.EDbg_NBGH
EDbg.MODEL = _gstlearn.cvar.EDbg_MODEL
EDbg.KRIGING = _gstlearn.cvar.EDbg_KRIGING
EDbg.SIMULATE = _gstlearn.cvar.EDbg_SIMULATE
EDbg.RESULTS = _gstlearn.cvar.EDbg_RESULTS
EDbg.VARIOGRAM = _gstlearn.cvar.EDbg_VARIOGRAM
EDbg.CONVERGE = _gstlearn.cvar.EDbg_CONVERGE
EDbg.CONDEXP = _gstlearn.cvar.EDbg_CONDEXP
EDbg.BAYES = _gstlearn.cvar.EDbg_BAYES
EDbg.MORPHO = _gstlearn.cvar.EDbg_MORPHO
EDbg.PROPS = _gstlearn.cvar.EDbg_PROPS
EDbg.UPSCALE = _gstlearn.cvar.EDbg_UPSCALE
EDbg.SPDE = _gstlearn.cvar.EDbg_SPDE

class ELawIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELawIterator

    def __init__(self, arg2):
        _gstlearn.ELawIterator_swiginit(self, _gstlearn.new_ELawIterator(arg2))

    def __ref__(self):
        return _gstlearn.ELawIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ELawIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ELawIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ELawIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ELawIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ELawIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ELawIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ELawIterator_getDescr(self)

# Register ELawIterator in _gstlearn:
_gstlearn.ELawIterator_swigregister(ELawIterator)
class ELaw(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELaw

    def __init__(self, *args):
        _gstlearn.ELaw_swiginit(self, _gstlearn.new_ELaw(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ELaw_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ELaw_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ELaw_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ELaw_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ELaw_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ELaw_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ELaw_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ELaw_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ELaw_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ELaw_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ELaw_fromValues(values)
    E_CONSTANT = _gstlearn.ELaw_E_CONSTANT
    E_UNIFORM = _gstlearn.ELaw_E_UNIFORM
    E_GAUSSIAN = _gstlearn.ELaw_E_GAUSSIAN
    E_EXPONENTIAL = _gstlearn.ELaw_E_EXPONENTIAL
    E_GAMMA = _gstlearn.ELaw_E_GAMMA
    E_STABLE = _gstlearn.ELaw_E_STABLE
    E_BETA1 = _gstlearn.ELaw_E_BETA1
    E_BETA2 = _gstlearn.ELaw_E_BETA2

    def toEnum(self):
        return _gstlearn.ELaw_toEnum(self)

# Register ELaw in _gstlearn:
_gstlearn.ELaw_swigregister(ELaw)
ELaw.CONSTANT = _gstlearn.cvar.ELaw_CONSTANT
ELaw.UNIFORM = _gstlearn.cvar.ELaw_UNIFORM
ELaw.GAUSSIAN = _gstlearn.cvar.ELaw_GAUSSIAN
ELaw.EXPONENTIAL = _gstlearn.cvar.ELaw_EXPONENTIAL
ELaw.GAMMA = _gstlearn.cvar.ELaw_GAMMA
ELaw.STABLE = _gstlearn.cvar.ELaw_STABLE
ELaw.BETA1 = _gstlearn.cvar.ELaw_BETA1
ELaw.BETA2 = _gstlearn.cvar.ELaw_BETA2

class EShapeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EShapeIterator

    def __init__(self, arg2):
        _gstlearn.EShapeIterator_swiginit(self, _gstlearn.new_EShapeIterator(arg2))

    def __ref__(self):
        return _gstlearn.EShapeIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EShapeIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EShapeIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EShapeIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EShapeIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EShapeIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EShapeIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EShapeIterator_getDescr(self)

# Register EShapeIterator in _gstlearn:
_gstlearn.EShapeIterator_swigregister(EShapeIterator)
class EShape(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EShape

    def __init__(self, *args):
        _gstlearn.EShape_swiginit(self, _gstlearn.new_EShape(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EShape_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EShape_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EShape_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EShape_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EShape_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EShape_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EShape_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EShape_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EShape_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EShape_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EShape_fromValues(values)
    E_PARALLELEPIPED = _gstlearn.EShape_E_PARALLELEPIPED
    E_ELLIPSOID = _gstlearn.EShape_E_ELLIPSOID
    E_PARABOLOID = _gstlearn.EShape_E_PARABOLOID
    E_HALFELLIPSOID = _gstlearn.EShape_E_HALFELLIPSOID
    E_HALFPARABOLOID = _gstlearn.EShape_E_HALFPARABOLOID
    E_HALFSINUSOID = _gstlearn.EShape_E_HALFSINUSOID

    def toEnum(self):
        return _gstlearn.EShape_toEnum(self)

# Register EShape in _gstlearn:
_gstlearn.EShape_swigregister(EShape)
EShape.PARALLELEPIPED = _gstlearn.cvar.EShape_PARALLELEPIPED
EShape.ELLIPSOID = _gstlearn.cvar.EShape_ELLIPSOID
EShape.PARABOLOID = _gstlearn.cvar.EShape_PARABOLOID
EShape.HALFELLIPSOID = _gstlearn.cvar.EShape_HALFELLIPSOID
EShape.HALFPARABOLOID = _gstlearn.cvar.EShape_HALFPARABOLOID
EShape.HALFSINUSOID = _gstlearn.cvar.EShape_HALFSINUSOID

class EConvDirIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConvDirIterator

    def __init__(self, arg2):
        _gstlearn.EConvDirIterator_swiginit(self, _gstlearn.new_EConvDirIterator(arg2))

    def __ref__(self):
        return _gstlearn.EConvDirIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EConvDirIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EConvDirIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EConvDirIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EConvDirIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EConvDirIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EConvDirIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EConvDirIterator_getDescr(self)

# Register EConvDirIterator in _gstlearn:
_gstlearn.EConvDirIterator_swigregister(EConvDirIterator)
class EConvDir(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConvDir

    def __init__(self, *args):
        _gstlearn.EConvDir_swiginit(self, _gstlearn.new_EConvDir(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EConvDir_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EConvDir_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EConvDir_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EConvDir_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EConvDir_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EConvDir_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EConvDir_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EConvDir_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EConvDir_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EConvDir_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EConvDir_fromValues(values)
    E_X = _gstlearn.EConvDir_E_X
    E_Y = _gstlearn.EConvDir_E_Y
    E_Z = _gstlearn.EConvDir_E_Z
    E_XY = _gstlearn.EConvDir_E_XY
    E_XYZ = _gstlearn.EConvDir_E_XYZ

    def toEnum(self):
        return _gstlearn.EConvDir_toEnum(self)

# Register EConvDir in _gstlearn:
_gstlearn.EConvDir_swigregister(EConvDir)
EConvDir.X = _gstlearn.cvar.EConvDir_X
EConvDir.Y = _gstlearn.cvar.EConvDir_Y
EConvDir.Z = _gstlearn.cvar.EConvDir_Z
EConvDir.XY = _gstlearn.cvar.EConvDir_XY
EConvDir.XYZ = _gstlearn.cvar.EConvDir_XYZ

class ECalcVarioIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECalcVarioIterator

    def __init__(self, arg2):
        _gstlearn.ECalcVarioIterator_swiginit(self, _gstlearn.new_ECalcVarioIterator(arg2))

    def __ref__(self):
        return _gstlearn.ECalcVarioIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ECalcVarioIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ECalcVarioIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ECalcVarioIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ECalcVarioIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ECalcVarioIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ECalcVarioIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ECalcVarioIterator_getDescr(self)

# Register ECalcVarioIterator in _gstlearn:
_gstlearn.ECalcVarioIterator_swigregister(ECalcVarioIterator)
class ECalcVario(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECalcVario

    def __init__(self, *args):
        _gstlearn.ECalcVario_swiginit(self, _gstlearn.new_ECalcVario(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ECalcVario_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ECalcVario_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ECalcVario_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ECalcVario_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ECalcVario_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ECalcVario_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ECalcVario_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ECalcVario_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ECalcVario_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ECalcVario_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ECalcVario_fromValues(values)
    E_UNDEFINED = _gstlearn.ECalcVario_E_UNDEFINED
    E_VARIOGRAM = _gstlearn.ECalcVario_E_VARIOGRAM
    E_COVARIANCE = _gstlearn.ECalcVario_E_COVARIANCE
    E_COVARIOGRAM = _gstlearn.ECalcVario_E_COVARIOGRAM
    E_MADOGRAM = _gstlearn.ECalcVario_E_MADOGRAM
    E_RODOGRAM = _gstlearn.ECalcVario_E_RODOGRAM
    E_POISSON = _gstlearn.ECalcVario_E_POISSON
    E_GENERAL1 = _gstlearn.ECalcVario_E_GENERAL1
    E_GENERAL2 = _gstlearn.ECalcVario_E_GENERAL2
    E_GENERAL3 = _gstlearn.ECalcVario_E_GENERAL3
    E_COVARIANCE_NC = _gstlearn.ECalcVario_E_COVARIANCE_NC
    E_ORDER4 = _gstlearn.ECalcVario_E_ORDER4
    E_TRANS1 = _gstlearn.ECalcVario_E_TRANS1
    E_TRANS2 = _gstlearn.ECalcVario_E_TRANS2
    E_BINORMAL = _gstlearn.ECalcVario_E_BINORMAL

    def toEnum(self):
        return _gstlearn.ECalcVario_toEnum(self)

# Register ECalcVario in _gstlearn:
_gstlearn.ECalcVario_swigregister(ECalcVario)
ECalcVario.UNDEFINED = _gstlearn.cvar.ECalcVario_UNDEFINED
ECalcVario.VARIOGRAM = _gstlearn.cvar.ECalcVario_VARIOGRAM
ECalcVario.COVARIANCE = _gstlearn.cvar.ECalcVario_COVARIANCE
ECalcVario.COVARIOGRAM = _gstlearn.cvar.ECalcVario_COVARIOGRAM
ECalcVario.MADOGRAM = _gstlearn.cvar.ECalcVario_MADOGRAM
ECalcVario.RODOGRAM = _gstlearn.cvar.ECalcVario_RODOGRAM
ECalcVario.POISSON = _gstlearn.cvar.ECalcVario_POISSON
ECalcVario.GENERAL1 = _gstlearn.cvar.ECalcVario_GENERAL1
ECalcVario.GENERAL2 = _gstlearn.cvar.ECalcVario_GENERAL2
ECalcVario.GENERAL3 = _gstlearn.cvar.ECalcVario_GENERAL3
ECalcVario.COVARIANCE_NC = _gstlearn.cvar.ECalcVario_COVARIANCE_NC
ECalcVario.ORDER4 = _gstlearn.cvar.ECalcVario_ORDER4
ECalcVario.TRANS1 = _gstlearn.cvar.ECalcVario_TRANS1
ECalcVario.TRANS2 = _gstlearn.cvar.ECalcVario_TRANS2
ECalcVario.BINORMAL = _gstlearn.cvar.ECalcVario_BINORMAL

class EConvTypeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConvTypeIterator

    def __init__(self, arg2):
        _gstlearn.EConvTypeIterator_swiginit(self, _gstlearn.new_EConvTypeIterator(arg2))

    def __ref__(self):
        return _gstlearn.EConvTypeIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EConvTypeIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EConvTypeIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EConvTypeIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EConvTypeIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EConvTypeIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EConvTypeIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EConvTypeIterator_getDescr(self)

# Register EConvTypeIterator in _gstlearn:
_gstlearn.EConvTypeIterator_swigregister(EConvTypeIterator)
class EConvType(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConvType

    def __init__(self, *args):
        _gstlearn.EConvType_swiginit(self, _gstlearn.new_EConvType(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EConvType_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EConvType_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EConvType_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EConvType_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EConvType_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EConvType_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EConvType_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EConvType_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EConvType_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EConvType_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EConvType_fromValues(values)
    E_UNKNOWN = _gstlearn.EConvType_E_UNKNOWN
    E_UNIFORM = _gstlearn.EConvType_E_UNIFORM
    E_EXPONENTIAL = _gstlearn.EConvType_E_EXPONENTIAL
    E_GAUSSIAN = _gstlearn.EConvType_E_GAUSSIAN
    E_SINCARD = _gstlearn.EConvType_E_SINCARD

    def toEnum(self):
        return _gstlearn.EConvType_toEnum(self)

# Register EConvType in _gstlearn:
_gstlearn.EConvType_swigregister(EConvType)
EConvType.UNKNOWN = _gstlearn.cvar.EConvType_UNKNOWN
EConvType.UNIFORM = _gstlearn.cvar.EConvType_UNIFORM
EConvType.EXPONENTIAL = _gstlearn.cvar.EConvType_EXPONENTIAL
EConvType.GAUSSIAN = _gstlearn.cvar.EConvType_GAUSSIAN
EConvType.SINCARD = _gstlearn.cvar.EConvType_SINCARD

class ECovIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECovIterator

    def __init__(self, arg2):
        _gstlearn.ECovIterator_swiginit(self, _gstlearn.new_ECovIterator(arg2))

    def __ref__(self):
        return _gstlearn.ECovIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ECovIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ECovIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ECovIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ECovIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ECovIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ECovIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ECovIterator_getDescr(self)

# Register ECovIterator in _gstlearn:
_gstlearn.ECovIterator_swigregister(ECovIterator)
class ECov(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECov

    def __init__(self, *args):
        _gstlearn.ECov_swiginit(self, _gstlearn.new_ECov(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ECov_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ECov_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ECov_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ECov_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ECov_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ECov_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ECov_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ECov_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ECov_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ECov_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ECov_fromValues(values)
    E_UNKNOWN = _gstlearn.ECov_E_UNKNOWN
    E_FUNCTION = _gstlearn.ECov_E_FUNCTION
    E_NUGGET = _gstlearn.ECov_E_NUGGET
    E_EXPONENTIAL = _gstlearn.ECov_E_EXPONENTIAL
    E_SPHERICAL = _gstlearn.ECov_E_SPHERICAL
    E_GAUSSIAN = _gstlearn.ECov_E_GAUSSIAN
    E_CUBIC = _gstlearn.ECov_E_CUBIC
    E_SINCARD = _gstlearn.ECov_E_SINCARD
    E_BESSELJ = _gstlearn.ECov_E_BESSELJ
    E_MATERN = _gstlearn.ECov_E_MATERN
    E_GAMMA = _gstlearn.ECov_E_GAMMA
    E_CAUCHY = _gstlearn.ECov_E_CAUCHY
    E_STABLE = _gstlearn.ECov_E_STABLE
    E_LINEAR = _gstlearn.ECov_E_LINEAR
    E_POWER = _gstlearn.ECov_E_POWER
    E_ORDER1_GC = _gstlearn.ECov_E_ORDER1_GC
    E_SPLINE_GC = _gstlearn.ECov_E_SPLINE_GC
    E_ORDER3_GC = _gstlearn.ECov_E_ORDER3_GC
    E_ORDER5_GC = _gstlearn.ECov_E_ORDER5_GC
    E_COSINUS = _gstlearn.ECov_E_COSINUS
    E_TRIANGLE = _gstlearn.ECov_E_TRIANGLE
    E_COSEXP = _gstlearn.ECov_E_COSEXP
    E_REG1D = _gstlearn.ECov_E_REG1D
    E_PENTA = _gstlearn.ECov_E_PENTA
    E_SPLINE2_GC = _gstlearn.ECov_E_SPLINE2_GC
    E_STORKEY = _gstlearn.ECov_E_STORKEY
    E_WENDLAND0 = _gstlearn.ECov_E_WENDLAND0
    E_WENDLAND1 = _gstlearn.ECov_E_WENDLAND1
    E_WENDLAND2 = _gstlearn.ECov_E_WENDLAND2
    E_MARKOV = _gstlearn.ECov_E_MARKOV
    E_GEOMETRIC = _gstlearn.ECov_E_GEOMETRIC
    E_POISSON = _gstlearn.ECov_E_POISSON
    E_LINEARSPH = _gstlearn.ECov_E_LINEARSPH

    def toEnum(self):
        return _gstlearn.ECov_toEnum(self)

# Register ECov in _gstlearn:
_gstlearn.ECov_swigregister(ECov)
ECov.UNKNOWN = _gstlearn.cvar.ECov_UNKNOWN
ECov.FUNCTION = _gstlearn.cvar.ECov_FUNCTION
ECov.NUGGET = _gstlearn.cvar.ECov_NUGGET
ECov.EXPONENTIAL = _gstlearn.cvar.ECov_EXPONENTIAL
ECov.SPHERICAL = _gstlearn.cvar.ECov_SPHERICAL
ECov.GAUSSIAN = _gstlearn.cvar.ECov_GAUSSIAN
ECov.CUBIC = _gstlearn.cvar.ECov_CUBIC
ECov.SINCARD = _gstlearn.cvar.ECov_SINCARD
ECov.BESSELJ = _gstlearn.cvar.ECov_BESSELJ
ECov.MATERN = _gstlearn.cvar.ECov_MATERN
ECov.GAMMA = _gstlearn.cvar.ECov_GAMMA
ECov.CAUCHY = _gstlearn.cvar.ECov_CAUCHY
ECov.STABLE = _gstlearn.cvar.ECov_STABLE
ECov.LINEAR = _gstlearn.cvar.ECov_LINEAR
ECov.POWER = _gstlearn.cvar.ECov_POWER
ECov.ORDER1_GC = _gstlearn.cvar.ECov_ORDER1_GC
ECov.SPLINE_GC = _gstlearn.cvar.ECov_SPLINE_GC
ECov.ORDER3_GC = _gstlearn.cvar.ECov_ORDER3_GC
ECov.ORDER5_GC = _gstlearn.cvar.ECov_ORDER5_GC
ECov.COSINUS = _gstlearn.cvar.ECov_COSINUS
ECov.TRIANGLE = _gstlearn.cvar.ECov_TRIANGLE
ECov.COSEXP = _gstlearn.cvar.ECov_COSEXP
ECov.REG1D = _gstlearn.cvar.ECov_REG1D
ECov.PENTA = _gstlearn.cvar.ECov_PENTA
ECov.SPLINE2_GC = _gstlearn.cvar.ECov_SPLINE2_GC
ECov.STORKEY = _gstlearn.cvar.ECov_STORKEY
ECov.WENDLAND0 = _gstlearn.cvar.ECov_WENDLAND0
ECov.WENDLAND1 = _gstlearn.cvar.ECov_WENDLAND1
ECov.WENDLAND2 = _gstlearn.cvar.ECov_WENDLAND2
ECov.MARKOV = _gstlearn.cvar.ECov_MARKOV
ECov.GEOMETRIC = _gstlearn.cvar.ECov_GEOMETRIC
ECov.POISSON = _gstlearn.cvar.ECov_POISSON
ECov.LINEARSPH = _gstlearn.cvar.ECov_LINEARSPH

class ETapeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ETapeIterator

    def __init__(self, arg2):
        _gstlearn.ETapeIterator_swiginit(self, _gstlearn.new_ETapeIterator(arg2))

    def __ref__(self):
        return _gstlearn.ETapeIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ETapeIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ETapeIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ETapeIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ETapeIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ETapeIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ETapeIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ETapeIterator_getDescr(self)

# Register ETapeIterator in _gstlearn:
_gstlearn.ETapeIterator_swigregister(ETapeIterator)
class ETape(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ETape

    def __init__(self, *args):
        _gstlearn.ETape_swiginit(self, _gstlearn.new_ETape(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ETape_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ETape_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ETape_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ETape_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ETape_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ETape_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ETape_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ETape_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ETape_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ETape_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ETape_fromValues(values)
    E_SPHERICAL = _gstlearn.ETape_E_SPHERICAL
    E_CUBIC = _gstlearn.ETape_E_CUBIC
    E_TRIANGLE = _gstlearn.ETape_E_TRIANGLE
    E_PENTAMODEL = _gstlearn.ETape_E_PENTAMODEL
    E_STORKEY = _gstlearn.ETape_E_STORKEY
    E_WENDLAND1 = _gstlearn.ETape_E_WENDLAND1
    E_WENDLAND2 = _gstlearn.ETape_E_WENDLAND2

    def toEnum(self):
        return _gstlearn.ETape_toEnum(self)

# Register ETape in _gstlearn:
_gstlearn.ETape_swigregister(ETape)
ETape.SPHERICAL = _gstlearn.cvar.ETape_SPHERICAL
ETape.CUBIC = _gstlearn.cvar.ETape_CUBIC
ETape.TRIANGLE = _gstlearn.cvar.ETape_TRIANGLE
ETape.PENTAMODEL = _gstlearn.cvar.ETape_PENTAMODEL
ETape.STORKEY = _gstlearn.cvar.ETape_STORKEY
ETape.WENDLAND1 = _gstlearn.cvar.ETape_WENDLAND1
ETape.WENDLAND2 = _gstlearn.cvar.ETape_WENDLAND2

class ELoadByIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELoadByIterator

    def __init__(self, arg2):
        _gstlearn.ELoadByIterator_swiginit(self, _gstlearn.new_ELoadByIterator(arg2))

    def __ref__(self):
        return _gstlearn.ELoadByIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ELoadByIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ELoadByIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ELoadByIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ELoadByIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ELoadByIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ELoadByIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ELoadByIterator_getDescr(self)

# Register ELoadByIterator in _gstlearn:
_gstlearn.ELoadByIterator_swigregister(ELoadByIterator)
class ELoadBy(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELoadBy

    def __init__(self, *args):
        _gstlearn.ELoadBy_swiginit(self, _gstlearn.new_ELoadBy(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ELoadBy_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ELoadBy_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ELoadBy_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ELoadBy_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ELoadBy_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ELoadBy_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ELoadBy_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ELoadBy_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ELoadBy_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ELoadBy_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ELoadBy_fromValues(values)
    E_COLUMN = _gstlearn.ELoadBy_E_COLUMN
    E_SAMPLE = _gstlearn.ELoadBy_E_SAMPLE

    def toEnum(self):
        return _gstlearn.ELoadBy_toEnum(self)

# Register ELoadBy in _gstlearn:
_gstlearn.ELoadBy_swigregister(ELoadBy)
ELoadBy.COLUMN = _gstlearn.cvar.ELoadBy_COLUMN
ELoadBy.SAMPLE = _gstlearn.cvar.ELoadBy_SAMPLE

class ELocIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELocIterator

    def __init__(self, arg2):
        _gstlearn.ELocIterator_swiginit(self, _gstlearn.new_ELocIterator(arg2))

    def __ref__(self):
        return _gstlearn.ELocIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ELocIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ELocIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ELocIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ELocIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ELocIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ELocIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ELocIterator_getDescr(self)

# Register ELocIterator in _gstlearn:
_gstlearn.ELocIterator_swigregister(ELocIterator)
class ELoc(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ELoc

    def __init__(self, *args):
        _gstlearn.ELoc_swiginit(self, _gstlearn.new_ELoc(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ELoc_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ELoc_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ELoc_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ELoc_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ELoc_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ELoc_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ELoc_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ELoc_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ELoc_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ELoc_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ELoc_fromValues(values)
    E_UNKNOWN = _gstlearn.ELoc_E_UNKNOWN
    E_X = _gstlearn.ELoc_E_X
    E_Z = _gstlearn.ELoc_E_Z
    E_V = _gstlearn.ELoc_E_V
    E_F = _gstlearn.ELoc_E_F
    E_G = _gstlearn.ELoc_E_G
    E_L = _gstlearn.ELoc_E_L
    E_U = _gstlearn.ELoc_E_U
    E_P = _gstlearn.ELoc_E_P
    E_W = _gstlearn.ELoc_E_W
    E_C = _gstlearn.ELoc_E_C
    E_SEL = _gstlearn.ELoc_E_SEL
    E_DOM = _gstlearn.ELoc_E_DOM
    E_BLEX = _gstlearn.ELoc_E_BLEX
    E_ADIR = _gstlearn.ELoc_E_ADIR
    E_ADIP = _gstlearn.ELoc_E_ADIP
    E_SIZE = _gstlearn.ELoc_E_SIZE
    E_BU = _gstlearn.ELoc_E_BU
    E_BD = _gstlearn.ELoc_E_BD
    E_TIME = _gstlearn.ELoc_E_TIME
    E_LAYER = _gstlearn.ELoc_E_LAYER
    E_NOSTAT = _gstlearn.ELoc_E_NOSTAT
    E_TGTE = _gstlearn.ELoc_E_TGTE
    E_SIMU = _gstlearn.ELoc_E_SIMU
    E_FACIES = _gstlearn.ELoc_E_FACIES
    E_GAUSFAC = _gstlearn.ELoc_E_GAUSFAC
    E_DATE = _gstlearn.ELoc_E_DATE
    E_RKLOW = _gstlearn.ELoc_E_RKLOW
    E_RKUP = _gstlearn.ELoc_E_RKUP
    E_SUM = _gstlearn.ELoc_E_SUM

    def toEnum(self):
        return _gstlearn.ELoc_toEnum(self)

# Register ELoc in _gstlearn:
_gstlearn.ELoc_swigregister(ELoc)
ELoc.UNKNOWN = _gstlearn.cvar.ELoc_UNKNOWN
ELoc.X = _gstlearn.cvar.ELoc_X
ELoc.Z = _gstlearn.cvar.ELoc_Z
ELoc.V = _gstlearn.cvar.ELoc_V
ELoc.F = _gstlearn.cvar.ELoc_F
ELoc.G = _gstlearn.cvar.ELoc_G
ELoc.L = _gstlearn.cvar.ELoc_L
ELoc.U = _gstlearn.cvar.ELoc_U
ELoc.P = _gstlearn.cvar.ELoc_P
ELoc.W = _gstlearn.cvar.ELoc_W
ELoc.C = _gstlearn.cvar.ELoc_C
ELoc.SEL = _gstlearn.cvar.ELoc_SEL
ELoc.DOM = _gstlearn.cvar.ELoc_DOM
ELoc.BLEX = _gstlearn.cvar.ELoc_BLEX
ELoc.ADIR = _gstlearn.cvar.ELoc_ADIR
ELoc.ADIP = _gstlearn.cvar.ELoc_ADIP
ELoc.SIZE = _gstlearn.cvar.ELoc_SIZE
ELoc.BU = _gstlearn.cvar.ELoc_BU
ELoc.BD = _gstlearn.cvar.ELoc_BD
ELoc.TIME = _gstlearn.cvar.ELoc_TIME
ELoc.LAYER = _gstlearn.cvar.ELoc_LAYER
ELoc.NOSTAT = _gstlearn.cvar.ELoc_NOSTAT
ELoc.TGTE = _gstlearn.cvar.ELoc_TGTE
ELoc.SIMU = _gstlearn.cvar.ELoc_SIMU
ELoc.FACIES = _gstlearn.cvar.ELoc_FACIES
ELoc.GAUSFAC = _gstlearn.cvar.ELoc_GAUSFAC
ELoc.DATE = _gstlearn.cvar.ELoc_DATE
ELoc.RKLOW = _gstlearn.cvar.ELoc_RKLOW
ELoc.RKUP = _gstlearn.cvar.ELoc_RKUP
ELoc.SUM = _gstlearn.cvar.ELoc_SUM

class EOperatorIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EOperatorIterator

    def __init__(self, arg2):
        _gstlearn.EOperatorIterator_swiginit(self, _gstlearn.new_EOperatorIterator(arg2))

    def __ref__(self):
        return _gstlearn.EOperatorIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EOperatorIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EOperatorIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EOperatorIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EOperatorIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EOperatorIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EOperatorIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EOperatorIterator_getDescr(self)

# Register EOperatorIterator in _gstlearn:
_gstlearn.EOperatorIterator_swigregister(EOperatorIterator)
class EOperator(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EOperator

    def __init__(self, *args):
        _gstlearn.EOperator_swiginit(self, _gstlearn.new_EOperator(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EOperator_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EOperator_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EOperator_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EOperator_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EOperator_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EOperator_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EOperator_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EOperator_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EOperator_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EOperator_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EOperator_fromValues(values)
    E_IDLE = _gstlearn.EOperator_E_IDLE
    E_ADD = _gstlearn.EOperator_E_ADD
    E_PRODUCT = _gstlearn.EOperator_E_PRODUCT
    E_SUBTRACT = _gstlearn.EOperator_E_SUBTRACT
    E_SUBOPP = _gstlearn.EOperator_E_SUBOPP
    E_DIVIDE = _gstlearn.EOperator_E_DIVIDE
    E_DIVOPP = _gstlearn.EOperator_E_DIVOPP
    E_DEFINE = _gstlearn.EOperator_E_DEFINE
    E_MIN = _gstlearn.EOperator_E_MIN
    E_MAX = _gstlearn.EOperator_E_MAX

    def toEnum(self):
        return _gstlearn.EOperator_toEnum(self)

# Register EOperator in _gstlearn:
_gstlearn.EOperator_swigregister(EOperator)
EOperator.IDLE = _gstlearn.cvar.EOperator_IDLE
EOperator.ADD = _gstlearn.cvar.EOperator_ADD
EOperator.PRODUCT = _gstlearn.cvar.EOperator_PRODUCT
EOperator.SUBTRACT = _gstlearn.cvar.EOperator_SUBTRACT
EOperator.SUBOPP = _gstlearn.cvar.EOperator_SUBOPP
EOperator.DIVIDE = _gstlearn.cvar.EOperator_DIVIDE
EOperator.DIVOPP = _gstlearn.cvar.EOperator_DIVOPP
EOperator.DEFINE = _gstlearn.cvar.EOperator_DEFINE
EOperator.MIN = _gstlearn.cvar.EOperator_MIN
EOperator.MAX = _gstlearn.cvar.EOperator_MAX

class EPowerPTIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EPowerPTIterator

    def __init__(self, arg2):
        _gstlearn.EPowerPTIterator_swiginit(self, _gstlearn.new_EPowerPTIterator(arg2))

    def __ref__(self):
        return _gstlearn.EPowerPTIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EPowerPTIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EPowerPTIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EPowerPTIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EPowerPTIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EPowerPTIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EPowerPTIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EPowerPTIterator_getDescr(self)

# Register EPowerPTIterator in _gstlearn:
_gstlearn.EPowerPTIterator_swigregister(EPowerPTIterator)
class EPowerPT(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EPowerPT

    def __init__(self, *args):
        _gstlearn.EPowerPT_swiginit(self, _gstlearn.new_EPowerPT(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EPowerPT_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EPowerPT_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EPowerPT_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EPowerPT_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EPowerPT_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EPowerPT_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EPowerPT_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EPowerPT_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EPowerPT_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EPowerPT_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EPowerPT_fromValues(values)
    E_UNDEFINED = _gstlearn.EPowerPT_E_UNDEFINED
    E_ONE = _gstlearn.EPowerPT_E_ONE
    E_MINUSONE = _gstlearn.EPowerPT_E_MINUSONE
    E_MINUSHALF = _gstlearn.EPowerPT_E_MINUSHALF
    E_HALF = _gstlearn.EPowerPT_E_HALF
    E_LOG = _gstlearn.EPowerPT_E_LOG

    def toEnum(self):
        return _gstlearn.EPowerPT_toEnum(self)

# Register EPowerPT in _gstlearn:
_gstlearn.EPowerPT_swigregister(EPowerPT)
EPowerPT.UNDEFINED = _gstlearn.cvar.EPowerPT_UNDEFINED
EPowerPT.ONE = _gstlearn.cvar.EPowerPT_ONE
EPowerPT.MINUSONE = _gstlearn.cvar.EPowerPT_MINUSONE
EPowerPT.MINUSHALF = _gstlearn.cvar.EPowerPT_MINUSHALF
EPowerPT.HALF = _gstlearn.cvar.EPowerPT_HALF
EPowerPT.LOG = _gstlearn.cvar.EPowerPT_LOG

class ERuleIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ERuleIterator

    def __init__(self, arg2):
        _gstlearn.ERuleIterator_swiginit(self, _gstlearn.new_ERuleIterator(arg2))

    def __ref__(self):
        return _gstlearn.ERuleIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ERuleIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ERuleIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ERuleIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ERuleIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ERuleIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ERuleIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ERuleIterator_getDescr(self)

# Register ERuleIterator in _gstlearn:
_gstlearn.ERuleIterator_swigregister(ERuleIterator)
class ERule(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ERule

    def __init__(self, *args):
        _gstlearn.ERule_swiginit(self, _gstlearn.new_ERule(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ERule_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ERule_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ERule_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ERule_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ERule_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ERule_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ERule_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ERule_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ERule_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ERule_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ERule_fromValues(values)
    E_STD = _gstlearn.ERule_E_STD
    E_SHIFT = _gstlearn.ERule_E_SHIFT
    E_SHADOW = _gstlearn.ERule_E_SHADOW

    def toEnum(self):
        return _gstlearn.ERule_toEnum(self)

# Register ERule in _gstlearn:
_gstlearn.ERule_swigregister(ERule)
ERule.STD = _gstlearn.cvar.ERule_STD
ERule.SHIFT = _gstlearn.cvar.ERule_SHIFT
ERule.SHADOW = _gstlearn.cvar.ERule_SHADOW

class EConsElemIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConsElemIterator

    def __init__(self, arg2):
        _gstlearn.EConsElemIterator_swiginit(self, _gstlearn.new_EConsElemIterator(arg2))

    def __ref__(self):
        return _gstlearn.EConsElemIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EConsElemIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EConsElemIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EConsElemIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EConsElemIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EConsElemIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EConsElemIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EConsElemIterator_getDescr(self)

# Register EConsElemIterator in _gstlearn:
_gstlearn.EConsElemIterator_swigregister(EConsElemIterator)
class EConsElem(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConsElem

    def __init__(self, *args):
        _gstlearn.EConsElem_swiginit(self, _gstlearn.new_EConsElem(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EConsElem_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EConsElem_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EConsElem_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EConsElem_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EConsElem_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EConsElem_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EConsElem_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EConsElem_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EConsElem_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EConsElem_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EConsElem_fromValues(values)
    E_UNKNOWN = _gstlearn.EConsElem_E_UNKNOWN
    E_RANGE = _gstlearn.EConsElem_E_RANGE
    E_ANGLE = _gstlearn.EConsElem_E_ANGLE
    E_PARAM = _gstlearn.EConsElem_E_PARAM
    E_SILL = _gstlearn.EConsElem_E_SILL
    E_SCALE = _gstlearn.EConsElem_E_SCALE
    E_T_RANGE = _gstlearn.EConsElem_E_T_RANGE
    E_VELOCITY = _gstlearn.EConsElem_E_VELOCITY
    E_SPHEROT = _gstlearn.EConsElem_E_SPHEROT
    E_TENSOR = _gstlearn.EConsElem_E_TENSOR

    def toEnum(self):
        return _gstlearn.EConsElem_toEnum(self)

# Register EConsElem in _gstlearn:
_gstlearn.EConsElem_swigregister(EConsElem)
EConsElem.UNKNOWN = _gstlearn.cvar.EConsElem_UNKNOWN
EConsElem.RANGE = _gstlearn.cvar.EConsElem_RANGE
EConsElem.ANGLE = _gstlearn.cvar.EConsElem_ANGLE
EConsElem.PARAM = _gstlearn.cvar.EConsElem_PARAM
EConsElem.SILL = _gstlearn.cvar.EConsElem_SILL
EConsElem.SCALE = _gstlearn.cvar.EConsElem_SCALE
EConsElem.T_RANGE = _gstlearn.cvar.EConsElem_T_RANGE
EConsElem.VELOCITY = _gstlearn.cvar.EConsElem_VELOCITY
EConsElem.SPHEROT = _gstlearn.cvar.EConsElem_SPHEROT
EConsElem.TENSOR = _gstlearn.cvar.EConsElem_TENSOR

class EConsTypeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConsTypeIterator

    def __init__(self, arg2):
        _gstlearn.EConsTypeIterator_swiginit(self, _gstlearn.new_EConsTypeIterator(arg2))

    def __ref__(self):
        return _gstlearn.EConsTypeIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EConsTypeIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EConsTypeIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EConsTypeIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EConsTypeIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EConsTypeIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EConsTypeIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EConsTypeIterator_getDescr(self)

# Register EConsTypeIterator in _gstlearn:
_gstlearn.EConsTypeIterator_swigregister(EConsTypeIterator)
class EConsType(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EConsType

    def __init__(self, *args):
        _gstlearn.EConsType_swiginit(self, _gstlearn.new_EConsType(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EConsType_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EConsType_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EConsType_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EConsType_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EConsType_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EConsType_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EConsType_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EConsType_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EConsType_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EConsType_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EConsType_fromValues(values)
    E_LOWER = _gstlearn.EConsType_E_LOWER
    E_DEFAULT = _gstlearn.EConsType_E_DEFAULT
    E_UPPER = _gstlearn.EConsType_E_UPPER
    E_EQUAL = _gstlearn.EConsType_E_EQUAL

    def toEnum(self):
        return _gstlearn.EConsType_toEnum(self)

# Register EConsType in _gstlearn:
_gstlearn.EConsType_swigregister(EConsType)
EConsType.LOWER = _gstlearn.cvar.EConsType_LOWER
EConsType.DEFAULT = _gstlearn.cvar.EConsType_DEFAULT
EConsType.UPPER = _gstlearn.cvar.EConsType_UPPER
EConsType.EQUAL = _gstlearn.cvar.EConsType_EQUAL

class EModelPropertyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EModelPropertyIterator

    def __init__(self, arg2):
        _gstlearn.EModelPropertyIterator_swiginit(self, _gstlearn.new_EModelPropertyIterator(arg2))

    def __ref__(self):
        return _gstlearn.EModelPropertyIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EModelPropertyIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EModelPropertyIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EModelPropertyIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EModelPropertyIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EModelPropertyIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EModelPropertyIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EModelPropertyIterator_getDescr(self)

# Register EModelPropertyIterator in _gstlearn:
_gstlearn.EModelPropertyIterator_swigregister(EModelPropertyIterator)
class EModelProperty(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EModelProperty

    def __init__(self, *args):
        _gstlearn.EModelProperty_swiginit(self, _gstlearn.new_EModelProperty(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EModelProperty_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EModelProperty_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EModelProperty_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EModelProperty_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EModelProperty_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EModelProperty_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EModelProperty_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EModelProperty_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EModelProperty_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EModelProperty_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EModelProperty_fromValues(values)
    E_NONE = _gstlearn.EModelProperty_E_NONE
    E_CONV = _gstlearn.EModelProperty_E_CONV
    E_ANAM = _gstlearn.EModelProperty_E_ANAM
    E_TAPE = _gstlearn.EModelProperty_E_TAPE
    E_GRAD = _gstlearn.EModelProperty_E_GRAD

    def toEnum(self):
        return _gstlearn.EModelProperty_toEnum(self)

# Register EModelProperty in _gstlearn:
_gstlearn.EModelProperty_swigregister(EModelProperty)
EModelProperty.NONE = _gstlearn.cvar.EModelProperty_NONE
EModelProperty.CONV = _gstlearn.cvar.EModelProperty_CONV
EModelProperty.ANAM = _gstlearn.cvar.EModelProperty_ANAM
EModelProperty.TAPE = _gstlearn.cvar.EModelProperty_TAPE
EModelProperty.GRAD = _gstlearn.cvar.EModelProperty_GRAD

class EMorphoIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EMorphoIterator

    def __init__(self, arg2):
        _gstlearn.EMorphoIterator_swiginit(self, _gstlearn.new_EMorphoIterator(arg2))

    def __ref__(self):
        return _gstlearn.EMorphoIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EMorphoIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EMorphoIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EMorphoIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EMorphoIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EMorphoIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EMorphoIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EMorphoIterator_getDescr(self)

# Register EMorphoIterator in _gstlearn:
_gstlearn.EMorphoIterator_swigregister(EMorphoIterator)
class EMorpho(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EMorpho

    def __init__(self, *args):
        _gstlearn.EMorpho_swiginit(self, _gstlearn.new_EMorpho(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EMorpho_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EMorpho_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EMorpho_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EMorpho_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EMorpho_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EMorpho_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EMorpho_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EMorpho_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EMorpho_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EMorpho_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EMorpho_fromValues(values)
    E_UNKNOWN = _gstlearn.EMorpho_E_UNKNOWN
    E_THRESH = _gstlearn.EMorpho_E_THRESH
    E_NEGATION = _gstlearn.EMorpho_E_NEGATION
    E_EROSION = _gstlearn.EMorpho_E_EROSION
    E_DILATION = _gstlearn.EMorpho_E_DILATION
    E_OPEN = _gstlearn.EMorpho_E_OPEN
    E_CLOSE = _gstlearn.EMorpho_E_CLOSE
    E_CC = _gstlearn.EMorpho_E_CC
    E_CCSIZE = _gstlearn.EMorpho_E_CCSIZE
    E_DISTANCE = _gstlearn.EMorpho_E_DISTANCE
    E_ANGLE = _gstlearn.EMorpho_E_ANGLE
    E_GRADIENT = _gstlearn.EMorpho_E_GRADIENT

    def toEnum(self):
        return _gstlearn.EMorpho_toEnum(self)

# Register EMorpho in _gstlearn:
_gstlearn.EMorpho_swigregister(EMorpho)
EMorpho.UNKNOWN = _gstlearn.cvar.EMorpho_UNKNOWN
EMorpho.THRESH = _gstlearn.cvar.EMorpho_THRESH
EMorpho.NEGATION = _gstlearn.cvar.EMorpho_NEGATION
EMorpho.EROSION = _gstlearn.cvar.EMorpho_EROSION
EMorpho.DILATION = _gstlearn.cvar.EMorpho_DILATION
EMorpho.OPEN = _gstlearn.cvar.EMorpho_OPEN
EMorpho.CLOSE = _gstlearn.cvar.EMorpho_CLOSE
EMorpho.CC = _gstlearn.cvar.EMorpho_CC
EMorpho.CCSIZE = _gstlearn.cvar.EMorpho_CCSIZE
EMorpho.DISTANCE = _gstlearn.cvar.EMorpho_DISTANCE
EMorpho.ANGLE = _gstlearn.cvar.EMorpho_ANGLE
EMorpho.GRADIENT = _gstlearn.cvar.EMorpho_GRADIENT

class ENeighIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ENeighIterator

    def __init__(self, arg2):
        _gstlearn.ENeighIterator_swiginit(self, _gstlearn.new_ENeighIterator(arg2))

    def __ref__(self):
        return _gstlearn.ENeighIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ENeighIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ENeighIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ENeighIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ENeighIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ENeighIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ENeighIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ENeighIterator_getDescr(self)

# Register ENeighIterator in _gstlearn:
_gstlearn.ENeighIterator_swigregister(ENeighIterator)
class ENeigh(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ENeigh

    def __init__(self, *args):
        _gstlearn.ENeigh_swiginit(self, _gstlearn.new_ENeigh(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ENeigh_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ENeigh_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ENeigh_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ENeigh_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ENeigh_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ENeigh_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ENeigh_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ENeigh_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ENeigh_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ENeigh_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ENeigh_fromValues(values)
    E_UNKNOWN = _gstlearn.ENeigh_E_UNKNOWN
    E_UNIQUE = _gstlearn.ENeigh_E_UNIQUE
    E_BENCH = _gstlearn.ENeigh_E_BENCH
    E_MOVING = _gstlearn.ENeigh_E_MOVING
    E_CELL = _gstlearn.ENeigh_E_CELL
    E_IMAGE = _gstlearn.ENeigh_E_IMAGE

    def toEnum(self):
        return _gstlearn.ENeigh_toEnum(self)

# Register ENeigh in _gstlearn:
_gstlearn.ENeigh_swigregister(ENeigh)
ENeigh.UNKNOWN = _gstlearn.cvar.ENeigh_UNKNOWN
ENeigh.UNIQUE = _gstlearn.cvar.ENeigh_UNIQUE
ENeigh.BENCH = _gstlearn.cvar.ENeigh_BENCH
ENeigh.MOVING = _gstlearn.cvar.ENeigh_MOVING
ENeigh.CELL = _gstlearn.cvar.ENeigh_CELL
ENeigh.IMAGE = _gstlearn.cvar.ENeigh_IMAGE

class ESpaceTypeIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ESpaceTypeIterator

    def __init__(self, arg2):
        _gstlearn.ESpaceTypeIterator_swiginit(self, _gstlearn.new_ESpaceTypeIterator(arg2))

    def __ref__(self):
        return _gstlearn.ESpaceTypeIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ESpaceTypeIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ESpaceTypeIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ESpaceTypeIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ESpaceTypeIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ESpaceTypeIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ESpaceTypeIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ESpaceTypeIterator_getDescr(self)

# Register ESpaceTypeIterator in _gstlearn:
_gstlearn.ESpaceTypeIterator_swigregister(ESpaceTypeIterator)
class ESpaceType(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ESpaceType

    def __init__(self, *args):
        _gstlearn.ESpaceType_swiginit(self, _gstlearn.new_ESpaceType(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ESpaceType_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ESpaceType_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ESpaceType_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ESpaceType_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ESpaceType_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ESpaceType_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ESpaceType_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ESpaceType_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ESpaceType_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ESpaceType_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ESpaceType_fromValues(values)
    E_COMPOSITE = _gstlearn.ESpaceType_E_COMPOSITE
    E_RN = _gstlearn.ESpaceType_E_RN
    E_SN = _gstlearn.ESpaceType_E_SN

    def toEnum(self):
        return _gstlearn.ESpaceType_toEnum(self)

# Register ESpaceType in _gstlearn:
_gstlearn.ESpaceType_swigregister(ESpaceType)
ESpaceType.COMPOSITE = _gstlearn.cvar.ESpaceType_COMPOSITE
ESpaceType.RN = _gstlearn.cvar.ESpaceType_RN
ESpaceType.SN = _gstlearn.cvar.ESpaceType_SN

class ESelectivityIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ESelectivityIterator

    def __init__(self, arg2):
        _gstlearn.ESelectivityIterator_swiginit(self, _gstlearn.new_ESelectivityIterator(arg2))

    def __ref__(self):
        return _gstlearn.ESelectivityIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ESelectivityIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ESelectivityIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ESelectivityIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ESelectivityIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ESelectivityIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ESelectivityIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ESelectivityIterator_getDescr(self)

# Register ESelectivityIterator in _gstlearn:
_gstlearn.ESelectivityIterator_swigregister(ESelectivityIterator)
class ESelectivity(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ESelectivity

    def __init__(self, *args):
        _gstlearn.ESelectivity_swiginit(self, _gstlearn.new_ESelectivity(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ESelectivity_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ESelectivity_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ESelectivity_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ESelectivity_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ESelectivity_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ESelectivity_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ESelectivity_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ESelectivity_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ESelectivity_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ESelectivity_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ESelectivity_fromValues(values)
    E_UNKNOWN = _gstlearn.ESelectivity_E_UNKNOWN
    E_Z = _gstlearn.ESelectivity_E_Z
    E_T = _gstlearn.ESelectivity_E_T
    E_Q = _gstlearn.ESelectivity_E_Q
    E_B = _gstlearn.ESelectivity_E_B
    E_M = _gstlearn.ESelectivity_E_M
    E_PROP = _gstlearn.ESelectivity_E_PROP
    E_QUANT = _gstlearn.ESelectivity_E_QUANT

    def toEnum(self):
        return _gstlearn.ESelectivity_toEnum(self)

# Register ESelectivity in _gstlearn:
_gstlearn.ESelectivity_swigregister(ESelectivity)
ESelectivity.UNKNOWN = _gstlearn.cvar.ESelectivity_UNKNOWN
ESelectivity.Z = _gstlearn.cvar.ESelectivity_Z
ESelectivity.T = _gstlearn.cvar.ESelectivity_T
ESelectivity.Q = _gstlearn.cvar.ESelectivity_Q
ESelectivity.B = _gstlearn.cvar.ESelectivity_B
ESelectivity.M = _gstlearn.cvar.ESelectivity_M
ESelectivity.PROP = _gstlearn.cvar.ESelectivity_PROP
ESelectivity.QUANT = _gstlearn.cvar.ESelectivity_QUANT

class EStatOptionIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EStatOptionIterator

    def __init__(self, arg2):
        _gstlearn.EStatOptionIterator_swiginit(self, _gstlearn.new_EStatOptionIterator(arg2))

    def __ref__(self):
        return _gstlearn.EStatOptionIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EStatOptionIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EStatOptionIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EStatOptionIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EStatOptionIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EStatOptionIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EStatOptionIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EStatOptionIterator_getDescr(self)

# Register EStatOptionIterator in _gstlearn:
_gstlearn.EStatOptionIterator_swigregister(EStatOptionIterator)
class EStatOption(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EStatOption

    def __init__(self, *args):
        _gstlearn.EStatOption_swiginit(self, _gstlearn.new_EStatOption(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EStatOption_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EStatOption_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EStatOption_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EStatOption_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EStatOption_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EStatOption_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EStatOption_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EStatOption_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EStatOption_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EStatOption_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EStatOption_fromValues(values)
    E_UNKNOWN = _gstlearn.EStatOption_E_UNKNOWN
    E_NUM = _gstlearn.EStatOption_E_NUM
    E_MEAN = _gstlearn.EStatOption_E_MEAN
    E_VAR = _gstlearn.EStatOption_E_VAR
    E_STDV = _gstlearn.EStatOption_E_STDV
    E_MINI = _gstlearn.EStatOption_E_MINI
    E_MAXI = _gstlearn.EStatOption_E_MAXI
    E_SUM = _gstlearn.EStatOption_E_SUM
    E_PROP = _gstlearn.EStatOption_E_PROP
    E_QUANT = _gstlearn.EStatOption_E_QUANT
    E_T = _gstlearn.EStatOption_E_T
    E_Q = _gstlearn.EStatOption_E_Q
    E_M = _gstlearn.EStatOption_E_M
    E_B = _gstlearn.EStatOption_E_B
    E_COV = _gstlearn.EStatOption_E_COV
    E_CORR = _gstlearn.EStatOption_E_CORR
    E_ZERO = _gstlearn.EStatOption_E_ZERO
    E_MEDIAN = _gstlearn.EStatOption_E_MEDIAN
    E_MEAN2 = _gstlearn.EStatOption_E_MEAN2
    E_VAR2 = _gstlearn.EStatOption_E_VAR2
    E_STDV2 = _gstlearn.EStatOption_E_STDV2
    E_SUM2 = _gstlearn.EStatOption_E_SUM2
    E_PLUS = _gstlearn.EStatOption_E_PLUS
    E_MOINS = _gstlearn.EStatOption_E_MOINS
    E_ORE = _gstlearn.EStatOption_E_ORE
    E_METAL = _gstlearn.EStatOption_E_METAL

    def toEnum(self):
        return _gstlearn.EStatOption_toEnum(self)

# Register EStatOption in _gstlearn:
_gstlearn.EStatOption_swigregister(EStatOption)
EStatOption.UNKNOWN = _gstlearn.cvar.EStatOption_UNKNOWN
EStatOption.NUM = _gstlearn.cvar.EStatOption_NUM
EStatOption.MEAN = _gstlearn.cvar.EStatOption_MEAN
EStatOption.VAR = _gstlearn.cvar.EStatOption_VAR
EStatOption.STDV = _gstlearn.cvar.EStatOption_STDV
EStatOption.MINI = _gstlearn.cvar.EStatOption_MINI
EStatOption.MAXI = _gstlearn.cvar.EStatOption_MAXI
EStatOption.SUM = _gstlearn.cvar.EStatOption_SUM
EStatOption.PROP = _gstlearn.cvar.EStatOption_PROP
EStatOption.QUANT = _gstlearn.cvar.EStatOption_QUANT
EStatOption.T = _gstlearn.cvar.EStatOption_T
EStatOption.Q = _gstlearn.cvar.EStatOption_Q
EStatOption.M = _gstlearn.cvar.EStatOption_M
EStatOption.B = _gstlearn.cvar.EStatOption_B
EStatOption.COV = _gstlearn.cvar.EStatOption_COV
EStatOption.CORR = _gstlearn.cvar.EStatOption_CORR
EStatOption.ZERO = _gstlearn.cvar.EStatOption_ZERO
EStatOption.MEDIAN = _gstlearn.cvar.EStatOption_MEDIAN
EStatOption.MEAN2 = _gstlearn.cvar.EStatOption_MEAN2
EStatOption.VAR2 = _gstlearn.cvar.EStatOption_VAR2
EStatOption.STDV2 = _gstlearn.cvar.EStatOption_STDV2
EStatOption.SUM2 = _gstlearn.cvar.EStatOption_SUM2
EStatOption.PLUS = _gstlearn.cvar.EStatOption_PLUS
EStatOption.MOINS = _gstlearn.cvar.EStatOption_MOINS
EStatOption.ORE = _gstlearn.cvar.EStatOption_ORE
EStatOption.METAL = _gstlearn.cvar.EStatOption_METAL

class EDirGenIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EDirGenIterator

    def __init__(self, arg2):
        _gstlearn.EDirGenIterator_swiginit(self, _gstlearn.new_EDirGenIterator(arg2))

    def __ref__(self):
        return _gstlearn.EDirGenIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EDirGenIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EDirGenIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EDirGenIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EDirGenIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EDirGenIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EDirGenIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EDirGenIterator_getDescr(self)

# Register EDirGenIterator in _gstlearn:
_gstlearn.EDirGenIterator_swigregister(EDirGenIterator)
class EDirGen(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EDirGen

    def __init__(self, *args):
        _gstlearn.EDirGen_swiginit(self, _gstlearn.new_EDirGen(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EDirGen_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EDirGen_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EDirGen_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EDirGen_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EDirGen_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EDirGen_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EDirGen_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EDirGen_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EDirGen_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EDirGen_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EDirGen_fromValues(values)
    E_VDC = _gstlearn.EDirGen_E_VDC
    E_RND = _gstlearn.EDirGen_E_RND

    def toEnum(self):
        return _gstlearn.EDirGen_toEnum(self)

# Register EDirGen in _gstlearn:
_gstlearn.EDirGen_swigregister(EDirGen)
EDirGen.VDC = _gstlearn.cvar.EDirGen_VDC
EDirGen.RND = _gstlearn.cvar.EDirGen_RND

class EGaussInvIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EGaussInvIterator

    def __init__(self, arg2):
        _gstlearn.EGaussInvIterator_swiginit(self, _gstlearn.new_EGaussInvIterator(arg2))

    def __ref__(self):
        return _gstlearn.EGaussInvIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EGaussInvIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EGaussInvIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EGaussInvIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EGaussInvIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EGaussInvIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EGaussInvIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EGaussInvIterator_getDescr(self)

# Register EGaussInvIterator in _gstlearn:
_gstlearn.EGaussInvIterator_swigregister(EGaussInvIterator)
class EGaussInv(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EGaussInv

    def __init__(self, *args):
        _gstlearn.EGaussInv_swiginit(self, _gstlearn.new_EGaussInv(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EGaussInv_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EGaussInv_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EGaussInv_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EGaussInv_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EGaussInv_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EGaussInv_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EGaussInv_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EGaussInv_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EGaussInv_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EGaussInv_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EGaussInv_fromValues(values)
    E_EMP = _gstlearn.EGaussInv_E_EMP
    E_HMT = _gstlearn.EGaussInv_E_HMT
    E_NN = _gstlearn.EGaussInv_E_NN

    def toEnum(self):
        return _gstlearn.EGaussInv_toEnum(self)

# Register EGaussInv in _gstlearn:
_gstlearn.EGaussInv_swigregister(EGaussInv)
EGaussInv.EMP = _gstlearn.cvar.EGaussInv_EMP
EGaussInv.HMT = _gstlearn.cvar.EGaussInv_HMT
EGaussInv.NN = _gstlearn.cvar.EGaussInv_NN

class ECalcMemberIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECalcMemberIterator

    def __init__(self, arg2):
        _gstlearn.ECalcMemberIterator_swiginit(self, _gstlearn.new_ECalcMemberIterator(arg2))

    def __ref__(self):
        return _gstlearn.ECalcMemberIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ECalcMemberIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ECalcMemberIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ECalcMemberIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ECalcMemberIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ECalcMemberIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ECalcMemberIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ECalcMemberIterator_getDescr(self)

# Register ECalcMemberIterator in _gstlearn:
_gstlearn.ECalcMemberIterator_swigregister(ECalcMemberIterator)
class ECalcMember(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ECalcMember

    def __init__(self, *args):
        _gstlearn.ECalcMember_swiginit(self, _gstlearn.new_ECalcMember(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ECalcMember_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ECalcMember_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ECalcMember_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ECalcMember_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ECalcMember_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ECalcMember_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ECalcMember_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ECalcMember_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ECalcMember_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ECalcMember_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ECalcMember_fromValues(values)
    E_LHS = _gstlearn.ECalcMember_E_LHS
    E_RHS = _gstlearn.ECalcMember_E_RHS
    E_VAR = _gstlearn.ECalcMember_E_VAR

    def toEnum(self):
        return _gstlearn.ECalcMember_toEnum(self)

# Register ECalcMember in _gstlearn:
_gstlearn.ECalcMember_swigregister(ECalcMember)
ECalcMember.LHS = _gstlearn.cvar.ECalcMember_LHS
ECalcMember.RHS = _gstlearn.cvar.ECalcMember_RHS
ECalcMember.VAR = _gstlearn.cvar.ECalcMember_VAR

class EPostUpscaleIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EPostUpscaleIterator

    def __init__(self, arg2):
        _gstlearn.EPostUpscaleIterator_swiginit(self, _gstlearn.new_EPostUpscaleIterator(arg2))

    def __ref__(self):
        return _gstlearn.EPostUpscaleIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EPostUpscaleIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EPostUpscaleIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EPostUpscaleIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EPostUpscaleIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EPostUpscaleIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EPostUpscaleIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EPostUpscaleIterator_getDescr(self)

# Register EPostUpscaleIterator in _gstlearn:
_gstlearn.EPostUpscaleIterator_swigregister(EPostUpscaleIterator)
class EPostUpscale(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EPostUpscale

    def __init__(self, *args):
        _gstlearn.EPostUpscale_swiginit(self, _gstlearn.new_EPostUpscale(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EPostUpscale_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EPostUpscale_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EPostUpscale_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EPostUpscale_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EPostUpscale_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EPostUpscale_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EPostUpscale_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EPostUpscale_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EPostUpscale_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EPostUpscale_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EPostUpscale_fromValues(values)
    E_UNKNOWN = _gstlearn.EPostUpscale_E_UNKNOWN
    E_NUM = _gstlearn.EPostUpscale_E_NUM
    E_MEAN = _gstlearn.EPostUpscale_E_MEAN
    E_MINI = _gstlearn.EPostUpscale_E_MINI
    E_MAXI = _gstlearn.EPostUpscale_E_MAXI

    def toEnum(self):
        return _gstlearn.EPostUpscale_toEnum(self)

# Register EPostUpscale in _gstlearn:
_gstlearn.EPostUpscale_swigregister(EPostUpscale)
EPostUpscale.UNKNOWN = _gstlearn.cvar.EPostUpscale_UNKNOWN
EPostUpscale.NUM = _gstlearn.cvar.EPostUpscale_NUM
EPostUpscale.MEAN = _gstlearn.cvar.EPostUpscale_MEAN
EPostUpscale.MINI = _gstlearn.cvar.EPostUpscale_MINI
EPostUpscale.MAXI = _gstlearn.cvar.EPostUpscale_MAXI

class EPostStatIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EPostStatIterator

    def __init__(self, arg2):
        _gstlearn.EPostStatIterator_swiginit(self, _gstlearn.new_EPostStatIterator(arg2))

    def __ref__(self):
        return _gstlearn.EPostStatIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.EPostStatIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.EPostStatIterator_toNext(self)

    def toFront(self):
        return _gstlearn.EPostStatIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.EPostStatIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.EPostStatIterator_getValue(self)

    def getKey(self):
        return _gstlearn.EPostStatIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.EPostStatIterator_getDescr(self)

# Register EPostStatIterator in _gstlearn:
_gstlearn.EPostStatIterator_swigregister(EPostStatIterator)
class EPostStat(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_EPostStat

    def __init__(self, *args):
        _gstlearn.EPostStat_swiginit(self, _gstlearn.new_EPostStat(*args))

    @staticmethod
    def getSize():
        return _gstlearn.EPostStat_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.EPostStat_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.EPostStat_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.EPostStat_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.EPostStat_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.EPostStat_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.EPostStat_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.EPostStat_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.EPostStat_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.EPostStat_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.EPostStat_fromValues(values)
    E_UNKNOWN = _gstlearn.EPostStat_E_UNKNOWN
    E_MEAN = _gstlearn.EPostStat_E_MEAN
    E_VAR = _gstlearn.EPostStat_E_VAR
    E_VARP = _gstlearn.EPostStat_E_VARP
    E_STD = _gstlearn.EPostStat_E_STD
    E_STDP = _gstlearn.EPostStat_E_STDP
    E_MED = _gstlearn.EPostStat_E_MED
    E_MINI = _gstlearn.EPostStat_E_MINI
    E_MAXI = _gstlearn.EPostStat_E_MAXI

    def toEnum(self):
        return _gstlearn.EPostStat_toEnum(self)

# Register EPostStat in _gstlearn:
_gstlearn.EPostStat_swigregister(EPostStat)
EPostStat.UNKNOWN = _gstlearn.cvar.EPostStat_UNKNOWN
EPostStat.MEAN = _gstlearn.cvar.EPostStat_MEAN
EPostStat.VAR = _gstlearn.cvar.EPostStat_VAR
EPostStat.VARP = _gstlearn.cvar.EPostStat_VARP
EPostStat.STD = _gstlearn.cvar.EPostStat_STD
EPostStat.STDP = _gstlearn.cvar.EPostStat_STDP
EPostStat.MED = _gstlearn.cvar.EPostStat_MED
EPostStat.MINI = _gstlearn.cvar.EPostStat_MINI
EPostStat.MAXI = _gstlearn.cvar.EPostStat_MAXI

class ETestsIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ETestsIterator

    def __init__(self, arg2):
        _gstlearn.ETestsIterator_swiginit(self, _gstlearn.new_ETestsIterator(arg2))

    def __ref__(self):
        return _gstlearn.ETestsIterator___ref__(self)

    def hasNext(self):
        return _gstlearn.ETestsIterator_hasNext(self)

    def toNext(self):
        return _gstlearn.ETestsIterator_toNext(self)

    def toFront(self):
        return _gstlearn.ETestsIterator_toFront(self)

    def getEnum(self):
        return _gstlearn.ETestsIterator_getEnum(self)

    def getValue(self):
        return _gstlearn.ETestsIterator_getValue(self)

    def getKey(self):
        return _gstlearn.ETestsIterator_getKey(self)

    def getDescr(self):
        return _gstlearn.ETestsIterator_getDescr(self)

# Register ETestsIterator in _gstlearn:
_gstlearn.ETestsIterator_swigregister(ETestsIterator)
class ETests(AEnum):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ETests

    def __init__(self, *args):
        _gstlearn.ETests_swiginit(self, _gstlearn.new_ETests(*args))

    @staticmethod
    def getSize():
        return _gstlearn.ETests_getSize()

    @staticmethod
    def getIterator():
        return _gstlearn.ETests_getIterator()

    @staticmethod
    def printAll():
        return _gstlearn.ETests_printAll()

    @staticmethod
    def getAllKeys(_from=-10):
        return _gstlearn.ETests_getAllKeys(_from)

    @staticmethod
    def getAllDescr(_from=-10):
        return _gstlearn.ETests_getAllDescr(_from)

    @staticmethod
    def existsKey(key):
        return _gstlearn.ETests_existsKey(key)

    @staticmethod
    def existsValue(value):
        return _gstlearn.ETests_existsValue(value)

    @staticmethod
    def fromKey(key):
        return _gstlearn.ETests_fromKey(key)

    @staticmethod
    def fromValue(value):
        return _gstlearn.ETests_fromValue(value)

    @staticmethod
    def fromKeys(keys):
        return _gstlearn.ETests_fromKeys(keys)

    @staticmethod
    def fromValues(values):
        return _gstlearn.ETests_fromValues(values)
    E_CASE0 = _gstlearn.ETests_E_CASE0
    E_CASE1 = _gstlearn.ETests_E_CASE1
    E_CASE2 = _gstlearn.ETests_E_CASE2

    def toEnum(self):
        return _gstlearn.ETests_toEnum(self)

# Register ETests in _gstlearn:
_gstlearn.ETests_swigregister(ETests)
ETests.CASE0 = _gstlearn.cvar.ETests_CASE0
ETests.CASE1 = _gstlearn.cvar.ETests_CASE1
ETests.CASE2 = _gstlearn.cvar.ETests_CASE2

class argClass(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ival = property(_gstlearn.argClass_ival_get, _gstlearn.argClass_ival_set)
    rval = property(_gstlearn.argClass_rval_get, _gstlearn.argClass_rval_set)
    sval = property(_gstlearn.argClass_sval_get, _gstlearn.argClass_sval_set)

    def __init__(self, *args, **kwargs):
        _gstlearn.argClass_swiginit(self, _gstlearn.new_argClass(*args, **kwargs))

    def getIval(self):
        return _gstlearn.argClass_getIval(self)

    def setIval(self, iival):
        return _gstlearn.argClass_setIval(self, iival)

    def getRval(self):
        return _gstlearn.argClass_getRval(self)

    def setRval(self, rrval):
        return _gstlearn.argClass_setRval(self, rrval)

    def getSval(self):
        return _gstlearn.argClass_getSval(self)

    def setSval(self, ssval):
        return _gstlearn.argClass_setSval(self, ssval)

    def display(self):
        return _gstlearn.argClass_display(self)
    __swig_destroy__ = _gstlearn.delete_argClass

# Register argClass in _gstlearn:
_gstlearn.argClass_swigregister(argClass)

def argumentTestInt(value):
    return _gstlearn.argumentTestInt(value)

def argumentTestDouble(value):
    return _gstlearn.argumentTestDouble(value)

def argumentTestVectorInt(values):
    return _gstlearn.argumentTestVectorInt(values)

def argumentTestVectorDouble(values):
    return _gstlearn.argumentTestVectorDouble(values)

def argumentTestVectorVectorInt(values):
    return _gstlearn.argumentTestVectorVectorInt(values)

def argumentTestVectorVectorDouble(values):
    return _gstlearn.argumentTestVectorVectorDouble(values)

def argumentTestString(value):
    return _gstlearn.argumentTestString(value)

def argumentTestVectorString(values):
    return _gstlearn.argumentTestVectorString(values)

def argumentTestIntOverload(*args):
    return _gstlearn.argumentTestIntOverload(*args)

def argumentTestDoubleOverload(*args):
    return _gstlearn.argumentTestDoubleOverload(*args)

def argumentTestStringOverload(*args):
    return _gstlearn.argumentTestStringOverload(*args)

def argumentTestEnum(value):
    return _gstlearn.argumentTestEnum(value)

def argumentReturnInt(value):
    return _gstlearn.argumentReturnInt(value)

def argumentReturnDouble(value):
    return _gstlearn.argumentReturnDouble(value)

def argumentReturnVectorInt(values):
    return _gstlearn.argumentReturnVectorInt(values)

def argumentReturnVectorDouble(values):
    return _gstlearn.argumentReturnVectorDouble(values)

def argumentReturnVectorVectorInt(values):
    return _gstlearn.argumentReturnVectorVectorInt(values)

def argumentReturnVectorVectorDouble(values):
    return _gstlearn.argumentReturnVectorVectorDouble(values)

def argumentDefTestInt(argInt=2):
    return _gstlearn.argumentDefTestInt(argInt)

def argumentDefTestDbl(argDbl=2.):
    return _gstlearn.argumentDefTestDbl(argDbl)

def argumentDefTestStr(*args, **kwargs):
    return _gstlearn.argumentDefTestStr(*args, **kwargs)

def argumentDefTestVInt(*args, **kwargs):
    return _gstlearn.argumentDefTestVInt(*args, **kwargs)

def argumentDefTestVDbl(*args, **kwargs):
    return _gstlearn.argumentDefTestVDbl(*args, **kwargs)

def argumentDefTestVString(*args, **kwargs):
    return _gstlearn.argumentDefTestVString(*args, **kwargs)

def argumentDefTestVVInt(*args, **kwargs):
    return _gstlearn.argumentDefTestVVInt(*args, **kwargs)

def argumentDefTestVVDbl(*args, **kwargs):
    return _gstlearn.argumentDefTestVVDbl(*args, **kwargs)

def argumentTestMatrixRectangular(*args, **kwargs):
    return _gstlearn.argumentTestMatrixRectangular(*args, **kwargs)

def argumentTestMatrixSquareGeneral(*args, **kwargs):
    return _gstlearn.argumentTestMatrixSquareGeneral(*args, **kwargs)

def argumentTestMatrixSquareSymmetric(*args, **kwargs):
    return _gstlearn.argumentTestMatrixSquareSymmetric(*args, **kwargs)

def argumentReturnMatrix(nrows=2, ncols=3, seed=1312):
    return _gstlearn.argumentReturnMatrix(nrows, ncols, seed)

def argumentTestMatrixSparse(*args, **kwargs):
    return _gstlearn.argumentTestMatrixSparse(*args, **kwargs)

def argumentReturnMatrixSparse(nrows=2, ncols=3, zeroPercent=0.1, seed=1356):
    return _gstlearn.argumentReturnMatrixSparse(nrows, ncols, zeroPercent, seed)
class AStringable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AStringable_swiginit(self, _gstlearn.new_AStringable(*args))
    __swig_destroy__ = _gstlearn.delete_AStringable

    def toString(self, strfmt=None):
        return _gstlearn.AStringable_toString(self, strfmt)

    def display(self, strfmt=None):
        return _gstlearn.AStringable_display(self, strfmt)

# Register AStringable in _gstlearn:
_gstlearn.AStringable_swigregister(AStringable)

def messageFlush(string):
    return _gstlearn.messageFlush(string)

def messerrFlush(string):
    return _gstlearn.messerrFlush(string)

def messerr(*args, **kwargs):
    return _gstlearn.messerr(*args, **kwargs)

def message(*args, **kwargs):
    return _gstlearn.message(*args, **kwargs)

def messageNoDiff(*args, **kwargs):
    return _gstlearn.messageNoDiff(*args, **kwargs)

def mesArg(title, current, nmax):
    return _gstlearn.mesArg(title, current, nmax)

def checkArg(title, current, nmax):
    return _gstlearn.checkArg(title, current, nmax)

def messageAbort(*args, **kwargs):
    return _gstlearn.messageAbort(*args, **kwargs)

def mestitle(*args, **kwargs):
    return _gstlearn.mestitle(*args, **kwargs)

def mes_process(string, ntot, iech):
    return _gstlearn.mes_process(string, ntot, iech)

def toTitle(*args, **kwargs):
    return _gstlearn.toTitle(*args, **kwargs)

def toMatrix(*args):
    return _gstlearn.toMatrix(*args)

def toVector(*args):
    return _gstlearn.toVector(*args)

def toStr(*args, **kwargs):
    return _gstlearn.toStr(*args, **kwargs)

def toInt(*args, **kwargs):
    return _gstlearn.toInt(*args, **kwargs)

def toInterval(zmin, zmax):
    return _gstlearn.toInterval(zmin, zmax)

def toVectorDouble(*args, **kwargs):
    return _gstlearn.toVectorDouble(*args, **kwargs)

def tab_prints(*args, **kwargs):
    return _gstlearn.tab_prints(*args, **kwargs)

def tab_printg(*args, **kwargs):
    return _gstlearn.tab_printg(*args, **kwargs)

def tab_printd(*args, **kwargs):
    return _gstlearn.tab_printd(*args, **kwargs)

def tab_printi(*args, **kwargs):
    return _gstlearn.tab_printi(*args, **kwargs)

def tab_print_rc(*args, **kwargs):
    return _gstlearn.tab_print_rc(*args, **kwargs)

def tab_print_rowname(string, taille):
    return _gstlearn.tab_print_rowname(string, taille)

def print_matrix(*args):
    return _gstlearn.print_matrix(*args)

def print_trimat(title, mode, neq, tl):
    return _gstlearn.print_trimat(title, mode, neq, tl)

def print_imatrix(title, flag_limit, bycol, nx, ny, sel, tab):
    return _gstlearn.print_imatrix(title, flag_limit, bycol, nx, ny, sel, tab)

def print_vector(*args):
    return _gstlearn.print_vector(*args)

def print_ivector(*args):
    return _gstlearn.print_ivector(*args)
class AStringFormat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AStringFormat_swiginit(self, _gstlearn.new_AStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_AStringFormat

    def getLevel(self):
        return _gstlearn.AStringFormat_getLevel(self)

    def hasTitle(self):
        return _gstlearn.AStringFormat_hasTitle(self)

    def getTitle(self):
        return _gstlearn.AStringFormat_getTitle(self)

    def setTitle(self, title):
        return _gstlearn.AStringFormat_setTitle(self, title)

# Register AStringFormat in _gstlearn:
_gstlearn.AStringFormat_swigregister(AStringFormat)
class ASerializable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ASerializable

    def deserialize(self, _is, verbose=True):
        return _gstlearn.ASerializable_deserialize(self, _is, verbose)

    def serialize(self, os, verbose=True):
        return _gstlearn.ASerializable_serialize(self, os, verbose)

    def dumpToNF(self, neutralFilename, verbose=False):
        return _gstlearn.ASerializable_dumpToNF(self, neutralFilename, verbose)

    @staticmethod
    def buildFileName(status, filename, ensureDirExist=False):
        return _gstlearn.ASerializable_buildFileName(status, filename, ensureDirExist)

    @staticmethod
    def getHomeDirectory(*args, **kwargs):
        return _gstlearn.ASerializable_getHomeDirectory(*args, **kwargs)

    @staticmethod
    def getWorkingDirectory():
        return _gstlearn.ASerializable_getWorkingDirectory()

    @staticmethod
    def getTestData(subdir, filename):
        return _gstlearn.ASerializable_getTestData(subdir, filename)

    @staticmethod
    def getFileIdentity(filename, verbose=False):
        return _gstlearn.ASerializable_getFileIdentity(filename, verbose)

    @staticmethod
    def setContainerName(*args, **kwargs):
        return _gstlearn.ASerializable_setContainerName(*args, **kwargs)

    @staticmethod
    def unsetContainerName():
        return _gstlearn.ASerializable_unsetContainerName()

    @staticmethod
    def setPrefixName(prefixName):
        return _gstlearn.ASerializable_setPrefixName(prefixName)

    @staticmethod
    def unsetPrefixName():
        return _gstlearn.ASerializable_unsetPrefixName()

    @staticmethod
    def getContainerName():
        return _gstlearn.ASerializable_getContainerName()

    @staticmethod
    def getPrefixName():
        return _gstlearn.ASerializable_getPrefixName()

    @staticmethod
    def createDirectory(dir):
        return _gstlearn.ASerializable_createDirectory(dir)

    @staticmethod
    def getExecDirectory():
        return _gstlearn.ASerializable_getExecDirectory()

    @staticmethod
    def getDirectory(path):
        return _gstlearn.ASerializable_getDirectory(path)

# Register ASerializable in _gstlearn:
_gstlearn.ASerializable_swigregister(ASerializable)
class NamingConvention(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NamingConvention_swiginit(self, _gstlearn.new_NamingConvention(*args))
    __swig_destroy__ = _gstlearn.delete_NamingConvention

    def toString(self, strfmt=None):
        return _gstlearn.NamingConvention_toString(self, strfmt)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.NamingConvention_create(*args, **kwargs)

    def setNamesAndLocators(self, *args):
        return _gstlearn.NamingConvention_setNamesAndLocators(self, *args)

    def setDelim(self, delim):
        return _gstlearn.NamingConvention_setDelim(self, delim)

    def setLocatorOutType(self, l):
        return _gstlearn.NamingConvention_setLocatorOutType(self, l)

    def setPrefix(self, prefix):
        return _gstlearn.NamingConvention_setPrefix(self, prefix)

    def setFlagClean(self, cleanSameLocator):
        return _gstlearn.NamingConvention_setFlagClean(self, cleanSameLocator)

    def setLocators(self, dbout, iattout_start, nvar, nitems=1, locatorShift=0):
        return _gstlearn.NamingConvention_setLocators(self, dbout, iattout_start, nvar, nitems, locatorShift)

    def isFlagQualifier(self):
        return _gstlearn.NamingConvention_isFlagQualifier(self)

    def isFlagVarname(self):
        return _gstlearn.NamingConvention_isFlagVarname(self)

    def __repr__(self):
        return _gstlearn.NamingConvention___repr__(self)

# Register NamingConvention in _gstlearn:
_gstlearn.NamingConvention_swigregister(NamingConvention)
class ACalculator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACalculator

    def run(self):
        return _gstlearn.ACalculator_run(self)

# Register ACalculator in _gstlearn:
_gstlearn.ACalculator_swigregister(ACalculator)
class ACalcDbVarCreator(ACalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACalcDbVarCreator

    def setDb(self, db):
        return _gstlearn.ACalcDbVarCreator_setDb(self, db)

    def setNamingConvention(self, namconv):
        return _gstlearn.ACalcDbVarCreator_setNamingConvention(self, namconv)

    def getDb(self):
        return _gstlearn.ACalcDbVarCreator_getDb(self)

    def hasDb(self, verbose=False):
        return _gstlearn.ACalcDbVarCreator_hasDb(self, verbose)

    def getNamconv(self):
        return _gstlearn.ACalcDbVarCreator_getNamconv(self)

# Register ACalcDbVarCreator in _gstlearn:
_gstlearn.ACalcDbVarCreator_swigregister(ACalcDbVarCreator)
class ACalcDbToDb(ACalculator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACalcDbToDb

    def setDbin(self, dbin):
        return _gstlearn.ACalcDbToDb_setDbin(self, dbin)

    def setDbout(self, dbout):
        return _gstlearn.ACalcDbToDb_setDbout(self, dbout)

    def setNamingConvention(self, namconv):
        return _gstlearn.ACalcDbToDb_setNamingConvention(self, namconv)

    def setMustShareSpaceDimension(self, mustShareSpaceDimension):
        return _gstlearn.ACalcDbToDb_setMustShareSpaceDimension(self, mustShareSpaceDimension)

    def getDbin(self):
        return _gstlearn.ACalcDbToDb_getDbin(self)

    def getDbout(self):
        return _gstlearn.ACalcDbToDb_getDbout(self)

    def getGridin(self):
        return _gstlearn.ACalcDbToDb_getGridin(self)

    def getGridout(self):
        return _gstlearn.ACalcDbToDb_getGridout(self)

    def hasDbin(self, verbose=True):
        return _gstlearn.ACalcDbToDb_hasDbin(self, verbose)

    def hasDbout(self, verbose=True):
        return _gstlearn.ACalcDbToDb_hasDbout(self, verbose)

    def isGridIn(self, verbose=True):
        return _gstlearn.ACalcDbToDb_isGridIn(self, verbose)

    def isGridOut(self, verbose=True):
        return _gstlearn.ACalcDbToDb_isGridOut(self, verbose)

# Register ACalcDbToDb in _gstlearn:
_gstlearn.ACalcDbToDb_swigregister(ACalcDbToDb)
class CalcMigrate(ACalcDbToDb):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CalcMigrate_swiginit(self, _gstlearn.new_CalcMigrate())
    __swig_destroy__ = _gstlearn.delete_CalcMigrate

    def setDmax(self, dmax):
        return _gstlearn.CalcMigrate_setDmax(self, dmax)

    def setFlagFill(self, flagFill):
        return _gstlearn.CalcMigrate_setFlagFill(self, flagFill)

    def setFlagInter(self, flagInter):
        return _gstlearn.CalcMigrate_setFlagInter(self, flagInter)

    def setFlagBall(self, flagBall):
        return _gstlearn.CalcMigrate_setFlagBall(self, flagBall)

    def setDistType(self, dist_type):
        return _gstlearn.CalcMigrate_setDistType(self, dist_type)

    def setIuids(self, iuids):
        return _gstlearn.CalcMigrate_setIuids(self, iuids)

    def setFlagLocate(self, flagLocate):
        return _gstlearn.CalcMigrate_setFlagLocate(self, flagLocate)

    def setLocatorType(self, locatorType):
        return _gstlearn.CalcMigrate_setLocatorType(self, locatorType)

# Register CalcMigrate in _gstlearn:
_gstlearn.CalcMigrate_swigregister(CalcMigrate)

def migrate(*args, **kwargs):
    return _gstlearn.migrate(*args, **kwargs)

def migrateMulti(*args, **kwargs):
    return _gstlearn.migrateMulti(*args, **kwargs)

def migrateByAttribute(*args, **kwargs):
    return _gstlearn.migrateByAttribute(*args, **kwargs)

def migrateByLocator(*args, **kwargs):
    return _gstlearn.migrateByLocator(*args, **kwargs)

def manageExternalInformation(mode, locatorType, dbin, dbout, flag_created):
    return _gstlearn.manageExternalInformation(mode, locatorType, dbin, dbout, flag_created)

def interpolateVariableToPoint(db_grid, iatt, np, xp, yp, zp, tab):
    return _gstlearn.interpolateVariableToPoint(db_grid, iatt, np, xp, yp, zp, tab)

def dbgridLineSampling(dbgrid, x1, x2, ndisc, ncut, cuts, nval_ret):
    return _gstlearn.dbgridLineSampling(dbgrid, x1, x2, ndisc, ncut, cuts, nval_ret)

def expandPointToGrid(db_point, db_grid, iatt, iatt_time, iatt_angle, iatt_scaleu, iatt_scalev, iatt_scalew, flag_index, distType, dmax, tab):
    return _gstlearn.expandPointToGrid(db_point, db_grid, iatt, iatt_time, iatt_angle, iatt_scaleu, iatt_scalev, iatt_scalew, flag_index, distType, dmax, tab)

def pointToBlock(dbpoint, dbgrid, option, flag_size, iatt_time, iatt_size, iatt_angle, iatt_scaleu, iatt_scalev, iatt_scalew):
    return _gstlearn.pointToBlock(dbpoint, dbgrid, option, flag_size, iatt_time, iatt_size, iatt_angle, iatt_scaleu, iatt_scalev, iatt_scalew)

def migrateGridToCoor(db_grid, iatt, coords, tab):
    return _gstlearn.migrateGridToCoor(db_grid, iatt, coords, tab)

def expandPointToCoor(db1, iatt, coords, tab):
    return _gstlearn.expandPointToCoor(db1, iatt, coords, tab)
class ACalcInterpolator(ACalcDbToDb):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACalcInterpolator

    def setModel(self, model):
        return _gstlearn.ACalcInterpolator_setModel(self, model)

    def setNeigh(self, neigh):
        return _gstlearn.ACalcInterpolator_setNeigh(self, neigh)

    def getModel(self):
        return _gstlearn.ACalcInterpolator_getModel(self)

    def getNeigh(self):
        return _gstlearn.ACalcInterpolator_getNeigh(self)

    def hasModel(self, verbose=True):
        return _gstlearn.ACalcInterpolator_hasModel(self, verbose)

    def hasNeigh(self, verbose=True):
        return _gstlearn.ACalcInterpolator_hasNeigh(self, verbose)

# Register ACalcInterpolator in _gstlearn:
_gstlearn.ACalcInterpolator_swigregister(ACalcInterpolator)
class CalcStatistics(ACalcDbToDb):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CalcStatistics_swiginit(self, _gstlearn.new_CalcStatistics())
    __swig_destroy__ = _gstlearn.delete_CalcStatistics

    def getDboutMustBeGrid(self):
        return _gstlearn.CalcStatistics_getDboutMustBeGrid(self)

    def setDboutMustBeGrid(self, dboutMustBeGrid):
        return _gstlearn.CalcStatistics_setDboutMustBeGrid(self, dboutMustBeGrid)

    def setFlagStats(self, flagStats):
        return _gstlearn.CalcStatistics_setFlagStats(self, flagStats)

    def setRadius(self, radius):
        return _gstlearn.CalcStatistics_setRadius(self, radius)

    def setOper(self, oper):
        return _gstlearn.CalcStatistics_setOper(self, oper)

    def setFlagRegr(self, flagRegr):
        return _gstlearn.CalcStatistics_setFlagRegr(self, flagRegr)

    def setFlagCst(self, flagCst):
        return _gstlearn.CalcStatistics_setFlagCst(self, flagCst)

    def setName0(self, name0):
        return _gstlearn.CalcStatistics_setName0(self, name0)

    def setNamaux(self, namaux):
        return _gstlearn.CalcStatistics_setNamaux(self, namaux)

    def setRegrMode(self, regrMode):
        return _gstlearn.CalcStatistics_setRegrMode(self, regrMode)

    def setModel(self, model):
        return _gstlearn.CalcStatistics_setModel(self, model)

# Register CalcStatistics in _gstlearn:
_gstlearn.CalcStatistics_swigregister(CalcStatistics)

def dbStatisticsOnGrid(*args, **kwargs):
    return _gstlearn.dbStatisticsOnGrid(*args, **kwargs)

def dbRegression(*args, **kwargs):
    return _gstlearn.dbRegression(*args, **kwargs)
class CalcGridToGrid(ACalcDbToDb):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CalcGridToGrid_swiginit(self, _gstlearn.new_CalcGridToGrid())
    __swig_destroy__ = _gstlearn.delete_CalcGridToGrid

    def setFlagCopy(self, flagCopy):
        return _gstlearn.CalcGridToGrid_setFlagCopy(self, flagCopy)

    def setFlagExpand(self, flagExpand):
        return _gstlearn.CalcGridToGrid_setFlagExpand(self, flagExpand)

    def setFlagShrink(self, flagShrink):
        return _gstlearn.CalcGridToGrid_setFlagShrink(self, flagShrink)

    def setFlagInter(self, flagInter):
        return _gstlearn.CalcGridToGrid_setFlagInter(self, flagInter)

    def setNameBots(self, name_bots):
        return _gstlearn.CalcGridToGrid_setNameBots(self, name_bots)

    def setNameTops(self, name_tops):
        return _gstlearn.CalcGridToGrid_setNameTops(self, name_tops)

# Register CalcGridToGrid in _gstlearn:
_gstlearn.CalcGridToGrid_swigregister(CalcGridToGrid)

def dbg2gCopy(*args, **kwargs):
    return _gstlearn.dbg2gCopy(*args, **kwargs)

def dbg2gExpand(*args, **kwargs):
    return _gstlearn.dbg2gExpand(*args, **kwargs)

def dbg2gShrink(*args, **kwargs):
    return _gstlearn.dbg2gShrink(*args, **kwargs)

def dbg2gInterpolate(*args, **kwargs):
    return _gstlearn.dbg2gInterpolate(*args, **kwargs)
class CalcSimuPost(ACalcDbToDb):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CalcSimuPost_swiginit(self, _gstlearn.new_CalcSimuPost())
    __swig_destroy__ = _gstlearn.delete_CalcSimuPost

    def setNames(self, names):
        return _gstlearn.CalcSimuPost_setNames(self, names)

    def setNfact(self, nfact):
        return _gstlearn.CalcSimuPost_setNfact(self, nfact)

    def setUpscale(self, upscale):
        return _gstlearn.CalcSimuPost_setUpscale(self, upscale)

    def setVerbose(self, verbose):
        return _gstlearn.CalcSimuPost_setVerbose(self, verbose)

    def setFlagMatch(self, match):
        return _gstlearn.CalcSimuPost_setFlagMatch(self, match)

    def setFlagUpscale(self, flagUpscale):
        return _gstlearn.CalcSimuPost_setFlagUpscale(self, flagUpscale)

    def setStats(self, stats):
        return _gstlearn.CalcSimuPost_setStats(self, stats)

    def setCheckTargets(self, ranks):
        return _gstlearn.CalcSimuPost_setCheckTargets(self, ranks)

    def setCheckLevel(self, level):
        return _gstlearn.CalcSimuPost_setCheckLevel(self, level)

# Register CalcSimuPost in _gstlearn:
_gstlearn.CalcSimuPost_swigregister(CalcSimuPost)

def simuPost(*args, **kwargs):
    return _gstlearn.simuPost(*args, **kwargs)
class CalcSimuPostDemo(CalcSimuPost):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CalcSimuPostDemo_swiginit(self, _gstlearn.new_CalcSimuPostDemo())
    __swig_destroy__ = _gstlearn.delete_CalcSimuPostDemo

# Register CalcSimuPostDemo in _gstlearn:
_gstlearn.CalcSimuPostDemo_swigregister(CalcSimuPostDemo)

def simuPostDemo(*args, **kwargs):
    return _gstlearn.simuPostDemo(*args, **kwargs)
class CalcSimuPostPropByLayer(CalcSimuPost):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CalcSimuPostPropByLayer_swiginit(self, _gstlearn.new_CalcSimuPostPropByLayer())
    __swig_destroy__ = _gstlearn.delete_CalcSimuPostPropByLayer

    def setFlagTopToBase(self, topToBase):
        return _gstlearn.CalcSimuPostPropByLayer_setFlagTopToBase(self, topToBase)

# Register CalcSimuPostPropByLayer in _gstlearn:
_gstlearn.CalcSimuPostPropByLayer_swigregister(CalcSimuPostPropByLayer)

def simuPostPropByLayer(*args, **kwargs):
    return _gstlearn.simuPostPropByLayer(*args, **kwargs)
class Tensor(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Tensor_swiginit(self, _gstlearn.new_Tensor(*args))
    __swig_destroy__ = _gstlearn.delete_Tensor

    def toString(self, strfmt=None):
        return _gstlearn.Tensor_toString(self, strfmt)

    def init(self, ndim):
        return _gstlearn.Tensor_init(self, ndim)

    def setTensorDirect2(self, tensor):
        return _gstlearn.Tensor_setTensorDirect2(self, tensor)

    def setRadiusIsotropic(self, radius):
        return _gstlearn.Tensor_setRadiusIsotropic(self, radius)

    def setRadiusVec(self, radius):
        return _gstlearn.Tensor_setRadiusVec(self, radius)

    def setRadiusDir(self, idim, radius):
        return _gstlearn.Tensor_setRadiusDir(self, idim, radius)

    def setRotation(self, rot):
        return _gstlearn.Tensor_setRotation(self, rot)

    def setRotationAngles(self, angles):
        return _gstlearn.Tensor_setRotationAngles(self, angles)

    def setRotationAngle(self, idim, angle):
        return _gstlearn.Tensor_setRotationAngle(self, idim, angle)

    def setRotationAnglesAndRadius(self, *args, **kwargs):
        return _gstlearn.Tensor_setRotationAnglesAndRadius(self, *args, **kwargs)

    def getAngles(self):
        return _gstlearn.Tensor_getAngles(self)

    def getTensorDirect(self):
        return _gstlearn.Tensor_getTensorDirect(self)

    def getTensorInverse(self):
        return _gstlearn.Tensor_getTensorInverse(self)

    def getTensorDirect2(self):
        return _gstlearn.Tensor_getTensorDirect2(self)

    def getRadius(self):
        return _gstlearn.Tensor_getRadius(self)

    def getRotation(self):
        return _gstlearn.Tensor_getRotation(self)

    def getMatrixDirect(self):
        return _gstlearn.Tensor_getMatrixDirect(self)

    def getMatrixInverse(self):
        return _gstlearn.Tensor_getMatrixInverse(self)

    def isIsotropic(self):
        return _gstlearn.Tensor_isIsotropic(self)

    def hasRotation(self):
        return _gstlearn.Tensor_hasRotation(self)

    def getValue(self, idim, jdim):
        return _gstlearn.Tensor_getValue(self, idim, jdim)

    def applyDirect(self, vec):
        return _gstlearn.Tensor_applyDirect(self, vec)

    def applyInverse(self, vec):
        return _gstlearn.Tensor_applyInverse(self, vec)

    def applyInverseInPlace(self, *args):
        return _gstlearn.Tensor_applyInverseInPlace(self, *args)

    def applyInverse2InPlace(self, vec, out):
        return _gstlearn.Tensor_applyInverse2InPlace(self, vec, out)

    def applyDirectInPlace(self, vec, out):
        return _gstlearn.Tensor_applyDirectInPlace(self, vec, out)

    def applyDirectSwapInPlace(self, vec, out):
        return _gstlearn.Tensor_applyDirectSwapInPlace(self, vec, out)

    def isFlagDefinedByInverse2(self):
        return _gstlearn.Tensor_isFlagDefinedByInverse2(self)

# Register Tensor in _gstlearn:
_gstlearn.Tensor_swigregister(Tensor)
class Grid(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Grid_swiginit(self, _gstlearn.new_Grid(*args))
    __swig_destroy__ = _gstlearn.delete_Grid

    @staticmethod
    def gridIndices(nx, string, startFromZero=True, invert=True, verbose=False):
        return _gstlearn.Grid_gridIndices(nx, string, startFromZero, invert, verbose)

    @staticmethod
    def generateMirrorIndex(nx, ix):
        return _gstlearn.Grid_generateMirrorIndex(nx, ix)

    def resetFromSpaceDimension(self, ndim):
        return _gstlearn.Grid_resetFromSpaceDimension(self, ndim)

    def resetFromGrid(self, grid):
        return _gstlearn.Grid_resetFromGrid(self, grid)

    def resetFromVector(self, *args, **kwargs):
        return _gstlearn.Grid_resetFromVector(self, *args, **kwargs)

    def setX0(self, idim, value):
        return _gstlearn.Grid_setX0(self, idim, value)

    def setDX(self, idim, value):
        return _gstlearn.Grid_setDX(self, idim, value)

    def setNX(self, idim, value):
        return _gstlearn.Grid_setNX(self, idim, value)

    def setRotationByMatrix(self, rotmat):
        return _gstlearn.Grid_setRotationByMatrix(self, rotmat)

    def setRotationByVector(self, rotmat):
        return _gstlearn.Grid_setRotationByVector(self, rotmat)

    def setRotationByAngles(self, angles):
        return _gstlearn.Grid_setRotationByAngles(self, angles)

    def setRotationByAngle(self, angle):
        return _gstlearn.Grid_setRotationByAngle(self, angle)

    def getNDim(self):
        return _gstlearn.Grid_getNDim(self)

    def getX0(self, idim):
        return _gstlearn.Grid_getX0(self, idim)

    def getDX(self, idim):
        return _gstlearn.Grid_getDX(self, idim)

    def getNX(self, idim):
        return _gstlearn.Grid_getNX(self, idim)

    def getNTotal(self):
        return _gstlearn.Grid_getNTotal(self)

    def getCellSize(self):
        return _gstlearn.Grid_getCellSize(self)

    def getExtend(self, idim, flagCell=False):
        return _gstlearn.Grid_getExtend(self, idim, flagCell)

    def getVolume(self, flagCell=False):
        return _gstlearn.Grid_getVolume(self, flagCell)

    def getExtends(self, flagCell=False):
        return _gstlearn.Grid_getExtends(self, flagCell)

    def toString(self, strfmt=None):
        return _gstlearn.Grid_toString(self, strfmt)

    def copyParams(self, mode, gridaux):
        return _gstlearn.Grid_copyParams(self, mode, gridaux)

    def getCoordinate(self, rank, idim, flag_rotate=True):
        return _gstlearn.Grid_getCoordinate(self, rank, idim, flag_rotate)

    def getCoordinatesByRank(self, rank, flag_rotate=True):
        return _gstlearn.Grid_getCoordinatesByRank(self, rank, flag_rotate)

    def getCoordinatesByIndice(self, *args, **kwargs):
        return _gstlearn.Grid_getCoordinatesByIndice(self, *args, **kwargs)

    def getCoordinatesByCorner(self, icorner):
        return _gstlearn.Grid_getCoordinatesByCorner(self, icorner)

    def getCellCoordinatesByCorner(self, *args, **kwargs):
        return _gstlearn.Grid_getCellCoordinatesByCorner(self, *args, **kwargs)

    def indicesToCoordinate(self, *args, **kwargs):
        return _gstlearn.Grid_indicesToCoordinate(self, *args, **kwargs)

    def rankToCoordinate(self, *args, **kwargs):
        return _gstlearn.Grid_rankToCoordinate(self, *args, **kwargs)

    def rankToCoordinates(self, *args, **kwargs):
        return _gstlearn.Grid_rankToCoordinates(self, *args, **kwargs)

    def rankToCoordinatesInPlace(self, *args, **kwargs):
        return _gstlearn.Grid_rankToCoordinatesInPlace(self, *args, **kwargs)

    def coordinateToIndices(self, coor, centered=False, eps=1.e-6):
        return _gstlearn.Grid_coordinateToIndices(self, coor, centered, eps)

    def coordinateToIndicesInPlace(self, coor, indice, centered=False, eps=1.e-6):
        return _gstlearn.Grid_coordinateToIndicesInPlace(self, coor, indice, centered, eps)

    def coordinateToRank(self, coor, centered=False, eps=1.e-6):
        return _gstlearn.Grid_coordinateToRank(self, coor, centered, eps)

    def getCenterIndices(self):
        return _gstlearn.Grid_getCenterIndices(self)

    def generateGridIndices(self, string, startFromZero=True, invert=True, verbose=False):
        return _gstlearn.Grid_generateGridIndices(self, string, startFromZero, invert, verbose)

    def sampleBelongsToCell(self, *args):
        return _gstlearn.Grid_sampleBelongsToCell(self, *args)

    def getRotAngles(self):
        return _gstlearn.Grid_getRotAngles(self)

    def getRotMat(self):
        return _gstlearn.Grid_getRotMat(self)

    def getRotAngle(self, idim):
        return _gstlearn.Grid_getRotAngle(self, idim)

    def getNXs(self):
        return _gstlearn.Grid_getNXs(self)

    def getX0s(self):
        return _gstlearn.Grid_getX0s(self)

    def getDXs(self):
        return _gstlearn.Grid_getDXs(self)

    def getRotation(self):
        return _gstlearn.Grid_getRotation(self)

    def isSame(self, grid):
        return _gstlearn.Grid_isSame(self, grid)

    def isSameMesh(self, grid):
        return _gstlearn.Grid_isSameMesh(self, grid)

    def isRotated(self):
        return _gstlearn.Grid_isRotated(self)

    def isSameRotation(self, grid):
        return _gstlearn.Grid_isSameRotation(self, grid)

    def getAxis(self, idim):
        return _gstlearn.Grid_getAxis(self, idim)

    def iteratorInit(self, *args, **kwargs):
        return _gstlearn.Grid_iteratorInit(self, *args, **kwargs)

    def iteratorNext(self, *args):
        return _gstlearn.Grid_iteratorNext(self, *args)

    def empty(self):
        return _gstlearn.Grid_empty(self)

    def dilate(self, mode, nshift, nx, dx, x0):
        return _gstlearn.Grid_dilate(self, mode, nshift, nx, dx, x0)

    def multiple(self, nmult, flagCell, nx, dx, x0):
        return _gstlearn.Grid_multiple(self, nmult, flagCell, nx, dx, x0)

    def divider(self, nmult, flagCell, nx, dx, x0):
        return _gstlearn.Grid_divider(self, nmult, flagCell, nx, dx, x0)

    def getMirrorIndex(self, idim, ix):
        return _gstlearn.Grid_getMirrorIndex(self, idim, ix)

    def indiceToCoordinate(self, *args, **kwargs):
        return _gstlearn.Grid_indiceToCoordinate(self, *args, **kwargs)

    def indiceToRank(self, indice):
        return _gstlearn.Grid_indiceToRank(self, indice)

    def rankToIndice(self, rank, indices, minusOne=False):
        return _gstlearn.Grid_rankToIndice(self, rank, indices, minusOne)

    def indicesToCoordinateInPlace(self, *args, **kwargs):
        return _gstlearn.Grid_indicesToCoordinateInPlace(self, *args, **kwargs)

    def __repr__(self):
        return _gstlearn.Grid___repr__(self)

# Register Grid in _gstlearn:
_gstlearn.Grid_swigregister(Grid)
SPACES = _gstlearn.SPACES

def skipBOM(ins):
    return _gstlearn.skipBOM(ins)

def toUpper(*args):
    return _gstlearn.toUpper(*args)

def toLower(*args):
    return _gstlearn.toLower(*args)

def matchKeyword(string1, string2, caseSensitive=True):
    return _gstlearn.matchKeyword(string1, string2, caseSensitive)

def matchRegexp(string1, string2, caseSensitive=True):
    return _gstlearn.matchRegexp(string1, string2, caseSensitive)

def getRankInList(list, match, caseSensitive=True):
    return _gstlearn.getRankInList(list, match, caseSensitive)

def decodeInString(symbol, node, facies, caseSensitive=True):
    return _gstlearn.decodeInString(symbol, node, facies, caseSensitive)

def decodeInList(symbols, node, rank, facies, caseSensitive=True):
    return _gstlearn.decodeInList(symbols, node, rank, facies, caseSensitive)

def correctNamesForDuplicates(list):
    return _gstlearn.correctNamesForDuplicates(list)

def correctNewNameForDuplicates(list, rank):
    return _gstlearn.correctNewNameForDuplicates(list, rank)

def incrementStringVersion(*args, **kwargs):
    return _gstlearn.incrementStringVersion(*args, **kwargs)

def concatenateString(*args, **kwargs):
    return _gstlearn.concatenateString(*args, **kwargs)

def concatenateStrings(*args, **kwargs):
    return _gstlearn.concatenateStrings(*args, **kwargs)

def generateMultipleNames(*args, **kwargs):
    return _gstlearn.generateMultipleNames(*args, **kwargs)

def expandList(*args):
    return _gstlearn.expandList(*args)

def getMaxStringSize(list):
    return _gstlearn.getMaxStringSize(list)

def separateKeywords(code):
    return _gstlearn.separateKeywords(code)

def toInteger(v):
    return _gstlearn.toInteger(v)

def toDouble(*args):
    return _gstlearn.toDouble(*args)

def toString(*args):
    return _gstlearn.toString(*args)

def askInt(text, defval=-1234567, authTest=False):
    return _gstlearn.askInt(text, defval, authTest)

def askDouble(text, defval=1.234e30, authTest=False):
    return _gstlearn.askDouble(text, defval, authTest)

def askBool(text, defval=False):
    return _gstlearn.askBool(text, defval)

def trimRight(*args, **kwargs):
    return _gstlearn.trimRight(*args, **kwargs)

def trimLeft(*args, **kwargs):
    return _gstlearn.trimLeft(*args, **kwargs)

def trim(*args, **kwargs):
    return _gstlearn.trim(*args, **kwargs)

def erase(*args, **kwargs):
    return _gstlearn.erase(*args, **kwargs)

def decodeGridSorting(string, nx, verbose=False):
    return _gstlearn.decodeGridSorting(string, nx, verbose)

def gslStrcpy(dst, src):
    return _gstlearn.gslStrcpy(dst, src)

def gslStrcat(dst, src):
    return _gstlearn.gslStrcat(dst, src)

def gslSPrintf(*args, **kwargs):
    return _gstlearn.gslSPrintf(*args, **kwargs)

def gslStrtok(str, delim):
    return _gstlearn.gslStrtok(str, delim)

def gslStrncpy(dest, src, n):
    return _gstlearn.gslStrncpy(dest, src, n)

def gslScanf(*args, **kwargs):
    return _gstlearn.gslScanf(*args, **kwargs)

def gslSScanf(*args, **kwargs):
    return _gstlearn.gslSScanf(*args, **kwargs)

def gslFScanf(*args, **kwargs):
    return _gstlearn.gslFScanf(*args, **kwargs)
class Interval(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Interval_swiginit(self, _gstlearn.new_Interval(*args))
    __swig_destroy__ = _gstlearn.delete_Interval

    def toString(self, strfmt=None):
        return _gstlearn.Interval_toString(self, strfmt)

    def init(self, vmin=1.234e30, vmax=1.234e30, mininc=True, maxinc=False):
        return _gstlearn.Interval_init(self, vmin, vmax, mininc, maxinc)

    def isMinDefined(self):
        return _gstlearn.Interval_isMinDefined(self)

    def isMaxDefined(self):
        return _gstlearn.Interval_isMaxDefined(self)

    def isInside(self, value):
        return _gstlearn.Interval_isInside(self, value)

    def isOutsideBelow(self, value):
        return _gstlearn.Interval_isOutsideBelow(self, value)

    def isOutsideAbove(self, value):
        return _gstlearn.Interval_isOutsideAbove(self, value)

    def getVmax(self):
        return _gstlearn.Interval_getVmax(self)

    def setVmax(self, vmax):
        return _gstlearn.Interval_setVmax(self, vmax)

    def getVmin(self):
        return _gstlearn.Interval_getVmin(self)

    def setVmin(self, vmin):
        return _gstlearn.Interval_setVmin(self, vmin)

    def getMaxIncluded(self):
        return _gstlearn.Interval_getMaxIncluded(self)

    def setMaxIncluded(self, maxIncluded):
        return _gstlearn.Interval_setMaxIncluded(self, maxIncluded)

    def getMinIncluded(self):
        return _gstlearn.Interval_getMinIncluded(self)

    def setMinIncluded(self, minIncluded):
        return _gstlearn.Interval_setMinIncluded(self, minIncluded)

    def getBounds(self):
        return _gstlearn.Interval_getBounds(self)

    def isValid(self):
        return _gstlearn.Interval_isValid(self)

    def isDisjoint(self, m):
        return _gstlearn.Interval_isDisjoint(self, m)

# Register Interval in _gstlearn:
_gstlearn.Interval_swigregister(Interval)
class Limits(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Limits_swiginit(self, _gstlearn.new_Limits(*args))
    __swig_destroy__ = _gstlearn.delete_Limits

    def toString(self, strfmt=None):
        return _gstlearn.Limits_toString(self, strfmt)

    @staticmethod
    def create(*args):
        return _gstlearn.Limits_create(*args)

    def getLimitNumber(self):
        return _gstlearn.Limits_getLimitNumber(self)

    def getBounds(self):
        return _gstlearn.Limits_getBounds(self)

    def getBound(self, iclass, mode=0):
        return _gstlearn.Limits_getBound(self, iclass, mode)

    def getLowerBounds(self):
        return _gstlearn.Limits_getLowerBounds(self)

    def getUpperBounds(self):
        return _gstlearn.Limits_getUpperBounds(self)

    def getLowerIncluded(self):
        return _gstlearn.Limits_getLowerIncluded(self)

    def getUpperIncluded(self):
        return _gstlearn.Limits_getUpperIncluded(self)

    def isInside(self, value):
        return _gstlearn.Limits_isInside(self, value)

    def empty(self):
        return _gstlearn.Limits_empty(self)

    def toCategory(self, *args, **kwargs):
        return _gstlearn.Limits_toCategory(self, *args, **kwargs)

    def toIndicator(self, *args, **kwargs):
        return _gstlearn.Limits_toIndicator(self, *args, **kwargs)

    def statistics(self, db, name, optionStat=1, flagBelow=False, flagAbove=False):
        return _gstlearn.Limits_statistics(self, db, name, optionStat, flagBelow, flagAbove)

    def toCategoryByAttribute(self, db, iatt, namconv):
        return _gstlearn.Limits_toCategoryByAttribute(self, db, iatt, namconv)

    def toIndicatorByAttribute(self, *args, **kwargs):
        return _gstlearn.Limits_toIndicatorByAttribute(self, *args, **kwargs)

    def __repr__(self):
        return _gstlearn.Limits___repr__(self)

# Register Limits in _gstlearn:
_gstlearn.Limits_swigregister(Limits)
class StatResults(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    number = property(_gstlearn.StatResults_number_get, _gstlearn.StatResults_number_set)
    nvalid = property(_gstlearn.StatResults_nvalid_get, _gstlearn.StatResults_nvalid_set)
    mini = property(_gstlearn.StatResults_mini_get, _gstlearn.StatResults_mini_set)
    maxi = property(_gstlearn.StatResults_maxi_get, _gstlearn.StatResults_maxi_set)
    delta = property(_gstlearn.StatResults_delta_get, _gstlearn.StatResults_delta_set)
    mean = property(_gstlearn.StatResults_mean_get, _gstlearn.StatResults_mean_set)
    stdv = property(_gstlearn.StatResults_stdv_get, _gstlearn.StatResults_stdv_set)

    def __init__(self):
        _gstlearn.StatResults_swiginit(self, _gstlearn.new_StatResults())
    __swig_destroy__ = _gstlearn.delete_StatResults

# Register StatResults in _gstlearn:
_gstlearn.StatResults_swigregister(StatResults)

def isInteger(value, eps=1.e-10):
    return _gstlearn.isInteger(value, eps)

def getClosestInteger(value):
    return _gstlearn.getClosestInteger(value)

def isMultiple(nbig, nsmall):
    return _gstlearn.isMultiple(nbig, nsmall)

def isOdd(number):
    return _gstlearn.isOdd(number)

def isEven(number):
    return _gstlearn.isEven(number)

def isZero(value, eps=1.e-10):
    return _gstlearn.isZero(value, eps)

def isOne(value, eps=1.e-10):
    return _gstlearn.isOne(value, eps)

def isEqual(v1, v2, eps=1.e-10):
    return _gstlearn.isEqual(v1, v2, eps)

def getMin(val1, val2):
    return _gstlearn.getMin(val1, val2)

def getMax(val1, val2):
    return _gstlearn.getMax(val1, val2)

def ut_deg2rad(angle):
    return _gstlearn.ut_deg2rad(angle)

def ut_rad2deg(angle):
    return _gstlearn.ut_rad2deg(angle)

def isEqualExtended(*args, **kwargs):
    return _gstlearn.isEqualExtended(*args, **kwargs)

def ut_sort_double(safe, nech, ind, value):
    return _gstlearn.ut_sort_double(safe, nech, ind, value)

def ut_statistics(nech, tab, sel=None, wgt=None):
    return _gstlearn.ut_statistics(nech, tab, sel, wgt)

def ut_stats_mima_print(title, nech, tab, sel):
    return _gstlearn.ut_stats_mima_print(title, nech, tab, sel)

def ut_facies_statistics(nech, tab, sel, nval, mini, maxi):
    return _gstlearn.ut_facies_statistics(nech, tab, sel, nval, mini, maxi)

def ut_classify(nech, tab, sel, nclass, start, pas, nmask, ntest, nout, classe):
    return _gstlearn.ut_classify(nech, tab, sel, nclass, start, pas, nmask, ntest, nout, classe)

def ut_median(tab, ntab):
    return _gstlearn.ut_median(tab, ntab)

def ut_cnp(n, k):
    return _gstlearn.ut_cnp(n, k)

def ut_pascal(ndim):
    return _gstlearn.ut_pascal(ndim)

def ut_combinations(n, maxk, ncomb):
    return _gstlearn.ut_combinations(n, maxk, ncomb)

def ut_shuffle_array(nrow, ncol, tab):
    return _gstlearn.ut_shuffle_array(nrow, ncol, tab)

def getListActiveToAbsolute(sel):
    return _gstlearn.getListActiveToAbsolute(sel)

def getMapAbsoluteToRelative(sel, verbose=False):
    return _gstlearn.getMapAbsoluteToRelative(sel, verbose)

def getRankMapAbsoluteToRelative(map, iabs):
    return _gstlearn.getRankMapAbsoluteToRelative(map, iabs)

def getRankMapRelativeToAbsolute(map, irel):
    return _gstlearn.getRankMapRelativeToAbsolute(map, irel)

def operate_Identify(oper):
    return _gstlearn.operate_Identify(oper)

def operate_Identity(x):
    return _gstlearn.operate_Identity(x)

def operate_Inverse(x):
    return _gstlearn.operate_Inverse(x)

def operate_Square(x):
    return _gstlearn.operate_Square(x)

def operate_InverseSquare(x):
    return _gstlearn.operate_InverseSquare(x)

def operate_Sqrt(x):
    return _gstlearn.operate_Sqrt(x)

def operate_InverseSqrt(x):
    return _gstlearn.operate_InverseSqrt(x)

def modifyOperator(oper, oldval, value):
    return _gstlearn.modifyOperator(oper, oldval, value)

def roundZero(value, eps=1.e-6):
    return _gstlearn.roundZero(value, eps)

def truncateDecimals(value, ndec=0):
    return _gstlearn.truncateDecimals(value, ndec)

def truncateDigits(value, ndigits):
    return _gstlearn.truncateDigits(value, ndigits)

def setInternalDebug(status):
    return _gstlearn.setInternalDebug(status)

def isInternalDebug():
    return _gstlearn.isInternalDebug()

def print_range(title, ntab, tab, sel):
    return _gstlearn.print_range(title, ntab, tab, sel)

def convertIndptrToIndices(ncumul, cumul, tab):
    return _gstlearn.convertIndptrToIndices(ncumul, cumul, tab)
class CSVformat(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.CSVformat_swiginit(self, _gstlearn.new_CSVformat(*args))
    __swig_destroy__ = _gstlearn.delete_CSVformat

    def toString(self, strfmt=None):
        return _gstlearn.CSVformat_toString(self, strfmt)

    def getCharDec(self):
        return _gstlearn.CSVformat_getCharDec(self)

    def getCharSep(self):
        return _gstlearn.CSVformat_getCharSep(self)

    def getFlagHeader(self):
        return _gstlearn.CSVformat_getFlagHeader(self)

    def getNaString(self):
        return _gstlearn.CSVformat_getNaString(self)

    def getNSkip(self):
        return _gstlearn.CSVformat_getNSkip(self)

    def setFlagHeader(self, flagHeader):
        return _gstlearn.CSVformat_setFlagHeader(self, flagHeader)

    def setCharDec(self, charDec):
        return _gstlearn.CSVformat_setCharDec(self, charDec)

    def setCharSep(self, charSep):
        return _gstlearn.CSVformat_setCharSep(self, charSep)

    def setNaString(self, naString):
        return _gstlearn.CSVformat_setNaString(self, naString)

    def setNSkip(self, nskip):
        return _gstlearn.CSVformat_setNSkip(self, nskip)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.CSVformat_create(*args, **kwargs)

    def __repr__(self):
        return _gstlearn.CSVformat___repr__(self)

# Register CSVformat in _gstlearn:
_gstlearn.CSVformat_swigregister(CSVformat)
class AFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == AFunction:
            _self = None
        else:
            _self = self
        _gstlearn.AFunction_swiginit(self, _gstlearn.new_AFunction(_self, ))
    __swig_destroy__ = _gstlearn.delete_AFunction

    def eval(self, x):
        return _gstlearn.AFunction_eval(self, x)
    def __disown__(self):
        self.this.disown()
        _gstlearn.disown_AFunction(self)
        return weakref.proxy(self)

# Register AFunction in _gstlearn:
_gstlearn.AFunction_swigregister(AFunction)
class AFunctional(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == AFunctional:
            _self = None
        else:
            _self = self
        _gstlearn.AFunctional_swiginit(self, _gstlearn.new_AFunctional(_self, *args))
    __swig_destroy__ = _gstlearn.delete_AFunctional

    def getFunctionValue(self, pos):
        return _gstlearn.AFunctional_getFunctionValue(self, pos)

    def getNdim(self):
        return _gstlearn.AFunctional_getNdim(self)

    def setNdim(self, ndim):
        return _gstlearn.AFunctional_setNdim(self, ndim)

    def getFunctionValues(self, db, useSel=True):
        return _gstlearn.AFunctional_getFunctionValues(self, db, useSel)
    def __disown__(self):
        self.this.disown()
        _gstlearn.disown_AFunctional(self)
        return weakref.proxy(self)

# Register AFunctional in _gstlearn:
_gstlearn.AFunctional_swigregister(AFunctional)
class FunctionalSpirale(AFunctional):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FunctionalSpirale_swiginit(self, _gstlearn.new_FunctionalSpirale(*args))
    __swig_destroy__ = _gstlearn.delete_FunctionalSpirale

    def getFunctionValue(self, coor):
        return _gstlearn.FunctionalSpirale_getFunctionValue(self, coor)

    def getFunctionMatrix(self, coor):
        return _gstlearn.FunctionalSpirale_getFunctionMatrix(self, coor)

    def getFunctionVectors(self, db, cova):
        return _gstlearn.FunctionalSpirale_getFunctionVectors(self, db, cova)

# Register FunctionalSpirale in _gstlearn:
_gstlearn.FunctionalSpirale_swigregister(FunctionalSpirale)
class OptDbg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def reset():
        return _gstlearn.OptDbg_reset()

    @staticmethod
    def queryByKey(name):
        return _gstlearn.OptDbg_queryByKey(name)

    @staticmethod
    def defineByKey(name):
        return _gstlearn.OptDbg_defineByKey(name)

    @staticmethod
    def undefineByKey(name):
        return _gstlearn.OptDbg_undefineByKey(name)

    @staticmethod
    def query(option, discardForce=False):
        return _gstlearn.OptDbg_query(option, discardForce)

    @staticmethod
    def define(option):
        return _gstlearn.OptDbg_define(option)

    @staticmethod
    def undefine(option):
        return _gstlearn.OptDbg_undefine(option)

    @staticmethod
    def defineAll():
        return _gstlearn.OptDbg_defineAll()

    @staticmethod
    def undefineAll():
        return _gstlearn.OptDbg_undefineAll()

    @staticmethod
    def display():
        return _gstlearn.OptDbg_display()

    @staticmethod
    def setCurrentIndex(cur_index):
        return _gstlearn.OptDbg_setCurrentIndex(cur_index)

    @staticmethod
    def isReferenceDefined():
        return _gstlearn.OptDbg_isReferenceDefined()

    @staticmethod
    def setReference(index):
        return _gstlearn.OptDbg_setReference(index)

    @staticmethod
    def getReference():
        return _gstlearn.OptDbg_getReference()

    @staticmethod
    def force():
        return _gstlearn.OptDbg_force()

    @staticmethod
    def getCurrentIndex():
        return _gstlearn.OptDbg_getCurrentIndex()

    def __init__(self):
        _gstlearn.OptDbg_swiginit(self, _gstlearn.new_OptDbg())
    __swig_destroy__ = _gstlearn.delete_OptDbg

# Register OptDbg in _gstlearn:
_gstlearn.OptDbg_swigregister(OptDbg)
class OptCst(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def query(option):
        return _gstlearn.OptCst_query(option)

    @staticmethod
    def queryByKey(name):
        return _gstlearn.OptCst_queryByKey(name)

    @staticmethod
    def define(option, value):
        return _gstlearn.OptCst_define(option, value)

    @staticmethod
    def defineByKey(name, value):
        return _gstlearn.OptCst_defineByKey(name, value)

    @staticmethod
    def display():
        return _gstlearn.OptCst_display()

    def __init__(self):
        _gstlearn.OptCst_swiginit(self, _gstlearn.new_OptCst())
    __swig_destroy__ = _gstlearn.delete_OptCst

# Register OptCst in _gstlearn:
_gstlearn.OptCst_swigregister(OptCst)
class OptCustom(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def query(name, valdef=0.):
        return _gstlearn.OptCustom_query(name, valdef)

    @staticmethod
    def define(name, value):
        return _gstlearn.OptCustom_define(name, value)

    @staticmethod
    def undefine(name):
        return _gstlearn.OptCustom_undefine(name)

    @staticmethod
    def display():
        return _gstlearn.OptCustom_display()

    def __init__(self):
        _gstlearn.OptCustom_swiginit(self, _gstlearn.new_OptCustom())
    __swig_destroy__ = _gstlearn.delete_OptCustom

# Register OptCustom in _gstlearn:
_gstlearn.OptCustom_swigregister(OptCustom)
class StdoutRedirect(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _gstlearn.StdoutRedirect_swiginit(self, _gstlearn.new_StdoutRedirect(*args, **kwargs))
    __swig_destroy__ = _gstlearn.delete_StdoutRedirect

    def start(self, file):
        return _gstlearn.StdoutRedirect_start(self, file)

    def stop(self):
        return _gstlearn.StdoutRedirect_stop(self)

# Register StdoutRedirect in _gstlearn:
_gstlearn.StdoutRedirect_swigregister(StdoutRedirect)

def gslFopen(*args):
    return _gstlearn.gslFopen(*args)

def gslFileExist(*args):
    return _gstlearn.gslFileExist(*args)

def gslBaseName(path, keepExtension=False):
    return _gstlearn.gslBaseName(path, keepExtension)

def gslGetEnv(name):
    return _gstlearn.gslGetEnv(name)

def gslSafeGetline(_is, t):
    return _gstlearn.gslSafeGetline(_is, t)
class VectorHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def initVVInt(nval1, nval2, value=0):
        return _gstlearn.VectorHelper_initVVInt(nval1, nval2, value)

    @staticmethod
    def initVInt(*args):
        return _gstlearn.VectorHelper_initVInt(*args)

    @staticmethod
    def initVDouble(*args):
        return _gstlearn.VectorHelper_initVDouble(*args)

    @staticmethod
    def initVVDouble(*args):
        return _gstlearn.VectorHelper_initVVDouble(*args)

    @staticmethod
    def initVString(ntab, names):
        return _gstlearn.VectorHelper_initVString(ntab, names)

    @staticmethod
    def display(*args):
        return _gstlearn.VectorHelper_display(*args)

    @staticmethod
    def dump(title, vect):
        return _gstlearn.VectorHelper_dump(title, vect)

    @staticmethod
    def toStringAsSpan(vec):
        return _gstlearn.VectorHelper_toStringAsSpan(vec)

    @staticmethod
    def toStringAsVD(vec):
        return _gstlearn.VectorHelper_toStringAsVD(vec)

    @staticmethod
    def toStringAsVVD(vec):
        return _gstlearn.VectorHelper_toStringAsVVD(vec)

    @staticmethod
    def toStringAsVS(vec):
        return _gstlearn.VectorHelper_toStringAsVS(vec)

    @staticmethod
    def toStringAsVI(vec):
        return _gstlearn.VectorHelper_toStringAsVI(vec)

    @staticmethod
    def displayStats(title, vect):
        return _gstlearn.VectorHelper_displayStats(title, vect)

    @staticmethod
    def displayRange(*args):
        return _gstlearn.VectorHelper_displayRange(*args)

    @staticmethod
    def displayNNZ(title, vect, nclass=10):
        return _gstlearn.VectorHelper_displayNNZ(title, vect, nclass)

    @staticmethod
    def maximum(*args):
        return _gstlearn.VectorHelper_maximum(*args)

    @staticmethod
    def minimum(*args):
        return _gstlearn.VectorHelper_minimum(*args)

    @staticmethod
    def product(*args):
        return _gstlearn.VectorHelper_product(*args)

    @staticmethod
    def countUndefined(vec):
        return _gstlearn.VectorHelper_countUndefined(vec)

    @staticmethod
    def countDefined(vec):
        return _gstlearn.VectorHelper_countDefined(vec)

    @staticmethod
    def hasUndefined(vec):
        return _gstlearn.VectorHelper_hasUndefined(vec)

    @staticmethod
    def extensionDiagonal(mini, maxi):
        return _gstlearn.VectorHelper_extensionDiagonal(mini, maxi)

    @staticmethod
    def count(vec):
        return _gstlearn.VectorHelper_count(vec)

    @staticmethod
    def cumul(*args):
        return _gstlearn.VectorHelper_cumul(*args)

    @staticmethod
    def mean(vec):
        return _gstlearn.VectorHelper_mean(vec)

    @staticmethod
    def variance(vec, scaleByN=False):
        return _gstlearn.VectorHelper_variance(vec, scaleByN)

    @staticmethod
    def stdv(vec, scaleByN=False):
        return _gstlearn.VectorHelper_stdv(vec, scaleByN)

    @staticmethod
    def normL1(vec):
        return _gstlearn.VectorHelper_normL1(vec)

    @staticmethod
    def norminf(vec):
        return _gstlearn.VectorHelper_norminf(vec)

    @staticmethod
    def median(vec):
        return _gstlearn.VectorHelper_median(vec)

    @staticmethod
    def normDistance(veca, vecb):
        return _gstlearn.VectorHelper_normDistance(veca, vecb)

    @staticmethod
    def correlation(veca, vecb):
        return _gstlearn.VectorHelper_correlation(veca, vecb)

    @staticmethod
    def quantiles(vec, probas):
        return _gstlearn.VectorHelper_quantiles(vec, probas)

    @staticmethod
    def isConstant(*args):
        return _gstlearn.VectorHelper_isConstant(*args)

    @staticmethod
    def isEqual(*args):
        return _gstlearn.VectorHelper_isEqual(*args)

    @staticmethod
    def isEqualExtended(*args, **kwargs):
        return _gstlearn.VectorHelper_isEqualExtended(*args, **kwargs)

    @staticmethod
    def sequence(*args):
        return _gstlearn.VectorHelper_sequence(*args)

    @staticmethod
    def fill(*args):
        return _gstlearn.VectorHelper_fill(*args)

    @staticmethod
    def fillUndef(vec, repl):
        return _gstlearn.VectorHelper_fillUndef(vec, repl)

    @staticmethod
    def add(veca, vecb):
        return _gstlearn.VectorHelper_add(veca, vecb)

    @staticmethod
    def addInPlace(*args):
        return _gstlearn.VectorHelper_addInPlace(*args)

    @staticmethod
    def addSquareInPlace(dest, src):
        return _gstlearn.VectorHelper_addSquareInPlace(dest, src)

    @staticmethod
    def subtract(*args):
        return _gstlearn.VectorHelper_subtract(*args)

    @staticmethod
    def subtractInPlace(*args):
        return _gstlearn.VectorHelper_subtractInPlace(*args)

    @staticmethod
    def multiplyInPlace(vec, v):
        return _gstlearn.VectorHelper_multiplyInPlace(vec, v)

    @staticmethod
    def multiplyConstant(vec, v):
        return _gstlearn.VectorHelper_multiplyConstant(vec, v)

    @staticmethod
    def multiplyConstantInPlace(vec, v, vecout):
        return _gstlearn.VectorHelper_multiplyConstantInPlace(vec, v, vecout)

    @staticmethod
    def multiplyConstantSelfInPlace(vec, v):
        return _gstlearn.VectorHelper_multiplyConstantSelfInPlace(vec, v)

    @staticmethod
    def addMultiplyConstantInPlace(*args):
        return _gstlearn.VectorHelper_addMultiplyConstantInPlace(*args)

    @staticmethod
    def divideConstant(vec, v):
        return _gstlearn.VectorHelper_divideConstant(vec, v)

    @staticmethod
    def copy(*args):
        return _gstlearn.VectorHelper_copy(*args)

    @staticmethod
    def addConstant(*args):
        return _gstlearn.VectorHelper_addConstant(*args)

    @staticmethod
    def mean1AndMean2ToStdev(mean1, mean2, std, number):
        return _gstlearn.VectorHelper_mean1AndMean2ToStdev(mean1, mean2, std, number)

    @staticmethod
    def normalize(*args):
        return _gstlearn.VectorHelper_normalize(*args)

    @staticmethod
    def normalizeFromGaussianDistribution(vec, mini=0., maxi=1.):
        return _gstlearn.VectorHelper_normalizeFromGaussianDistribution(vec, mini, maxi)

    @staticmethod
    def normalScore(*args, **kwargs):
        return _gstlearn.VectorHelper_normalScore(*args, **kwargs)

    @staticmethod
    def qnormVec(vec):
        return _gstlearn.VectorHelper_qnormVec(vec)

    @staticmethod
    def pnormVec(vec):
        return _gstlearn.VectorHelper_pnormVec(vec)

    @staticmethod
    def concatenate(veca, vecb):
        return _gstlearn.VectorHelper_concatenate(veca, vecb)

    @staticmethod
    def power(vec, power):
        return _gstlearn.VectorHelper_power(vec, power)

    @staticmethod
    def inverse(vec):
        return _gstlearn.VectorHelper_inverse(vec)

    @staticmethod
    def divideInPlace(*args):
        return _gstlearn.VectorHelper_divideInPlace(*args)

    @staticmethod
    def crossProduct3D(veca, vecb):
        return _gstlearn.VectorHelper_crossProduct3D(veca, vecb)

    @staticmethod
    def crossProduct3DInPlace(a, b, v):
        return _gstlearn.VectorHelper_crossProduct3DInPlace(a, b, v)

    @staticmethod
    def cumsum(vecin, flagAddZero, revert=False):
        return _gstlearn.VectorHelper_cumsum(vecin, flagAddZero, revert)

    @staticmethod
    def cumulateInPlace(vec):
        return _gstlearn.VectorHelper_cumulateInPlace(vec)

    @staticmethod
    def cumulate(veca, vecb, coeff=1., addval=0.):
        return _gstlearn.VectorHelper_cumulate(veca, vecb, coeff, addval)

    @staticmethod
    def getMostSignificant(vec, tol=1.e-6, nmax=-1):
        return _gstlearn.VectorHelper_getMostSignificant(vec, tol, nmax)

    @staticmethod
    def simulateUniform(n=1, mini=0., maxi=1.):
        return _gstlearn.VectorHelper_simulateUniform(n, mini, maxi)

    @staticmethod
    def simulateBernoulli(n=1, proba=0.5, vone=1., velse=0.):
        return _gstlearn.VectorHelper_simulateBernoulli(n, proba, vone, velse)

    @staticmethod
    def simulateGaussian(n=1, mean=0., sigma=1.):
        return _gstlearn.VectorHelper_simulateGaussian(n, mean, sigma)

    @staticmethod
    def sampleRanks(ntotal, proportion=0., number=0, seed=242141, optSort=0):
        return _gstlearn.VectorHelper_sampleRanks(ntotal, proportion, number, seed, optSort)

    @staticmethod
    def normalizeCodir(ndim, codir):
        return _gstlearn.VectorHelper_normalizeCodir(ndim, codir)

    @staticmethod
    def isInList(vec, item):
        return _gstlearn.VectorHelper_isInList(vec, item)

    @staticmethod
    def sort(*args):
        return _gstlearn.VectorHelper_sort(*args)

    @staticmethod
    def sortInPlace(*args):
        return _gstlearn.VectorHelper_sortInPlace(*args)

    @staticmethod
    def isSorted(vec, ascending=True):
        return _gstlearn.VectorHelper_isSorted(vec, ascending)

    @staticmethod
    def unique(*args):
        return _gstlearn.VectorHelper_unique(*args)

    @staticmethod
    def orderRanks(*args):
        return _gstlearn.VectorHelper_orderRanks(*args)

    @staticmethod
    def sortRanks(vecin, ascending=True, size=-1):
        return _gstlearn.VectorHelper_sortRanks(vecin, ascending, size)

    @staticmethod
    def reorder(*args):
        return _gstlearn.VectorHelper_reorder(*args)

    @staticmethod
    def revert(*args):
        return _gstlearn.VectorHelper_revert(*args)

    @staticmethod
    def sample(vecin, indKeep):
        return _gstlearn.VectorHelper_sample(vecin, indKeep)

    @staticmethod
    def arrangeInPlace(*args):
        return _gstlearn.VectorHelper_arrangeInPlace(*args)

    @staticmethod
    def filter(vecin, vmin=-1234567, vmax=-1234567, ascending=True):
        return _gstlearn.VectorHelper_filter(vecin, vmin, vmax, ascending)

    @staticmethod
    def complement(vec, sel):
        return _gstlearn.VectorHelper_complement(vec, sel)

    @staticmethod
    def rangeVals(vec):
        return _gstlearn.VectorHelper_rangeVals(vec)

    @staticmethod
    def unflattenInPlace(vd, vvd):
        return _gstlearn.VectorHelper_unflattenInPlace(vd, vvd)

    @staticmethod
    def flatten(*args):
        return _gstlearn.VectorHelper_flatten(*args)

    @staticmethod
    def unflatten(*args):
        return _gstlearn.VectorHelper_unflatten(*args)

    @staticmethod
    def flattenInPlace(*args):
        return _gstlearn.VectorHelper_flattenInPlace(*args)

    @staticmethod
    def linearCombinationInPlace(val1, vd1, val2, vd2, outv):
        return _gstlearn.VectorHelper_linearCombinationInPlace(val1, vd1, val2, vd2, outv)

    @staticmethod
    def innerProduct(*args):
        return _gstlearn.VectorHelper_innerProduct(*args)

    @staticmethod
    def linearCombinationVVDInPlace(*args):
        return _gstlearn.VectorHelper_linearCombinationVVDInPlace(*args)

    @staticmethod
    def suppressTest(vecin):
        return _gstlearn.VectorHelper_suppressTest(vecin)

    @staticmethod
    def extractInPlace(vecin, vecout, start):
        return _gstlearn.VectorHelper_extractInPlace(vecin, vecout, start)

    @staticmethod
    def mergeInPlace(vecin, vecout, start):
        return _gstlearn.VectorHelper_mergeInPlace(vecin, vecout, start)

    @staticmethod
    def transformVD(tab, oper_choice=1):
        return _gstlearn.VectorHelper_transformVD(tab, oper_choice)

    @staticmethod
    def squeezeAndStretchInPlaceForward(vecin, vecout, origin, mesh, top, bot):
        return _gstlearn.VectorHelper_squeezeAndStretchInPlaceForward(vecin, vecout, origin, mesh, top, bot)

    @staticmethod
    def squeezeAndStretchInPlaceBackward(vecin, vecout, origin, mesh, top, bot):
        return _gstlearn.VectorHelper_squeezeAndStretchInPlaceBackward(vecin, vecout, origin, mesh, top, bot)

    @staticmethod
    def whereMinimum(tab):
        return _gstlearn.VectorHelper_whereMinimum(tab)

    @staticmethod
    def whereMaximum(tab):
        return _gstlearn.VectorHelper_whereMaximum(tab)

    @staticmethod
    def whereElement(tab, target):
        return _gstlearn.VectorHelper_whereElement(tab, target)

    @staticmethod
    def norm(*args):
        return _gstlearn.VectorHelper_norm(*args)

    @staticmethod
    def reduceOne(vecin, index):
        return _gstlearn.VectorHelper_reduceOne(vecin, index)

    @staticmethod
    def reduce(vecin, vindex):
        return _gstlearn.VectorHelper_reduce(vecin, vindex)

    @staticmethod
    def compress(vecin, vindex):
        return _gstlearn.VectorHelper_compress(vecin, vindex)

    @staticmethod
    def truncateDecimalsInPlace(vec, ndec):
        return _gstlearn.VectorHelper_truncateDecimalsInPlace(vec, ndec)

    @staticmethod
    def truncateDigitsInPlace(vec, ndec):
        return _gstlearn.VectorHelper_truncateDigitsInPlace(vec, ndec)

    @staticmethod
    def simulateGaussianInPlace(*args):
        return _gstlearn.VectorHelper_simulateGaussianInPlace(*args)

    def __init__(self):
        _gstlearn.VectorHelper_swiginit(self, _gstlearn.new_VectorHelper())
    __swig_destroy__ = _gstlearn.delete_VectorHelper

# Register VectorHelper in _gstlearn:
_gstlearn.VectorHelper_swigregister(VectorHelper)
class VH(VectorHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.VH_swiginit(self, _gstlearn.new_VH())
    __swig_destroy__ = _gstlearn.delete_VH

# Register VH in _gstlearn:
_gstlearn.VH_swigregister(VH)
class Plane(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Plane_swiginit(self, _gstlearn.new_Plane(*args))
    __swig_destroy__ = _gstlearn.delete_Plane

    def toString(self, strfmt=None):
        return _gstlearn.Plane_toString(self, strfmt)

    def getIntercept(self):
        return _gstlearn.Plane_getIntercept(self)

    def setIntercept(self, intercept):
        return _gstlearn.Plane_setIntercept(self, intercept)

    def getRndval(self):
        return _gstlearn.Plane_getRndval(self)

    def setRndval(self, rndval):
        return _gstlearn.Plane_setRndval(self, rndval)

    def getValue(self):
        return _gstlearn.Plane_getValue(self)

    def setValue(self, value):
        return _gstlearn.Plane_setValue(self, value)

    def setCoor(self, *args):
        return _gstlearn.Plane_setCoor(self, *args)

    def getCoor(self, *args):
        return _gstlearn.Plane_getCoor(self, *args)

    @staticmethod
    def poissonPlanesGenerate(dbgrid, np):
        return _gstlearn.Plane_poissonPlanesGenerate(dbgrid, np)

# Register Plane in _gstlearn:
_gstlearn.Plane_swigregister(Plane)

def FFTn(ndim, dims, Re, Im, iSign=1, scaling=1.):
    return _gstlearn.FFTn(ndim, dims, Re, Im, iSign, scaling)

def evalCovFFTTimeSlice(hmax, time, N, funcSpectrum):
    return _gstlearn.evalCovFFTTimeSlice(hmax, time, N, funcSpectrum)

def evalCovFFTSpatial(hmax, N, funcSpectrum):
    return _gstlearn.evalCovFFTSpatial(hmax, N, funcSpectrum)
class PolyPoint2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rank = property(_gstlearn.PolyPoint2D_rank_get, _gstlearn.PolyPoint2D_rank_set)
    dist = property(_gstlearn.PolyPoint2D_dist_get, _gstlearn.PolyPoint2D_dist_set)
    coor = property(_gstlearn.PolyPoint2D_coor_get, _gstlearn.PolyPoint2D_coor_set)

    def __init__(self):
        _gstlearn.PolyPoint2D_swiginit(self, _gstlearn.new_PolyPoint2D())
    __swig_destroy__ = _gstlearn.delete_PolyPoint2D

# Register PolyPoint2D in _gstlearn:
_gstlearn.PolyPoint2D_swigregister(PolyPoint2D)
class PolyLine2D(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.PolyLine2D_swiginit(self, _gstlearn.new_PolyLine2D(*args))
    __swig_destroy__ = _gstlearn.delete_PolyLine2D

    def toString(self, strfmt=None):
        return _gstlearn.PolyLine2D_toString(self, strfmt)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.PolyLine2D_createFromNF(neutralFilename, verbose)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.PolyLine2D_create(*args, **kwargs)

    def getNPoints(self):
        return _gstlearn.PolyLine2D_getNPoints(self)

    def init(self, x, y):
        return _gstlearn.PolyLine2D_init(self, x, y)

    def getX(self, *args):
        return _gstlearn.PolyLine2D_getX(self, *args)

    def getY(self, *args):
        return _gstlearn.PolyLine2D_getY(self, *args)

    def getPoint(self, i):
        return _gstlearn.PolyLine2D_getPoint(self, i)

    def getXmin(self):
        return _gstlearn.PolyLine2D_getXmin(self)

    def getYmin(self):
        return _gstlearn.PolyLine2D_getYmin(self)

    def getXmax(self):
        return _gstlearn.PolyLine2D_getXmax(self)

    def getYmax(self):
        return _gstlearn.PolyLine2D_getYmax(self)

    def addPoint(self, x, y):
        return _gstlearn.PolyLine2D_addPoint(self, x, y)

    def setX(self, x):
        return _gstlearn.PolyLine2D_setX(self, x)

    def setY(self, y):
        return _gstlearn.PolyLine2D_setY(self, y)

    def getPLIndex(self, xy0):
        return _gstlearn.PolyLine2D_getPLIndex(self, xy0)

    def distanceBetweenPoints(self, ap, al, xy1, xy2):
        return _gstlearn.PolyLine2D_distanceBetweenPoints(self, ap, al, xy1, xy2)

    def distanceAlongPolyline(self, pldist1, pldist2):
        return _gstlearn.PolyLine2D_distanceAlongPolyline(self, pldist1, pldist2)

    def angleAtPolyline(self, pldist, nb_neigh=0):
        return _gstlearn.PolyLine2D_angleAtPolyline(self, pldist, nb_neigh)

    def distanceAtPolyline(self, pldist, target, nb_neigh):
        return _gstlearn.PolyLine2D_distanceAtPolyline(self, pldist, target, nb_neigh)

    def __repr__(self):
        return _gstlearn.PolyLine2D___repr__(self)

# Register PolyLine2D in _gstlearn:
_gstlearn.PolyLine2D_swigregister(PolyLine2D)

def distanceBetweenPolylines(poly1, poly2, pldist1, pldist2):
    return _gstlearn.distanceBetweenPolylines(poly1, poly2, pldist1, pldist2)

def dbUnfoldPolyline(*args, **kwargs):
    return _gstlearn.dbUnfoldPolyline(*args, **kwargs)

def dbFoldPolyline(*args, **kwargs):
    return _gstlearn.dbFoldPolyline(*args, **kwargs)

def dbFromPolylines(*args, **kwargs):
    return _gstlearn.dbFromPolylines(*args, **kwargs)

def law_set_old_style(style):
    return _gstlearn.law_set_old_style(style)

def law_get_random_seed():
    return _gstlearn.law_get_random_seed()

def law_set_random_seed(seed):
    return _gstlearn.law_set_random_seed(seed)

def law_uniform(mini=0., maxi=1.):
    return _gstlearn.law_uniform(mini, maxi)

def law_int_uniform(mini, maxi):
    return _gstlearn.law_int_uniform(mini, maxi)

def law_gaussian(mean=0., sigma=1.):
    return _gstlearn.law_gaussian(mean, sigma)

def law_exponential(_lambda=1.):
    return _gstlearn.law_exponential(_lambda)

def law_gamma(alpha, beta=1.):
    return _gstlearn.law_gamma(alpha, beta)

def law_df_poisson(i, parameter):
    return _gstlearn.law_df_poisson(i, parameter)

def law_df_poisson_vec(_is, parameter):
    return _gstlearn.law_df_poisson_vec(_is, parameter)

def law_poisson(parameter):
    return _gstlearn.law_poisson(parameter)

def law_stable_standard_agd(alpha, beta):
    return _gstlearn.law_stable_standard_agd(alpha, beta)

def law_stable_standard_a1gd(beta):
    return _gstlearn.law_stable_standard_a1gd(beta)

def law_stable_standard_abgd(alpha):
    return _gstlearn.law_stable_standard_abgd(alpha)

def law_stable_a(alpha, beta, gamma, delta):
    return _gstlearn.law_stable_a(alpha, beta, gamma, delta)

def law_stable_a1(beta, gamma, delta):
    return _gstlearn.law_stable_a1(beta, gamma, delta)

def law_stable(alpha, beta, gamma, delta):
    return _gstlearn.law_stable(alpha, beta, gamma, delta)

def law_binomial(n, p):
    return _gstlearn.law_binomial(n, p)

def law_beta1(parameter1, parameter2):
    return _gstlearn.law_beta1(parameter1, parameter2)

def law_beta2(parameter1, parameter2):
    return _gstlearn.law_beta2(parameter1, parameter2)

def law_df_gaussian(value):
    return _gstlearn.law_df_gaussian(value)

def law_dnorm(value, mean, std):
    return _gstlearn.law_dnorm(value, mean, std)

def law_cdf_gaussian(value):
    return _gstlearn.law_cdf_gaussian(value)

def law_invcdf_gaussian(value):
    return _gstlearn.law_invcdf_gaussian(value)

def law_gaussian_between_bounds(binf, bsup):
    return _gstlearn.law_gaussian_between_bounds(binf, bsup)

def law_df_bigaussian(vect, mean, correl):
    return _gstlearn.law_df_bigaussian(vect, mean, correl)

def law_df_quadgaussian(vect, correl):
    return _gstlearn.law_df_quadgaussian(vect, correl)

def law_df_multigaussian(vect, correl):
    return _gstlearn.law_df_multigaussian(vect, correl)

def law_random_path(nech):
    return _gstlearn.law_random_path(nech)

def law_exp_sample(tabin, mode, nvar, nechin, nechout, niter, nconst, consts, seed, percent):
    return _gstlearn.law_exp_sample(tabin, mode, nvar, nechin, nechout, niter, nconst, consts, seed, percent)

def sampleInteger(minit, maxi):
    return _gstlearn.sampleInteger(minit, maxi)

def mvndst_infin(low, sup):
    return _gstlearn.mvndst_infin(low, sup)

def mvndst(n, lower, upper, infin, correl, maxpts, abseps, releps, error, value, inform):
    return _gstlearn.mvndst(n, lower, upper, infin, correl, maxpts, abseps, releps, error, value, inform)

def mvndst2n(lower, upper, means, correl, maxpts, abseps, releps, error, value, inform):
    return _gstlearn.mvndst2n(lower, upper, means, correl, maxpts, abseps, releps, error, value, inform)

def mvndst4(lower, upper, correl, maxpts, abseps, releps, error, value, inform):
    return _gstlearn.mvndst4(lower, upper, correl, maxpts, abseps, releps, error, value, inform)

def besselj_table(x, alpha, nb, b):
    return _gstlearn.besselj_table(x, alpha, nb, b)

def besselj(x, n):
    return _gstlearn.besselj(x, n)

def besselk(x, alpha, nb, bk):
    return _gstlearn.besselk(x, alpha, nb, bk)

def loggamma(parameter):
    return _gstlearn.loggamma(parameter)

def ut_legendre(n, v, flagNorm=True):
    return _gstlearn.ut_legendre(n, v, flagNorm)

def ut_legendreVec(n, vecin, flagNorm):
    return _gstlearn.ut_legendreVec(n, vecin, flagNorm)

def ut_legendreMatNorm(n, v):
    return _gstlearn.ut_legendreMatNorm(n, v)

def ut_legendreAssociatedMat(l, v, flagNorm=True):
    return _gstlearn.ut_legendreAssociatedMat(l, v, flagNorm)

def ut_flegendre(n, k0, theta, flagNorm=True):
    return _gstlearn.ut_flegendre(n, k0, theta, flagNorm)

def ut_sphericalHarmonic(n, k, theta, phi):
    return _gstlearn.ut_sphericalHarmonic(n, k, theta, phi)

def ut_sphericalHarmonicVec(n, k, theta, phi):
    return _gstlearn.ut_sphericalHarmonicVec(n, k, theta, phi)

def golden_search(func_evaluate, user_data, tolstop, a0, c0, test_loc, niter):
    return _gstlearn.golden_search(func_evaluate, user_data, tolstop, a0, c0, test_loc, niter)

def ut_chebychev_count(func, cheb_elem, x, blin):
    return _gstlearn.ut_chebychev_count(func, cheb_elem, x, blin)

def ut_chebychev_coeffs(func, cheb_elem, blin):
    return _gstlearn.ut_chebychev_coeffs(func, cheb_elem, blin)

def ut_vandercorput(n, flag_sym, flag_rot, ntri_arg, coor_arg):
    return _gstlearn.ut_vandercorput(n, flag_sym, flag_rot, ntri_arg, coor_arg)

def ut_icosphere(n, flag_rot, ntri_arg, coor_arg):
    return _gstlearn.ut_icosphere(n, flag_rot, ntri_arg, coor_arg)

def ut_factorial(k):
    return _gstlearn.ut_factorial(k)

def ut_log_factorial(nbpoly, factor):
    return _gstlearn.ut_log_factorial(nbpoly, factor)

def vanDerCorput(n, nd):
    return _gstlearn.vanDerCorput(n, nd)

def fillLegendreMatrix(r, legendreOrder):
    return _gstlearn.fillLegendreMatrix(r, legendreOrder)

def solve_P2(a, b, c, x):
    return _gstlearn.solve_P2(a, b, c, x)

def solve_P3(a, b, c, d, x):
    return _gstlearn.solve_P3(a, b, c, d, x)
class Indirection(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_Indirection

    def __init__(self, *args):
        _gstlearn.Indirection_swiginit(self, _gstlearn.new_Indirection(*args))

    def toString(self, strfmt=None):
        return _gstlearn.Indirection_toString(self, strfmt)

    def buildFromSel(self, sel):
        return _gstlearn.Indirection_buildFromSel(self, sel)

    def buildFromRankRInA(self, rels, nabs):
        return _gstlearn.Indirection_buildFromRankRInA(self, rels, nabs)

    def buildFromMap(self, map, nabs):
        return _gstlearn.Indirection_buildFromMap(self, map, nabs)

    def getAToR(self, iabs):
        return _gstlearn.Indirection_getAToR(self, iabs)

    def getRToA(self, irel):
        return _gstlearn.Indirection_getRToA(self, irel)

    def getAbsSize(self):
        return _gstlearn.Indirection_getAbsSize(self)

    def getRelSize(self):
        return _gstlearn.Indirection_getRelSize(self)

    def setMode(self, mode):
        return _gstlearn.Indirection_setMode(self, mode)

    def isDefined(self):
        return _gstlearn.Indirection_isDefined(self)

    def getRelRanks(self):
        return _gstlearn.Indirection_getRelRanks(self)

    def getMode(self):
        return _gstlearn.Indirection_getMode(self)

# Register Indirection in _gstlearn:
_gstlearn.Indirection_swigregister(Indirection)
class GeometryHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def rotationGetSinCos(angle, cosa, sina):
        return _gstlearn.GeometryHelper_rotationGetSinCos(angle, cosa, sina)

    @staticmethod
    def rotationMatrixIdentityInPlace(ndim, rot):
        return _gstlearn.GeometryHelper_rotationMatrixIdentityInPlace(ndim, rot)

    @staticmethod
    def rotation2DMatrixInPlace(angle, rot):
        return _gstlearn.GeometryHelper_rotation2DMatrixInPlace(angle, rot)

    @staticmethod
    def rotation3DMatrixInPlace(alpha, beta, gamma, rot):
        return _gstlearn.GeometryHelper_rotation3DMatrixInPlace(alpha, beta, gamma, rot)

    @staticmethod
    def rotationMatrixInPlace(ndim, angles, rot):
        return _gstlearn.GeometryHelper_rotationMatrixInPlace(ndim, angles, rot)

    @staticmethod
    def rotationMatrix(ndim, angles):
        return _gstlearn.GeometryHelper_rotationMatrix(ndim, angles)

    @staticmethod
    def rotationGetAnglesInPlace(*args):
        return _gstlearn.GeometryHelper_rotationGetAnglesInPlace(*args)

    @staticmethod
    def rotationCopy(ndim, rotin, rotout):
        return _gstlearn.GeometryHelper_rotationCopy(ndim, rotin, rotout)

    @staticmethod
    def rotationIsIdentity(ndim, rot, eps=1.e-10):
        return _gstlearn.GeometryHelper_rotationIsIdentity(ndim, rot, eps)

    @staticmethod
    def EulerToRotation(*args, **kwargs):
        return _gstlearn.GeometryHelper_EulerToRotation(*args, **kwargs)

    @staticmethod
    def rotationGetRandomDirection(ct, st, a, codir):
        return _gstlearn.GeometryHelper_rotationGetRandomDirection(ct, st, a, codir)

    @staticmethod
    def rotationGetDirection2D(angles, codir):
        return _gstlearn.GeometryHelper_rotationGetDirection2D(angles, codir)

    @staticmethod
    def rotationGetDirectionDefault(ndim, codir):
        return _gstlearn.GeometryHelper_rotationGetDirectionDefault(ndim, codir)

    @staticmethod
    def rotationGetAnglesFromCodirInPlace(codir, angles):
        return _gstlearn.GeometryHelper_rotationGetAnglesFromCodirInPlace(codir, angles)

    @staticmethod
    def rotationGetAngles(codir, flagResize=False):
        return _gstlearn.GeometryHelper_rotationGetAngles(codir, flagResize)

    @staticmethod
    def rotationToEuler(*args, **kwargs):
        return _gstlearn.GeometryHelper_rotationToEuler(*args, **kwargs)

    @staticmethod
    def distancePointToSegment(x0, y0, x1, y1, x2, y2, xd, yd, nint):
        return _gstlearn.GeometryHelper_distancePointToSegment(x0, y0, x1, y1, x2, y2, xd, yd, nint)

    @staticmethod
    def segmentIntersect(xd1, yd1, xe1, ye1, xd2, yd2, xe2, ye2, xint, yint):
        return _gstlearn.GeometryHelper_segmentIntersect(xd1, yd1, xe1, ye1, xd2, yd2, xe2, ye2, xint, yint)

    @staticmethod
    def geodeticAngularDistance(long1, lat1, long2, lat2, radius=1.):
        return _gstlearn.GeometryHelper_geodeticAngularDistance(long1, lat1, long2, lat2, radius)

    @staticmethod
    def geodeticAngles(long1, lat1, long2, lat2, long3, lat3, a, b, c, A, B, C):
        return _gstlearn.GeometryHelper_geodeticAngles(long1, lat1, long2, lat2, long3, lat3, a, b, c, A, B, C)

    @staticmethod
    def geodeticTrianglePerimeter(long1, lat1, long2, lat2, long3, lat3):
        return _gstlearn.GeometryHelper_geodeticTrianglePerimeter(long1, lat1, long2, lat2, long3, lat3)

    @staticmethod
    def geodeticTriangleSurface(long1, lat1, long2, lat2, long3, lat3):
        return _gstlearn.GeometryHelper_geodeticTriangleSurface(long1, lat1, long2, lat2, long3, lat3)

    @staticmethod
    def isInSphericalTriangle(coor, surface, pts1, pts2, pts3, wgts, eps=1.e-6):
        return _gstlearn.GeometryHelper_isInSphericalTriangle(coor, surface, pts1, pts2, pts3, wgts, eps)

    @staticmethod
    def isInSphericalTriangleOptimized(coor, ptsa, ptsb, ptsc, wgts, eps=1.e-6):
        return _gstlearn.GeometryHelper_isInSphericalTriangleOptimized(coor, ptsa, ptsb, ptsc, wgts, eps)

    @staticmethod
    def convertLongLat(longitude, latitude, dilate=1., radius_arg=1.):
        return _gstlearn.GeometryHelper_convertLongLat(longitude, latitude, dilate, radius_arg)

    @staticmethod
    def convertCart2Sph(x, y, z, rlong, rlat, radius_arg=1.):
        return _gstlearn.GeometryHelper_convertCart2Sph(x, y, z, rlong, rlat, radius_arg)

    @staticmethod
    def convertSph2Cart(rlong, rlat, x, y, z, radius_arg=1.):
        return _gstlearn.GeometryHelper_convertSph2Cart(rlong, rlat, x, y, z, radius_arg)

    @staticmethod
    def gradXYToRotmat(dzoverdx, dzoverdy):
        return _gstlearn.GeometryHelper_gradXYToRotmat(dzoverdx, dzoverdy)

    @staticmethod
    def getDirectionsInR3(U):
        return _gstlearn.GeometryHelper_getDirectionsInR3(U)

    @staticmethod
    def getDirectionsInRn(U):
        return _gstlearn.GeometryHelper_getDirectionsInRn(U)

    @staticmethod
    def formatAngle(anglein, basis=360.):
        return _gstlearn.GeometryHelper_formatAngle(anglein, basis)

    @staticmethod
    def formatAngles(anglesin, basis=360.):
        return _gstlearn.GeometryHelper_formatAngles(anglesin, basis)

    @staticmethod
    def rayTriangleIntersect(dir, v0, v1, v2):
        return _gstlearn.GeometryHelper_rayTriangleIntersect(dir, v0, v1, v2)

    @staticmethod
    def sphBarCoord(sphPts, apices, meshes):
        return _gstlearn.GeometryHelper_sphBarCoord(sphPts, apices, meshes)

    @staticmethod
    def getCosineAngularTolerance(tolang):
        return _gstlearn.GeometryHelper_getCosineAngularTolerance(tolang)

    @staticmethod
    def getEllipse(center, rx, ry, theta, count=360):
        return _gstlearn.GeometryHelper_getEllipse(center, rx, ry, theta, count)

    def __init__(self):
        _gstlearn.GeometryHelper_swiginit(self, _gstlearn.new_GeometryHelper())
    __swig_destroy__ = _gstlearn.delete_GeometryHelper

# Register GeometryHelper in _gstlearn:
_gstlearn.GeometryHelper_swigregister(GeometryHelper)
class GH(GeometryHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.GH_swiginit(self, _gstlearn.new_GH())
    __swig_destroy__ = _gstlearn.delete_GH

# Register GH in _gstlearn:
_gstlearn.GH_swigregister(GH)
class Rotation(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Rotation_swiginit(self, _gstlearn.new_Rotation(*args))
    __swig_destroy__ = _gstlearn.delete_Rotation

    @staticmethod
    def isMatrixRotation(rotmat, verbose):
        return _gstlearn.Rotation_isMatrixRotation(rotmat, verbose)

    def getNDim(self):
        return _gstlearn.Rotation_getNDim(self)

    def isRotated(self):
        return _gstlearn.Rotation_isRotated(self)

    def getAngles(self):
        return _gstlearn.Rotation_getAngles(self)

    def getAngle(self, idim):
        return _gstlearn.Rotation_getAngle(self, idim)

    def resetFromSpaceDimension(self, ndim):
        return _gstlearn.Rotation_resetFromSpaceDimension(self, ndim)

    def toString(self, strfmt=None):
        return _gstlearn.Rotation_toString(self, strfmt)

    def setMatrixDirect(self, rotmat):
        return _gstlearn.Rotation_setMatrixDirect(self, rotmat)

    def setMatrixDirectVec(self, rotmat):
        return _gstlearn.Rotation_setMatrixDirectVec(self, rotmat)

    def setAngles(self, angles):
        return _gstlearn.Rotation_setAngles(self, angles)

    def setIdentity(self):
        return _gstlearn.Rotation_setIdentity(self)

    def rotateDirect(self, inv, outv):
        return _gstlearn.Rotation_rotateDirect(self, inv, outv)

    def rotateInverse(self, inv, outv):
        return _gstlearn.Rotation_rotateInverse(self, inv, outv)

    def isIdentity(self):
        return _gstlearn.Rotation_isIdentity(self)

    def isSame(self, rot):
        return _gstlearn.Rotation_isSame(self, rot)

    def getMatrixDirectVec(self):
        return _gstlearn.Rotation_getMatrixDirectVec(self)

    def getMatrixInverseVec(self):
        return _gstlearn.Rotation_getMatrixInverseVec(self)

    def getMatrixDirect(self, *args):
        return _gstlearn.Rotation_getMatrixDirect(self, *args)

    def getMatrixInverse(self, *args):
        return _gstlearn.Rotation_getMatrixInverse(self, *args)

# Register Rotation in _gstlearn:
_gstlearn.Rotation_swigregister(Rotation)
class ABiTargetCheck(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        if self.__class__ == ABiTargetCheck:
            _self = None
        else:
            _self = self
        _gstlearn.ABiTargetCheck_swiginit(self, _gstlearn.new_ABiTargetCheck(_self, *args))
    __swig_destroy__ = _gstlearn.delete_ABiTargetCheck

    def isOK(self, T1, T2):
        return _gstlearn.ABiTargetCheck_isOK(self, T1, T2)

    def isValid(self, dbin, dbout):
        return _gstlearn.ABiTargetCheck_isValid(self, dbin, dbout)

    def __repr__(self):
        return _gstlearn.ABiTargetCheck___repr__(self)
    def __disown__(self):
        self.this.disown()
        _gstlearn.disown_ABiTargetCheck(self)
        return weakref.proxy(self)

# Register ABiTargetCheck in _gstlearn:
_gstlearn.ABiTargetCheck_swigregister(ABiTargetCheck)
class BiTargetCheckBench(ABiTargetCheck):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.BiTargetCheckBench_swiginit(self, _gstlearn.new_BiTargetCheckBench(*args))
    __swig_destroy__ = _gstlearn.delete_BiTargetCheckBench

    def isOK(self, T1, T2):
        return _gstlearn.BiTargetCheckBench_isOK(self, T1, T2)

    def isValid(self, dbin, dbout):
        return _gstlearn.BiTargetCheckBench_isValid(self, dbin, dbout)

    def toString(self, strfmt=None):
        return _gstlearn.BiTargetCheckBench_toString(self, strfmt)

    @staticmethod
    def create(idim_bench, width):
        return _gstlearn.BiTargetCheckBench_create(idim_bench, width)

    def getWidth(self):
        return _gstlearn.BiTargetCheckBench_getWidth(self)

    def __repr__(self):
        return _gstlearn.BiTargetCheckBench___repr__(self)

# Register BiTargetCheckBench in _gstlearn:
_gstlearn.BiTargetCheckBench_swigregister(BiTargetCheckBench)
class BiTargetCheckCell(ABiTargetCheck):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.BiTargetCheckCell_swiginit(self, _gstlearn.new_BiTargetCheckCell(*args))
    __swig_destroy__ = _gstlearn.delete_BiTargetCheckCell

    def isOK(self, T1, T2):
        return _gstlearn.BiTargetCheckCell_isOK(self, T1, T2)

    def isValid(self, dbin, dbout):
        return _gstlearn.BiTargetCheckCell_isValid(self, dbin, dbout)

    def toString(self, strfmt=None):
        return _gstlearn.BiTargetCheckCell_toString(self, strfmt)

    @staticmethod
    def create(dbgrid=None):
        return _gstlearn.BiTargetCheckCell_create(dbgrid)

    def __repr__(self):
        return _gstlearn.BiTargetCheckCell___repr__(self)

# Register BiTargetCheckCell in _gstlearn:
_gstlearn.BiTargetCheckCell_swigregister(BiTargetCheckCell)
class BiTargetCheckDistance(ABiTargetCheck):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.BiTargetCheckDistance_swiginit(self, _gstlearn.new_BiTargetCheckDistance(*args))
    __swig_destroy__ = _gstlearn.delete_BiTargetCheckDistance

    def isOK(self, T1, T2):
        return _gstlearn.BiTargetCheckDistance_isOK(self, T1, T2)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.BiTargetCheckDistance_create(*args, **kwargs)

    def toString(self, strfmt=None):
        return _gstlearn.BiTargetCheckDistance_toString(self, strfmt)

    def getNDim(self):
        return _gstlearn.BiTargetCheckDistance_getNDim(self)

    def getAnisoCoeffs(self):
        return _gstlearn.BiTargetCheckDistance_getAnisoCoeffs(self)

    def getAnisoCoeff(self, i):
        return _gstlearn.BiTargetCheckDistance_getAnisoCoeff(self, i)

    def getAnisoRotMats(self):
        return _gstlearn.BiTargetCheckDistance_getAnisoRotMats(self)

    def getAnisoRotMat(self, i):
        return _gstlearn.BiTargetCheckDistance_getAnisoRotMat(self, i)

    def getFlagAniso(self):
        return _gstlearn.BiTargetCheckDistance_getFlagAniso(self)

    def getFlagRotation(self):
        return _gstlearn.BiTargetCheckDistance_getFlagRotation(self)

    def getRadius(self):
        return _gstlearn.BiTargetCheckDistance_getRadius(self)

    def setNDim(self, ndim):
        return _gstlearn.BiTargetCheckDistance_setNDim(self, ndim)

    def setAnisoCoeffs(self, anisoCoeffs):
        return _gstlearn.BiTargetCheckDistance_setAnisoCoeffs(self, anisoCoeffs)

    def setAnisoRotMat(self, anisoRotMat):
        return _gstlearn.BiTargetCheckDistance_setAnisoRotMat(self, anisoRotMat)

    def setFlagAniso(self, flagAniso):
        return _gstlearn.BiTargetCheckDistance_setFlagAniso(self, flagAniso)

    def setFlagRotation(self, flagRotation):
        return _gstlearn.BiTargetCheckDistance_setFlagRotation(self, flagRotation)

    def setRadius(self, radius):
        return _gstlearn.BiTargetCheckDistance_setRadius(self, radius)

    def getDistance(self):
        return _gstlearn.BiTargetCheckDistance_getDistance(self)

    def getIncr(self):
        return _gstlearn.BiTargetCheckDistance_getIncr(self)

    def getNormalizedDistance(self, dd):
        return _gstlearn.BiTargetCheckDistance_getNormalizedDistance(self, dd)

    def __repr__(self):
        return _gstlearn.BiTargetCheckDistance___repr__(self)

# Register BiTargetCheckDistance in _gstlearn:
_gstlearn.BiTargetCheckDistance_swigregister(BiTargetCheckDistance)
class BiTargetCheckFaults(ABiTargetCheck):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.BiTargetCheckFaults_swiginit(self, _gstlearn.new_BiTargetCheckFaults(*args))
    __swig_destroy__ = _gstlearn.delete_BiTargetCheckFaults

    def isOK(self, T1, T2):
        return _gstlearn.BiTargetCheckFaults_isOK(self, T1, T2)

    def toString(self, strfmt=None):
        return _gstlearn.BiTargetCheckFaults_toString(self, strfmt)

    @staticmethod
    def create(faults):
        return _gstlearn.BiTargetCheckFaults_create(faults)

    def __repr__(self):
        return _gstlearn.BiTargetCheckFaults___repr__(self)

# Register BiTargetCheckFaults in _gstlearn:
_gstlearn.BiTargetCheckFaults_swigregister(BiTargetCheckFaults)
class BiTargetCheckCode(ABiTargetCheck):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.BiTargetCheckCode_swiginit(self, _gstlearn.new_BiTargetCheckCode(*args))
    __swig_destroy__ = _gstlearn.delete_BiTargetCheckCode

    def isOK(self, T1, T2):
        return _gstlearn.BiTargetCheckCode_isOK(self, T1, T2)

    def toString(self, strfmt=None):
        return _gstlearn.BiTargetCheckCode_toString(self, strfmt)

    @staticmethod
    def create(optcode=1, tolcode=1.e-6):
        return _gstlearn.BiTargetCheckCode_create(optcode, tolcode)

    def __repr__(self):
        return _gstlearn.BiTargetCheckCode___repr__(self)

# Register BiTargetCheckCode in _gstlearn:
_gstlearn.BiTargetCheckCode_swigregister(BiTargetCheckCode)
class BiTargetCheckDate(ABiTargetCheck):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.BiTargetCheckDate_swiginit(self, _gstlearn.new_BiTargetCheckDate(*args))
    __swig_destroy__ = _gstlearn.delete_BiTargetCheckDate

    def isOK(self, T1, T2):
        return _gstlearn.BiTargetCheckDate_isOK(self, T1, T2)

    def toString(self, strfmt=None):
        return _gstlearn.BiTargetCheckDate_toString(self, strfmt)

    @staticmethod
    def create(deltamin, deltamax):
        return _gstlearn.BiTargetCheckDate_create(deltamin, deltamax)

    def __repr__(self):
        return _gstlearn.BiTargetCheckDate___repr__(self)

# Register BiTargetCheckDate in _gstlearn:
_gstlearn.BiTargetCheckDate_swigregister(BiTargetCheckDate)
class BiTargetCheckGeometry(ABiTargetCheck):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.BiTargetCheckGeometry_swiginit(self, _gstlearn.new_BiTargetCheckGeometry(*args))
    __swig_destroy__ = _gstlearn.delete_BiTargetCheckGeometry

    def isOK(self, T1, T2):
        return _gstlearn.BiTargetCheckGeometry_isOK(self, T1, T2)

    def toString(self, strfmt=None):
        return _gstlearn.BiTargetCheckGeometry_toString(self, strfmt)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.BiTargetCheckGeometry_create(*args, **kwargs)

    def getDist(self):
        return _gstlearn.BiTargetCheckGeometry_getDist(self)

    def __repr__(self):
        return _gstlearn.BiTargetCheckGeometry___repr__(self)

# Register BiTargetCheckGeometry in _gstlearn:
_gstlearn.BiTargetCheckGeometry_swigregister(BiTargetCheckGeometry)
class AArray(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AArray_swiginit(self, _gstlearn.new_AArray(*args))
    __swig_destroy__ = _gstlearn.delete_AArray

    def toString(self, strfmt=None):
        return _gstlearn.AArray_toString(self, strfmt)

    def init(self, ndims):
        return _gstlearn.AArray_init(self, ndims)

    def indiceToRank(self, indice):
        return _gstlearn.AArray_indiceToRank(self, indice)

    def rankToIndice(self, *args):
        return _gstlearn.AArray_rankToIndice(self, *args)

    def getNDim(self):
        return _gstlearn.AArray_getNDim(self)

    def getNPixels(self):
        return _gstlearn.AArray_getNPixels(self)

    def getNDimsExt(self, ndimMax):
        return _gstlearn.AArray_getNDimsExt(self, ndimMax)

    def getNDims(self, *args):
        return _gstlearn.AArray_getNDims(self, *args)

# Register AArray in _gstlearn:
_gstlearn.AArray_swigregister(AArray)
class Array(AArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Array_swiginit(self, _gstlearn.new_Array(*args))
    __swig_destroy__ = _gstlearn.delete_Array

    def init(self, ndims):
        return _gstlearn.Array_init(self, ndims)

    def getValue(self, indice):
        return _gstlearn.Array_getValue(self, indice)

    def setValue(self, indice, value):
        return _gstlearn.Array_setValue(self, indice, value)

    def getValues(self):
        return _gstlearn.Array_getValues(self)

    def setValues(self, values):
        return _gstlearn.Array_setValues(self, values)

    def __repr__(self):
        return _gstlearn.Array___repr__(self)

# Register Array in _gstlearn:
_gstlearn.Array_swigregister(Array)
class BImage(AArray):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.BImage_swiginit(self, _gstlearn.new_BImage(*args))
    __swig_destroy__ = _gstlearn.delete_BImage

    def toString(self, strfmt=None):
        return _gstlearn.BImage_toString(self, strfmt)

    def init(self, ndims):
        return _gstlearn.BImage_init(self, ndims)

    def getValues(self):
        return _gstlearn.BImage_getValues(self)

    def setValues(self, values):
        return _gstlearn.BImage_setValues(self, values)

    def getBImage(self, i, j, k):
        return _gstlearn.BImage_getBImage(self, i, j, k)

    def getOffset(self, i, j, k):
        return _gstlearn.BImage_getOffset(self, i, j, k)

    def getMaskoff(self, i, j, k):
        return _gstlearn.BImage_getMaskoff(self, i, j, k)

    def setValue(self, i, c):
        return _gstlearn.BImage_setValue(self, i, c)

    def getValue(self, *args):
        return _gstlearn.BImage_getValue(self, *args)

    def setMaskoff(self, i, j, k):
        return _gstlearn.BImage_setMaskoff(self, i, j, k)

    def setOffset(self, i, j, k):
        return _gstlearn.BImage_setOffset(self, i, j, k)

    def getAllocSize(self):
        return _gstlearn.BImage_getAllocSize(self)

    def isInside(self, i, j, k):
        return _gstlearn.BImage_isInside(self, i, j, k)

    def getAddress(self, i, j, k):
        return _gstlearn.BImage_getAddress(self, i, j, k)

    def __repr__(self):
        return _gstlearn.BImage___repr__(self)

# Register BImage in _gstlearn:
_gstlearn.BImage_swigregister(BImage)
class BImageStringFormat(AStringFormat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.BImageStringFormat_swiginit(self, _gstlearn.new_BImageStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_BImageStringFormat

    def getCharOne(self):
        return _gstlearn.BImageStringFormat_getCharOne(self)

    def getCharZero(self):
        return _gstlearn.BImageStringFormat_getCharZero(self)

    def getIndMin(self, *args):
        return _gstlearn.BImageStringFormat_getIndMin(self, *args)

    def getIndMax(self, *args):
        return _gstlearn.BImageStringFormat_getIndMax(self, *args)

# Register BImageStringFormat in _gstlearn:
_gstlearn.BImageStringFormat_swigregister(BImageStringFormat)
class Faults(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Faults_swiginit(self, _gstlearn.new_Faults(*args))
    __swig_destroy__ = _gstlearn.delete_Faults

    def toString(self, strfmt=None):
        return _gstlearn.Faults_toString(self, strfmt)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.Faults_createFromNF(neutralFilename, verbose)

    def getNFaults(self):
        return _gstlearn.Faults_getNFaults(self)

    def addFault(self, fault):
        return _gstlearn.Faults_addFault(self, fault)

    def getFaults(self):
        return _gstlearn.Faults_getFaults(self)

    def getFault(self, ifault):
        return _gstlearn.Faults_getFault(self, ifault)

    def isSplitByFault(self, xt1, yt1, xt2, yt2):
        return _gstlearn.Faults_isSplitByFault(self, xt1, yt1, xt2, yt2)

    def isSplitByFaultSP(self, P1, P2):
        return _gstlearn.Faults_isSplitByFaultSP(self, P1, P2)

# Register Faults in _gstlearn:
_gstlearn.Faults_swigregister(Faults)
class ShapeParameter(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShapeParameter_swiginit(self, _gstlearn.new_ShapeParameter(*args))
    __swig_destroy__ = _gstlearn.delete_ShapeParameter

    def toString(self, strfmt=None):
        return _gstlearn.ShapeParameter_toString(self, strfmt)

    def getLaw(self):
        return _gstlearn.ShapeParameter_getLaw(self)

    def getValarg(self, *args):
        return _gstlearn.ShapeParameter_getValarg(self, *args)

    def getNbValarg(self):
        return _gstlearn.ShapeParameter_getNbValarg(self)

    def setLaw(self, law):
        return _gstlearn.ShapeParameter_setLaw(self, law)

    def setValarg(self, iarg, value):
        return _gstlearn.ShapeParameter_setValarg(self, iarg, value)

    def generateValue(self):
        return _gstlearn.ShapeParameter_generateValue(self)

# Register ShapeParameter in _gstlearn:
_gstlearn.ShapeParameter_swigregister(ShapeParameter)
class AShape(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AShape

    def toString(self, strfmt=None):
        return _gstlearn.AShape_toString(self, strfmt)

    def getType(self):
        return _gstlearn.AShape_getType(self)

    def getNParams(self):
        return _gstlearn.AShape_getNParams(self)

    def getFlagCutZ(self):
        return _gstlearn.AShape_getFlagCutZ(self)

    def generateObject(self, ndim=3):
        return _gstlearn.AShape_generateObject(self, ndim)

    def belongObject(self, coor, object):
        return _gstlearn.AShape_belongObject(self, coor, object)

    def getFactorX2Y(self):
        return _gstlearn.AShape_getFactorX2Y(self)

    def getFactorX2Z(self):
        return _gstlearn.AShape_getFactorX2Z(self)

    def getFactorY2Z(self):
        return _gstlearn.AShape_getFactorY2Z(self)

    def getProportion(self):
        return _gstlearn.AShape_getProportion(self)

    def getParamName(self, ipar):
        return _gstlearn.AShape_getParamName(self, ipar)

    def getParam(self, *args):
        return _gstlearn.AShape_getParam(self, *args)

    def setFactorX2Y(self, factorX2Y):
        return _gstlearn.AShape_setFactorX2Y(self, factorX2Y)

    def setFactorX2Z(self, factorX2Z):
        return _gstlearn.AShape_setFactorX2Z(self, factorX2Z)

    def setFactorY2Z(self, factorY2Z):
        return _gstlearn.AShape_setFactorY2Z(self, factorY2Z)

    def setProportion(self, proportion):
        return _gstlearn.AShape_setProportion(self, proportion)

    def setParamName(self, ipar, name):
        return _gstlearn.AShape_setParamName(self, ipar, name)

    def setParam(self, ipar, iarg, value):
        return _gstlearn.AShape_setParam(self, ipar, iarg, value)

    def setParamDefault(self, ipar, name, value):
        return _gstlearn.AShape_setParamDefault(self, ipar, name, value)

    def setLaw(self, ipar, law):
        return _gstlearn.AShape_setLaw(self, ipar, law)

    def initParams(self, count):
        return _gstlearn.AShape_initParams(self, count)

    def generateParam(self, ipar):
        return _gstlearn.AShape_generateParam(self, ipar)

# Register AShape in _gstlearn:
_gstlearn.AShape_swigregister(AShape)
class ShapeParallelepiped(AShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShapeParallelepiped_swiginit(self, _gstlearn.new_ShapeParallelepiped(*args))
    __swig_destroy__ = _gstlearn.delete_ShapeParallelepiped

    def clone(self):
        return _gstlearn.ShapeParallelepiped_clone(self)

    def getType(self):
        return _gstlearn.ShapeParallelepiped_getType(self)

    def getNParams(self):
        return _gstlearn.ShapeParallelepiped_getNParams(self)

    def getFlagCutZ(self):
        return _gstlearn.ShapeParallelepiped_getFlagCutZ(self)

    def generateObject(self, ndim=3):
        return _gstlearn.ShapeParallelepiped_generateObject(self, ndim)

    def belongObject(self, coor, object):
        return _gstlearn.ShapeParallelepiped_belongObject(self, coor, object)

# Register ShapeParallelepiped in _gstlearn:
_gstlearn.ShapeParallelepiped_swigregister(ShapeParallelepiped)
class ShapeEllipsoid(AShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShapeEllipsoid_swiginit(self, _gstlearn.new_ShapeEllipsoid(*args))
    __swig_destroy__ = _gstlearn.delete_ShapeEllipsoid

    def clone(self):
        return _gstlearn.ShapeEllipsoid_clone(self)

    def getType(self):
        return _gstlearn.ShapeEllipsoid_getType(self)

    def getNParams(self):
        return _gstlearn.ShapeEllipsoid_getNParams(self)

    def getFlagCutZ(self):
        return _gstlearn.ShapeEllipsoid_getFlagCutZ(self)

    def generateObject(self, ndim=3):
        return _gstlearn.ShapeEllipsoid_generateObject(self, ndim)

    def belongObject(self, coor, object):
        return _gstlearn.ShapeEllipsoid_belongObject(self, coor, object)

# Register ShapeEllipsoid in _gstlearn:
_gstlearn.ShapeEllipsoid_swigregister(ShapeEllipsoid)
class ShapeParaboloid(AShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShapeParaboloid_swiginit(self, _gstlearn.new_ShapeParaboloid(*args))
    __swig_destroy__ = _gstlearn.delete_ShapeParaboloid

    def clone(self):
        return _gstlearn.ShapeParaboloid_clone(self)

    def getType(self):
        return _gstlearn.ShapeParaboloid_getType(self)

    def getNParams(self):
        return _gstlearn.ShapeParaboloid_getNParams(self)

    def getFlagCutZ(self):
        return _gstlearn.ShapeParaboloid_getFlagCutZ(self)

    def generateObject(self, ndim=3):
        return _gstlearn.ShapeParaboloid_generateObject(self, ndim)

    def belongObject(self, coor, object):
        return _gstlearn.ShapeParaboloid_belongObject(self, coor, object)

# Register ShapeParaboloid in _gstlearn:
_gstlearn.ShapeParaboloid_swigregister(ShapeParaboloid)
class ShapeHalfEllipsoid(AShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShapeHalfEllipsoid_swiginit(self, _gstlearn.new_ShapeHalfEllipsoid(*args))
    __swig_destroy__ = _gstlearn.delete_ShapeHalfEllipsoid

    def clone(self):
        return _gstlearn.ShapeHalfEllipsoid_clone(self)

    def getType(self):
        return _gstlearn.ShapeHalfEllipsoid_getType(self)

    def getNParams(self):
        return _gstlearn.ShapeHalfEllipsoid_getNParams(self)

    def getFlagCutZ(self):
        return _gstlearn.ShapeHalfEllipsoid_getFlagCutZ(self)

    def generateObject(self, ndim=3):
        return _gstlearn.ShapeHalfEllipsoid_generateObject(self, ndim)

    def belongObject(self, coor, object):
        return _gstlearn.ShapeHalfEllipsoid_belongObject(self, coor, object)

# Register ShapeHalfEllipsoid in _gstlearn:
_gstlearn.ShapeHalfEllipsoid_swigregister(ShapeHalfEllipsoid)
class ShapeHalfParaboloid(AShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShapeHalfParaboloid_swiginit(self, _gstlearn.new_ShapeHalfParaboloid(*args))
    __swig_destroy__ = _gstlearn.delete_ShapeHalfParaboloid

    def clone(self):
        return _gstlearn.ShapeHalfParaboloid_clone(self)

    def getType(self):
        return _gstlearn.ShapeHalfParaboloid_getType(self)

    def getNParams(self):
        return _gstlearn.ShapeHalfParaboloid_getNParams(self)

    def getFlagCutZ(self):
        return _gstlearn.ShapeHalfParaboloid_getFlagCutZ(self)

    def generateObject(self, ndim=3):
        return _gstlearn.ShapeHalfParaboloid_generateObject(self, ndim)

    def belongObject(self, coor, object):
        return _gstlearn.ShapeHalfParaboloid_belongObject(self, coor, object)

# Register ShapeHalfParaboloid in _gstlearn:
_gstlearn.ShapeHalfParaboloid_swigregister(ShapeHalfParaboloid)
class ShapeHalfSinusoid(AShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShapeHalfSinusoid_swiginit(self, _gstlearn.new_ShapeHalfSinusoid(*args))
    __swig_destroy__ = _gstlearn.delete_ShapeHalfSinusoid

    def clone(self):
        return _gstlearn.ShapeHalfSinusoid_clone(self)

    def getType(self):
        return _gstlearn.ShapeHalfSinusoid_getType(self)

    def getNParams(self):
        return _gstlearn.ShapeHalfSinusoid_getNParams(self)

    def getFlagCutZ(self):
        return _gstlearn.ShapeHalfSinusoid_getFlagCutZ(self)

    def generateObject(self, ndim=3):
        return _gstlearn.ShapeHalfSinusoid_generateObject(self, ndim)

    def belongObject(self, coor, object):
        return _gstlearn.ShapeHalfSinusoid_belongObject(self, coor, object)

# Register ShapeHalfSinusoid in _gstlearn:
_gstlearn.ShapeHalfSinusoid_swigregister(ShapeHalfSinusoid)
class ModelBoolean(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ModelBoolean_swiginit(self, _gstlearn.new_ModelBoolean(*args))
    __swig_destroy__ = _gstlearn.delete_ModelBoolean

    def toString(self, strfmt=None):
        return _gstlearn.ModelBoolean_toString(self, strfmt)

    def getNbTokens(self):
        return _gstlearn.ModelBoolean_getNbTokens(self)

    def addToken(self, token):
        return _gstlearn.ModelBoolean_addToken(self, token)

    def normalizeProportions(self):
        return _gstlearn.ModelBoolean_normalizeProportions(self)

    def generateObject(self, ndim):
        return _gstlearn.ModelBoolean_generateObject(self, ndim)

    def getToken(self, itok):
        return _gstlearn.ModelBoolean_getToken(self, itok)

    def isFlagStat(self):
        return _gstlearn.ModelBoolean_isFlagStat(self)

    def getThetaCst(self):
        return _gstlearn.ModelBoolean_getThetaCst(self)

    def setFlagStat(self, flagStat):
        return _gstlearn.ModelBoolean_setFlagStat(self, flagStat)

    def setThetaCst(self, thetaCst):
        return _gstlearn.ModelBoolean_setThetaCst(self, thetaCst)

# Register ModelBoolean in _gstlearn:
_gstlearn.ModelBoolean_swigregister(ModelBoolean)
class ASpace(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _gstlearn.delete_ASpace

    def getType(self):
        return _gstlearn.ASpace_getType(self)

    def setOrigin(self, origin):
        return _gstlearn.ASpace_setOrigin(self, origin)

    def getNDim(self, ispace=-1):
        return _gstlearn.ASpace_getNDim(self, ispace)

    def getOffset(self, ispace=-1):
        return _gstlearn.ASpace_getOffset(self, ispace)

    def getOrigin(self, ispace=-1):
        return _gstlearn.ASpace_getOrigin(self, ispace)

    def getNComponents(self):
        return _gstlearn.ASpace_getNComponents(self)

    def getComponent(self, ispace=-1):
        return _gstlearn.ASpace_getComponent(self, ispace)

    def toString(self, *args):
        return _gstlearn.ASpace_toString(self, *args)

    def isEqual(self, space):
        return _gstlearn.ASpace_isEqual(self, space)

    def getDistances(self, p1, p2):
        return _gstlearn.ASpace_getDistances(self, p1, p2)

    def move(self, p1, vec):
        return _gstlearn.ASpace_move(self, p1, vec)

    def getDistance(self, *args):
        return _gstlearn.ASpace_getDistance(self, *args)

    def getFrequentialDistance(self, p1, p2, tensor, ispace=-1):
        return _gstlearn.ASpace_getFrequentialDistance(self, p1, p2, tensor, ispace)

    def getIncrement(self, p1, p2, ispace=-1):
        return _gstlearn.ASpace_getIncrement(self, p1, p2, ispace)

    def projCoord(self, coord, ispace=-1):
        return _gstlearn.ASpace_projCoord(self, coord, ispace)

    def setOffset(self, offset):
        return _gstlearn.ASpace_setOffset(self, offset)

    def __repr__(self):
        return _gstlearn.ASpace___repr__(self)

# Register ASpace in _gstlearn:
_gstlearn.ASpace_swigregister(ASpace)
class SpaceComposite(ASpace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.SpaceComposite_swiginit(self, _gstlearn.new_SpaceComposite(*args))
    __swig_destroy__ = _gstlearn.delete_SpaceComposite

    def clone(self):
        return _gstlearn.SpaceComposite_clone(self)

    def getType(self):
        return _gstlearn.SpaceComposite_getType(self)

    def setOrigin(self, origin):
        return _gstlearn.SpaceComposite_setOrigin(self, origin)

    def getNDim(self, ispace=-1):
        return _gstlearn.SpaceComposite_getNDim(self, ispace)

    def getOffset(self, ispace=-1):
        return _gstlearn.SpaceComposite_getOffset(self, ispace)

    def getOrigin(self, ispace=-1):
        return _gstlearn.SpaceComposite_getOrigin(self, ispace)

    def getNComponents(self):
        return _gstlearn.SpaceComposite_getNComponents(self)

    def getComponent(self, ispace=-1):
        return _gstlearn.SpaceComposite_getComponent(self, ispace)

    def toString(self, strfmt, ispace):
        return _gstlearn.SpaceComposite_toString(self, strfmt, ispace)

    def isEqual(self, space):
        return _gstlearn.SpaceComposite_isEqual(self, space)

    def getDistances(self, p1, p2):
        return _gstlearn.SpaceComposite_getDistances(self, p1, p2)

    def addSpaceComponent(self, comp):
        return _gstlearn.SpaceComposite_addSpaceComponent(self, comp)

# Register SpaceComposite in _gstlearn:
_gstlearn.SpaceComposite_swigregister(SpaceComposite)
class ASpaceObject(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ASpaceObject

    def toString(self, strfmt=None):
        return _gstlearn.ASpaceObject_toString(self, strfmt)

    def getSpace(self):
        return _gstlearn.ASpaceObject_getSpace(self)

    def getUnitaryVector(self):
        return _gstlearn.ASpaceObject_getUnitaryVector(self)

    def isConsistent(self, *args):
        return _gstlearn.ASpaceObject_isConsistent(self, *args)

    def getNDim(self, ispace=-1):
        return _gstlearn.ASpaceObject_getNDim(self, ispace)

    def getOrigin(self, ispace=-1):
        return _gstlearn.ASpaceObject_getOrigin(self, ispace)

    def getDistance(self, p1, p2, ispace=0):
        return _gstlearn.ASpaceObject_getDistance(self, p1, p2, ispace)

    def getDistances(self, p1, p2):
        return _gstlearn.ASpaceObject_getDistances(self, p1, p2)

    def getIncrement(self, p1, p2, ispace=0):
        return _gstlearn.ASpaceObject_getIncrement(self, p1, p2, ispace)

# Register ASpaceObject in _gstlearn:
_gstlearn.ASpaceObject_swigregister(ASpaceObject)

def defineDefaultSpace(type, ndim=2, param=0.):
    return _gstlearn.defineDefaultSpace(type, ndim, param)

def setDefaultSpace(space):
    return _gstlearn.setDefaultSpace(space)

def cloneDefaultSpace():
    return _gstlearn.cloneDefaultSpace()

def getDefaultSpaceType():
    return _gstlearn.getDefaultSpaceType()

def getDefaultSpaceDimension():
    return _gstlearn.getDefaultSpaceDimension()

def getDefaultSpace():
    return _gstlearn.getDefaultSpace()

def isDefaultSpaceSphere():
    return _gstlearn.isDefaultSpaceSphere()
class SpacePoint(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SpacePoint_swiginit(self, _gstlearn.new_SpacePoint(*args))
    __swig_destroy__ = _gstlearn.delete_SpacePoint

    def spacePointOnSubspace(self, ispace=-1):
        return _gstlearn.SpacePoint_spacePointOnSubspace(self, ispace)

    def __eq__(self, v):
        return _gstlearn.SpacePoint___eq__(self, v)

    def getCoords(self):
        return _gstlearn.SpacePoint_getCoords(self)

    def getCoordRef(self):
        return _gstlearn.SpacePoint_getCoordRef(self)

    def getCoord(self, idim):
        return _gstlearn.SpacePoint_getCoord(self, idim)

    def setCoord(self, *args):
        return _gstlearn.SpacePoint_setCoord(self, *args)

    def setCoords(self, *args):
        return _gstlearn.SpacePoint_setCoords(self, *args)

    def setIech(self, iech):
        return _gstlearn.SpacePoint_setIech(self, iech)

    def getIech(self):
        return _gstlearn.SpacePoint_getIech(self)

    def setTarget(self, target):
        return _gstlearn.SpacePoint_setTarget(self, target)

    def isTarget(self):
        return _gstlearn.SpacePoint_isTarget(self)

    def isConsistent(self, space):
        return _gstlearn.SpacePoint_isConsistent(self, space)

    def move(self, vec):
        return _gstlearn.SpacePoint_move(self, vec)

    def getDistance(self, pt, ispace=-1):
        return _gstlearn.SpacePoint_getDistance(self, pt, ispace)

    def getDistances(self, pt):
        return _gstlearn.SpacePoint_getDistances(self, pt)

    def getIncrement(self, pt, ispace=-1):
        return _gstlearn.SpacePoint_getIncrement(self, pt, ispace)

    def setFFFF(self):
        return _gstlearn.SpacePoint_setFFFF(self)

    def isFFFF(self):
        return _gstlearn.SpacePoint_isFFFF(self)

    def getCosineToDirection(self, T2, codir):
        return _gstlearn.SpacePoint_getCosineToDirection(self, T2, codir)

    def getOrthogonalDistance(self, P2, codir):
        return _gstlearn.SpacePoint_getOrthogonalDistance(self, P2, codir)

    def setCoordFromAngle(self, angles):
        return _gstlearn.SpacePoint_setCoordFromAngle(self, angles)

    def toString(self, strfmt=None):
        return _gstlearn.SpacePoint_toString(self, strfmt)

    def __repr__(self):
        return _gstlearn.SpacePoint___repr__(self)

# Register SpacePoint in _gstlearn:
_gstlearn.SpacePoint_swigregister(SpacePoint)
class SpaceTarget(SpacePoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SpaceTarget_swiginit(self, _gstlearn.new_SpaceTarget(*args))
    __swig_destroy__ = _gstlearn.delete_SpaceTarget

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.SpaceTarget_create(*args, **kwargs)

    def getCoordAsSP(self):
        return _gstlearn.SpaceTarget_getCoordAsSP(self)

    def getExtend(self, *args):
        return _gstlearn.SpaceTarget_getExtend(self, *args)

    def setExtend(self, *args):
        return _gstlearn.SpaceTarget_setExtend(self, *args)

    def getExtendP(self):
        return _gstlearn.SpaceTarget_getExtendP(self)

    def getExtendPM(self):
        return _gstlearn.SpaceTarget_getExtendPM(self)

    def setCode(self, code):
        return _gstlearn.SpaceTarget_setCode(self, code)

    def setDate(self, date):
        return _gstlearn.SpaceTarget_setDate(self, date)

    def getCode(self):
        return _gstlearn.SpaceTarget_getCode(self)

    def getDate(self):
        return _gstlearn.SpaceTarget_getDate(self)

    def checkExtend(self):
        return _gstlearn.SpaceTarget_checkExtend(self)

    def checkCode(self):
        return _gstlearn.SpaceTarget_checkCode(self)

    def checkDate(self):
        return _gstlearn.SpaceTarget_checkDate(self)

    def toString(self, strfmt=None):
        return _gstlearn.SpaceTarget_toString(self, strfmt)

    def __repr__(self):
        return _gstlearn.SpaceTarget___repr__(self)

# Register SpaceTarget in _gstlearn:
_gstlearn.SpaceTarget_swigregister(SpaceTarget)
class SpaceRN(ASpace):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.SpaceRN_swiginit(self, _gstlearn.new_SpaceRN(*args))
    __swig_destroy__ = _gstlearn.delete_SpaceRN

    def clone(self):
        return _gstlearn.SpaceRN_clone(self)

    def getType(self):
        return _gstlearn.SpaceRN_getType(self)

# Register SpaceRN in _gstlearn:
_gstlearn.SpaceRN_swigregister(SpaceRN)
class ASpaceShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.ASpaceShape_swiginit(self, _gstlearn.new_ASpaceShape())
    __swig_destroy__ = _gstlearn.delete_ASpaceShape

# Register ASpaceShape in _gstlearn:
_gstlearn.ASpaceShape_swigregister(ASpaceShape)
class Cone(ASpaceShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.Cone_swiginit(self, _gstlearn.new_Cone())
    __swig_destroy__ = _gstlearn.delete_Cone
    angle = property(_gstlearn.Cone_angle_get, _gstlearn.Cone_angle_set)

# Register Cone in _gstlearn:
_gstlearn.Cone_swigregister(Cone)
class Cylinder(ASpaceShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.Cylinder_swiginit(self, _gstlearn.new_Cylinder())
    __swig_destroy__ = _gstlearn.delete_Cylinder
    radius = property(_gstlearn.Cylinder_radius_get, _gstlearn.Cylinder_radius_set)

# Register Cylinder in _gstlearn:
_gstlearn.Cylinder_swigregister(Cylinder)
class Pencil(ASpaceShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_Pencil

    def __init__(self, *args):
        _gstlearn.Pencil_swiginit(self, _gstlearn.new_Pencil(*args))

    def setAngle(self, ang):
        return _gstlearn.Pencil_setAngle(self, ang)
    angle = property(_gstlearn.Pencil_angle_get, _gstlearn.Pencil_angle_set)
    radius = property(_gstlearn.Pencil_radius_get, _gstlearn.Pencil_radius_set)

# Register Pencil in _gstlearn:
_gstlearn.Pencil_swigregister(Pencil)
class ALinearOp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ALinearOp

    def getSize(self):
        return _gstlearn.ALinearOp_getSize(self)

    def evalDirect(self, *args):
        return _gstlearn.ALinearOp_evalDirect(self, *args)

    def multiplyByValueAndAddDiagonal(self, v1=1., v2=0.):
        return _gstlearn.ALinearOp_multiplyByValueAndAddDiagonal(self, v1, v2)

    def resetModif(self):
        return _gstlearn.ALinearOp_resetModif(self)

    def setUseFactor(self, usefactor):
        return _gstlearn.ALinearOp_setUseFactor(self, usefactor)

# Register ALinearOp in _gstlearn:
_gstlearn.ALinearOp_swigregister(ALinearOp)
class ASimulable(ALinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ASimulable

    def evalSimulate(self, *args):
        return _gstlearn.ASimulable_evalSimulate(self, *args)

# Register ASimulable in _gstlearn:
_gstlearn.ASimulable_swigregister(ASimulable)
class AMatrix(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __swig_destroy__ = _gstlearn.delete_AMatrix

    def reset(self, nrows, ncols):
        return _gstlearn.AMatrix_reset(self, nrows, ncols)

    def resetFromValue(self, nrows, ncols, value):
        return _gstlearn.AMatrix_resetFromValue(self, nrows, ncols, value)

    def resetFromArray(self, nrows, ncols, tab, byCol=True):
        return _gstlearn.AMatrix_resetFromArray(self, nrows, ncols, tab, byCol)

    def resetFromVD(self, nrows, ncols, tab, byCol=True):
        return _gstlearn.AMatrix_resetFromVD(self, nrows, ncols, tab, byCol)

    def resetFromVVD(self, tab, byCol=True):
        return _gstlearn.AMatrix_resetFromVVD(self, tab, byCol)

    def toString(self, strfmt=None):
        return _gstlearn.AMatrix_toString(self, strfmt)

    def isDense(self):
        return _gstlearn.AMatrix_isDense(self)

    def isSparse(self):
        return _gstlearn.AMatrix_isSparse(self)

    def isSquare(self, printWhyNot=False):
        return _gstlearn.AMatrix_isSquare(self, printWhyNot)

    def isValid(self, irow, icol, printWhyNot=False):
        return _gstlearn.AMatrix_isValid(self, irow, icol, printWhyNot)

    def isIdentity(self, printWhyNot=False):
        return _gstlearn.AMatrix_isIdentity(self, printWhyNot)

    def isSymmetric(self, eps=1.e-10, printWhyNot=False):
        return _gstlearn.AMatrix_isSymmetric(self, eps, printWhyNot)

    def mustBeSymmetric(self):
        return _gstlearn.AMatrix_mustBeSymmetric(self)

    def setColumn(self, icol, tab, flagCheck=True):
        return _gstlearn.AMatrix_setColumn(self, icol, tab, flagCheck)

    def setRow(self, irow, tab, flagCheck=True):
        return _gstlearn.AMatrix_setRow(self, irow, tab, flagCheck)

    def setDiagonal(self, tab, flagCheck=True):
        return _gstlearn.AMatrix_setDiagonal(self, tab, flagCheck)

    def setDiagonalToConstant(self, value=1.):
        return _gstlearn.AMatrix_setDiagonalToConstant(self, value)

    def transposeInPlace(self):
        return _gstlearn.AMatrix_transposeInPlace(self)

    def transpose(self):
        return _gstlearn.AMatrix_transpose(self)

    def addScalar(self, v):
        return _gstlearn.AMatrix_addScalar(self, v)

    def addScalarDiag(self, v):
        return _gstlearn.AMatrix_addScalarDiag(self, v)

    def prodScalar(self, v):
        return _gstlearn.AMatrix_prodScalar(self, v)

    def fill(self, value):
        return _gstlearn.AMatrix_fill(self, value)

    def multiplyRow(self, vec):
        return _gstlearn.AMatrix_multiplyRow(self, vec)

    def multiplyColumn(self, vec):
        return _gstlearn.AMatrix_multiplyColumn(self, vec)

    def divideRow(self, vec):
        return _gstlearn.AMatrix_divideRow(self, vec)

    def divideColumn(self, vec):
        return _gstlearn.AMatrix_divideColumn(self, vec)

    def prodVecMat(self, x, transpose=False):
        return _gstlearn.AMatrix_prodVecMat(self, x, transpose)

    def prodMatVec(self, x, transpose=False):
        return _gstlearn.AMatrix_prodMatVec(self, x, transpose)

    def getRow(self, irow):
        return _gstlearn.AMatrix_getRow(self, irow)

    def getColumn(self, icol):
        return _gstlearn.AMatrix_getColumn(self, icol)

    def prodMatMatInPlace(self, x, y, transposeX=False, transposeY=False):
        return _gstlearn.AMatrix_prodMatMatInPlace(self, x, y, transposeX, transposeY)

    def getMatrixToTriplet(self, shiftRow=0, shiftCol=0):
        return _gstlearn.AMatrix_getMatrixToTriplet(self, shiftRow, shiftCol)

    def addMatInPlace(self, y, cx=1., cy=1.):
        return _gstlearn.AMatrix_addMatInPlace(self, y, cx, cy)

    def prodMatInPlace(self, matY, transposeY=False):
        return _gstlearn.AMatrix_prodMatInPlace(self, matY, transposeY)

    def prodNormMatMatInPlace(self, a, m, transpose=False):
        return _gstlearn.AMatrix_prodNormMatMatInPlace(self, a, m, transpose)

    def prodNormMatVecInPlace(self, *args, **kwargs):
        return _gstlearn.AMatrix_prodNormMatVecInPlace(self, *args, **kwargs)

    def resize(self, nrows, ncols):
        return _gstlearn.AMatrix_resize(self, nrows, ncols)

    def getValue(self, irow, icol, flagCheck=True):
        return _gstlearn.AMatrix_getValue(self, irow, icol, flagCheck)

    def setValue(self, irow, icol, value, flagCheck=True):
        return _gstlearn.AMatrix_setValue(self, irow, icol, value, flagCheck)

    def updValue(self, irow, icol, oper, value, flagCheck=True):
        return _gstlearn.AMatrix_updValue(self, irow, icol, oper, value, flagCheck)

    def addValue(self, irow, icol, value):
        return _gstlearn.AMatrix_addValue(self, irow, icol, value)

    def isSame(self, m, eps=1.e-4, printWhyNot=False):
        return _gstlearn.AMatrix_isSame(self, m, eps, printWhyNot)

    def isSameSize(self, m):
        return _gstlearn.AMatrix_isSameSize(self, m)

    def empty(self):
        return _gstlearn.AMatrix_empty(self)

    def compare(self, mat):
        return _gstlearn.AMatrix_compare(self, mat)

    def getNRows(self):
        return _gstlearn.AMatrix_getNRows(self)

    def getNCols(self):
        return _gstlearn.AMatrix_getNCols(self)

    def size(self):
        return _gstlearn.AMatrix_size(self)

    def getValues(self, byCol=True):
        return _gstlearn.AMatrix_getValues(self, byCol)

    def getDiagonal(self, shift=0):
        return _gstlearn.AMatrix_getDiagonal(self, shift)

    def isColumnDefined(self, icol):
        return _gstlearn.AMatrix_isColumnDefined(self, icol)

    def isRowDefined(self, irow):
        return _gstlearn.AMatrix_isRowDefined(self, irow)

    def getNumberColumnDefined(self):
        return _gstlearn.AMatrix_getNumberColumnDefined(self)

    def getNumberRowDefined(self):
        return _gstlearn.AMatrix_getNumberRowDefined(self)

    def isNonNegative(self, verbose=False):
        return _gstlearn.AMatrix_isNonNegative(self, verbose)

    def prodMatVecInPlace(self, x, y, transpose=False):
        return _gstlearn.AMatrix_prodMatVecInPlace(self, x, y, transpose)

    def prodMatVecInPlacePtr(self, x, y, transpose=False):
        return _gstlearn.AMatrix_prodMatVecInPlacePtr(self, x, y, transpose)

    def prodVecMatInPlace(self, x, y, transpose=False):
        return _gstlearn.AMatrix_prodVecMatInPlace(self, x, y, transpose)

    def prodVecMatInPlacePtr(self, x, y, transpose=False):
        return _gstlearn.AMatrix_prodVecMatInPlacePtr(self, x, y, transpose)

    def quadraticMatrix(self, x, y):
        return _gstlearn.AMatrix_quadraticMatrix(self, x, y)

    def invert(self):
        return _gstlearn.AMatrix_invert(self)

    def solve(self, b, x):
        return _gstlearn.AMatrix_solve(self, b, x)

    def dumpElements(self, title, ifrom, ito):
        return _gstlearn.AMatrix_dumpElements(self, title, ifrom, ito)

    def setIdentity(self, value=1.):
        return _gstlearn.AMatrix_setIdentity(self, value)

    def fillRandom(self, seed=432432, zeroPercent=0):
        return _gstlearn.AMatrix_fillRandom(self, seed, zeroPercent)

    def setValues(self, values, byCol=True):
        return _gstlearn.AMatrix_setValues(self, values, byCol)

    def getMeanByColumn(self, icol):
        return _gstlearn.AMatrix_getMeanByColumn(self, icol)

    def getMinimum(self):
        return _gstlearn.AMatrix_getMinimum(self)

    def getMaximum(self):
        return _gstlearn.AMatrix_getMaximum(self)

    def getNormInf(self):
        return _gstlearn.AMatrix_getNormInf(self)

    def copyReduce(self, x, validRows, validCols):
        return _gstlearn.AMatrix_copyReduce(self, x, validRows, validCols)

    def copyElements(self, m, factor=1.):
        return _gstlearn.AMatrix_copyElements(self, m, factor)

    def setFlagCheckAddress(self, flagCheckAddress):
        return _gstlearn.AMatrix_setFlagCheckAddress(self, flagCheckAddress)

    def makePositiveColumn(self):
        return _gstlearn.AMatrix_makePositiveColumn(self)

    def linearCombination(self, val1, mat1, val2=1., mat2=None, val3=1., mat3=None):
        return _gstlearn.AMatrix_linearCombination(self, val1, mat1, val2, mat2, val3, mat3)

    def __repr__(self):
        return _gstlearn.AMatrix___repr__(self)

# Register AMatrix in _gstlearn:
_gstlearn.AMatrix_swigregister(AMatrix)

def setMultiThread(nthreads):
    return _gstlearn.setMultiThread(nthreads)

def getMultiThread():
    return _gstlearn.getMultiThread()

def isMultiThread():
    return _gstlearn.isMultiThread()
class AMatrixDense(AMatrix):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AMatrixDense

    def isDense(self):
        return _gstlearn.AMatrixDense_isDense(self)

    def isSparse(self):
        return _gstlearn.AMatrixDense_isSparse(self)

    def setValue(self, irow, icol, value, flagCheck=False):
        return _gstlearn.AMatrixDense_setValue(self, irow, icol, value, flagCheck)

    def getValue(self, irow, icol, flagCheck=False):
        return _gstlearn.AMatrixDense_getValue(self, irow, icol, flagCheck)

    def updValue(self, irow, icol, oper, value, flagCheck=False):
        return _gstlearn.AMatrixDense_updValue(self, irow, icol, oper, value, flagCheck)

    def setColumn(self, icol, tab, flagCheck=False):
        return _gstlearn.AMatrixDense_setColumn(self, icol, tab, flagCheck)

    def setRow(self, irow, tab, flagCheck=False):
        return _gstlearn.AMatrixDense_setRow(self, irow, tab, flagCheck)

    def setDiagonal(self, tab, flagCheck=False):
        return _gstlearn.AMatrixDense_setDiagonal(self, tab, flagCheck)

    def setDiagonalToConstant(self, value=1.):
        return _gstlearn.AMatrixDense_setDiagonalToConstant(self, value)

    def addScalar(self, v):
        return _gstlearn.AMatrixDense_addScalar(self, v)

    def addScalarDiag(self, v):
        return _gstlearn.AMatrixDense_addScalarDiag(self, v)

    def prodScalar(self, v):
        return _gstlearn.AMatrixDense_prodScalar(self, v)

    def fill(self, value):
        return _gstlearn.AMatrixDense_fill(self, value)

    def multiplyRow(self, vec):
        return _gstlearn.AMatrixDense_multiplyRow(self, vec)

    def multiplyColumn(self, vec):
        return _gstlearn.AMatrixDense_multiplyColumn(self, vec)

    def divideRow(self, vec):
        return _gstlearn.AMatrixDense_divideRow(self, vec)

    def divideColumn(self, vec):
        return _gstlearn.AMatrixDense_divideColumn(self, vec)

    def prodVecMat(self, x, transpose=False):
        return _gstlearn.AMatrixDense_prodVecMat(self, x, transpose)

    def prodMatVec(self, x, transpose=False):
        return _gstlearn.AMatrixDense_prodMatVec(self, x, transpose)

    def getRow(self, irow):
        return _gstlearn.AMatrixDense_getRow(self, irow)

    def getColumn(self, icol):
        return _gstlearn.AMatrixDense_getColumn(self, icol)

    def getColumnPtr(self, icol):
        return _gstlearn.AMatrixDense_getColumnPtr(self, icol)

    def prodMatMatInPlace(self, x, y, transposeX=False, transposeY=False):
        return _gstlearn.AMatrixDense_prodMatMatInPlace(self, x, y, transposeX, transposeY)

    def addMatInPlace(self, y, cx=1., cy=1.):
        return _gstlearn.AMatrixDense_addMatInPlace(self, y, cx, cy)

    def prodNormMatMatInPlace(self, a, m, transpose=False):
        return _gstlearn.AMatrixDense_prodNormMatMatInPlace(self, a, m, transpose)

    def prodNormMatVecInPlace(self, *args, **kwargs):
        return _gstlearn.AMatrixDense_prodNormMatVecInPlace(self, *args, **kwargs)

    def getEigenValues(self):
        return _gstlearn.AMatrixDense_getEigenValues(self)

    def getEigenVectors(self):
        return _gstlearn.AMatrixDense_getEigenVectors(self)

# Register AMatrixDense in _gstlearn:
_gstlearn.AMatrixDense_swigregister(AMatrixDense)
class MatrixSparse(AMatrix, ALinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MatrixSparse_swiginit(self, _gstlearn.new_MatrixSparse(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixSparse

    def toTL(self):
        return _gstlearn.MatrixSparse_toTL(self)

    def clone(self):
        return _gstlearn.MatrixSparse_clone(self)

    def getSize(self):
        return _gstlearn.MatrixSparse_getSize(self)

    def isFlagEigen(self):
        return _gstlearn.MatrixSparse_isFlagEigen(self)

    def isSparse(self):
        return _gstlearn.MatrixSparse_isSparse(self)

    def isDense(self):
        return _gstlearn.MatrixSparse_isDense(self)

    def setValue(self, irow, icol, value, flagCheck=True):
        return _gstlearn.MatrixSparse_setValue(self, irow, icol, value, flagCheck)

    def getValue(self, row, col, flagCheck=True):
        return _gstlearn.MatrixSparse_getValue(self, row, col, flagCheck)

    def updValue(self, irow, icol, oper, value, flagCheck=True):
        return _gstlearn.MatrixSparse_updValue(self, irow, icol, oper, value, flagCheck)

    def getRowAsMatrixSparse(self, irow, coeff=1.):
        return _gstlearn.MatrixSparse_getRowAsMatrixSparse(self, irow, coeff)

    def getColumnAsMatrixSparse(self, icol, coeff=1.):
        return _gstlearn.MatrixSparse_getColumnAsMatrixSparse(self, icol, coeff)

    def setColumn(self, icol, tab, flagCheck=True):
        return _gstlearn.MatrixSparse_setColumn(self, icol, tab, flagCheck)

    def setRow(self, irow, tab, flagCheck=True):
        return _gstlearn.MatrixSparse_setRow(self, irow, tab, flagCheck)

    def setDiagonal(self, tab, flagCheck=True):
        return _gstlearn.MatrixSparse_setDiagonal(self, tab, flagCheck)

    def setDiagonalToConstant(self, value=1.):
        return _gstlearn.MatrixSparse_setDiagonalToConstant(self, value)

    def transpose(self):
        return _gstlearn.MatrixSparse_transpose(self)

    def addScalar(self, v):
        return _gstlearn.MatrixSparse_addScalar(self, v)

    def addScalarDiag(self, v):
        return _gstlearn.MatrixSparse_addScalarDiag(self, v)

    def prodScalar(self, v):
        return _gstlearn.MatrixSparse_prodScalar(self, v)

    def fill(self, value):
        return _gstlearn.MatrixSparse_fill(self, value)

    def multiplyRow(self, vec):
        return _gstlearn.MatrixSparse_multiplyRow(self, vec)

    def multiplyColumn(self, vec):
        return _gstlearn.MatrixSparse_multiplyColumn(self, vec)

    def divideRow(self, vec):
        return _gstlearn.MatrixSparse_divideRow(self, vec)

    def divideColumn(self, vec):
        return _gstlearn.MatrixSparse_divideColumn(self, vec)

    def prodVecMat(self, x, transpose=False):
        return _gstlearn.MatrixSparse_prodVecMat(self, x, transpose)

    def prodMatVec(self, x, transpose=False):
        return _gstlearn.MatrixSparse_prodMatVec(self, x, transpose)

    def prodMatMatInPlace(self, x, y, transposeX=False, transposeY=False):
        return _gstlearn.MatrixSparse_prodMatMatInPlace(self, x, y, transposeX, transposeY)

    def getMatrixToTriplet(self, shiftRow=0, shiftCol=0):
        return _gstlearn.MatrixSparse_getMatrixToTriplet(self, shiftRow, shiftCol)

    def toString(self, strfmt=None):
        return _gstlearn.MatrixSparse_toString(self, strfmt)

    @staticmethod
    def create(*args):
        return _gstlearn.MatrixSparse_create(*args)

    @staticmethod
    def createFromTriplet(NF_T, nrow=0, ncol=0, opt_eigen=-1):
        return _gstlearn.MatrixSparse_createFromTriplet(NF_T, nrow, ncol, opt_eigen)

    @staticmethod
    def addMatMat(x, y, cx=1., cy=1.):
        return _gstlearn.MatrixSparse_addMatMat(x, y, cx, cy)

    @staticmethod
    def diagVec(vec, opt_eigen=-1):
        return _gstlearn.MatrixSparse_diagVec(vec, opt_eigen)

    @staticmethod
    def diagConstant(number, value=1., opt_eigen=-1):
        return _gstlearn.MatrixSparse_diagConstant(number, value, opt_eigen)

    @staticmethod
    def diagMat(A, oper_choice, opt_eigen=-1):
        return _gstlearn.MatrixSparse_diagMat(A, oper_choice, opt_eigen)

    @staticmethod
    def glue(A1, A2, flagShiftRow, flagShiftCol):
        return _gstlearn.MatrixSparse_glue(A1, A2, flagShiftRow, flagShiftCol)

    @staticmethod
    def glueInPlace(A1, A2, flagShiftRow, flagShiftCol):
        return _gstlearn.MatrixSparse_glueInPlace(A1, A2, flagShiftRow, flagShiftCol)

    def addMatInPlace(self, y, cx=1., cy=1.):
        return _gstlearn.MatrixSparse_addMatInPlace(self, y, cx, cy)

    def prodNormMatMatInPlace(self, a, m, transpose=False):
        return _gstlearn.MatrixSparse_prodNormMatMatInPlace(self, a, m, transpose)

    def prodNormMatVecInPlace(self, *args, **kwargs):
        return _gstlearn.MatrixSparse_prodNormMatVecInPlace(self, *args, **kwargs)

    def resetFromValue(self, nrows, ncols, value):
        return _gstlearn.MatrixSparse_resetFromValue(self, nrows, ncols, value)

    def resetFromArray(self, nrows, ncols, tab, byCol=True):
        return _gstlearn.MatrixSparse_resetFromArray(self, nrows, ncols, tab, byCol)

    def resetFromVD(self, nrows, ncols, tab, byCol=True):
        return _gstlearn.MatrixSparse_resetFromVD(self, nrows, ncols, tab, byCol)

    def resetFromVVD(self, tab, byCol=True):
        return _gstlearn.MatrixSparse_resetFromVVD(self, tab, byCol)

    def resetFromTriplet(self, NF_T):
        return _gstlearn.MatrixSparse_resetFromTriplet(self, NF_T)

    @staticmethod
    def dumpElements(title, ifrom, ito):
        return _gstlearn.MatrixSparse_dumpElements(title, ifrom, ito)

    def fillRandom(self, seed=432432, zeroPercent=0):
        return _gstlearn.MatrixSparse_fillRandom(self, seed, zeroPercent)

    def addValue(self, row, col, value):
        return _gstlearn.MatrixSparse_addValue(self, row, col, value)

    def L1Norm(self):
        return _gstlearn.MatrixSparse_L1Norm(self)

    def getStats(self, nrows, ncols, count, percent):
        return _gstlearn.MatrixSparse_getStats(self, nrows, ncols, count, percent)

    def scaleByDiag(self):
        return _gstlearn.MatrixSparse_scaleByDiag(self)

    def addVecInPlaceVD(self, x, y):
        return _gstlearn.MatrixSparse_addVecInPlaceVD(self, x, y)

    def setConstant(self, value):
        return _gstlearn.MatrixSparse_setConstant(self, value)

    def extractDiag(self, oper_choice=1):
        return _gstlearn.MatrixSparse_extractDiag(self, oper_choice)

    def prodNormDiagVecInPlace(self, vec, oper=1):
        return _gstlearn.MatrixSparse_prodNormDiagVecInPlace(self, vec, oper)

    def extractSubmatrixByRanks(self, rank_rows, rank_cols):
        return _gstlearn.MatrixSparse_extractSubmatrixByRanks(self, rank_rows, rank_cols)

    def extractSubmatrixByColor(self, colors, ref_color, row_ok, col_ok):
        return _gstlearn.MatrixSparse_extractSubmatrixByColor(self, colors, ref_color, row_ok, col_ok)

    def colorCoding(self):
        return _gstlearn.MatrixSparse_colorCoding(self)

    def getNonZeros(self):
        return _gstlearn.MatrixSparse_getNonZeros(self)

    def gibbs(self, iech, zcur, yk, sk):
        return _gstlearn.MatrixSparse_gibbs(self, iech, zcur, yk, sk)

    def __repr__(self):
        return _gstlearn.MatrixSparse___repr__(self)

# Register MatrixSparse in _gstlearn:
_gstlearn.MatrixSparse_swigregister(MatrixSparse)

def createFromAnyMatrix(mat, opt_eigen=-1):
    return _gstlearn.createFromAnyMatrix(mat, opt_eigen)

def setUpdateNonZeroValue(status=2):
    return _gstlearn.setUpdateNonZeroValue(status)

def getUpdateNonZeroValue():
    return _gstlearn.getUpdateNonZeroValue()

def prodNormDiagVec(a, vec, oper_choice=1):
    return _gstlearn.prodNormDiagVec(a, vec, oper_choice)

def setGlobalFlagEigen(flagEigen):
    return _gstlearn.setGlobalFlagEigen(flagEigen)

def isGlobalFlagEigen():
    return _gstlearn.isGlobalFlagEigen()
class MatrixRectangular(AMatrixDense):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MatrixRectangular_swiginit(self, _gstlearn.new_MatrixRectangular(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixRectangular

    def toTL(self):
        return _gstlearn.MatrixRectangular_toTL(self)

    def clone(self):
        return _gstlearn.MatrixRectangular_clone(self)

    def mustBeSymmetric(self):
        return _gstlearn.MatrixRectangular_mustBeSymmetric(self)

    @staticmethod
    def create(*args):
        return _gstlearn.MatrixRectangular_create(*args)

    @staticmethod
    def createFromVVD(X):
        return _gstlearn.MatrixRectangular_createFromVVD(X)

    @staticmethod
    def createFromVD(X, nrow, ncol, byCol=False, invertColumnOrder=False):
        return _gstlearn.MatrixRectangular_createFromVD(X, nrow, ncol, byCol, invertColumnOrder)

    @staticmethod
    def glue(A1, A2, flagShiftRow, flagShiftCol):
        return _gstlearn.MatrixRectangular_glue(A1, A2, flagShiftRow, flagShiftCol)

    @staticmethod
    def sample(*args, **kwargs):
        return _gstlearn.MatrixRectangular_sample(*args, **kwargs)

    def unsample(self, A, rowFetch, colFetch, flagInvertRow=False, flagInvertCol=False):
        return _gstlearn.MatrixRectangular_unsample(self, A, rowFetch, colFetch, flagInvertRow, flagInvertCol)

    def addRow(self, nrow_added=1):
        return _gstlearn.MatrixRectangular_addRow(self, nrow_added)

    def addColumn(self, ncolumn_added=1):
        return _gstlearn.MatrixRectangular_addColumn(self, ncolumn_added)

    def __repr__(self):
        return _gstlearn.MatrixRectangular___repr__(self)

# Register MatrixRectangular in _gstlearn:
_gstlearn.MatrixRectangular_swigregister(MatrixRectangular)
class AMatrixSquare(MatrixRectangular):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.AMatrixSquare_swiginit(self, _gstlearn.new_AMatrixSquare(*args))
    __swig_destroy__ = _gstlearn.delete_AMatrixSquare

    def determinant(self):
        return _gstlearn.AMatrixSquare_determinant(self)

    def isSquare(self, printWhyNot=False):
        return _gstlearn.AMatrixSquare_isSquare(self, printWhyNot)

    def getNSize(self):
        return _gstlearn.AMatrixSquare_getNSize(self)

    def resetFromVVD(self, tab, byCol=True):
        return _gstlearn.AMatrixSquare_resetFromVVD(self, tab, byCol)

    def trace(self):
        return _gstlearn.AMatrixSquare_trace(self)

    def innerMatrix(self, x, r1, r2):
        return _gstlearn.AMatrixSquare_innerMatrix(self, x, r1, r2)

    def prodDiagByVector(self, diag):
        return _gstlearn.AMatrixSquare_prodDiagByVector(self, diag)

    def divideDiagByVector(self, diag):
        return _gstlearn.AMatrixSquare_divideDiagByVector(self, diag)

    def prodByDiagInPlace(self, mode, c):
        return _gstlearn.AMatrixSquare_prodByDiagInPlace(self, mode, c)

    def normVec(self, vec):
        return _gstlearn.AMatrixSquare_normVec(self, vec)

    def __repr__(self):
        return _gstlearn.AMatrixSquare___repr__(self)

# Register AMatrixSquare in _gstlearn:
_gstlearn.AMatrixSquare_swigregister(AMatrixSquare)
class NF_Triplet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.NF_Triplet_swiginit(self, _gstlearn.new_NF_Triplet(*args))
    __swig_destroy__ = _gstlearn.delete_NF_Triplet

    def toTL(self):
        return _gstlearn.NF_Triplet_toTL(self)

    def add(self, irow, icol, value):
        return _gstlearn.NF_Triplet_add(self, irow, icol, value)

    def getNumber(self):
        return _gstlearn.NF_Triplet_getNumber(self)

    def getNRows(self):
        return _gstlearn.NF_Triplet_getNRows(self)

    def getNCols(self):
        return _gstlearn.NF_Triplet_getNCols(self)

    def force(self, nrow, ncol):
        return _gstlearn.NF_Triplet_force(self, nrow, ncol)

    def getRow(self, i):
        return _gstlearn.NF_Triplet_getRow(self, i)

    def getCol(self, i):
        return _gstlearn.NF_Triplet_getCol(self, i)

    def getValue(self, i):
        return _gstlearn.NF_Triplet_getValue(self, i)

    def getValues(self):
        return _gstlearn.NF_Triplet_getValues(self)

    def getRows(self, flag_from_1=False):
        return _gstlearn.NF_Triplet_getRows(self, flag_from_1)

    def getCols(self, flag_from_1=False):
        return _gstlearn.NF_Triplet_getCols(self, flag_from_1)

    def appendInPlace(self, T2):
        return _gstlearn.NF_Triplet_appendInPlace(self, T2)

# Register NF_Triplet in _gstlearn:
_gstlearn.NF_Triplet_swigregister(NF_Triplet)
class MatrixSquareGeneral(AMatrixSquare):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MatrixSquareGeneral_swiginit(self, _gstlearn.new_MatrixSquareGeneral(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixSquareGeneral

    def toTL(self):
        return _gstlearn.MatrixSquareGeneral_toTL(self)

    def clone(self):
        return _gstlearn.MatrixSquareGeneral_clone(self)

    def mustBeSymmetric(self):
        return _gstlearn.MatrixSquareGeneral_mustBeSymmetric(self)

    @staticmethod
    def createFromVVD(X):
        return _gstlearn.MatrixSquareGeneral_createFromVVD(X)

    @staticmethod
    def createFromVD(X, nrow, byCol=False, invertColumnOrder=False):
        return _gstlearn.MatrixSquareGeneral_createFromVD(X, nrow, byCol, invertColumnOrder)

    def decomposeLU(self, tls, tus, eps=1.e-20):
        return _gstlearn.MatrixSquareGeneral_decomposeLU(self, tls, tus, eps)

    def __repr__(self):
        return _gstlearn.MatrixSquareGeneral___repr__(self)

# Register MatrixSquareGeneral in _gstlearn:
_gstlearn.MatrixSquareGeneral_swigregister(MatrixSquareGeneral)

def prodNormMatMat(*args):
    return _gstlearn.prodNormMatMat(*args)

def prodNormMat(*args):
    return _gstlearn.prodNormMat(*args)
class MatrixSquareSymmetric(AMatrixSquare):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MatrixSquareSymmetric_swiginit(self, _gstlearn.new_MatrixSquareSymmetric(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixSquareSymmetric

    def toTL(self):
        return _gstlearn.MatrixSquareSymmetric_toTL(self)

    def clone(self):
        return _gstlearn.MatrixSquareSymmetric_clone(self)

    def mustBeSymmetric(self):
        return _gstlearn.MatrixSquareSymmetric_mustBeSymmetric(self)

    def isSymmetric(self, eps=1.e-10, printWhyNot=False):
        return _gstlearn.MatrixSquareSymmetric_isSymmetric(self, eps, printWhyNot)

    def resetFromVVD(self, tab, byCol=True):
        return _gstlearn.MatrixSquareSymmetric_resetFromVVD(self, tab, byCol)

    def normMatrix(self, *args, **kwargs):
        return _gstlearn.MatrixSquareSymmetric_normMatrix(self, *args, **kwargs)

    @staticmethod
    def createFromVVD(X):
        return _gstlearn.MatrixSquareSymmetric_createFromVVD(X)

    @staticmethod
    def createFromVD(X):
        return _gstlearn.MatrixSquareSymmetric_createFromVD(X)

    @staticmethod
    def createFromTLTU(neq, tl):
        return _gstlearn.MatrixSquareSymmetric_createFromTLTU(neq, tl)

    @staticmethod
    def createFromTriangle(mode, neq, tl):
        return _gstlearn.MatrixSquareSymmetric_createFromTriangle(mode, neq, tl)

    @staticmethod
    def createRandomDefinitePositive(neq, seed=13242):
        return _gstlearn.MatrixSquareSymmetric_createRandomDefinitePositive(neq, seed)

    @staticmethod
    def sample(A, rowKeep, flagInvert=False):
        return _gstlearn.MatrixSquareSymmetric_sample(A, rowKeep, flagInvert)

    def computeEigen(self, optionPositive=True):
        return _gstlearn.MatrixSquareSymmetric_computeEigen(self, optionPositive)

    def computeGeneralizedEigen(self, b, optionPositive=True):
        return _gstlearn.MatrixSquareSymmetric_computeGeneralizedEigen(self, b, optionPositive)

    def computeGeneralizedInverse(self, tabout, maxicond=1.e20, eps=1.e-20):
        return _gstlearn.MatrixSquareSymmetric_computeGeneralizedInverse(self, tabout, maxicond, eps)

    def isDefinitePositive(self):
        return _gstlearn.MatrixSquareSymmetric_isDefinitePositive(self)

    def minimizeWithConstraintsInPlace(self, gmat, aemat, bemat, aimat, bimat, xmat):
        return _gstlearn.MatrixSquareSymmetric_minimizeWithConstraintsInPlace(self, gmat, aemat, bemat, aimat, bimat, xmat)

    def _isPhysicallyPresent(self, irow, icol):
        return _gstlearn.MatrixSquareSymmetric__isPhysicallyPresent(self, irow, icol)

    def _setValues(self, values, byCol=True):
        return _gstlearn.MatrixSquareSymmetric__setValues(self, values, byCol)

    def _invert(self):
        return _gstlearn.MatrixSquareSymmetric__invert(self)

    def _matrix_qo(self, gmat, xmat):
        return _gstlearn.MatrixSquareSymmetric__matrix_qo(self, gmat, xmat)

    def _matrix_qoc(self, flag_invert, gmat, na, amat, bmat, xmat, _lambda):
        return _gstlearn.MatrixSquareSymmetric__matrix_qoc(self, flag_invert, gmat, na, amat, bmat, xmat, _lambda)

    def _constraintsError(self, active, aimat, bimat, xmat, vmat, flag):
        return _gstlearn.MatrixSquareSymmetric__constraintsError(self, active, aimat, bimat, xmat, vmat, flag)

    @staticmethod
    def _constraintsConcatenateMat(nae, nai, neq, active, tabemat, tabimat, tabout):
        return _gstlearn.MatrixSquareSymmetric__constraintsConcatenateMat(nae, nai, neq, active, tabemat, tabimat, tabout)

    @staticmethod
    def _constraintsConcatenateVD(nae, nai, active, tabemat, tabimat, tabout):
        return _gstlearn.MatrixSquareSymmetric__constraintsConcatenateVD(nae, nai, active, tabemat, tabimat, tabout)

    @staticmethod
    def _constraintsCount(nai, active):
        return _gstlearn.MatrixSquareSymmetric__constraintsCount(nai, active)

    def _terminateEigen(self, eigenValues, eigenVectors, optionPositive=True, changeOrder=False):
        return _gstlearn.MatrixSquareSymmetric__terminateEigen(self, eigenValues, eigenVectors, optionPositive, changeOrder)

    def __repr__(self):
        return _gstlearn.MatrixSquareSymmetric___repr__(self)

# Register MatrixSquareSymmetric in _gstlearn:
_gstlearn.MatrixSquareSymmetric_swigregister(MatrixSquareSymmetric)
class MatrixFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def prodMatMat(x, y, transposeX=False, transposeY=False):
        return _gstlearn.MatrixFactory_prodMatMat(x, y, transposeX, transposeY)

    @staticmethod
    def createMatrixSquare(x, nrow):
        return _gstlearn.MatrixFactory_createMatrixSquare(x, nrow)

    @staticmethod
    def createReduce(*args, **kwargs):
        return _gstlearn.MatrixFactory_createReduce(*args, **kwargs)

    @staticmethod
    def createReduceOne(x, selRow=-1, selCol=-1, flagKeepRow=True, flagKeepCol=True):
        return _gstlearn.MatrixFactory_createReduceOne(x, selRow, selCol, flagKeepRow, flagKeepCol)

    @staticmethod
    def createGlue(a1, a2, flagShiftRow, flagShiftCol):
        return _gstlearn.MatrixFactory_createGlue(a1, a2, flagShiftRow, flagShiftCol)

    def __init__(self):
        _gstlearn.MatrixFactory_swiginit(self, _gstlearn.new_MatrixFactory())
    __swig_destroy__ = _gstlearn.delete_MatrixFactory

# Register MatrixFactory in _gstlearn:
_gstlearn.MatrixFactory_swigregister(MatrixFactory)
class MatrixInt(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MatrixInt_swiginit(self, _gstlearn.new_MatrixInt(*args))
    __swig_destroy__ = _gstlearn.delete_MatrixInt

    def clone(self):
        return _gstlearn.MatrixInt_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.MatrixInt_toString(self, strfmt)

    @staticmethod
    def createFromVI(X, nrow, ncol, byCol=False):
        return _gstlearn.MatrixInt_createFromVI(X, nrow, ncol, byCol)

    @staticmethod
    def createFromVVI(X):
        return _gstlearn.MatrixInt_createFromVVI(X)

    def reset(self, nrows, ncols):
        return _gstlearn.MatrixInt_reset(self, nrows, ncols)

    def resetFromArray(self, nrows, ncols, tab, byCol=True):
        return _gstlearn.MatrixInt_resetFromArray(self, nrows, ncols, tab, byCol)

    def getValue(self, *args):
        return _gstlearn.MatrixInt_getValue(self, *args)

    def setValueByRank(self, rank, value):
        return _gstlearn.MatrixInt_setValueByRank(self, rank, value)

    def setValue(self, irow, icol, value):
        return _gstlearn.MatrixInt_setValue(self, irow, icol, value)

    def getMatrixSize(self):
        return _gstlearn.MatrixInt_getMatrixSize(self)

    def size(self):
        return _gstlearn.MatrixInt_size(self)

    def getValues(self):
        return _gstlearn.MatrixInt_getValues(self)

    def getValuesPerRow(self, irow):
        return _gstlearn.MatrixInt_getValuesPerRow(self, irow)

    def getValuesPerColumn(self, icol):
        return _gstlearn.MatrixInt_getValuesPerColumn(self, icol)

    def getMatrix(self):
        return _gstlearn.MatrixInt_getMatrix(self)

    def setValues(self, values, byCol=True):
        return _gstlearn.MatrixInt_setValues(self, values, byCol)

    def setValuesOldStyle(self, values, byCol=True):
        return _gstlearn.MatrixInt_setValuesOldStyle(self, values, byCol)

    def transposeInPlace(self):
        return _gstlearn.MatrixInt_transposeInPlace(self)

    def empty(self):
        return _gstlearn.MatrixInt_empty(self)

    def fill(self, value):
        return _gstlearn.MatrixInt_fill(self, value)

    def getNCols(self):
        return _gstlearn.MatrixInt_getNCols(self)

    def setNCols(self, cols):
        return _gstlearn.MatrixInt_setNCols(self, cols)

    def getNRows(self):
        return _gstlearn.MatrixInt_getNRows(self)

    def setNRows(self, rows):
        return _gstlearn.MatrixInt_setNRows(self, rows)

    def __call__(self, *args):
        return _gstlearn.MatrixInt___call__(self, *args)

    def __repr__(self):
        return _gstlearn.MatrixInt___repr__(self)

# Register MatrixInt in _gstlearn:
_gstlearn.MatrixInt_swigregister(MatrixInt)
class Table(MatrixRectangular, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Table_swiginit(self, _gstlearn.new_Table(*args))
    __swig_destroy__ = _gstlearn.delete_Table

    def toTL(self):
        return _gstlearn.Table_toTL(self)

    def clone(self):
        return _gstlearn.Table_clone(self)

    def reset(self, nrows, ncols):
        return _gstlearn.Table_reset(self, nrows, ncols)

    def toString(self, strfmt=None):
        return _gstlearn.Table_toString(self, strfmt)

    @staticmethod
    def create(nrow=0, ncol=0):
        return _gstlearn.Table_create(nrow, ncol)

    @staticmethod
    def createFromNames(rownames, colnames):
        return _gstlearn.Table_createFromNames(rownames, colnames)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.Table_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromTable(table):
        return _gstlearn.Table_createFromTable(table)

    def getRange(self, icol):
        return _gstlearn.Table_getRange(self, icol)

    def getAllRange(self):
        return _gstlearn.Table_getAllRange(self)

    def plot(self, isimu):
        return _gstlearn.Table_plot(self, isimu)

    def setColumnNames(self, colNames):
        return _gstlearn.Table_setColumnNames(self, colNames)

    def setColumnName(self, icol, name):
        return _gstlearn.Table_setColumnName(self, icol, name)

    def setRowNames(self, rowNames):
        return _gstlearn.Table_setRowNames(self, rowNames)

    def setRowName(self, irow, name):
        return _gstlearn.Table_setRowName(self, irow, name)

    def getColumnNames(self):
        return _gstlearn.Table_getColumnNames(self)

    def getRowNames(self):
        return _gstlearn.Table_getRowNames(self)

    def getColumnName(self, icol):
        return _gstlearn.Table_getColumnName(self, icol)

    def getRowName(self, irow):
        return _gstlearn.Table_getRowName(self, irow)

    def getTitle(self):
        return _gstlearn.Table_getTitle(self)

    def setTitle(self, title):
        return _gstlearn.Table_setTitle(self, title)

    def setSkipDescription(self, skipDescription):
        return _gstlearn.Table_setSkipDescription(self, skipDescription)

    def setSkipTitle(self, skipTitle):
        return _gstlearn.Table_setSkipTitle(self, skipTitle)

    def __repr__(self):
        return _gstlearn.Table___repr__(self)

# Register Table in _gstlearn:
_gstlearn.Table_swigregister(Table)
class ISkinFunctions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ISkinFunctions

    def isAlreadyFilled(self, arg2):
        return _gstlearn.ISkinFunctions_isAlreadyFilled(self, arg2)

    def isToBeFilled(self, arg2):
        return _gstlearn.ISkinFunctions_isToBeFilled(self, arg2)

    def getWeight(self, arg2, arg3):
        return _gstlearn.ISkinFunctions_getWeight(self, arg2, arg3)

# Register ISkinFunctions in _gstlearn:
_gstlearn.ISkinFunctions_swigregister(ISkinFunctions)
class Skin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Skin_swiginit(self, _gstlearn.new_Skin(*args))
    __swig_destroy__ = _gstlearn.delete_Skin

    def gridShift(self, lec, dir):
        return _gstlearn.Skin_gridShift(self, lec, dir)

    def init(self, verbose=False):
        return _gstlearn.Skin_init(self, verbose)

    def remains(self, verbose=False):
        return _gstlearn.Skin_remains(self, verbose)

    def getNext(self, rank, ipos):
        return _gstlearn.Skin_getNext(self, rank, ipos)

    def unstack(self, rank0, ipos0):
        return _gstlearn.Skin_unstack(self, rank0, ipos0)

    def skinPrint(self):
        return _gstlearn.Skin_skinPrint(self)

# Register Skin in _gstlearn:
_gstlearn.Skin_swigregister(Skin)
class AMesh(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AMesh

    def toString(self, strfmt=None):
        return _gstlearn.AMesh_toString(self, strfmt)

    def getNApexPerMesh(self):
        return _gstlearn.AMesh_getNApexPerMesh(self)

    def getNApices(self):
        return _gstlearn.AMesh_getNApices(self)

    def getNMeshes(self):
        return _gstlearn.AMesh_getNMeshes(self)

    def getApex(self, imesh, rank):
        return _gstlearn.AMesh_getApex(self, imesh, rank)

    def getCoor(self, imesh, rank, idim):
        return _gstlearn.AMesh_getCoor(self, imesh, rank, idim)

    def getCoordinatesInPlace(self, imesh, rank, coords):
        return _gstlearn.AMesh_getCoordinatesInPlace(self, imesh, rank, coords)

    def getApexCoor(self, i, idim):
        return _gstlearn.AMesh_getApexCoor(self, i, idim)

    def getApexCoordinatesInPlace(self, i, coords):
        return _gstlearn.AMesh_getApexCoordinatesInPlace(self, i, coords)

    def getMeshSize(self, imesh):
        return _gstlearn.AMesh_getMeshSize(self, imesh)

    def resetProjMatrix(self, m, db, rankZ=-1, verbose=False):
        return _gstlearn.AMesh_resetProjMatrix(self, m, db, rankZ, verbose)

    def getVariety(self):
        return _gstlearn.AMesh_getVariety(self)

    def getEmbeddedNDim(self):
        return _gstlearn.AMesh_getEmbeddedNDim(self)

    def getEmbeddedCoorPerMesh(self, imesh, ic, coords):
        return _gstlearn.AMesh_getEmbeddedCoorPerMesh(self, imesh, ic, coords)

    def getEmbeddedCoorPerApex(self, iapex, coords):
        return _gstlearn.AMesh_getEmbeddedCoorPerApex(self, iapex, coords)

    def createProjMatrix(self, db, rankZ=-1, verbose=False):
        return _gstlearn.AMesh_createProjMatrix(self, db, rankZ, verbose)

    def getNDim(self):
        return _gstlearn.AMesh_getNDim(self)

    def getExtendMin(self, idim):
        return _gstlearn.AMesh_getExtendMin(self, idim)

    def getExtendMax(self, idim):
        return _gstlearn.AMesh_getExtendMax(self, idim)

    def getExtrema(self, idim):
        return _gstlearn.AMesh_getExtrema(self, idim)

    def getElements(self, apices, meshes):
        return _gstlearn.AMesh_getElements(self, apices, meshes)

    def isCompatibleDb(self, db):
        return _gstlearn.AMesh_isCompatibleDb(self, db)

    def getMeshSizes(self):
        return _gstlearn.AMesh_getMeshSizes(self)

    def printMesh(self, imesh0):
        return _gstlearn.AMesh_printMesh(self, imesh0)

    def printMeshes(self, level=0, nline_max=-1):
        return _gstlearn.AMesh_printMeshes(self, level, nline_max)

    def getCoordinates(self, idim):
        return _gstlearn.AMesh_getCoordinates(self, idim)

    def getMeshByApexPair(self, apex1, apex2):
        return _gstlearn.AMesh_getMeshByApexPair(self, apex1, apex2)

    def getApexCoordinates(self, iapex):
        return _gstlearn.AMesh_getApexCoordinates(self, iapex)

    def getCoordinatesPerMesh(self, *args):
        return _gstlearn.AMesh_getCoordinatesPerMesh(self, *args)

    def getEmbeddedCoordinatesPerMesh(self, imesh=0):
        return _gstlearn.AMesh_getEmbeddedCoordinatesPerMesh(self, imesh)

    def getEmbeddedCoordinatesPerMeshInPlace(self, imesh, vec):
        return _gstlearn.AMesh_getEmbeddedCoordinatesPerMeshInPlace(self, imesh, vec)

    def getEmbeddedCoordinatesPerApex(self):
        return _gstlearn.AMesh_getEmbeddedCoordinatesPerApex(self)

    def getDistances(self, *args, **kwargs):
        return _gstlearn.AMesh_getDistances(self, *args, **kwargs)

    def getAllCoordinates(self):
        return _gstlearn.AMesh_getAllCoordinates(self)

    def getAllApices(self):
        return _gstlearn.AMesh_getAllApices(self)

    def getAllMeshes(self):
        return _gstlearn.AMesh_getAllMeshes(self)

    def getCenterCoordinate(self, imesh, idim):
        return _gstlearn.AMesh_getCenterCoordinate(self, imesh, idim)

    def getAllCenterCoordinates(self):
        return _gstlearn.AMesh_getAllCenterCoordinates(self)

    def getNeighborhoodPerMesh(self):
        return _gstlearn.AMesh_getNeighborhoodPerMesh(self)

    def getNeighborhoodPerApex(self):
        return _gstlearn.AMesh_getNeighborhoodPerApex(self)

    @staticmethod
    def dumpNeighborhood(Vmesh, nline_max=1):
        return _gstlearn.AMesh_dumpNeighborhood(Vmesh, nline_max)

# Register AMesh in _gstlearn:
_gstlearn.AMesh_swigregister(AMesh)
class MeshEStandard(AMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MeshEStandard_swiginit(self, _gstlearn.new_MeshEStandard(*args))
    __swig_destroy__ = _gstlearn.delete_MeshEStandard

    def toString(self, strfmt=None):
        return _gstlearn.MeshEStandard_toString(self, strfmt)

    def getNApices(self):
        return _gstlearn.MeshEStandard_getNApices(self)

    def getNMeshes(self):
        return _gstlearn.MeshEStandard_getNMeshes(self)

    def getApex(self, imesh, rank):
        return _gstlearn.MeshEStandard_getApex(self, imesh, rank)

    def getCoor(self, imesh, rank, idim):
        return _gstlearn.MeshEStandard_getCoor(self, imesh, rank, idim)

    def getApexCoor(self, i, idim):
        return _gstlearn.MeshEStandard_getApexCoor(self, i, idim)

    def getMeshSize(self, imesh):
        return _gstlearn.MeshEStandard_getMeshSize(self, imesh)

    def resetProjMatrix(self, m, db, rankZ=-1, verbose=False):
        return _gstlearn.MeshEStandard_resetProjMatrix(self, m, db, rankZ, verbose)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.MeshEStandard_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromExternal(apices, meshes, verbose=False):
        return _gstlearn.MeshEStandard_createFromExternal(apices, meshes, verbose)

    def getMeshList(self):
        return _gstlearn.MeshEStandard_getMeshList(self)

    def getPointList(self, byCol=True):
        return _gstlearn.MeshEStandard_getPointList(self, byCol)

    def reset(self, *args):
        return _gstlearn.MeshEStandard_reset(self, *args)

    def resetFromTurbo(self, turbo, verbose=False):
        return _gstlearn.MeshEStandard_resetFromTurbo(self, turbo, verbose)

    def getApices(self):
        return _gstlearn.MeshEStandard_getApices(self)

    def getMeshes(self):
        return _gstlearn.MeshEStandard_getMeshes(self)

    def __repr__(self):
        return _gstlearn.MeshEStandard___repr__(self)

# Register MeshEStandard in _gstlearn:
_gstlearn.MeshEStandard_swigregister(MeshEStandard)
class MeshETurbo(AMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MeshETurbo_swiginit(self, _gstlearn.new_MeshETurbo(*args))
    __swig_destroy__ = _gstlearn.delete_MeshETurbo

    def toString(self, strfmt=None):
        return _gstlearn.MeshETurbo_toString(self, strfmt)

    def getNApices(self):
        return _gstlearn.MeshETurbo_getNApices(self)

    def getNMeshes(self):
        return _gstlearn.MeshETurbo_getNMeshes(self)

    def getApex(self, imesh, rank):
        return _gstlearn.MeshETurbo_getApex(self, imesh, rank)

    def getCoor(self, imesh, rank, idim):
        return _gstlearn.MeshETurbo_getCoor(self, imesh, rank, idim)

    def getCoordinatesInPlace(self, imesh, rank, coords):
        return _gstlearn.MeshETurbo_getCoordinatesInPlace(self, imesh, rank, coords)

    def getApexCoor(self, i, idim):
        return _gstlearn.MeshETurbo_getApexCoor(self, i, idim)

    def getApexCoordinatesInPlace(self, i, coords):
        return _gstlearn.MeshETurbo_getApexCoordinatesInPlace(self, i, coords)

    def getMeshSize(self, imesh):
        return _gstlearn.MeshETurbo_getMeshSize(self, imesh)

    def resetProjMatrix(self, m, db, rankZ=-1, verbose=False):
        return _gstlearn.MeshETurbo_resetProjMatrix(self, m, db, rankZ, verbose)

    def setPolarized(self, flag):
        return _gstlearn.MeshETurbo_setPolarized(self, flag)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.MeshETurbo_create(*args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.MeshETurbo_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromGrid(dbgrid, flag_polarized=False, verbose=False, mode=1):
        return _gstlearn.MeshETurbo_createFromGrid(dbgrid, flag_polarized, verbose, mode)

    @staticmethod
    def createFromGridInfo(grid, flag_polarized=False, verbose=False, mode=1):
        return _gstlearn.MeshETurbo_createFromGridInfo(grid, flag_polarized, verbose, mode)

    @staticmethod
    def createFromCova(cova, field, ratio, nbExt=0, useSel=True, flagNoStatRot=False, verbose=False):
        return _gstlearn.MeshETurbo_createFromCova(cova, field, ratio, nbExt, useSel, flagNoStatRot, verbose)

    def initFromExtend(self, *args, **kwargs):
        return _gstlearn.MeshETurbo_initFromExtend(self, *args, **kwargs)

    def initFromGridByMatrix(self, *args, **kwargs):
        return _gstlearn.MeshETurbo_initFromGridByMatrix(self, *args, **kwargs)

    def initFromGridByAngles(self, *args, **kwargs):
        return _gstlearn.MeshETurbo_initFromGridByAngles(self, *args, **kwargs)

    def initFromCova(self, cova, field, ratio, nbExt=0, useSel=True, flagNoStatRot=False, verbose=False):
        return _gstlearn.MeshETurbo_initFromCova(self, cova, field, ratio, nbExt, useSel, flagNoStatRot, verbose)

    def getGrid(self):
        return _gstlearn.MeshETurbo_getGrid(self)

    def getGridIndirect(self):
        return _gstlearn.MeshETurbo_getGridIndirect(self)

    def getMeshIndirect(self):
        return _gstlearn.MeshETurbo_getMeshIndirect(self)

    def getApexIndicesInPlace(self, i, indg):
        return _gstlearn.MeshETurbo_getApexIndicesInPlace(self, i, indg)

    def __repr__(self):
        return _gstlearn.MeshETurbo___repr__(self)

# Register MeshETurbo in _gstlearn:
_gstlearn.MeshETurbo_swigregister(MeshETurbo)
class MeshSpherical(AMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.MeshSpherical_swiginit(self, _gstlearn.new_MeshSpherical(*args))
    __swig_destroy__ = _gstlearn.delete_MeshSpherical

    def toString(self, strfmt=None):
        return _gstlearn.MeshSpherical_toString(self, strfmt)

    def getNApices(self):
        return _gstlearn.MeshSpherical_getNApices(self)

    def getNMeshes(self):
        return _gstlearn.MeshSpherical_getNMeshes(self)

    def getMeshSize(self, imesh):
        return _gstlearn.MeshSpherical_getMeshSize(self, imesh)

    def getApex(self, imesh, rank):
        return _gstlearn.MeshSpherical_getApex(self, imesh, rank)

    def getCoor(self, imesh, rank, idim):
        return _gstlearn.MeshSpherical_getCoor(self, imesh, rank, idim)

    def getApexCoor(self, i, idim):
        return _gstlearn.MeshSpherical_getApexCoor(self, i, idim)

    def getEmbeddedNDim(self):
        return _gstlearn.MeshSpherical_getEmbeddedNDim(self)

    def getEmbeddedCoorPerMesh(self, imesh, ic, coords):
        return _gstlearn.MeshSpherical_getEmbeddedCoorPerMesh(self, imesh, ic, coords)

    def getEmbeddedCoorPerApex(self, iapex, coords):
        return _gstlearn.MeshSpherical_getEmbeddedCoorPerApex(self, iapex, coords)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.MeshSpherical_createFromNF(neutralFilename, verbose)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.MeshSpherical_create(*args, **kwargs)

    def reset(self, ndim, napexpermesh, apices, meshes, byCol, verbose=False):
        return _gstlearn.MeshSpherical_reset(self, ndim, napexpermesh, apices, meshes, byCol, verbose)

    def resetProjMatrix(self, m, db, rankZ=-1, verbose=False):
        return _gstlearn.MeshSpherical_resetProjMatrix(self, m, db, rankZ, verbose)

    def getVariety(self):
        return _gstlearn.MeshSpherical_getVariety(self)

    def getApices(self):
        return _gstlearn.MeshSpherical_getApices(self)

    def getMeshes(self):
        return _gstlearn.MeshSpherical_getMeshes(self)

    def getMeshesAsVVI(self):
        return _gstlearn.MeshSpherical_getMeshesAsVVI(self)

    def __repr__(self):
        return _gstlearn.MeshSpherical___repr__(self)

# Register MeshSpherical in _gstlearn:
_gstlearn.MeshSpherical_swigregister(MeshSpherical)
class MeshSphericalExt(MeshSpherical):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.MeshSphericalExt_swiginit(self, _gstlearn.new_MeshSphericalExt(*args))
    __swig_destroy__ = _gstlearn.delete_MeshSphericalExt

    def resetFromDb(self, *args, **kwargs):
        return _gstlearn.MeshSphericalExt_resetFromDb(self, *args, **kwargs)

    @staticmethod
    def spde_mesh_load(*args, **kwargs):
        return _gstlearn.MeshSphericalExt_spde_mesh_load(*args, **kwargs)

# Register MeshSphericalExt in _gstlearn:
_gstlearn.MeshSphericalExt_swigregister(MeshSphericalExt)
class APolynomial(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_APolynomial

    def toString(self, strfmt=None):
        return _gstlearn.APolynomial_toString(self, strfmt)

    def init(self, coeffs):
        return _gstlearn.APolynomial_init(self, coeffs)

    def eval(self, x):
        return _gstlearn.APolynomial_eval(self, x)

    def getCoeffs(self):
        return _gstlearn.APolynomial_getCoeffs(self)

    def setCoeffs(self, coeffs):
        return _gstlearn.APolynomial_setCoeffs(self, coeffs)

    def getDegree(self):
        return _gstlearn.APolynomial_getDegree(self)

    def fit(self, f, _from=0., to=1., tol=1.e-5):
        return _gstlearn.APolynomial_fit(self, f, _from, to, tol)

# Register APolynomial in _gstlearn:
_gstlearn.APolynomial_swigregister(APolynomial)
class ClassicalPolynomial(APolynomial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ClassicalPolynomial_swiginit(self, _gstlearn.new_ClassicalPolynomial(*args))
    __swig_destroy__ = _gstlearn.delete_ClassicalPolynomial

    def clone(self):
        return _gstlearn.ClassicalPolynomial_clone(self)

    def eval(self, x):
        return _gstlearn.ClassicalPolynomial_eval(self, x)

# Register ClassicalPolynomial in _gstlearn:
_gstlearn.ClassicalPolynomial_swigregister(ClassicalPolynomial)

def hermitePolynomials(*args):
    return _gstlearn.hermitePolynomials(*args)

def hermiteCoefIndicator(yc, nbpoly):
    return _gstlearn.hermiteCoefIndicator(yc, nbpoly)

def hermiteCoefMetal(yc, phi):
    return _gstlearn.hermiteCoefMetal(yc, phi)

def hermiteCoefLower(y, nbpoly):
    return _gstlearn.hermiteCoefLower(y, nbpoly)

def hermiteIndicatorLower(y, nbpoly):
    return _gstlearn.hermiteIndicatorLower(y, nbpoly)

def hermiteIncompleteIntegral(yc, nbpoly):
    return _gstlearn.hermiteIncompleteIntegral(yc, nbpoly)

def hermiteLognormal(mean, sigma, nbpoly):
    return _gstlearn.hermiteLognormal(mean, sigma, nbpoly)

def hermiteSeries(an, hn):
    return _gstlearn.hermiteSeries(an, hn)

def hermiteIndicator(yc, krigest, krigstd):
    return _gstlearn.hermiteIndicator(yc, krigest, krigstd)

def hermiteIndicatorElement(yc, krigest, krigstd):
    return _gstlearn.hermiteIndicatorElement(yc, krigest, krigstd)

def hermiteIndicatorStd(yc, krigest, krigstd):
    return _gstlearn.hermiteIndicatorStd(yc, krigest, krigstd)

def hermiteIndicatorStdElement(yc, krigest, krigstd):
    return _gstlearn.hermiteIndicatorStdElement(yc, krigest, krigstd)

def hermiteMetal(yc, krigest, krigstd, phi):
    return _gstlearn.hermiteMetal(yc, krigest, krigstd, phi)

def hermiteMetalElement(yc, krigest, krigstd, phi):
    return _gstlearn.hermiteMetalElement(yc, krigest, krigstd, phi)

def hermiteMetalStd(yc, krigest, krigstd, phi):
    return _gstlearn.hermiteMetalStd(yc, krigest, krigstd, phi)

def hermiteMetalStdElement(yc, krigest, krigstd, phi):
    return _gstlearn.hermiteMetalStdElement(yc, krigest, krigstd, phi)

def hermiteCondExp(krigest, krigstd, phi):
    return _gstlearn.hermiteCondExp(krigest, krigstd, phi)

def hermiteCondExpElement(krigest, krigstd, phi):
    return _gstlearn.hermiteCondExpElement(krigest, krigstd, phi)

def hermiteCondStd(krigest, krigstd, phi):
    return _gstlearn.hermiteCondStd(krigest, krigstd, phi)

def hermiteCondStdElement(krigest, krigstd, phi):
    return _gstlearn.hermiteCondStdElement(krigest, krigstd, phi)
NBSIMU_DEF = _gstlearn.NBSIMU_DEF

def integralGaussHermite(yc, r, psi):
    return _gstlearn.integralGaussHermite(yc, r, psi)

def normalizeResults(*args):
    return _gstlearn.normalizeResults(*args)

def MCCondExp(krigest, krigstd, psi, nbsimu=1000):
    return _gstlearn.MCCondExp(krigest, krigstd, psi, nbsimu)

def MCCondExpElement(krigest, krigstd, psi, nbsimu=1000):
    return _gstlearn.MCCondExpElement(krigest, krigstd, psi, nbsimu)

def MCCondStd(krigest, krigstd, psi, nbsimu=1000):
    return _gstlearn.MCCondStd(krigest, krigstd, psi, nbsimu)

def MCCondStdElement(krigest, krigstd, psi, nbsimu=1000):
    return _gstlearn.MCCondStdElement(krigest, krigstd, psi, nbsimu)

def MCIndicator(yc, krigest, krigstd, nbsimu=1000):
    return _gstlearn.MCIndicator(yc, krigest, krigstd, nbsimu)

def MCIndicatorElement(yc, krigest, krigstd, nbsimu=1000):
    return _gstlearn.MCIndicatorElement(yc, krigest, krigstd, nbsimu)

def MCIndicatorStd(yc, krigest, krigstd, nbsimu=1000):
    return _gstlearn.MCIndicatorStd(yc, krigest, krigstd, nbsimu)

def MCIndicatorStdElement(yc, krigest, krigstd, nbsimu=1000):
    return _gstlearn.MCIndicatorStdElement(yc, krigest, krigstd, nbsimu)

def MCMetal(yc, krigest, krigstd, psi, nbsimu=1000):
    return _gstlearn.MCMetal(yc, krigest, krigstd, psi, nbsimu)

def MCMetalElement(yc, krigest, krigstd, psi, nbsimu=1000):
    return _gstlearn.MCMetalElement(yc, krigest, krigstd, psi, nbsimu)

def MCMetalStd(yc, krigest, krigstd, psi, nbsimu=1000):
    return _gstlearn.MCMetalStd(yc, krigest, krigstd, psi, nbsimu)

def MCMetalStdElement(yc, krigest, krigstd, psi, nbsimu=1000):
    return _gstlearn.MCMetalStdElement(yc, krigest, krigstd, psi, nbsimu)
class Chebychev(APolynomial):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.Chebychev_swiginit(self, _gstlearn.new_Chebychev())
    __swig_destroy__ = _gstlearn.delete_Chebychev

    def clone(self):
        return _gstlearn.Chebychev_clone(self)

    def eval(self, x):
        return _gstlearn.Chebychev_eval(self, x)

    def fit(self, f, a=0., b=1., tol=1.e-5):
        return _gstlearn.Chebychev_fit(self, f, a, b, tol)

    def init(self, ncMax=10001, nDisc=100, a=0., b=1., verbose=False):
        return _gstlearn.Chebychev_init(self, ncMax, nDisc, a, b, verbose)

    @staticmethod
    def createFromCoeffs(coeffs):
        return _gstlearn.Chebychev_createFromCoeffs(coeffs)

    def setCoeffs(self, coeffs):
        return _gstlearn.Chebychev_setCoeffs(self, coeffs)

    def getNcMax(self):
        return _gstlearn.Chebychev_getNcMax(self)

    def getNDisc(self):
        return _gstlearn.Chebychev_getNDisc(self)

    def getA(self):
        return _gstlearn.Chebychev_getA(self)

    def getB(self):
        return _gstlearn.Chebychev_getB(self)

    def getVerbose(self):
        return _gstlearn.Chebychev_getVerbose(self)

    def setA(self, a):
        return _gstlearn.Chebychev_setA(self, a)

    def setB(self, b):
        return _gstlearn.Chebychev_setB(self, b)

    def setNcMax(self, ncMax):
        return _gstlearn.Chebychev_setNcMax(self, ncMax)

    def setNDisc(self, nDisc):
        return _gstlearn.Chebychev_setNDisc(self, nDisc)

    def setVerbose(self, verbose):
        return _gstlearn.Chebychev_setVerbose(self, verbose)

    def fit2(self, f, a=0., b=1., tol=1.e-5):
        return _gstlearn.Chebychev_fit2(self, f, a, b, tol)

# Register Chebychev in _gstlearn:
_gstlearn.Chebychev_swigregister(Chebychev)
class CGParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CGParam_swiginit(self, _gstlearn.new_CGParam(*args))
    __swig_destroy__ = _gstlearn.delete_CGParam

    def setEps(self, eps):
        return _gstlearn.CGParam_setEps(self, eps)

    def setNIterMax(self, nIterMax):
        return _gstlearn.CGParam_setNIterMax(self, nIterMax)

    def setX0(self, x0):
        return _gstlearn.CGParam_setX0(self, x0)

    def setPrecond(self, precond, status):
        return _gstlearn.CGParam_setPrecond(self, precond, status)

    def setPrecondStatus(self, precondStatus):
        return _gstlearn.CGParam_setPrecondStatus(self, precondStatus)

    def getEps(self):
        return _gstlearn.CGParam_getEps(self)

    def getNIterMax(self):
        return _gstlearn.CGParam_getNIterMax(self)

    def getPrecond(self):
        return _gstlearn.CGParam_getPrecond(self)

    def getX0(self, *args):
        return _gstlearn.CGParam_getX0(self, *args)

    def getPrecondStatus(self):
        return _gstlearn.CGParam_getPrecondStatus(self)

# Register CGParam in _gstlearn:
_gstlearn.CGParam_swigregister(CGParam)
class LogStats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.LogStats_swiginit(self, _gstlearn.new_LogStats(*args))
    __swig_destroy__ = _gstlearn.delete_LogStats

    def incrementStatsDirect(self, time):
        return _gstlearn.LogStats_incrementStatsDirect(self, time)

    def incrementStatsInverseCG(self, niter, time):
        return _gstlearn.LogStats_incrementStatsInverseCG(self, niter, time)

    def incrementStatsInverseChol(self, time):
        return _gstlearn.LogStats_incrementStatsInverseChol(self, time)

    def incrementStatsInversePoly(self, time):
        return _gstlearn.LogStats_incrementStatsInversePoly(self, time)

    def incrementStatsSimulate(self, time):
        return _gstlearn.LogStats_incrementStatsSimulate(self, time)

    def incrementStatsCholesky(self, time):
        return _gstlearn.LogStats_incrementStatsCholesky(self, time)

    def statsShow(self):
        return _gstlearn.LogStats_statsShow(self)

    def mustShowStats(self, mustPrint):
        return _gstlearn.LogStats_mustShowStats(self, mustPrint)

    def isMustPrint(self):
        return _gstlearn.LogStats_isMustPrint(self)

# Register LogStats in _gstlearn:
_gstlearn.LogStats_swigregister(LogStats)
class ALinearOpMulti(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ALinearOpMulti

    def initLk(self, inv, outv):
        return _gstlearn.ALinearOpMulti_initLk(self, inv, outv)

    def sizes(self):
        return _gstlearn.ALinearOpMulti_sizes(self)

    def size(self, arg2):
        return _gstlearn.ALinearOpMulti_size(self, arg2)

    def setNIterMax(self, nitermax):
        return _gstlearn.ALinearOpMulti_setNIterMax(self, nitermax)

    def setNIterRestart(self, niterrestart):
        return _gstlearn.ALinearOpMulti_setNIterRestart(self, niterrestart)

    def setEps(self, eps):
        return _gstlearn.ALinearOpMulti_setEps(self, eps)

    def setPrecond(self, precond, status):
        return _gstlearn.ALinearOpMulti_setPrecond(self, precond, status)

    def getLogStats(self):
        return _gstlearn.ALinearOpMulti_getLogStats(self)

    def prepare(self):
        return _gstlearn.ALinearOpMulti_prepare(self)

    def setUserInitialValue(self, b):
        return _gstlearn.ALinearOpMulti_setUserInitialValue(self, b)
    _temp = property(_gstlearn.ALinearOpMulti__temp_get, _gstlearn.ALinearOpMulti__temp_set)
    _p = property(_gstlearn.ALinearOpMulti__p_get, _gstlearn.ALinearOpMulti__p_set)
    _z = property(_gstlearn.ALinearOpMulti__z_get, _gstlearn.ALinearOpMulti__z_set)
    _nb = property(_gstlearn.ALinearOpMulti__nb_get, _gstlearn.ALinearOpMulti__nb_set)

# Register ALinearOpMulti in _gstlearn:
_gstlearn.ALinearOpMulti_swigregister(ALinearOpMulti)
class ScaleOp(ALinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, n, scale=1.):
        _gstlearn.ScaleOp_swiginit(self, _gstlearn.new_ScaleOp(n, scale))
    __swig_destroy__ = _gstlearn.delete_ScaleOp

    def getSize(self):
        return _gstlearn.ScaleOp_getSize(self)

# Register ScaleOp in _gstlearn:
_gstlearn.ScaleOp_swigregister(ScaleOp)
class AShiftOp(ICloneable, ALinearOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def prodLambda(self, x, y, power):
        return _gstlearn.AShiftOp_prodLambda(self, x, y, power)
    __swig_destroy__ = _gstlearn.delete_AShiftOp

    def getMaxEigenValue(self):
        return _gstlearn.AShiftOp_getMaxEigenValue(self)

    def normalizeLambdaBySills(self, arg2):
        return _gstlearn.AShiftOp_normalizeLambdaBySills(self, arg2)

    def getLambdas(self):
        return _gstlearn.AShiftOp_getLambdas(self)

    def getLambda(self, iapex):
        return _gstlearn.AShiftOp_getLambda(self, iapex)

    @staticmethod
    def cloneAndCast(*args):
        return _gstlearn.AShiftOp_cloneAndCast(*args)

    def getSize(self):
        return _gstlearn.AShiftOp_getSize(self)

# Register AShiftOp in _gstlearn:
_gstlearn.AShiftOp_swigregister(AShiftOp)
class ShiftOpStencil(AShiftOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShiftOpStencil_swiginit(self, _gstlearn.new_ShiftOpStencil(*args))
    __swig_destroy__ = _gstlearn.delete_ShiftOpStencil

    def clone(self):
        return _gstlearn.ShiftOpStencil_clone(self)

    def normalizeLambdaBySills(self, mesh):
        return _gstlearn.ShiftOpStencil_normalizeLambdaBySills(self, mesh)

    def multiplyByValueAndAddDiagonal(self, v1=1., v2=0.):
        return _gstlearn.ShiftOpStencil_multiplyByValueAndAddDiagonal(self, v1, v2)

    def resetModif(self):
        return _gstlearn.ShiftOpStencil_resetModif(self)

    def getMaxEigenValue(self):
        return _gstlearn.ShiftOpStencil_getMaxEigenValue(self)

    def getLambda(self, iapex):
        return _gstlearn.ShiftOpStencil_getLambda(self, iapex)

# Register ShiftOpStencil in _gstlearn:
_gstlearn.ShiftOpStencil_swigregister(ShiftOpStencil)
class ShiftOpMatrix(AShiftOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ShiftOpMatrix_swiginit(self, _gstlearn.new_ShiftOpMatrix(*args))
    __swig_destroy__ = _gstlearn.delete_ShiftOpMatrix

    def clone(self):
        return _gstlearn.ShiftOpMatrix_clone(self)

    def normalizeLambdaBySills(self, mesh):
        return _gstlearn.ShiftOpMatrix_normalizeLambdaBySills(self, mesh)

    @staticmethod
    def create(amesh, cova, dbout=None, verbose=False):
        return _gstlearn.ShiftOpMatrix_create(amesh, cova, dbout, verbose)

    @staticmethod
    def createFromSparse(S, TildeC, Lambda, cova, verbose=False):
        return _gstlearn.ShiftOpMatrix_createFromSparse(S, TildeC, Lambda, cova, verbose)

    def initFromMesh(self, amesh, cova, dbout=None, flagAdvection=False, verbose=False):
        return _gstlearn.ShiftOpMatrix_initFromMesh(self, amesh, cova, dbout, flagAdvection, verbose)

    def initGradFromMesh(self, amesh, cova, verbose=False, tol=1.e-10):
        return _gstlearn.ShiftOpMatrix_initGradFromMesh(self, amesh, cova, verbose, tol)

    def initFromCS(self, S, TildeC, Lambda, cova, verbose=False):
        return _gstlearn.ShiftOpMatrix_initFromCS(self, S, TildeC, Lambda, cova, verbose)

    def getNDim(self):
        return _gstlearn.ShiftOpMatrix_getNDim(self)

    def getNCovAnisoGradParam(self):
        return _gstlearn.ShiftOpMatrix_getNCovAnisoGradParam(self)

    def prodTildeC(self, x, y, power):
        return _gstlearn.ShiftOpMatrix_prodTildeC(self, x, y, power)

    def prodLambdaOnSqrtTildeC(self, inv, outv, puis=2):
        return _gstlearn.ShiftOpMatrix_prodLambdaOnSqrtTildeC(self, inv, outv, puis)

    def getMaxEigenValue(self):
        return _gstlearn.ShiftOpMatrix_getMaxEigenValue(self)

    def getS(self):
        return _gstlearn.ShiftOpMatrix_getS(self)

    def getTildeCGrad(self, iapex, igparam):
        return _gstlearn.ShiftOpMatrix_getTildeCGrad(self, iapex, igparam)

    def getSGrad(self, iapex, igparam):
        return _gstlearn.ShiftOpMatrix_getSGrad(self, iapex, igparam)

    def getTildeC(self):
        return _gstlearn.ShiftOpMatrix_getTildeC(self)

    def getLambdaGrads(self, idim):
        return _gstlearn.ShiftOpMatrix_getLambdaGrads(self, idim)

    def getLambdaGrad(self, idim, iapex):
        return _gstlearn.ShiftOpMatrix_getLambdaGrad(self, idim, iapex)

    def getSGradAddress(self, iapex, igparam):
        return _gstlearn.ShiftOpMatrix_getSGradAddress(self, iapex, igparam)

    def getLambdaGradSize(self):
        return _gstlearn.ShiftOpMatrix_getLambdaGradSize(self)

# Register ShiftOpMatrix in _gstlearn:
_gstlearn.ShiftOpMatrix_swigregister(ShiftOpMatrix)
class PrecisionOp(ASimulable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.PrecisionOp_swiginit(self, _gstlearn.new_PrecisionOp(*args))
    __swig_destroy__ = _gstlearn.delete_PrecisionOp

    def getRangeEigenVal(self, ndiscr=100):
        return _gstlearn.PrecisionOp_getRangeEigenVal(self, ndiscr)

    @staticmethod
    def createFromShiftOp(shiftop=None, cova=None, verbose=False):
        return _gstlearn.PrecisionOp_createFromShiftOp(shiftop, cova, verbose)

    @staticmethod
    def create(mesh, cova, stencil=False, verbose=False):
        return _gstlearn.PrecisionOp_create(mesh, cova, stencil, verbose)

    def reset(self, shiftop, cova=None, verbose=False):
        return _gstlearn.PrecisionOp_reset(self, shiftop, cova, verbose)

    def getLogDeterminant(self, nbsimu=1):
        return _gstlearn.PrecisionOp_getLogDeterminant(self, nbsimu)

    def evalCov(self, imesh):
        return _gstlearn.PrecisionOp_evalCov(self, imesh)

    def simulateOne(self):
        return _gstlearn.PrecisionOp_simulateOne(self)

    def getSize(self):
        return _gstlearn.PrecisionOp_getSize(self)

    def getTraining(self):
        return _gstlearn.PrecisionOp_getTraining(self)

    def setTraining(self, tr):
        return _gstlearn.PrecisionOp_setTraining(self, tr)

    def getShiftOp(self):
        return _gstlearn.PrecisionOp_getShiftOp(self)

    def getPolyCoeffs(self, power):
        return _gstlearn.PrecisionOp_getPolyCoeffs(self, power)

    def setPolynomialFromPoly(self, polynomial):
        return _gstlearn.PrecisionOp_setPolynomialFromPoly(self, polynomial)

    def isCovaDefined(self):
        return _gstlearn.PrecisionOp_isCovaDefined(self)

    def getCoeffs(self):
        return _gstlearn.PrecisionOp_getCoeffs(self)

    def extractDiag(self):
        return _gstlearn.PrecisionOp_extractDiag(self)

# Register PrecisionOp in _gstlearn:
_gstlearn.PrecisionOp_swigregister(PrecisionOp)
class PrecisionOpMatrix(PrecisionOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.PrecisionOpMatrix_swiginit(self, _gstlearn.new_PrecisionOpMatrix(*args))
    __swig_destroy__ = _gstlearn.delete_PrecisionOpMatrix

    def getLogDeterminant(self, nbsimu=1):
        return _gstlearn.PrecisionOpMatrix_getLogDeterminant(self, nbsimu)

    def extractDiag(self):
        return _gstlearn.PrecisionOpMatrix_extractDiag(self)

    def getQ(self):
        return _gstlearn.PrecisionOpMatrix_getQ(self)

# Register PrecisionOpMatrix in _gstlearn:
_gstlearn.PrecisionOpMatrix_swigregister(PrecisionOpMatrix)
class SPDEOp(ASimulable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pop=None, proj=None, invNoise=None, noiseToDelete=False):
        _gstlearn.SPDEOp_swiginit(self, _gstlearn.new_SPDEOp(pop, proj, invNoise, noiseToDelete))
    __swig_destroy__ = _gstlearn.delete_SPDEOp

    def getSize(self):
        return _gstlearn.SPDEOp_getSize(self)

    def kriging(self, dat):
        return _gstlearn.SPDEOp_kriging(self, dat)

    def krigingWithGuess(self, dat, guess):
        return _gstlearn.SPDEOp_krigingWithGuess(self, dat, guess)

    def setMaxIterations(self, n):
        return _gstlearn.SPDEOp_setMaxIterations(self, n)

    def setTolerance(self, tol):
        return _gstlearn.SPDEOp_setTolerance(self, tol)

    def getIterations(self):
        return _gstlearn.SPDEOp_getIterations(self)

    def getError(self):
        return _gstlearn.SPDEOp_getError(self)

    def computeDriftCoeffs(self, Z, drifts):
        return _gstlearn.SPDEOp_computeDriftCoeffs(self, Z, drifts)

# Register SPDEOp in _gstlearn:
_gstlearn.SPDEOp_swigregister(SPDEOp)
class SPDEOpMatrix(SPDEOp):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, pop=None, A=None, invNoise=None):
        _gstlearn.SPDEOpMatrix_swiginit(self, _gstlearn.new_SPDEOpMatrix(pop, A, invNoise))
    __swig_destroy__ = _gstlearn.delete_SPDEOpMatrix

# Register SPDEOpMatrix in _gstlearn:
_gstlearn.SPDEOpMatrix_swigregister(SPDEOpMatrix)
TO_ndim = _gstlearn.TO_ndim
TO_ncorner = _gstlearn.TO_ncorner
TO_npercell = _gstlearn.TO_npercell
class TripletND(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    rows = property(_gstlearn.TripletND_rows_get, _gstlearn.TripletND_rows_set)
    cols = property(_gstlearn.TripletND_cols_get, _gstlearn.TripletND_cols_set)
    values = property(_gstlearn.TripletND_values_get, _gstlearn.TripletND_values_set)

    def __init__(self):
        _gstlearn.TripletND_swiginit(self, _gstlearn.new_TripletND())
    __swig_destroy__ = _gstlearn.delete_TripletND

# Register TripletND in _gstlearn:
_gstlearn.TripletND_swigregister(TripletND)
class TurboOptimizer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.TurboOptimizer_swiginit(self, _gstlearn.new_TurboOptimizer(*args))
    __swig_destroy__ = _gstlearn.delete_TurboOptimizer

    def setGrid(self, nx=2, ny=2, dx=1., dy=1., x0=0., y0=0.):
        return _gstlearn.TurboOptimizer_setGrid(self, nx, ny, dx, dy, x0, y0)

    def setModelByRange(self, range=1., sill=1., param=1):
        return _gstlearn.TurboOptimizer_setModelByRange(self, range, sill, param)

    def setModelByScale(self, scale=1., sill=1., param=1):
        return _gstlearn.TurboOptimizer_setModelByScale(self, scale, sill, param)

    def setEnviron(self, flagOne=1):
        return _gstlearn.TurboOptimizer_setEnviron(self, flagOne)

    def run(self, verbose=False):
        return _gstlearn.TurboOptimizer_run(self, verbose)

    def getBlin(self):
        return _gstlearn.TurboOptimizer_getBlin(self)

    def getTildeC(self):
        return _gstlearn.TurboOptimizer_getTildeC(self)

    def getLambda(self):
        return _gstlearn.TurboOptimizer_getLambda(self)

    def getS(self):
        return _gstlearn.TurboOptimizer_getS(self)

    def getQ(self):
        return _gstlearn.TurboOptimizer_getQ(self)

    def interpolate(self, x, y):
        return _gstlearn.TurboOptimizer_interpolate(self, x, y)

    def interpolate_rows(self, x, y):
        return _gstlearn.TurboOptimizer_interpolate_rows(self, x, y)

    def interpolate_cols(self, x, y):
        return _gstlearn.TurboOptimizer_interpolate_cols(self, x, y)

    def interpolate_values(self, x, y):
        return _gstlearn.TurboOptimizer_interpolate_values(self, x, y)

    def getQ_rows(self):
        return _gstlearn.TurboOptimizer_getQ_rows(self)

    def getQ_cols(self):
        return _gstlearn.TurboOptimizer_getQ_cols(self)

    def getQ_values(self):
        return _gstlearn.TurboOptimizer_getQ_values(self)

    def printClass(self):
        return _gstlearn.TurboOptimizer_printClass(self)

    def printMeshes(self):
        return _gstlearn.TurboOptimizer_printMeshes(self)

    def printS(self, nper_batch=5, row_begin=0, row_end=0, col_begin=0, col_end=0):
        return _gstlearn.TurboOptimizer_printS(self, nper_batch, row_begin, row_end, col_begin, col_end)

    def printQ(self, nper_batch=5, row_begin=0, row_end=0, col_begin=0, col_end=0):
        return _gstlearn.TurboOptimizer_printQ(self, nper_batch, row_begin, row_end, col_begin, col_end)

    def getHalf(self):
        return _gstlearn.TurboOptimizer_getHalf(self)

    def getCenter(self):
        return _gstlearn.TurboOptimizer_getCenter(self)

    def getNxred(self):
        return _gstlearn.TurboOptimizer_getNxred(self)

    def getPoncif(self):
        return _gstlearn.TurboOptimizer_getPoncif(self)

    def getTildeCT(self):
        return _gstlearn.TurboOptimizer_getTildeCT(self)

    def getLambdaT(self):
        return _gstlearn.TurboOptimizer_getLambdaT(self)

    def getQT(self):
        return _gstlearn.TurboOptimizer_getQT(self)

    def getST(self):
        return _gstlearn.TurboOptimizer_getST(self)

# Register TurboOptimizer in _gstlearn:
_gstlearn.TurboOptimizer_swigregister(TurboOptimizer)
class IProj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IProj:
            _self = None
        else:
            _self = self
        _gstlearn.IProj_swiginit(self, _gstlearn.new_IProj(_self, ))
    __swig_destroy__ = _gstlearn.delete_IProj

    def point2mesh(self, inv, outv):
        return _gstlearn.IProj_point2mesh(self, inv, outv)

    def mesh2point(self, inv, outv):
        return _gstlearn.IProj_mesh2point(self, inv, outv)

    def getApexNumber(self):
        return _gstlearn.IProj_getApexNumber(self)

    def getPointNumber(self):
        return _gstlearn.IProj_getPointNumber(self)
    def __disown__(self):
        self.this.disown()
        _gstlearn.disown_IProj(self)
        return weakref.proxy(self)

# Register IProj in _gstlearn:
_gstlearn.IProj_swigregister(IProj)
class ProjMatrix(IProj, MatrixSparse):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.ProjMatrix_swiginit(self, _gstlearn.new_ProjMatrix(*args))
    __swig_destroy__ = _gstlearn.delete_ProjMatrix

    def toTL(self):
        return _gstlearn.ProjMatrix_toTL(self)

    def clone(self):
        return _gstlearn.ProjMatrix_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.ProjMatrix_toString(self, strfmt)

    def getApexNumber(self):
        return _gstlearn.ProjMatrix_getApexNumber(self)

    def getPointNumber(self):
        return _gstlearn.ProjMatrix_getPointNumber(self)

    @staticmethod
    def create(db, a_mesh, rankZ=-1, verbose=False):
        return _gstlearn.ProjMatrix_create(db, a_mesh, rankZ, verbose)

    def resetFromMeshAndDb(self, db, a_mesh, rankZ=-1, verbose=False):
        return _gstlearn.ProjMatrix_resetFromMeshAndDb(self, db, a_mesh, rankZ, verbose)

    def __repr__(self):
        return _gstlearn.ProjMatrix___repr__(self)

# Register ProjMatrix in _gstlearn:
_gstlearn.ProjMatrix_swigregister(ProjMatrix)
class ProjMulti(IProj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, projs, silent=False):
        _gstlearn.ProjMulti_swiginit(self, _gstlearn.new_ProjMulti(projs, silent))

    def getApexNumber(self):
        return _gstlearn.ProjMulti_getApexNumber(self)

    def getPointNumber(self):
        return _gstlearn.ProjMulti_getPointNumber(self)

    def getNVariable(self):
        return _gstlearn.ProjMulti_getNVariable(self)

    def getNLatent(self):
        return _gstlearn.ProjMulti_getNLatent(self)
    __swig_destroy__ = _gstlearn.delete_ProjMulti

    def empty(self):
        return _gstlearn.ProjMulti_empty(self)

# Register ProjMulti in _gstlearn:
_gstlearn.ProjMulti_swigregister(ProjMulti)
class ProjMultiMatrix(ProjMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, proj, toClean=False, silent=False):
        _gstlearn.ProjMultiMatrix_swiginit(self, _gstlearn.new_ProjMultiMatrix(proj, toClean, silent))
    __swig_destroy__ = _gstlearn.delete_ProjMultiMatrix

    @staticmethod
    def create(vectproj, nvariable):
        return _gstlearn.ProjMultiMatrix_create(vectproj, nvariable)

    @staticmethod
    def createFromDbAndMeshes(db, meshes, verbose=False):
        return _gstlearn.ProjMultiMatrix_createFromDbAndMeshes(db, meshes, verbose)

    def getProj(self):
        return _gstlearn.ProjMultiMatrix_getProj(self)

# Register ProjMultiMatrix in _gstlearn:
_gstlearn.ProjMultiMatrix_swigregister(ProjMultiMatrix)
class PrecisionOpMulti(AStringable, ASimulable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        _gstlearn.PrecisionOpMulti_swiginit(self, _gstlearn.new_PrecisionOpMulti(*args, **kwargs))
    __swig_destroy__ = _gstlearn.delete_PrecisionOpMulti

    def getSize(self):
        return _gstlearn.PrecisionOpMulti_getSize(self)

    def toString(self, strfmt=None):
        return _gstlearn.PrecisionOpMulti_toString(self, strfmt)

    def __repr__(self):
        return _gstlearn.PrecisionOpMulti___repr__(self)

# Register PrecisionOpMulti in _gstlearn:
_gstlearn.PrecisionOpMulti_swigregister(PrecisionOpMulti)
class PrecisionOpMultiMatrix(PrecisionOpMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _gstlearn.PrecisionOpMultiMatrix_swiginit(self, _gstlearn.new_PrecisionOpMultiMatrix(*args, **kwargs))
    __swig_destroy__ = _gstlearn.delete_PrecisionOpMultiMatrix

    def getQ(self):
        return _gstlearn.PrecisionOpMultiMatrix_getQ(self)

# Register PrecisionOpMultiMatrix in _gstlearn:
_gstlearn.PrecisionOpMultiMatrix_swigregister(PrecisionOpMultiMatrix)
class PrecisionOpMultiConditional(ALinearOpMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.PrecisionOpMultiConditional_swiginit(self, _gstlearn.new_PrecisionOpMultiConditional())
    __swig_destroy__ = _gstlearn.delete_PrecisionOpMultiConditional

    def makeReady(self):
        return _gstlearn.PrecisionOpMultiConditional_makeReady(self)

    def push_back(self, pmatElem, projDataElem=None):
        return _gstlearn.PrecisionOpMultiConditional_push_back(self, pmatElem, projDataElem)

    def computeLogDetOp(self, nbsimu=1):
        return _gstlearn.PrecisionOpMultiConditional_computeLogDetOp(self, nbsimu)

    def sizes(self):
        return _gstlearn.PrecisionOpMultiConditional_sizes(self)

    def size(self, i):
        return _gstlearn.PrecisionOpMultiConditional_size(self, i)

    def getAllVarianceData(self):
        return _gstlearn.PrecisionOpMultiConditional_getAllVarianceData(self)

    def getVarianceData(self, iech):
        return _gstlearn.PrecisionOpMultiConditional_getVarianceData(self, iech)

    def setVarianceData(self, nugg):
        return _gstlearn.PrecisionOpMultiConditional_setVarianceData(self, nugg)

    def setVarianceDataVector(self, nugg):
        return _gstlearn.PrecisionOpMultiConditional_setVarianceDataVector(self, nugg)

    def computeRangeEigenVal(self):
        return _gstlearn.PrecisionOpMultiConditional_computeRangeEigenVal(self)

    def rangeEigenValQ(self):
        return _gstlearn.PrecisionOpMultiConditional_rangeEigenValQ(self)

    def getMaxEigenValProj(self):
        return _gstlearn.PrecisionOpMultiConditional_getMaxEigenValProj(self)

    def sumLogVar(self):
        return _gstlearn.PrecisionOpMultiConditional_sumLogVar(self)

    def computeLogDetQ(self, nbsimu=1):
        return _gstlearn.PrecisionOpMultiConditional_computeLogDetQ(self, nbsimu)

    def computeTotalLogDet(self, nbsimu=1):
        return _gstlearn.PrecisionOpMultiConditional_computeTotalLogDet(self, nbsimu)

    def preparePoly(self, logPoly):
        return _gstlearn.PrecisionOpMultiConditional_preparePoly(self, logPoly)

    def getProjMatrix(self, i=0):
        return _gstlearn.PrecisionOpMultiConditional_getProjMatrix(self, i)

    def getMultiPrecisionOp(self, i=0):
        return _gstlearn.PrecisionOpMultiConditional_getMultiPrecisionOp(self, i)

    def mustShowStats(self, status):
        return _gstlearn.PrecisionOpMultiConditional_mustShowStats(self, status)

    def computeCoeffs(self, Y, X):
        return _gstlearn.PrecisionOpMultiConditional_computeCoeffs(self, Y, X)

# Register PrecisionOpMultiConditional in _gstlearn:
_gstlearn.PrecisionOpMultiConditional_swigregister(PrecisionOpMultiConditional)
class ProjConvolution(IProj):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _gstlearn.ProjConvolution_swiginit(self, _gstlearn.new_ProjConvolution(*args, **kwargs))
    __swig_destroy__ = _gstlearn.delete_ProjConvolution

    def getApexNumber(self):
        return _gstlearn.ProjConvolution_getApexNumber(self)

    def getPointNumber(self):
        return _gstlearn.ProjConvolution_getPointNumber(self)

    def getResolutionGrid(self):
        return _gstlearn.ProjConvolution_getResolutionGrid(self)

    def getAProjHoriz(self):
        return _gstlearn.ProjConvolution_getAProjHoriz(self)

    def getConvolution(self):
        return _gstlearn.ProjConvolution_getConvolution(self)

    def getShiftVector(self):
        return _gstlearn.ProjConvolution_getShiftVector(self)

# Register ProjConvolution in _gstlearn:
_gstlearn.ProjConvolution_swigregister(ProjConvolution)
class IOptimCost(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_IOptimCost

    def calculateGradient(self, indic, sval, normgrad):
        return _gstlearn.IOptimCost_calculateGradient(self, indic, sval, normgrad)

# Register IOptimCost in _gstlearn:
_gstlearn.IOptimCost_swigregister(IOptimCost)
class OptimCostBinary(IOptimCost):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.OptimCostBinary_swiginit(self, _gstlearn.new_OptimCostBinary(*args))
    __swig_destroy__ = _gstlearn.delete_OptimCostBinary

    def reset(self, *args, **kwargs):
        return _gstlearn.OptimCostBinary_reset(self, *args, **kwargs)

    def minimize(self, indic, verbose=False, maxiter=100, eps=5.e-4):
        return _gstlearn.OptimCostBinary_minimize(self, indic, verbose, maxiter, eps)

    def calculateGradient(self, indic, _lambda, out):
        return _gstlearn.OptimCostBinary_calculateGradient(self, indic, _lambda, out)

    def setMeanProportion(self, meanprop):
        return _gstlearn.OptimCostBinary_setMeanProportion(self, meanprop)

    @staticmethod
    def setPreCondParams(chebncmax=10001, chebtol=5.e-3):
        return _gstlearn.OptimCostBinary_setPreCondParams(chebncmax, chebtol)

    def isInitialized(self):
        return _gstlearn.OptimCostBinary_isInitialized(self)

    def getNPoint(self):
        return _gstlearn.OptimCostBinary_getNPoint(self)

    def getNVertex(self):
        return _gstlearn.OptimCostBinary_getNVertex(self)

    def toggleSeismic(self, status):
        return _gstlearn.OptimCostBinary_toggleSeismic(self, status)

# Register OptimCostBinary in _gstlearn:
_gstlearn.OptimCostBinary_swigregister(OptimCostBinary)
class OptimCostColored(OptimCostBinary):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.OptimCostColored_swiginit(self, _gstlearn.new_OptimCostColored(*args))
    __swig_destroy__ = _gstlearn.delete_OptimCostColored

    def reset(self, *args, **kwargs):
        return _gstlearn.OptimCostColored_reset(self, *args, **kwargs)

    def minimize(self, *args, **kwargs):
        return _gstlearn.OptimCostColored_minimize(self, *args, **kwargs)

    def initSplit(self, nfacies, verbose=False):
        return _gstlearn.OptimCostColored_initSplit(self, nfacies, verbose)

    def printSplits(self, *args, **kwargs):
        return _gstlearn.OptimCostColored_printSplits(self, *args, **kwargs)

    def setMeanProps(self, meanProps):
        return _gstlearn.OptimCostColored_setMeanProps(self, meanProps)

    def setSplits(self, splits):
        return _gstlearn.OptimCostColored_setSplits(self, splits)

# Register OptimCostColored in _gstlearn:
_gstlearn.OptimCostColored_swigregister(OptimCostColored)
class MatrixSquareSymmetricSim(ASimulable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, m, inverse=True):
        _gstlearn.MatrixSquareSymmetricSim_swiginit(self, _gstlearn.new_MatrixSquareSymmetricSim(m, inverse))
    __swig_destroy__ = _gstlearn.delete_MatrixSquareSymmetricSim

    def getMatrix(self):
        return _gstlearn.MatrixSquareSymmetricSim_getMatrix(self)

    def getSize(self):
        return _gstlearn.MatrixSquareSymmetricSim_getSize(self)

    def isEmpty(self):
        return _gstlearn.MatrixSquareSymmetricSim_isEmpty(self)

    def toTL(self):
        return _gstlearn.MatrixSquareSymmetricSim_toTL(self)

# Register MatrixSquareSymmetricSim in _gstlearn:
_gstlearn.MatrixSquareSymmetricSim_swigregister(MatrixSquareSymmetricSim)
class ANeigh(ASpaceObject, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ANeigh

    def isConsistent(self, space):
        return _gstlearn.ANeigh_isConsistent(self, space)

    def attach(self, dbin, dbout):
        return _gstlearn.ANeigh_attach(self, dbin, dbout)

    def getNeigh(self, iech_out, ranks):
        return _gstlearn.ANeigh_getNeigh(self, iech_out, ranks)

    def getMaxSampleNumber(self, db):
        return _gstlearn.ANeigh_getMaxSampleNumber(self, db)

    def hasChanged(self, iech_out):
        return _gstlearn.ANeigh_hasChanged(self, iech_out)

    def summary(self, iech_out):
        return _gstlearn.ANeigh_summary(self, iech_out)

    def getType(self):
        return _gstlearn.ANeigh_getType(self)

    def getFlagContinuous(self):
        return _gstlearn.ANeigh_getFlagContinuous(self)

    def select(self, iech_out, ranks):
        return _gstlearn.ANeigh_select(self, iech_out, ranks)

    def isUnchanged(self):
        return _gstlearn.ANeigh_isUnchanged(self)

    def setIsChanged(self, status=False):
        return _gstlearn.ANeigh_setIsChanged(self, status)

    def reset(self):
        return _gstlearn.ANeigh_reset(self)

    def getFlagXvalid(self):
        return _gstlearn.ANeigh_getFlagXvalid(self)

    def getFlagKFold(self):
        return _gstlearn.ANeigh_getFlagKFold(self)

    def setFlagXvalid(self, flagXvalid):
        return _gstlearn.ANeigh_setFlagXvalid(self, flagXvalid)

    def setFlagKFold(self, flagKFold):
        return _gstlearn.ANeigh_setFlagKFold(self, flagKFold)

    def setFlagSimu(self, flagSimu):
        return _gstlearn.ANeigh_setFlagSimu(self, flagSimu)

    def setRankColCok(self, rankColCok):
        return _gstlearn.ANeigh_setRankColCok(self, rankColCok)

    def setBallSearch(self, status, leaf_size=10):
        return _gstlearn.ANeigh_setBallSearch(self, status, leaf_size)

    def attachBall(self, dist_function=None):
        return _gstlearn.ANeigh_attachBall(self, dist_function)

# Register ANeigh in _gstlearn:
_gstlearn.ANeigh_swigregister(ANeigh)
class NeighUnique(ANeigh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighUnique_swiginit(self, _gstlearn.new_NeighUnique(*args))
    __swig_destroy__ = _gstlearn.delete_NeighUnique

    def getNeigh(self, iech_out, ranks):
        return _gstlearn.NeighUnique_getNeigh(self, iech_out, ranks)

    def getMaxSampleNumber(self, db):
        return _gstlearn.NeighUnique_getMaxSampleNumber(self, db)

    def hasChanged(self, iech_out):
        return _gstlearn.NeighUnique_hasChanged(self, iech_out)

    def getType(self):
        return _gstlearn.NeighUnique_getType(self)

    def toString(self, strfmt=None):
        return _gstlearn.NeighUnique_toString(self, strfmt)

    @staticmethod
    def create(flag_xvalid=False, space=None):
        return _gstlearn.NeighUnique_create(flag_xvalid, space)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.NeighUnique_createFromNF(neutralFilename, verbose)

    def __repr__(self):
        return _gstlearn.NeighUnique___repr__(self)

# Register NeighUnique in _gstlearn:
_gstlearn.NeighUnique_swigregister(NeighUnique)
class NeighImage(ANeigh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighImage_swiginit(self, _gstlearn.new_NeighImage(*args))
    __swig_destroy__ = _gstlearn.delete_NeighImage

    def getNeigh(self, iech_out, ranks):
        return _gstlearn.NeighImage_getNeigh(self, iech_out, ranks)

    def getMaxSampleNumber(self, db):
        return _gstlearn.NeighImage_getMaxSampleNumber(self, db)

    def hasChanged(self, iech_out):
        return _gstlearn.NeighImage_hasChanged(self, iech_out)

    def getType(self):
        return _gstlearn.NeighImage_getType(self)

    def toString(self, strfmt=None):
        return _gstlearn.NeighImage_toString(self, strfmt)

    @staticmethod
    def create(image, skip=0, space=None):
        return _gstlearn.NeighImage_create(image, skip, space)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.NeighImage_createFromNF(neutralFilename, verbose)

    def getSkip(self):
        return _gstlearn.NeighImage_getSkip(self)

    def getImageRadius(self, *args):
        return _gstlearn.NeighImage_getImageRadius(self, *args)

    def setImageRadius(self, imageRadius):
        return _gstlearn.NeighImage_setImageRadius(self, imageRadius)

    def setSkip(self, skip):
        return _gstlearn.NeighImage_setSkip(self, skip)

    def __repr__(self):
        return _gstlearn.NeighImage___repr__(self)

# Register NeighImage in _gstlearn:
_gstlearn.NeighImage_swigregister(NeighImage)
class NeighMoving(ANeigh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighMoving_swiginit(self, _gstlearn.new_NeighMoving(*args))
    __swig_destroy__ = _gstlearn.delete_NeighMoving

    def attach(self, dbin, dbout=None):
        return _gstlearn.NeighMoving_attach(self, dbin, dbout)

    def getNeigh(self, iech_out, ranks):
        return _gstlearn.NeighMoving_getNeigh(self, iech_out, ranks)

    def hasChanged(self, iech_out):
        return _gstlearn.NeighMoving_hasChanged(self, iech_out)

    def summary(self, iech_out):
        return _gstlearn.NeighMoving_summary(self, iech_out)

    def getMaxSampleNumber(self, db):
        return _gstlearn.NeighMoving_getMaxSampleNumber(self, db)

    def getType(self):
        return _gstlearn.NeighMoving_getType(self)

    def getFlagContinuous(self):
        return _gstlearn.NeighMoving_getFlagContinuous(self)

    def toString(self, strfmt=None):
        return _gstlearn.NeighMoving_toString(self, strfmt)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.NeighMoving_create(*args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.NeighMoving_createFromNF(neutralFilename, verbose)

    def addBiTargetCheck(self, abpc):
        return _gstlearn.NeighMoving_addBiTargetCheck(self, abpc)

    def getFlagSector(self):
        return _gstlearn.NeighMoving_getFlagSector(self)

    def getNMaxi(self):
        return _gstlearn.NeighMoving_getNMaxi(self)

    def getNMini(self):
        return _gstlearn.NeighMoving_getNMini(self)

    def getNSect(self):
        return _gstlearn.NeighMoving_getNSect(self)

    def getNSMax(self):
        return _gstlearn.NeighMoving_getNSMax(self)

    def getDistCont(self):
        return _gstlearn.NeighMoving_getDistCont(self)

    def getBiPtDist(self):
        return _gstlearn.NeighMoving_getBiPtDist(self)

    def getFlagAniso(self):
        return _gstlearn.NeighMoving_getFlagAniso(self)

    def getFlagRotation(self):
        return _gstlearn.NeighMoving_getFlagRotation(self)

    def getRadius(self):
        return _gstlearn.NeighMoving_getRadius(self)

    def getAnisoRotMats(self):
        return _gstlearn.NeighMoving_getAnisoRotMats(self)

    def getAnisoCoeffs(self):
        return _gstlearn.NeighMoving_getAnisoCoeffs(self)

    def getAnisoCoeff(self, i):
        return _gstlearn.NeighMoving_getAnisoCoeff(self, i)

    def getBipts(self, *args):
        return _gstlearn.NeighMoving_getBipts(self, *args)

    def setNMaxi(self, nmaxi):
        return _gstlearn.NeighMoving_setNMaxi(self, nmaxi)

    def setNMini(self, nmini):
        return _gstlearn.NeighMoving_setNMini(self, nmini)

    def setNSect(self, nsect):
        return _gstlearn.NeighMoving_setNSect(self, nsect)

    def setNSMax(self, nsmax):
        return _gstlearn.NeighMoving_setNSMax(self, nsmax)

    def setDistCont(self, distCont):
        return _gstlearn.NeighMoving_setDistCont(self, distCont)

    def getEllipsoid(self, target, count=360):
        return _gstlearn.NeighMoving_getEllipsoid(self, target, count)

    def getSectors(self, target):
        return _gstlearn.NeighMoving_getSectors(self, target)

    def getZoomLimits(self, target, percent=20):
        return _gstlearn.NeighMoving_getZoomLimits(self, target, percent)

    def __repr__(self):
        return _gstlearn.NeighMoving___repr__(self)

# Register NeighMoving in _gstlearn:
_gstlearn.NeighMoving_swigregister(NeighMoving)
class NeighBench(ANeigh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighBench_swiginit(self, _gstlearn.new_NeighBench(*args))
    __swig_destroy__ = _gstlearn.delete_NeighBench

    def attach(self, dbin, dbout=None):
        return _gstlearn.NeighBench_attach(self, dbin, dbout)

    def getNeigh(self, iech_out, ranks):
        return _gstlearn.NeighBench_getNeigh(self, iech_out, ranks)

    def hasChanged(self, iech_out):
        return _gstlearn.NeighBench_hasChanged(self, iech_out)

    def getMaxSampleNumber(self, db):
        return _gstlearn.NeighBench_getMaxSampleNumber(self, db)

    def getType(self):
        return _gstlearn.NeighBench_getType(self)

    def toString(self, strfmt=None):
        return _gstlearn.NeighBench_toString(self, strfmt)

    @staticmethod
    def create(flag_xvalid=False, width=0, space=None):
        return _gstlearn.NeighBench_create(flag_xvalid, width, space)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.NeighBench_createFromNF(neutralFilename, verbose)

    def getWidth(self):
        return _gstlearn.NeighBench_getWidth(self)

    def __repr__(self):
        return _gstlearn.NeighBench___repr__(self)

# Register NeighBench in _gstlearn:
_gstlearn.NeighBench_swigregister(NeighBench)
class NeighCell(ANeigh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.NeighCell_swiginit(self, _gstlearn.new_NeighCell(*args))
    __swig_destroy__ = _gstlearn.delete_NeighCell

    def attach(self, dbin, dbout=None):
        return _gstlearn.NeighCell_attach(self, dbin, dbout)

    def getNeigh(self, iech_out, ranks):
        return _gstlearn.NeighCell_getNeigh(self, iech_out, ranks)

    def hasChanged(self, iech_out):
        return _gstlearn.NeighCell_hasChanged(self, iech_out)

    def getMaxSampleNumber(self, db):
        return _gstlearn.NeighCell_getMaxSampleNumber(self, db)

    def getType(self):
        return _gstlearn.NeighCell_getType(self)

    def toString(self, strfmt=None):
        return _gstlearn.NeighCell_toString(self, strfmt)

    @staticmethod
    def create(flag_xvalid=False, nmini=1, space=None):
        return _gstlearn.NeighCell_create(flag_xvalid, nmini, space)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.NeighCell_createFromNF(neutralFilename, verbose)

    def getNMini(self):
        return _gstlearn.NeighCell_getNMini(self)

    def __repr__(self):
        return _gstlearn.NeighCell___repr__(self)

# Register NeighCell in _gstlearn:
_gstlearn.NeighCell_swigregister(NeighCell)
class AVario(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AVario

    @staticmethod
    def getCalculType(calcul_name):
        return _gstlearn.AVario_getCalculType(calcul_name)

    def getCalcul(self):
        return _gstlearn.AVario_getCalcul(self)

    def setCalcul(self, calcul):
        return _gstlearn.AVario_setCalcul(self, calcul)

    def setCalculByName(self, calcul_name):
        return _gstlearn.AVario_setCalculByName(self, calcul_name)

# Register AVario in _gstlearn:
_gstlearn.AVario_swigregister(AVario)
class VarioParam(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.VarioParam_swiginit(self, _gstlearn.new_VarioParam(*args))
    __swig_destroy__ = _gstlearn.delete_VarioParam

    def clone(self):
        return _gstlearn.VarioParam_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.VarioParam_toString(self, strfmt)

    @staticmethod
    def createOmniDirection(*args, **kwargs):
        return _gstlearn.VarioParam_createOmniDirection(*args, **kwargs)

    @staticmethod
    def createMultiple(*args, **kwargs):
        return _gstlearn.VarioParam_createMultiple(*args, **kwargs)

    @staticmethod
    def createMultipleFromGrid(*args, **kwargs):
        return _gstlearn.VarioParam_createMultipleFromGrid(*args, **kwargs)

    @staticmethod
    def createFromSpaceDimension(*args, **kwargs):
        return _gstlearn.VarioParam_createFromSpaceDimension(*args, **kwargs)

    @staticmethod
    def createSeveral2D(*args, **kwargs):
        return _gstlearn.VarioParam_createSeveral2D(*args, **kwargs)

    def addDir(self, dirparam):
        return _gstlearn.VarioParam_addDir(self, dirparam)

    def addMultiDirs(self, dirparams):
        return _gstlearn.VarioParam_addMultiDirs(self, dirparams)

    def delDir(self, rank):
        return _gstlearn.VarioParam_delDir(self, rank)

    def delAllDirs(self):
        return _gstlearn.VarioParam_delAllDirs(self)

    def getSpace(self):
        return _gstlearn.VarioParam_getSpace(self)

    def getScale(self):
        return _gstlearn.VarioParam_getScale(self)

    def getDateNumber(self):
        return _gstlearn.VarioParam_getDateNumber(self)

    def getDirectionNumber(self):
        return _gstlearn.VarioParam_getDirectionNumber(self)

    def getDates(self):
        return _gstlearn.VarioParam_getDates(self)

    def getDate(self, idate, icas):
        return _gstlearn.VarioParam_getDate(self, idate, icas)

    def getLagNumber(self, idir):
        return _gstlearn.VarioParam_getLagNumber(self, idir)

    def getCodirs(self, idir=0):
        return _gstlearn.VarioParam_getCodirs(self, idir)

    def getDirParams(self):
        return _gstlearn.VarioParam_getDirParams(self)

    def getDirParam(self, idir):
        return _gstlearn.VarioParam_getDirParam(self, idir)

    def getDimensionNumber(self):
        return _gstlearn.VarioParam_getDimensionNumber(self)

    def isDefinedForGrid(self):
        return _gstlearn.VarioParam_isDefinedForGrid(self)

    def hasDate(self):
        return _gstlearn.VarioParam_hasDate(self)

    def isDateUsed(self, db1, db2=None):
        return _gstlearn.VarioParam_isDateUsed(self, db1, db2)

    def setScale(self, scale):
        return _gstlearn.VarioParam_setScale(self, scale)

    def setDates(self, dates):
        return _gstlearn.VarioParam_setDates(self, dates)

    def setDPas(self, idir, db):
        return _gstlearn.VarioParam_setDPas(self, idir, db)

    def setGrincr(self, idir, grincr):
        return _gstlearn.VarioParam_setGrincr(self, idir, grincr)

    def toStringMain(self, strfmt):
        return _gstlearn.VarioParam_toStringMain(self, strfmt)

    def getFaults(self):
        return _gstlearn.VarioParam_getFaults(self)

    def hasFaults(self):
        return _gstlearn.VarioParam_hasFaults(self)

    def addFaults(self, faults):
        return _gstlearn.VarioParam_addFaults(self, faults)

    def __repr__(self):
        return _gstlearn.VarioParam___repr__(self)

# Register VarioParam in _gstlearn:
_gstlearn.VarioParam_swigregister(VarioParam)

def buildDbFromVarioParam(db, varioparam):
    return _gstlearn.buildDbFromVarioParam(db, varioparam)
class Vario_Order(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nalloc = property(_gstlearn.Vario_Order_nalloc_get, _gstlearn.Vario_Order_nalloc_set)
    npair = property(_gstlearn.Vario_Order_npair_get, _gstlearn.Vario_Order_npair_set)
    size_aux = property(_gstlearn.Vario_Order_size_aux_get, _gstlearn.Vario_Order_size_aux_set)
    flag_dist = property(_gstlearn.Vario_Order_flag_dist_get, _gstlearn.Vario_Order_flag_dist_set)
    tab_iech = property(_gstlearn.Vario_Order_tab_iech_get, _gstlearn.Vario_Order_tab_iech_set)
    tab_jech = property(_gstlearn.Vario_Order_tab_jech_get, _gstlearn.Vario_Order_tab_jech_set)
    tab_ipas = property(_gstlearn.Vario_Order_tab_ipas_get, _gstlearn.Vario_Order_tab_ipas_set)
    tab_sort = property(_gstlearn.Vario_Order_tab_sort_get, _gstlearn.Vario_Order_tab_sort_set)
    tab_aux_iech = property(_gstlearn.Vario_Order_tab_aux_iech_get, _gstlearn.Vario_Order_tab_aux_iech_set)
    tab_aux_jech = property(_gstlearn.Vario_Order_tab_aux_jech_get, _gstlearn.Vario_Order_tab_aux_jech_set)
    tab_dist = property(_gstlearn.Vario_Order_tab_dist_get, _gstlearn.Vario_Order_tab_dist_set)

    def __init__(self):
        _gstlearn.Vario_Order_swiginit(self, _gstlearn.new_Vario_Order())
    __swig_destroy__ = _gstlearn.delete_Vario_Order

# Register Vario_Order in _gstlearn:
_gstlearn.Vario_Order_swigregister(Vario_Order)
class Vario(AVario, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Vario_swiginit(self, _gstlearn.new_Vario(*args))
    __swig_destroy__ = _gstlearn.delete_Vario

    def clone(self):
        return _gstlearn.Vario_clone(self)

    def toTL(self):
        return _gstlearn.Vario_toTL(self)

    def toString(self, strfmt=None):
        return _gstlearn.Vario_toString(self, strfmt)

    def _getIVAR(self, db, iech, ivar):
        return _gstlearn.Vario__getIVAR(self, db, iech, ivar)

    def _setResult(self, iech1, iech2, nvar, ipas, ivar, jvar, orient, ww, dist, value):
        return _gstlearn.Vario__setResult(self, iech1, iech2, nvar, ipas, ivar, jvar, orient, ww, dist, value)

    @staticmethod
    def create(varioparam):
        return _gstlearn.Vario_create(varioparam)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.Vario_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createRegularizeFromModel(model, varioparam, ext, ndisc, angles, asCov=False):
        return _gstlearn.Vario_createRegularizeFromModel(model, varioparam, ext, ndisc, angles, asCov)

    @staticmethod
    def createTransformZToY(varioZ, anam):
        return _gstlearn.Vario_createTransformZToY(varioZ, anam)

    @staticmethod
    def createTransformYToZ(varioY, anam):
        return _gstlearn.Vario_createTransformYToZ(varioY, anam)

    @staticmethod
    def createReduce(varioIn, varcols, dircols, asSymmetric=False):
        return _gstlearn.Vario_createReduce(varioIn, varcols, dircols, asSymmetric)

    @staticmethod
    def computeFromDb(*args, **kwargs):
        return _gstlearn.Vario_computeFromDb(*args, **kwargs)

    def resetReduce(self, varcols, dircols, asSymmetric=False):
        return _gstlearn.Vario_resetReduce(self, varcols, dircols, asSymmetric)

    def getFlagAsym(self):
        return _gstlearn.Vario_getFlagAsym(self)

    def drawOnlyPositiveX(self, ivar, jvar):
        return _gstlearn.Vario_drawOnlyPositiveX(self, ivar, jvar)

    def drawOnlyPositiveY(self, ivar, jvar):
        return _gstlearn.Vario_drawOnlyPositiveY(self, ivar, jvar)

    def getVariableNumber(self):
        return _gstlearn.Vario_getVariableNumber(self)

    def getMeans(self):
        return _gstlearn.Vario_getMeans(self)

    def getMean(self, ivar):
        return _gstlearn.Vario_getMean(self, ivar)

    def getVar(self, ivar, jvar):
        return _gstlearn.Vario_getVar(self, ivar, jvar)

    def getVarMatrix(self):
        return _gstlearn.Vario_getVarMatrix(self)

    def getVarIndex(self, ijvar):
        return _gstlearn.Vario_getVarIndex(self, ijvar)

    def getVars(self):
        return _gstlearn.Vario_getVars(self)

    def setMeans(self, means):
        return _gstlearn.Vario_setMeans(self, means)

    def setMean(self, mean, ivar=0):
        return _gstlearn.Vario_setMean(self, mean, ivar)

    def setVar(self, value, ivar=0, jvar=0):
        return _gstlearn.Vario_setVar(self, value, ivar, jvar)

    def setVars(self, vars):
        return _gstlearn.Vario_setVars(self, vars)

    def setVarIndex(self, ijvar, value):
        return _gstlearn.Vario_setVarIndex(self, ijvar, value)

    def setDb(self, db):
        return _gstlearn.Vario_setDb(self, db)

    def getDirSize(self, idir):
        return _gstlearn.Vario_getDirSize(self, idir)

    def getGgByIndex(self, idir=0, i=0):
        return _gstlearn.Vario_getGgByIndex(self, idir, i)

    def getHhByIndex(self, idir=0, i=0):
        return _gstlearn.Vario_getHhByIndex(self, idir, i)

    def getSwByIndex(self, idir=0, i=0):
        return _gstlearn.Vario_getSwByIndex(self, idir, i)

    def getUtilizeByIndex(self, idir=0, i=0):
        return _gstlearn.Vario_getUtilizeByIndex(self, idir, i)

    def getGg(self, idir=0, ivar=0, jvar=0, ipas=0, asCov=False, flagNormalized=False):
        return _gstlearn.Vario_getGg(self, idir, ivar, jvar, ipas, asCov, flagNormalized)

    def getHh(self, idir=0, ivar=0, jvar=0, ipas=0):
        return _gstlearn.Vario_getHh(self, idir, ivar, jvar, ipas)

    def getSw(self, idir=0, ivar=0, jvar=0, ipas=0):
        return _gstlearn.Vario_getSw(self, idir, ivar, jvar, ipas)

    def getUtilize(self, idir=0, ivar=0, jvar=0, ipas=0):
        return _gstlearn.Vario_getUtilize(self, idir, ivar, jvar, ipas)

    def getVec(self, idir=0, ivar=0, jvar=0):
        return _gstlearn.Vario_getVec(self, idir, ivar, jvar)

    def getGgVec(self, idir=0, ivar=0, jvar=0, asCov=False, flagNormalized=False, compress=True):
        return _gstlearn.Vario_getGgVec(self, idir, ivar, jvar, asCov, flagNormalized, compress)

    def getHhVec(self, idir=0, ivar=0, jvar=0, compress=True):
        return _gstlearn.Vario_getHhVec(self, idir, ivar, jvar, compress)

    def getSwVec(self, idir=0, ivar=0, jvar=0, compress=True):
        return _gstlearn.Vario_getSwVec(self, idir, ivar, jvar, compress)

    def getUtilizeVec(self, idir=0, ivar=0, jvar=0, compress=True):
        return _gstlearn.Vario_getUtilizeVec(self, idir, ivar, jvar, compress)

    def setSwVec(self, idir, ivar, jvar, sw):
        return _gstlearn.Vario_setSwVec(self, idir, ivar, jvar, sw)

    def setHhVec(self, idir, ivar, jvar, hh):
        return _gstlearn.Vario_setHhVec(self, idir, ivar, jvar, hh)

    def setGgVec(self, idir, ivar, jvar, gg):
        return _gstlearn.Vario_setGgVec(self, idir, ivar, jvar, gg)

    def getGgs(self, *args, **kwargs):
        return _gstlearn.Vario_getGgs(self, *args, **kwargs)

    def setGgs(self, idir, ivar, jvar, ipas, values):
        return _gstlearn.Vario_setGgs(self, idir, ivar, jvar, ipas, values)

    def getAllGg(self, idir=0):
        return _gstlearn.Vario_getAllGg(self, idir)

    def getAllHh(self, idir=0):
        return _gstlearn.Vario_getAllHh(self, idir)

    def getAllSw(self, idir=0):
        return _gstlearn.Vario_getAllSw(self, idir)

    def getAllUtilize(self, idir=0):
        return _gstlearn.Vario_getAllUtilize(self, idir)

    def setGgByIndex(self, idir, i, gg, flagCheck=True):
        return _gstlearn.Vario_setGgByIndex(self, idir, i, gg, flagCheck)

    def setHhByIndex(self, idir, i, hh, flagCheck=True):
        return _gstlearn.Vario_setHhByIndex(self, idir, i, hh, flagCheck)

    def setSwByIndex(self, idir, i, sw, flagCheck=True):
        return _gstlearn.Vario_setSwByIndex(self, idir, i, sw, flagCheck)

    def setUtilizeByIndex(self, idir, i, utilize, flagCheck=True):
        return _gstlearn.Vario_setUtilizeByIndex(self, idir, i, utilize, flagCheck)

    def setSw(self, idir, ivar, jvar, ipas, sw, flagCheck=True):
        return _gstlearn.Vario_setSw(self, idir, ivar, jvar, ipas, sw, flagCheck)

    def setHh(self, idir, ivar, jvar, ipas, hh, flagCheck=True):
        return _gstlearn.Vario_setHh(self, idir, ivar, jvar, ipas, hh, flagCheck)

    def setGg(self, idir, ivar, jvar, ipas, gg, flagCheck=True):
        return _gstlearn.Vario_setGg(self, idir, ivar, jvar, ipas, gg, flagCheck)

    def setUtilize(self, idir, ivar, jvar, ipas, utilize, flagCheck=True):
        return _gstlearn.Vario_setUtilize(self, idir, ivar, jvar, ipas, utilize, flagCheck)

    def updateSwByIndex(self, idir, i, sw, flagCheck=True):
        return _gstlearn.Vario_updateSwByIndex(self, idir, i, sw, flagCheck)

    def updateHhByIndex(self, idir, i, hh, flagCheck=True):
        return _gstlearn.Vario_updateHhByIndex(self, idir, i, hh, flagCheck)

    def updateGgByIndex(self, idir, i, gg, flagCheck=True):
        return _gstlearn.Vario_updateGgByIndex(self, idir, i, gg, flagCheck)

    def getCenter(self, ivar=0, jvar=0, idir=0):
        return _gstlearn.Vario_getCenter(self, ivar, jvar, idir)

    def getNext(self, ivar=0, jvar=0, idir=0, shift=1):
        return _gstlearn.Vario_getNext(self, ivar, jvar, idir, shift)

    def internalVariableResize(self):
        return _gstlearn.Vario_internalVariableResize(self)

    def internalDirectionResize(self, ndir=0, flagDirs=True):
        return _gstlearn.Vario_internalDirectionResize(self, ndir, flagDirs)

    def getHmax(self, ivar=-1, jvar=-1, idir=-1):
        return _gstlearn.Vario_getHmax(self, ivar, jvar, idir)

    def getHRange(self, ivar=-1, jvar=-1, idir=-1):
        return _gstlearn.Vario_getHRange(self, ivar, jvar, idir)

    def getGmax(self, ivar=-1, jvar=-1, idir=-1, flagAbs=False, flagSill=False):
        return _gstlearn.Vario_getGmax(self, ivar, jvar, idir, flagAbs, flagSill)

    def getGRange(self, ivar=-1, jvar=-1, idir=-1, flagSill=False):
        return _gstlearn.Vario_getGRange(self, ivar, jvar, idir, flagSill)

    def patchCenter(self, idir, nech, rho):
        return _gstlearn.Vario_patchCenter(self, idir, nech, rho)

    def fill(self, idir, sw, gg, hh):
        return _gstlearn.Vario_fill(self, idir, sw, gg, hh)

    def getDirAddress(self, idir, ivar, jvar, ipas, flag_abs=False, sens=0, flagCheck=True):
        return _gstlearn.Vario_getDirAddress(self, idir, ivar, jvar, ipas, flag_abs, sens, flagCheck)

    def getVarAddress(self, ivar, jvar):
        return _gstlearn.Vario_getVarAddress(self, ivar, jvar)

    def getLagTotalNumber(self, idir):
        return _gstlearn.Vario_getLagTotalNumber(self, idir)

    def compute(self, *args, **kwargs):
        return _gstlearn.Vario_compute(self, *args, **kwargs)

    def computeIndic(self, *args, **kwargs):
        return _gstlearn.Vario_computeIndic(self, *args, **kwargs)

    def computeGeometry(self, db, vorder, npair):
        return _gstlearn.Vario_computeGeometry(self, db, vorder, npair)

    def computeVarioVect(self, db, ncomp):
        return _gstlearn.Vario_computeVarioVect(self, db, ncomp)

    def computeGeometryMLayers(self, db, seltab, vorder):
        return _gstlearn.Vario_computeGeometryMLayers(self, db, seltab, vorder)

    def regularizeFromModel(self, *args, **kwargs):
        return _gstlearn.Vario_regularizeFromModel(self, *args, **kwargs)

    def regularizeFromDbGrid(self, model, db, mode=None):
        return _gstlearn.Vario_regularizeFromDbGrid(self, model, db, mode)

    def getExtension(self, ivar, jvar, idir0, flag_norm, flag_vars, distmin, distmax, varmin, varmax, flag_hneg, flag_gneg, c0, hmin, hmax, gmin, gmax):
        return _gstlearn.Vario_getExtension(self, ivar, jvar, idir0, flag_norm, flag_vars, distmin, distmax, varmin, varmax, flag_hneg, flag_gneg, c0, hmin, hmax, gmin, gmax)

    def sampleModel(self, model, mode=None):
        return _gstlearn.Vario_sampleModel(self, model, mode)

    def getDirParam(self, idir):
        return _gstlearn.Vario_getDirParam(self, idir)

    def getDirectionNumber(self):
        return _gstlearn.Vario_getDirectionNumber(self)

    def hasDate(self):
        return _gstlearn.Vario_hasDate(self)

    def getDates(self, *args):
        return _gstlearn.Vario_getDates(self, *args)

    def getDateNumber(self):
        return _gstlearn.Vario_getDateNumber(self)

    def getScale(self):
        return _gstlearn.Vario_getScale(self)

    def getSpace(self):
        return _gstlearn.Vario_getSpace(self)

    def setScale(self, scale):
        return _gstlearn.Vario_setScale(self, scale)

    def addDirs(self, dirparam):
        return _gstlearn.Vario_addDirs(self, dirparam)

    def getLagNumber(self, idir):
        return _gstlearn.Vario_getLagNumber(self, idir)

    def getDPas(self, idir):
        return _gstlearn.Vario_getDPas(self, idir)

    def getDimensionNumber(self, *args):
        return _gstlearn.Vario_getDimensionNumber(self, *args)

    def getCodirs(self, idir):
        return _gstlearn.Vario_getCodirs(self, idir)

    def getCodir(self, idir, idim):
        return _gstlearn.Vario_getCodir(self, idir, idim)

    def getMaximumDistance(self, *args):
        return _gstlearn.Vario_getMaximumDistance(self, *args)

    def getIdate(self, idir):
        return _gstlearn.Vario_getIdate(self, idir)

    def getGrincrs(self, idir):
        return _gstlearn.Vario_getGrincrs(self, idir)

    def getGrincr(self, idir, idim):
        return _gstlearn.Vario_getGrincr(self, idir, idim)

    def isDefinedForGrid(self):
        return _gstlearn.Vario_isDefinedForGrid(self)

    def setNVar(self, nvar):
        return _gstlearn.Vario_setNVar(self, nvar)

    def setCalculByName(self, calcul_name):
        return _gstlearn.Vario_setCalculByName(self, calcul_name)

    def setVariableNames(self, variableNames):
        return _gstlearn.Vario_setVariableNames(self, variableNames)

    def setVariableName(self, ivar, variableName):
        return _gstlearn.Vario_setVariableName(self, ivar, variableName)

    def prepare(self, *args, **kwargs):
        return _gstlearn.Vario_prepare(self, *args, **kwargs)

    def getVarioParam(self):
        return _gstlearn.Vario_getVarioParam(self)

    def getBiPtsNumberPerDirection(self):
        return _gstlearn.Vario_getBiPtsNumberPerDirection(self)

    def getBipts(self, idir, rank):
        return _gstlearn.Vario_getBipts(self, idir, rank)

    def keepPair(self, idir, T1, T2, dist):
        return _gstlearn.Vario_keepPair(self, idir, T1, T2, dist)

    def getRankFromDirAndDate(self, idir, idate):
        return _gstlearn.Vario_getRankFromDirAndDate(self, idir, idate)

    def getVariableNames(self):
        return _gstlearn.Vario_getVariableNames(self)

    def getVariableName(self, ivar):
        return _gstlearn.Vario_getVariableName(self, ivar)

    def transformCut(self, nh, ycut):
        return _gstlearn.Vario_transformCut(self, nh, ycut)

    def transformZToY(self, anam):
        return _gstlearn.Vario_transformZToY(self, anam)

    def transformYToZ(self, anam):
        return _gstlearn.Vario_transformYToZ(self, anam)

    def isLagCorrect(self, idir, k):
        return _gstlearn.Vario_isLagCorrect(self, idir, k)

    def getC00(self, idir, ivar, jvar):
        return _gstlearn.Vario_getC00(self, idir, ivar, jvar)

    def computeWeightPerDirection(self):
        return _gstlearn.Vario_computeWeightPerDirection(self)

    def getTotalLagsPerDirection(self):
        return _gstlearn.Vario_getTotalLagsPerDirection(self)

    def computeWeightsFromVario(self, wmode):
        return _gstlearn.Vario_computeWeightsFromVario(self, wmode)

    def __repr__(self):
        return _gstlearn.Vario___repr__(self)

# Register Vario in _gstlearn:
_gstlearn.Vario_swigregister(Vario)

def vario_order_manage(mode, flag_dist, size_aux, vorder):
    return _gstlearn.vario_order_manage(mode, flag_dist, size_aux, vorder)

def vario_order_final(vorder, npair):
    return _gstlearn.vario_order_final(vorder, npair)

def vario_order_print(vorder, idir_target, ipas_target, verbose):
    return _gstlearn.vario_order_print(vorder, idir_target, ipas_target, verbose)

def vario_order_get_bounds(vorder, idir, ipas, ifirst, ilast):
    return _gstlearn.vario_order_get_bounds(vorder, idir, ipas, ifirst, ilast)

def vario_order_get_indices(vorder, ipair, iech, jech, dist):
    return _gstlearn.vario_order_get_indices(vorder, ipair, iech, jech, dist)

def vario_order_get_auxiliary(vorder, ipair, aux_iech, aux_jech):
    return _gstlearn.vario_order_get_auxiliary(vorder, ipair, aux_iech, aux_jech)

def vario_order_add(vorder, iech, jech, aux_iech, aux_jech, ipas, idir, dist):
    return _gstlearn.vario_order_add(vorder, iech, jech, aux_iech, aux_jech, ipas, idir, dist)
class DirParam(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.DirParam_swiginit(self, _gstlearn.new_DirParam(*args))
    __swig_destroy__ = _gstlearn.delete_DirParam

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.DirParam_create(*args, **kwargs)

    @staticmethod
    def createOmniDirection(*args, **kwargs):
        return _gstlearn.DirParam_createOmniDirection(*args, **kwargs)

    @staticmethod
    def createFromGrid(*args, **kwargs):
        return _gstlearn.DirParam_createFromGrid(*args, **kwargs)

    @staticmethod
    def createMultiple(ndir, npas=10, dpas=1., toldis=0.5, angref=0., space=None):
        return _gstlearn.DirParam_createMultiple(ndir, npas, dpas, toldis, angref, space)

    @staticmethod
    def createSeveral2D(angles, npas=10, dpas=1., toldis=0.5, tolang=1.234e30, space=None):
        return _gstlearn.DirParam_createSeveral2D(angles, npas, dpas, toldis, tolang, space)

    @staticmethod
    def createMultipleInSpace(npas, dpas=1., space=None):
        return _gstlearn.DirParam_createMultipleInSpace(npas, dpas, space)

    def toString(self, strfmt=None):
        return _gstlearn.DirParam_toString(self, strfmt)

    def isConsistent(self, space):
        return _gstlearn.DirParam_isConsistent(self, space)

    def getSpace(self):
        return _gstlearn.DirParam_getSpace(self)

    def getBench(self):
        return _gstlearn.DirParam_getBench(self)

    def getBreaks(self):
        return _gstlearn.DirParam_getBreaks(self)

    def getBreak(self, i):
        return _gstlearn.DirParam_getBreak(self, i)

    def getCodirs(self):
        return _gstlearn.DirParam_getCodirs(self)

    def getCodir(self, i):
        return _gstlearn.DirParam_getCodir(self, i)

    def getCylRad(self):
        return _gstlearn.DirParam_getCylRad(self)

    def getDPas(self):
        return _gstlearn.DirParam_getDPas(self)

    def getLag(self):
        return _gstlearn.DirParam_getLag(self)

    def getIdate(self):
        return _gstlearn.DirParam_getIdate(self)

    def getLagNumber(self):
        return _gstlearn.DirParam_getLagNumber(self)

    def getOptionCode(self):
        return _gstlearn.DirParam_getOptionCode(self)

    def getTolAngle(self):
        return _gstlearn.DirParam_getTolAngle(self)

    def getTolCode(self):
        return _gstlearn.DirParam_getTolCode(self)

    def getTolDist(self):
        return _gstlearn.DirParam_getTolDist(self)

    def getGrincrs(self):
        return _gstlearn.DirParam_getGrincrs(self)

    def getGrincr(self, i):
        return _gstlearn.DirParam_getGrincr(self, i)

    def getMaximumDistance(self):
        return _gstlearn.DirParam_getMaximumDistance(self)

    def getBreakNumber(self):
        return _gstlearn.DirParam_getBreakNumber(self)

    def getFlagRegular(self):
        return _gstlearn.DirParam_getFlagRegular(self)

    def setLagNumber(self, npas):
        return _gstlearn.DirParam_setLagNumber(self, npas)

    def setOptionCode(self, option_code):
        return _gstlearn.DirParam_setOptionCode(self, option_code)

    def setIdate(self, idate):
        return _gstlearn.DirParam_setIdate(self, idate)

    def setDLag(self, dlag):
        return _gstlearn.DirParam_setDLag(self, dlag)

    def setDPas(self, *args):
        return _gstlearn.DirParam_setDPas(self, *args)

    def setBench(self, bench):
        return _gstlearn.DirParam_setBench(self, bench)

    def setCylRad(self, cylrad):
        return _gstlearn.DirParam_setCylRad(self, cylrad)

    def setTolDist(self, toldist):
        return _gstlearn.DirParam_setTolDist(self, toldist)

    def setTolAngle(self, tolang):
        return _gstlearn.DirParam_setTolAngle(self, tolang)

    def setTolCode(self, tolcode):
        return _gstlearn.DirParam_setTolCode(self, tolcode)

    def setBreaks(self, breaks):
        return _gstlearn.DirParam_setBreaks(self, breaks)

    def setCodir(self, codir):
        return _gstlearn.DirParam_setCodir(self, codir)

    def setGrincr(self, grincr):
        return _gstlearn.DirParam_setGrincr(self, grincr)

    def isLagValid(self, ilag, flagAsym=False, flagCheck=True):
        return _gstlearn.DirParam_isLagValid(self, ilag, flagAsym, flagCheck)

    def isDimensionValid(self, idim):
        return _gstlearn.DirParam_isDimensionValid(self, idim)

    def isDefinedForGrid(self):
        return _gstlearn.DirParam_isDefinedForGrid(self)

    def getLagRank(self, dist):
        return _gstlearn.DirParam_getLagRank(self, dist)

    def __repr__(self):
        return _gstlearn.DirParam___repr__(self)

# Register DirParam in _gstlearn:
_gstlearn.DirParam_swigregister(DirParam)
class VMap(AVario):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VMap_swiginit(self, _gstlearn.new_VMap(*args))
    __swig_destroy__ = _gstlearn.delete_VMap

    def clone(self):
        return _gstlearn.VMap_clone(self)

    def toTL(self):
        return _gstlearn.VMap_toTL(self)

    def toString(self, strfmt=None):
        return _gstlearn.VMap_toString(self, strfmt)

    def _getIVAR(self, db, iech, ivar):
        return _gstlearn.VMap__getIVAR(self, db, iech, ivar)

    def _setResult(self, iech1, iech2, nvar, ipas, ivar, jvar, orient, ww, dist, value):
        return _gstlearn.VMap__setResult(self, iech1, iech2, nvar, ipas, ivar, jvar, orient, ww, dist, value)

    def compute(self, *args, **kwargs):
        return _gstlearn.VMap_compute(self, *args, **kwargs)

# Register VMap in _gstlearn:
_gstlearn.VMap_swigregister(VMap)

def db_vmap(*args, **kwargs):
    return _gstlearn.db_vmap(*args, **kwargs)
class VCloud(AVario):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.VCloud_swiginit(self, _gstlearn.new_VCloud(*args))
    __swig_destroy__ = _gstlearn.delete_VCloud

    def clone(self):
        return _gstlearn.VCloud_clone(self)

    def toTL(self):
        return _gstlearn.VCloud_toTL(self)

    def toString(self, strfmt=None):
        return _gstlearn.VCloud_toString(self, strfmt)

    def _getIVAR(self, db, iech, ivar):
        return _gstlearn.VCloud__getIVAR(self, db, iech, ivar)

    def _setResult(self, iech1, iech2, nvar, ipas, ivar, jvar, orient, ww, dist, value):
        return _gstlearn.VCloud__setResult(self, iech1, iech2, nvar, ipas, ivar, jvar, orient, ww, dist, value)

    def compute(self, *args, **kwargs):
        return _gstlearn.VCloud_compute(self, *args, **kwargs)

    def selectFromPolygon(self, db, polygon, idir=0):
        return _gstlearn.VCloud_selectFromPolygon(self, db, polygon, idir)

# Register VCloud in _gstlearn:
_gstlearn.VCloud_swigregister(VCloud)

def db_vcloud(*args, **kwargs):
    return _gstlearn.db_vcloud(*args, **kwargs)
class ModelGeneric(ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ModelGeneric

    def evalDriftMatrix(self, *args, **kwargs):
        return _gstlearn.ModelGeneric_evalDriftMatrix(self, *args, **kwargs)

    def evalCovMatrix(self, *args, **kwargs):
        return _gstlearn.ModelGeneric_evalCovMatrix(self, *args, **kwargs)

    def evalCovMatrixSymmetric(self, *args, **kwargs):
        return _gstlearn.ModelGeneric_evalCovMatrixSymmetric(self, *args, **kwargs)

    def evalCovMatrixOptim(self, *args, **kwargs):
        return _gstlearn.ModelGeneric_evalCovMatrixOptim(self, *args, **kwargs)

    def eval0Mat(self, mode=None):
        return _gstlearn.ModelGeneric_eval0Mat(self, mode)

    def evalCovMatrixSymmetricOptim(self, *args, **kwargs):
        return _gstlearn.ModelGeneric_evalCovMatrixSymmetricOptim(self, *args, **kwargs)

    def evalCovMatrixSparse(self, *args, **kwargs):
        return _gstlearn.ModelGeneric_evalCovMatrixSparse(self, *args, **kwargs)

# Register ModelGeneric in _gstlearn:
_gstlearn.ModelGeneric_swigregister(ModelGeneric)
class Model(AStringable, ASerializable, ModelGeneric):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Model_swiginit(self, _gstlearn.new_Model(*args))
    __swig_destroy__ = _gstlearn.delete_Model

    def clone(self):
        return _gstlearn.Model_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.Model_toString(self, strfmt)

    def resetFromDb(self, db):
        return _gstlearn.Model_resetFromDb(self, db)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.Model_create(*args, **kwargs)

    @staticmethod
    def createFromEnvironment(nvar, ndim=2):
        return _gstlearn.Model_createFromEnvironment(nvar, ndim)

    @staticmethod
    def createNugget(nvar, ndim=2, sill=1.):
        return _gstlearn.Model_createNugget(nvar, ndim, sill)

    @staticmethod
    def createFromParam(*args, **kwargs):
        return _gstlearn.Model_createFromParam(*args, **kwargs)

    @staticmethod
    def createFromParamOldStyle(*args, **kwargs):
        return _gstlearn.Model_createFromParamOldStyle(*args, **kwargs)

    @staticmethod
    def createFromDb(db):
        return _gstlearn.Model_createFromDb(db)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.Model_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromVario(*args, **kwargs):
        return _gstlearn.Model_createFromVario(*args, **kwargs)

    def setCovList(self, covalist):
        return _gstlearn.Model_setCovList(self, covalist)

    def addCov(self, cov):
        return _gstlearn.Model_addCov(self, cov)

    def addCovFromParam(self, *args, **kwargs):
        return _gstlearn.Model_addCovFromParam(self, *args, **kwargs)

    def addCovFromParamOldStyle(self, *args, **kwargs):
        return _gstlearn.Model_addCovFromParamOldStyle(self, *args, **kwargs)

    def delCova(self, icov):
        return _gstlearn.Model_delCova(self, icov)

    def delAllCovas(self):
        return _gstlearn.Model_delAllCovas(self)

    def setDriftList(self, driftlist):
        return _gstlearn.Model_setDriftList(self, driftlist)

    def setDriftIRF(self, order=0, nfex=0):
        return _gstlearn.Model_setDriftIRF(self, order, nfex)

    def setFlagLinked(self, flagLinked):
        return _gstlearn.Model_setFlagLinked(self, flagLinked)

    def addDrift(self, drift):
        return _gstlearn.Model_addDrift(self, drift)

    def setDrifts(self, driftSymbols):
        return _gstlearn.Model_setDrifts(self, driftSymbols)

    def delDrift(self, rank):
        return _gstlearn.Model_delDrift(self, rank)

    def delAllDrifts(self):
        return _gstlearn.Model_delAllDrifts(self)

    def setAnam(self, *args, **kwargs):
        return _gstlearn.Model_setAnam(self, *args, **kwargs)

    def unsetAnam(self):
        return _gstlearn.Model_unsetAnam(self)

    def isFlagGradient(self):
        return _gstlearn.Model_isFlagGradient(self)

    def isFlagGradientNumerical(self):
        return _gstlearn.Model_isFlagGradientNumerical(self)

    def isFlagGradientFunctional(self):
        return _gstlearn.Model_isFlagGradientFunctional(self)

    def isFlagLinked(self):
        return _gstlearn.Model_isFlagLinked(self)

    def extractCova(self, icov):
        return _gstlearn.Model_extractCova(self, icov)

    def switchToGradient(self):
        return _gstlearn.Model_switchToGradient(self)

    def hasDrift(self):
        return _gstlearn.Model_hasDrift(self)

    def getCovAnisoList(self):
        return _gstlearn.Model_getCovAnisoList(self)

    def getCovAnisoListModify(self):
        return _gstlearn.Model_getCovAnisoListModify(self)

    def getCova(self, *args):
        return _gstlearn.Model_getCova(self, *args)

    def getCovaNumber(self, skipNugget=False):
        return _gstlearn.Model_getCovaNumber(self, skipNugget)

    def getCovaType(self, icov):
        return _gstlearn.Model_getCovaType(self, icov)

    def getSillValues(self, icov):
        return _gstlearn.Model_getSillValues(self, icov)

    def getSill(self, icov, ivar, jvar):
        return _gstlearn.Model_getSill(self, icov, ivar, jvar)

    def getRange(self, icov):
        return _gstlearn.Model_getRange(self, icov)

    def getRanges(self, icov):
        return _gstlearn.Model_getRanges(self, icov)

    def getParam(self, icov):
        return _gstlearn.Model_getParam(self, icov)

    def getCovName(self, icov):
        return _gstlearn.Model_getCovName(self, icov)

    def getGradParamNumber(self, icov):
        return _gstlearn.Model_getGradParamNumber(self, icov)

    def getTotalSill(self, ivar=0, jvar=0):
        return _gstlearn.Model_getTotalSill(self, ivar, jvar)

    def getTotalSills(self):
        return _gstlearn.Model_getTotalSills(self)

    def getBallRadius(self):
        return _gstlearn.Model_getBallRadius(self)

    def getAnamHermite(self):
        return _gstlearn.Model_getAnamHermite(self)

    def getMaximumDistance(self):
        return _gstlearn.Model_getMaximumDistance(self)

    def getCovaMinIRFOrder(self):
        return _gstlearn.Model_getCovaMinIRFOrder(self)

    def hasAnam(self):
        return _gstlearn.Model_hasAnam(self)

    def getAnam(self):
        return _gstlearn.Model_getAnam(self)

    def isChangeSupportDefined(self):
        return _gstlearn.Model_isChangeSupportDefined(self)

    def normalize(self, sill):
        return _gstlearn.Model_normalize(self, sill)

    def hasNugget(self):
        return _gstlearn.Model_hasNugget(self)

    def getRankNugget(self):
        return _gstlearn.Model_getRankNugget(self)

    def getActiveCovList(self):
        return _gstlearn.Model_getActiveCovList(self)

    def getAllActiveCovList(self):
        return _gstlearn.Model_getAllActiveCovList(self)

    def isAllActiveCovList(self):
        return _gstlearn.Model_isAllActiveCovList(self)

    def setTapeRange(self, range):
        return _gstlearn.Model_setTapeRange(self, range)

    def eval0(self, ivar=0, jvar=0, mode=None):
        return _gstlearn.Model_eval0(self, ivar, jvar, mode)

    def eval0Nvar(self, mode=None):
        return _gstlearn.Model_eval0Nvar(self, mode)

    def eval0MatInPlace(self, mat, mode=None):
        return _gstlearn.Model_eval0MatInPlace(self, mat, mode)

    def eval(self, p1, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.Model_eval(self, p1, p2, ivar, jvar, mode)

    def evalNvarIpas(self, step, dir, mode=None):
        return _gstlearn.Model_evalNvarIpas(self, step, dir, mode)

    def evalMat(self, p1, p2, mode=None):
        return _gstlearn.Model_evalMat(self, p1, p2, mode)

    def evalMatInPlace(self, p1, p2, mat, mode=None):
        return _gstlearn.Model_evalMatInPlace(self, p1, p2, mat, mode)

    def evalNvarIpasIncr(self, dincr, mode=None):
        return _gstlearn.Model_evalNvarIpasIncr(self, dincr, mode)

    def evalIvarNpas(self, *args, **kwargs):
        return _gstlearn.Model_evalIvarNpas(self, *args, **kwargs)

    def evalIvarIpas(self, *args, **kwargs):
        return _gstlearn.Model_evalIvarIpas(self, *args, **kwargs)

    def evalCvv(self, *args, **kwargs):
        return _gstlearn.Model_evalCvv(self, *args, **kwargs)

    def evalCvvShift(self, *args, **kwargs):
        return _gstlearn.Model_evalCvvShift(self, *args, **kwargs)

    def evalCvvM(self, *args, **kwargs):
        return _gstlearn.Model_evalCvvM(self, *args, **kwargs)

    def evalCxv(self, *args, **kwargs):
        return _gstlearn.Model_evalCxv(self, *args, **kwargs)

    def evalCxvM(self, *args, **kwargs):
        return _gstlearn.Model_evalCxvM(self, *args, **kwargs)

    def evalPointToDb(self, *args, **kwargs):
        return _gstlearn.Model_evalPointToDb(self, *args, **kwargs)

    def evalPointToDbAsSP(self, p1s, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.Model_evalPointToDbAsSP(self, p1s, p2, ivar, jvar, mode)

    def evalAverageDbToDb(self, db1, db2, ivar=0, jvar=0, eps=0., seed=434132, mode=None):
        return _gstlearn.Model_evalAverageDbToDb(self, db1, db2, ivar, jvar, eps, seed, mode)

    def evalAverageIncrToIncr(self, d1, d2, ivar=0, jvar=0, mode=None):
        return _gstlearn.Model_evalAverageIncrToIncr(self, d1, d2, ivar, jvar, mode)

    def evalAveragePointToDb(self, p1, db2, ivar=0, jvar=0, mode=None):
        return _gstlearn.Model_evalAveragePointToDb(self, p1, db2, ivar, jvar, mode)

    def evalCovMatrixV(self, *args, **kwargs):
        return _gstlearn.Model_evalCovMatrixV(self, *args, **kwargs)

    def evalCovMatrixOptim(self, *args, **kwargs):
        return _gstlearn.Model_evalCovMatrixOptim(self, *args, **kwargs)

    def evalCovMatrixSymmetricOptim(self, *args, **kwargs):
        return _gstlearn.Model_evalCovMatrixSymmetricOptim(self, *args, **kwargs)

    def extensionVariance(self, *args, **kwargs):
        return _gstlearn.Model_extensionVariance(self, *args, **kwargs)

    def samplingDensityVariance(self, *args, **kwargs):
        return _gstlearn.Model_samplingDensityVariance(self, *args, **kwargs)

    def specificVolume(self, *args, **kwargs):
        return _gstlearn.Model_specificVolume(self, *args, **kwargs)

    def coefficientOfVariation(self, *args, **kwargs):
        return _gstlearn.Model_coefficientOfVariation(self, *args, **kwargs)

    def specificVolumeFromCoV(self, *args, **kwargs):
        return _gstlearn.Model_specificVolumeFromCoV(self, *args, **kwargs)

    def evalZAndGradients(self, *args):
        return _gstlearn.Model_evalZAndGradients(self, *args)

    def evalCov(self, *args, **kwargs):
        return _gstlearn.Model_evalCov(self, *args, **kwargs)

    def setSill(self, icov, ivar, jvar, value):
        return _gstlearn.Model_setSill(self, icov, ivar, jvar, value)

    def setRangeIsotropic(self, icov, range):
        return _gstlearn.Model_setRangeIsotropic(self, icov, range)

    def setMarkovCoeffs(self, icov, coeffs):
        return _gstlearn.Model_setMarkovCoeffs(self, icov, coeffs)

    def setCovaFiltered(self, icov, filtered):
        return _gstlearn.Model_setCovaFiltered(self, icov, filtered)

    def setActiveFactor(self, iclass):
        return _gstlearn.Model_setActiveFactor(self, iclass)

    def getActiveFactor(self):
        return _gstlearn.Model_getActiveFactor(self)

    def getAnamNClass(self):
        return _gstlearn.Model_getAnamNClass(self)

    def getDriftList(self):
        return _gstlearn.Model_getDriftList(self)

    def getDrift(self, il):
        return _gstlearn.Model_getDrift(self, il)

    def getDriftNumber(self):
        return _gstlearn.Model_getDriftNumber(self)

    def getExternalDriftNumber(self):
        return _gstlearn.Model_getExternalDriftNumber(self)

    def getRankFext(self, il):
        return _gstlearn.Model_getRankFext(self, il)

    def getDriftEquationNumber(self):
        return _gstlearn.Model_getDriftEquationNumber(self)

    def isDriftFiltered(self, il):
        return _gstlearn.Model_isDriftFiltered(self, il)

    def getDriftMaxIRFOrder(self):
        return _gstlearn.Model_getDriftMaxIRFOrder(self)

    def isDriftDefined(self, powers, rank_fex=0):
        return _gstlearn.Model_isDriftDefined(self, powers, rank_fex)

    def isDriftDifferentDefined(self, powers, rank_fex=-1):
        return _gstlearn.Model_isDriftDifferentDefined(self, powers, rank_fex)

    def isDriftSampleDefined(self, db, ib, nech, nbgh, loctype):
        return _gstlearn.Model_isDriftSampleDefined(self, db, ib, nech, nbgh, loctype)

    def setDriftFiltered(self, il, filtered):
        return _gstlearn.Model_setDriftFiltered(self, il, filtered)

    def getDrifts(self, db, useSel=True):
        return _gstlearn.Model_getDrifts(self, db, useSel)

    def setBetaHat(self, betaHat):
        return _gstlearn.Model_setBetaHat(self, betaHat)

    def evalDrift(self, *args, **kwargs):
        return _gstlearn.Model_evalDrift(self, *args, **kwargs)

    def evalDriftValue(self, *args, **kwargs):
        return _gstlearn.Model_evalDriftValue(self, *args, **kwargs)

    def evalDriftBySample(self, *args, **kwargs):
        return _gstlearn.Model_evalDriftBySample(self, *args, **kwargs)

    def evalDriftBySampleInPlace(self, db, iech, member, drftab):
        return _gstlearn.Model_evalDriftBySampleInPlace(self, db, iech, member, drftab)

    def evalDriftVarCoef(self, db, iech, ivar, coeffs):
        return _gstlearn.Model_evalDriftVarCoef(self, db, iech, ivar, coeffs)

    def evalDriftVarCoefs(self, db, coeffs, ivar=0, useSel=False):
        return _gstlearn.Model_evalDriftVarCoefs(self, db, coeffs, ivar, useSel)

    def getContext(self):
        return _gstlearn.Model_getContext(self)

    def getASpace(self):
        return _gstlearn.Model_getASpace(self)

    def getMeans(self):
        return _gstlearn.Model_getMeans(self)

    def getMean(self, ivar):
        return _gstlearn.Model_getMean(self, ivar)

    def getCovar0s(self):
        return _gstlearn.Model_getCovar0s(self)

    def getCovar0(self, ivar, jvar):
        return _gstlearn.Model_getCovar0(self, ivar, jvar)

    def getField(self):
        return _gstlearn.Model_getField(self)

    def getDimensionNumber(self):
        return _gstlearn.Model_getDimensionNumber(self)

    def setMeans(self, mean):
        return _gstlearn.Model_setMeans(self, mean)

    def setMean(self, mean, ivar=0):
        return _gstlearn.Model_setMean(self, mean, ivar)

    def setCovar0s(self, covar0):
        return _gstlearn.Model_setCovar0s(self, covar0)

    def setCovar0(self, ivar, jvar, covar0):
        return _gstlearn.Model_setCovar0(self, ivar, jvar, covar0)

    def setField(self, field):
        return _gstlearn.Model_setField(self, field)

    def getCovMode(self):
        return _gstlearn.Model_getCovMode(self)

    def duplicate(self):
        return _gstlearn.Model_duplicate(self)

    def createReduce(self, validVars):
        return _gstlearn.Model_createReduce(self, validVars)

    def getVariableNumber(self):
        return _gstlearn.Model_getVariableNumber(self)

    def hasExternalCov(self):
        return _gstlearn.Model_hasExternalCov(self)

    def sampleUnitary(self, *args, **kwargs):
        return _gstlearn.Model_sampleUnitary(self, *args, **kwargs)

    def envelop(self, *args, **kwargs):
        return _gstlearn.Model_envelop(self, *args, **kwargs)

    def fitFromCovIndices(self, *args, **kwargs):
        return _gstlearn.Model_fitFromCovIndices(self, *args, **kwargs)

    def fit(self, *args, **kwargs):
        return _gstlearn.Model_fit(self, *args, **kwargs)

    def fitFromVMap(self, *args, **kwargs):
        return _gstlearn.Model_fitFromVMap(self, *args, **kwargs)

    def buildVmapOnDbGrid(self, *args, **kwargs):
        return _gstlearn.Model_buildVmapOnDbGrid(self, *args, **kwargs)

    def stabilize(self, percent, verbose=False):
        return _gstlearn.Model_stabilize(self, percent, verbose)

    def standardize(self, verbose=False):
        return _gstlearn.Model_standardize(self, verbose)

    def gofToVario(self, vario, verbose=True):
        return _gstlearn.Model_gofToVario(self, vario, verbose)

    @staticmethod
    def gofDisplay(*args, **kwargs):
        return _gstlearn.Model_gofDisplay(*args, **kwargs)

    @staticmethod
    def initCovList(covranks):
        return _gstlearn.Model_initCovList(covranks)

    def isValid(self):
        return _gstlearn.Model_isValid(self)

    def sample(self, *args, **kwargs):
        return _gstlearn.Model_sample(self, *args, **kwargs)

    def evaluateOneIncr(self, *args, **kwargs):
        return _gstlearn.Model_evaluateOneIncr(self, *args, **kwargs)

    def evaluateMatInPlace(self, covint, d1, covtab, flag_init=False, weight=1., mode=None):
        return _gstlearn.Model_evaluateMatInPlace(self, covint, d1, covtab, flag_init, weight, mode)

    def evaluateOneGeneric(self, *args, **kwargs):
        return _gstlearn.Model_evaluateOneGeneric(self, *args, **kwargs)

    def evaluateFromDb(self, db, ivar=0, jvar=0, mode=None):
        return _gstlearn.Model_evaluateFromDb(self, db, ivar, jvar, mode)

    def calculateStdev(self, db1, iech1, db2, iech2, verbose=False, factor=1., mode=None):
        return _gstlearn.Model_calculateStdev(self, db1, iech1, db2, iech2, verbose, factor, mode)

    def computeLogLikelihood(self, db, verbose=False):
        return _gstlearn.Model_computeLogLikelihood(self, db, verbose)

    def __repr__(self):
        return _gstlearn.Model___repr__(self)

# Register Model in _gstlearn:
_gstlearn.Model_swigregister(Model)
class Option_AutoFit(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Option_AutoFit_swiginit(self, _gstlearn.new_Option_AutoFit(*args))
    __swig_destroy__ = _gstlearn.delete_Option_AutoFit

    def toString(self, strfmt=None):
        return _gstlearn.Option_AutoFit_toString(self, strfmt)

    def getEpsdelta(self):
        return _gstlearn.Option_AutoFit_getEpsdelta(self)

    def getInitdelta(self):
        return _gstlearn.Option_AutoFit_getInitdelta(self)

    def getMaxiter(self):
        return _gstlearn.Option_AutoFit_getMaxiter(self)

    def getTolred(self):
        return _gstlearn.Option_AutoFit_getTolred(self)

    def getTolsigma(self):
        return _gstlearn.Option_AutoFit_getTolsigma(self)

    def getTolstop(self):
        return _gstlearn.Option_AutoFit_getTolstop(self)

    def getVerbose(self):
        return _gstlearn.Option_AutoFit_getVerbose(self)

    def getWmode(self):
        return _gstlearn.Option_AutoFit_getWmode(self)

    def setEpsdelta(self, epsdelta):
        return _gstlearn.Option_AutoFit_setEpsdelta(self, epsdelta)

    def setInitdelta(self, initdelta):
        return _gstlearn.Option_AutoFit_setInitdelta(self, initdelta)

    def setMaxiter(self, maxiter):
        return _gstlearn.Option_AutoFit_setMaxiter(self, maxiter)

    def setTolred(self, tolred):
        return _gstlearn.Option_AutoFit_setTolred(self, tolred)

    def setTolsigma(self, tolsigma):
        return _gstlearn.Option_AutoFit_setTolsigma(self, tolsigma)

    def setTolstop(self, tolstop):
        return _gstlearn.Option_AutoFit_setTolstop(self, tolstop)

    def setVerbose(self, verbose):
        return _gstlearn.Option_AutoFit_setVerbose(self, verbose)

    def setWmode(self, wmode):
        return _gstlearn.Option_AutoFit_setWmode(self, wmode)

    def __repr__(self):
        return _gstlearn.Option_AutoFit___repr__(self)

# Register Option_AutoFit in _gstlearn:
_gstlearn.Option_AutoFit_swigregister(Option_AutoFit)
class Option_VarioFit(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Option_VarioFit_swiginit(self, _gstlearn.new_Option_VarioFit(*args))
    __swig_destroy__ = _gstlearn.delete_Option_VarioFit

    def toString(self, strfmt=None):
        return _gstlearn.Option_VarioFit_toString(self, strfmt)

    def getAuthAniso(self):
        return _gstlearn.Option_VarioFit_getAuthAniso(self)

    def setAuthAniso(self, authAniso):
        return _gstlearn.Option_VarioFit_setAuthAniso(self, authAniso)

    def getAuthRotation(self):
        return _gstlearn.Option_VarioFit_getAuthRotation(self)

    def setAuthRotation(self, authRotation):
        return _gstlearn.Option_VarioFit_setAuthRotation(self, authRotation)

    def getFlagGoulardUsed(self):
        return _gstlearn.Option_VarioFit_getFlagGoulardUsed(self)

    def setFlagGoulardUsed(self, flagGoulardUsed):
        return _gstlearn.Option_VarioFit_setFlagGoulardUsed(self, flagGoulardUsed)

    def getFlagNoreduce(self):
        return _gstlearn.Option_VarioFit_getFlagNoreduce(self)

    def setFlagNoreduce(self, flagNoreduce):
        return _gstlearn.Option_VarioFit_setFlagNoreduce(self, flagNoreduce)

    def getKeepIntstr(self):
        return _gstlearn.Option_VarioFit_getKeepIntstr(self)

    def setKeepIntstr(self, keepIntstr):
        return _gstlearn.Option_VarioFit_setKeepIntstr(self, keepIntstr)

    def getLockIso2d(self):
        return _gstlearn.Option_VarioFit_getLockIso2d(self)

    def setLockIso2d(self, lockIso2d):
        return _gstlearn.Option_VarioFit_setLockIso2d(self, lockIso2d)

    def getLockNo3d(self):
        return _gstlearn.Option_VarioFit_getLockNo3d(self)

    def setLockNo3d(self, lockNo3d):
        return _gstlearn.Option_VarioFit_setLockNo3d(self, lockNo3d)

    def getLockRot2d(self):
        return _gstlearn.Option_VarioFit_getLockRot2d(self)

    def setLockRot2d(self, lockRot2d):
        return _gstlearn.Option_VarioFit_setLockRot2d(self, lockRot2d)

    def getLockSamerot(self):
        return _gstlearn.Option_VarioFit_getLockSamerot(self)

    def setLockSamerot(self, lockSamerot):
        return _gstlearn.Option_VarioFit_setLockSamerot(self, lockSamerot)

    def getFlagIntrinsic(self):
        return _gstlearn.Option_VarioFit_getFlagIntrinsic(self)

    def setFlagIntrinsic(self, flagIntrinsic):
        return _gstlearn.Option_VarioFit_setFlagIntrinsic(self, flagIntrinsic)

    def __repr__(self):
        return _gstlearn.Option_VarioFit___repr__(self)

# Register Option_VarioFit in _gstlearn:
_gstlearn.Option_VarioFit_swigregister(Option_VarioFit)
class Constraints(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Constraints_swiginit(self, _gstlearn.new_Constraints(*args))
    __swig_destroy__ = _gstlearn.delete_Constraints

    def toString(self, strfmt=None):
        return _gstlearn.Constraints_toString(self, strfmt)

    def addItem(self, item):
        return _gstlearn.Constraints_addItem(self, item)

    def addItemFromParamId(self, *args, **kwargs):
        return _gstlearn.Constraints_addItemFromParamId(self, *args, **kwargs)

    def isDefined(self):
        return _gstlearn.Constraints_isDefined(self)

    def isDefinedForSill(self):
        return _gstlearn.Constraints_isDefinedForSill(self)

    def getConsItemNumber(self):
        return _gstlearn.Constraints_getConsItemNumber(self)

    def getConsItems(self, *args):
        return _gstlearn.Constraints_getConsItems(self, *args)

    def modifyConstraintsForSill(self):
        return _gstlearn.Constraints_modifyConstraintsForSill(self)

    def getConstantSillValue(self):
        return _gstlearn.Constraints_getConstantSillValue(self)

    def getConstantSills(self, *args):
        return _gstlearn.Constraints_getConstantSills(self, *args)

    def setConstantSillValue(self, value):
        return _gstlearn.Constraints_setConstantSillValue(self, value)

    def setConstantSills(self, constantSills):
        return _gstlearn.Constraints_setConstantSills(self, constantSills)

    def expandConstantSill(self, nvar):
        return _gstlearn.Constraints_expandConstantSill(self, nvar)

    def isConstraintSillDefined(self):
        return _gstlearn.Constraints_isConstraintSillDefined(self)

    def setValue(self, item, value):
        return _gstlearn.Constraints_setValue(self, item, value)

    def __repr__(self):
        return _gstlearn.Constraints___repr__(self)

# Register Constraints in _gstlearn:
_gstlearn.Constraints_swigregister(Constraints)

def constraints_get(constraints, icase, igrf, icov, icons, v1, v2):
    return _gstlearn.constraints_get(constraints, icase, igrf, icov, icons, v1, v2)

def constraints_print(constraints):
    return _gstlearn.constraints_print(constraints)

def modify_constraints_on_sill(constraints):
    return _gstlearn.modify_constraints_on_sill(constraints)

def add_unit_sill_constraints(constraints):
    return _gstlearn.add_unit_sill_constraints(constraints)
class ConsItem(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ConsItem_swiginit(self, _gstlearn.new_ConsItem(*args))
    __swig_destroy__ = _gstlearn.delete_ConsItem

    def clone(self):
        return _gstlearn.ConsItem_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.ConsItem_toString(self, strfmt)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.ConsItem_create(*args, **kwargs)

    @staticmethod
    def createFromParamId(*args, **kwargs):
        return _gstlearn.ConsItem_createFromParamId(*args, **kwargs)

    def getType(self):
        return _gstlearn.ConsItem_getType(self)

    def getIGrf(self):
        return _gstlearn.ConsItem_getIGrf(self)

    def getICov(self):
        return _gstlearn.ConsItem_getICov(self)

    def getIV1(self):
        return _gstlearn.ConsItem_getIV1(self)

    def getIV2(self):
        return _gstlearn.ConsItem_getIV2(self)

    def setValue(self, value):
        return _gstlearn.ConsItem_setValue(self, value)

    def setIcase(self, type):
        return _gstlearn.ConsItem_setIcase(self, type)

    def getIcase(self):
        return _gstlearn.ConsItem_getIcase(self)

    def getValue(self):
        return _gstlearn.ConsItem_getValue(self)

    def matchIGrf(self, igrf0):
        return _gstlearn.ConsItem_matchIGrf(self, igrf0)

    def matchICov(self, icov0):
        return _gstlearn.ConsItem_matchICov(self, icov0)

    def matchType(self, type0):
        return _gstlearn.ConsItem_matchType(self, type0)

    def matchIV1(self, iv10):
        return _gstlearn.ConsItem_matchIV1(self, iv10)

    def matchIV2(self, iv20):
        return _gstlearn.ConsItem_matchIV2(self, iv20)

    def getParamId(self):
        return _gstlearn.ConsItem_getParamId(self)

    @staticmethod
    def define(*args, **kwargs):
        return _gstlearn.ConsItem_define(*args, **kwargs)

# Register ConsItem in _gstlearn:
_gstlearn.ConsItem_swigregister(ConsItem)
class CovParamId(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovParamId_swiginit(self, _gstlearn.new_CovParamId(*args))
    __swig_destroy__ = _gstlearn.delete_CovParamId

    def clone(self):
        return _gstlearn.CovParamId_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.CovParamId_toString(self, strfmt)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.CovParamId_create(*args, **kwargs)

    def init(self, igrf, icov, type, iv1, iv2):
        return _gstlearn.CovParamId_init(self, igrf, icov, type, iv1, iv2)

    def getType(self):
        return _gstlearn.CovParamId_getType(self)

    def getIGrf(self):
        return _gstlearn.CovParamId_getIGrf(self)

    def getICov(self):
        return _gstlearn.CovParamId_getICov(self)

    def getIV1(self):
        return _gstlearn.CovParamId_getIV1(self)

    def getIV2(self):
        return _gstlearn.CovParamId_getIV2(self)

    def setType(self, type):
        return _gstlearn.CovParamId_setType(self, type)

    def matchIGrf(self, igrf0):
        return _gstlearn.CovParamId_matchIGrf(self, igrf0)

    def matchICov(self, icov0):
        return _gstlearn.CovParamId_matchICov(self, icov0)

    def matchType(self, type0):
        return _gstlearn.CovParamId_matchType(self, type0)

    def matchIV1(self, iv10):
        return _gstlearn.CovParamId_matchIV1(self, iv10)

    def matchIV2(self, iv20):
        return _gstlearn.CovParamId_matchIV2(self, iv20)

# Register CovParamId in _gstlearn:
_gstlearn.CovParamId_swigregister(CovParamId)
class ParamId(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ParamId_swiginit(self, _gstlearn.new_ParamId(*args))
    __swig_destroy__ = _gstlearn.delete_ParamId

    def clone(self):
        return _gstlearn.ParamId_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.ParamId_toString(self, strfmt)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.ParamId_create(*args, **kwargs)

    def init(self, type, iv1, iv2):
        return _gstlearn.ParamId_init(self, type, iv1, iv2)

    def getType(self):
        return _gstlearn.ParamId_getType(self)

    def getIV1(self):
        return _gstlearn.ParamId_getIV1(self)

    def getIV2(self):
        return _gstlearn.ParamId_getIV2(self)

    def setType(self, type):
        return _gstlearn.ParamId_setType(self, type)

    def matchType(self, type0):
        return _gstlearn.ParamId_matchType(self, type0)

    def matchIV1(self, iv10):
        return _gstlearn.ParamId_matchIV1(self, iv10)

    def matchIV2(self, iv20):
        return _gstlearn.ParamId_matchIV2(self, iv20)

# Register ParamId in _gstlearn:
_gstlearn.ParamId_swigregister(ParamId)
class ParamIdHash(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, p):
        return _gstlearn.ParamIdHash___call__(self, p)

    def __init__(self):
        _gstlearn.ParamIdHash_swiginit(self, _gstlearn.new_ParamIdHash())
    __swig_destroy__ = _gstlearn.delete_ParamIdHash

# Register ParamIdHash in _gstlearn:
_gstlearn.ParamIdHash_swigregister(ParamIdHash)
class ParamIdEqual(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __call__(self, lhs, rhs):
        return _gstlearn.ParamIdEqual___call__(self, lhs, rhs)

    def __init__(self):
        _gstlearn.ParamIdEqual_swiginit(self, _gstlearn.new_ParamIdEqual())
    __swig_destroy__ = _gstlearn.delete_ParamIdEqual

# Register ParamIdEqual in _gstlearn:
_gstlearn.ParamIdEqual_swigregister(ParamIdEqual)
class TabNoStat(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        return _gstlearn.TabNoStat_clone(self)

    def __init__(self, *args):
        _gstlearn.TabNoStat_swiginit(self, _gstlearn.new_TabNoStat(*args))

    def isNoStat(self):
        return _gstlearn.TabNoStat_isNoStat(self)

    def informMeshByMesh(self, *args):
        return _gstlearn.TabNoStat_informMeshByMesh(self, *args)

    def informMeshByApex(self, *args):
        return _gstlearn.TabNoStat_informMeshByApex(self, *args)

    def informDbIn(self, *args):
        return _gstlearn.TabNoStat_informDbIn(self, *args)

    def informDbOut(self, *args):
        return _gstlearn.TabNoStat_informDbOut(self, *args)

    def isDefinedForVariance(self):
        return _gstlearn.TabNoStat_isDefinedForVariance(self)

    def getNSills(self):
        return _gstlearn.TabNoStat_getNSills(self)

    def updateDescription(self):
        return _gstlearn.TabNoStat_updateDescription(self)

    def getTable(self):
        return _gstlearn.TabNoStat_getTable(self)

    def isValid(self, econs):
        return _gstlearn.TabNoStat_isValid(self, econs)

    def addElem(self, nostat, econs, iv1=0, iv2=0):
        return _gstlearn.TabNoStat_addElem(self, nostat, econs, iv1, iv2)

    def removeElem(self, econs, iv1=0, iv2=0):
        return _gstlearn.TabNoStat_removeElem(self, econs, iv1, iv2)
    __swig_destroy__ = _gstlearn.delete_TabNoStat

    def clear(self):
        return _gstlearn.TabNoStat_clear(self)

    def setDbNoStatRef(self, dbref):
        return _gstlearn.TabNoStat_setDbNoStatRef(self, dbref)

    def getDbNoStatRef(self):
        return _gstlearn.TabNoStat_getDbNoStatRef(self)

    def informCoords(self, coords, econs, iv1, iv2, result):
        return _gstlearn.TabNoStat_informCoords(self, coords, econs, iv1, iv2, result)

    def toString(self, strfmt=None):
        return _gstlearn.TabNoStat_toString(self, strfmt)

    def toStringInside(self, strfmt=None, i=0):
        return _gstlearn.TabNoStat_toStringInside(self, strfmt, i)

    def isElemDefined(self, econs, iv1=0, iv2=0):
        return _gstlearn.TabNoStat_isElemDefined(self, econs, iv1, iv2)

    def getElem(self, econs, iv1=0, iv2=0):
        return _gstlearn.TabNoStat_getElem(self, econs, iv1, iv2)

# Register TabNoStat in _gstlearn:
_gstlearn.TabNoStat_swigregister(TabNoStat)
class TabNoStatCovAniso(TabNoStat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def clone(self):
        return _gstlearn.TabNoStatCovAniso_clone(self)

    def __init__(self, *args):
        _gstlearn.TabNoStatCovAniso_swiginit(self, _gstlearn.new_TabNoStatCovAniso(*args))
    __swig_destroy__ = _gstlearn.delete_TabNoStatCovAniso

    def getNAngles(self):
        return _gstlearn.TabNoStatCovAniso_getNAngles(self)

    def getNRanges(self):
        return _gstlearn.TabNoStatCovAniso_getNRanges(self)

    def getNScales(self):
        return _gstlearn.TabNoStatCovAniso_getNScales(self)

    def isParam(self):
        return _gstlearn.TabNoStatCovAniso_isParam(self)

    def isDefinedForTensor(self):
        return _gstlearn.TabNoStatCovAniso_isDefinedForTensor(self)

    def isDefinedForAnisotropy(self):
        return _gstlearn.TabNoStatCovAniso_isDefinedForAnisotropy(self)

    def isDefinedForRotation(self):
        return _gstlearn.TabNoStatCovAniso_isDefinedForRotation(self)

    def addElem(self, nostat, econs, iv1=0, iv2=0):
        return _gstlearn.TabNoStatCovAniso_addElem(self, nostat, econs, iv1, iv2)

    def removeElem(self, econs, iv1=0, iv2=0):
        return _gstlearn.TabNoStatCovAniso_removeElem(self, econs, iv1, iv2)

# Register TabNoStatCovAniso in _gstlearn:
_gstlearn.TabNoStatCovAniso_swigregister(TabNoStatCovAniso)
class ANoStat(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getValueOnDbOut(self, iech):
        return _gstlearn.ANoStat_getValueOnDbOut(self, iech)

    def getValueOnDbIn(self, iech):
        return _gstlearn.ANoStat_getValueOnDbIn(self, iech)

    def getValueOnDb(self, iech, icas):
        return _gstlearn.ANoStat_getValueOnDb(self, iech, icas)

    def getValuesOnDb(self, icas1, iech1, val1, icas2, iech2, val2):
        return _gstlearn.ANoStat_getValuesOnDb(self, icas1, iech1, val1, icas2, iech2, val2)

    def getValueOnMeshByMesh(self, imesh):
        return _gstlearn.ANoStat_getValueOnMeshByMesh(self, imesh)

    def getValueOnMeshByApex(self, iapex):
        return _gstlearn.ANoStat_getValueOnMeshByApex(self, iapex)

    def getValueOnMesh(self, iapex, center=False):
        return _gstlearn.ANoStat_getValueOnMesh(self, iapex, center)

    def informField(self, coords, tab, verbose=False):
        return _gstlearn.ANoStat_informField(self, coords, tab, verbose)

    def informMeshByMesh(self, amesh, verbose=False):
        return _gstlearn.ANoStat_informMeshByMesh(self, amesh, verbose)

    def informMeshByApex(self, amesh, verbose=False):
        return _gstlearn.ANoStat_informMeshByApex(self, amesh, verbose)

    def informDbIn(self, dbin, verbose=False):
        return _gstlearn.ANoStat_informDbIn(self, dbin, verbose)

    def informDbOout(self, dbout, verbose=False):
        return _gstlearn.ANoStat_informDbOout(self, dbout, verbose)

    def toString(self, strfmt):
        return _gstlearn.ANoStat_toString(self, strfmt)
    __swig_destroy__ = _gstlearn.delete_ANoStat

# Register ANoStat in _gstlearn:
_gstlearn.ANoStat_swigregister(ANoStat)
class NoStatArray(ANoStat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.NoStatArray_swiginit(self, _gstlearn.new_NoStatArray(*args))
    __swig_destroy__ = _gstlearn.delete_NoStatArray

    def toString(self, strfmt):
        return _gstlearn.NoStatArray_toString(self, strfmt)

# Register NoStatArray in _gstlearn:
_gstlearn.NoStatArray_swigregister(NoStatArray)
class NoStatFunctional(ANoStat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, func):
        _gstlearn.NoStatFunctional_swiginit(self, _gstlearn.new_NoStatFunctional(func))
    __swig_destroy__ = _gstlearn.delete_NoStatFunctional

    def toString(self, strfmt):
        return _gstlearn.NoStatFunctional_toString(self, strfmt)

# Register NoStatFunctional in _gstlearn:
_gstlearn.NoStatFunctional_swigregister(NoStatFunctional)
class ACov(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACov

    def getNVariables(self):
        return _gstlearn.ACov_getNVariables(self)

    def isIndexable(self):
        return _gstlearn.ACov_isIndexable(self)

    def isNoStat(self):
        return _gstlearn.ACov_isNoStat(self)

    def eval0(self, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACov_eval0(self, ivar, jvar, mode)

    def eval0CovMatBiPointInPlace(self, mat, mode=None):
        return _gstlearn.ACov_eval0CovMatBiPointInPlace(self, mat, mode)

    def addEval0CovMatBiPointInPlace(self, mat, mode=None):
        return _gstlearn.ACov_addEval0CovMatBiPointInPlace(self, mat, mode)

    def evalCovMatBiPointInPlace(self, mat, p1, p2, mode=None):
        return _gstlearn.ACov_evalCovMatBiPointInPlace(self, mat, p1, p2, mode)

    def addEvalCovMatBiPointInPlace(self, mat, pwork1, pwork2, mode):
        return _gstlearn.ACov_addEvalCovMatBiPointInPlace(self, mat, pwork1, pwork2, mode)

    def evalCovKriging(self, mat, pwork1, pout, mode=None):
        return _gstlearn.ACov_evalCovKriging(self, mat, pwork1, pout, mode)

    def evalCovOnSphere(self, alpha, degree=50, flagScaleDistance=False, mode=None):
        return _gstlearn.ACov_evalCovOnSphere(self, alpha, degree, flagScaleDistance, mode)

    def evalSpectrumOnSphere(self, n, flagNormDistance=False, flagCumul=False):
        return _gstlearn.ACov_evalSpectrumOnSphere(self, n, flagNormDistance, flagCumul)

    def evalSpectrum(self, freq, ivar, jvar):
        return _gstlearn.ACov_evalSpectrum(self, freq, ivar, jvar)

    def updateCovByPoints(self, icas1, iech1, icas2, iech2):
        return _gstlearn.ACov_updateCovByPoints(self, icas1, iech1, icas2, iech2)

    def optimizationSetTarget(self, pt):
        return _gstlearn.ACov_optimizationSetTarget(self, pt)

    def optimizationSetTargetByIndex(self, iech):
        return _gstlearn.ACov_optimizationSetTargetByIndex(self, iech)

    def optimizationPreProcess(self, *args):
        return _gstlearn.ACov_optimizationPreProcess(self, *args)

    def optimizationPostProcess(self):
        return _gstlearn.ACov_optimizationPostProcess(self)

    def isOptimEnabled(self):
        return _gstlearn.ACov_isOptimEnabled(self)

    def eval(self, *args):
        return _gstlearn.ACov_eval(self, *args)

    def eval0Mat(self, mode=None):
        return _gstlearn.ACov_eval0Mat(self, mode)

    def evalMat(self, p1, p2, mode=None):
        return _gstlearn.ACov_evalMat(self, p1, p2, mode)

    def evalCovMatrixOptim(self, *args, **kwargs):
        return _gstlearn.ACov_evalCovMatrixOptim(self, *args, **kwargs)

    def evalCovMatrixSymmetricOptim(self, *args, **kwargs):
        return _gstlearn.ACov_evalCovMatrixSymmetricOptim(self, *args, **kwargs)

    def evalIvarIpas(self, *args, **kwargs):
        return _gstlearn.ACov_evalIvarIpas(self, *args, **kwargs)

    def evalIvarIpasIncr(self, dincr, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACov_evalIvarIpasIncr(self, dincr, ivar, jvar, mode)

    def evalIvarNpas(self, *args, **kwargs):
        return _gstlearn.ACov_evalIvarNpas(self, *args, **kwargs)

    def evalNvarIpas(self, *args, **kwargs):
        return _gstlearn.ACov_evalNvarIpas(self, *args, **kwargs)

    def evalNvarIpasIncr(self, dincr, mode=None):
        return _gstlearn.ACov_evalNvarIpasIncr(self, dincr, mode)

    def evalIsoIvarIpas(self, step, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACov_evalIsoIvarIpas(self, step, ivar, jvar, mode)

    def evalIsoIvarNpas(self, vec_step, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACov_evalIsoIvarNpas(self, vec_step, ivar, jvar, mode)

    def evalIsoNvarIpas(self, step, mode=None):
        return _gstlearn.ACov_evalIsoNvarIpas(self, step, mode)

    def evalCvv(self, *args, **kwargs):
        return _gstlearn.ACov_evalCvv(self, *args, **kwargs)

    def evalCvvShift(self, *args, **kwargs):
        return _gstlearn.ACov_evalCvvShift(self, *args, **kwargs)

    def evalCvvM(self, *args, **kwargs):
        return _gstlearn.ACov_evalCvvM(self, *args, **kwargs)

    def evalCxv(self, *args):
        return _gstlearn.ACov_evalCxv(self, *args)

    def evalCxvM(self, *args, **kwargs):
        return _gstlearn.ACov_evalCxvM(self, *args, **kwargs)

    def evalPointToDb(self, *args, **kwargs):
        return _gstlearn.ACov_evalPointToDb(self, *args, **kwargs)

    def evalPointToDbAsSP(self, p1s, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACov_evalPointToDbAsSP(self, p1s, p2, ivar, jvar, mode)

    def evalAverageDbToDb(self, db1, db2, ivar=0, jvar=0, eps=0., seed=434132, mode=None):
        return _gstlearn.ACov_evalAverageDbToDb(self, db1, db2, ivar, jvar, eps, seed, mode)

    def evalAverageIncrToIncr(self, d1, d2, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACov_evalAverageIncrToIncr(self, d1, d2, ivar, jvar, mode)

    def evalAveragePointToDb(self, p1, db2, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACov_evalAveragePointToDb(self, p1, db2, ivar, jvar, mode)

    def evalCovMatrix(self, *args, **kwargs):
        return _gstlearn.ACov_evalCovMatrix(self, *args, **kwargs)

    def evalCovMatrixSymmetric(self, db1, ivar0, nbgh1, mode):
        return _gstlearn.ACov_evalCovMatrixSymmetric(self, db1, ivar0, nbgh1, mode)

    def evalCovMatrixSparse(self, *args, **kwargs):
        return _gstlearn.ACov_evalCovMatrixSparse(self, *args, **kwargs)

    def extensionVariance(self, *args, **kwargs):
        return _gstlearn.ACov_extensionVariance(self, *args, **kwargs)

    def samplingDensityVariance(self, *args, **kwargs):
        return _gstlearn.ACov_samplingDensityVariance(self, *args, **kwargs)

    def specificVolume(self, *args, **kwargs):
        return _gstlearn.ACov_specificVolume(self, *args, **kwargs)

    def coefficientOfVariation(self, *args, **kwargs):
        return _gstlearn.ACov_coefficientOfVariation(self, *args, **kwargs)

    def specificVolumeFromCoV(self, *args, **kwargs):
        return _gstlearn.ACov_specificVolumeFromCoV(self, *args, **kwargs)

    def manage(self, db1, db2):
        return _gstlearn.ACov_manage(self, db1, db2)

    def load(self, p, case1):
        return _gstlearn.ACov_load(self, p, case1)

    def loadAndAddEvalCovMatBiPointInPlace(self, mat, p1, p2, mode=None):
        return _gstlearn.ACov_loadAndAddEvalCovMatBiPointInPlace(self, mat, p1, p2, mode)

    def loadAndEval(self, p1, p2, ivar, jvar, mode):
        return _gstlearn.ACov_loadAndEval(self, p1, p2, ivar, jvar, mode)

# Register ACov in _gstlearn:
_gstlearn.ACov_swigregister(ACov)
class CovBase(ACov):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_CovBase

    def isConsistent(self, space):
        return _gstlearn.CovBase_isConsistent(self, space)

    def getNVariables(self):
        return _gstlearn.CovBase_getNVariables(self)

    def isOptimizationInitialized(self, db=None):
        return _gstlearn.CovBase_isOptimizationInitialized(self, db)

    def _optimizationPreProcess(self, p):
        return _gstlearn.CovBase__optimizationPreProcess(self, p)

    def optimizationSetTargetByIndex(self, iech):
        return _gstlearn.CovBase_optimizationSetTargetByIndex(self, iech)

    def setContext(self, ctxt):
        return _gstlearn.CovBase_setContext(self, ctxt)

    def copyCovContext(self, ctxt):
        return _gstlearn.CovBase_copyCovContext(self, ctxt)

    def setSill(self, *args):
        return _gstlearn.CovBase_setSill(self, *args)

    def initSill(self, value=0.):
        return _gstlearn.CovBase_initSill(self, value)

    def setCor(self, cor):
        return _gstlearn.CovBase_setCor(self, cor)

    def getCor(self):
        return _gstlearn.CovBase_getCor(self)

    def getSill(self, *args):
        return _gstlearn.CovBase_getSill(self, *args)

    def attachNoStatDb(self, db):
        return _gstlearn.CovBase_attachNoStatDb(self, db)

    def makeSillNoStatDb(self, namecol, ivar=0, jvar=0, db=None):
        return _gstlearn.CovBase_makeSillNoStatDb(self, namecol, ivar, jvar, db)

    def makeSillStationary(self, ivar=0, jvar=0):
        return _gstlearn.CovBase_makeSillStationary(self, ivar, jvar)

    def makeSillNoStatFunctional(self, func, ivar=0, jvar=0):
        return _gstlearn.CovBase_makeSillNoStatFunctional(self, func, ivar, jvar)

    def makeStationary(self):
        return _gstlearn.CovBase_makeStationary(self)

    def getNSills(self):
        return _gstlearn.CovBase_getNSills(self)

    def isNoStatForVariance(self):
        return _gstlearn.CovBase_isNoStatForVariance(self)

    def informMeshByMesh(self, amesh):
        return _gstlearn.CovBase_informMeshByMesh(self, amesh)

    def informMeshByApex(self, amesh):
        return _gstlearn.CovBase_informMeshByApex(self, amesh)

    def informCoords(self, coords, econs, iv1=0, iv2=0):
        return _gstlearn.CovBase_informCoords(self, coords, econs, iv1, iv2)

    def informDbIn(self, dbin):
        return _gstlearn.CovBase_informDbIn(self, dbin)

    def informDbOut(self, dbout):
        return _gstlearn.CovBase_informDbOut(self, dbout)

    def informMeshByMeshForSills(self, amesh):
        return _gstlearn.CovBase_informMeshByMeshForSills(self, amesh)

    def informMeshByApexForSills(self, amesh):
        return _gstlearn.CovBase_informMeshByApexForSills(self, amesh)

    def informDbInForSills(self, dbin):
        return _gstlearn.CovBase_informDbInForSills(self, dbin)

    def informDbOutForSills(self, dbout):
        return _gstlearn.CovBase_informDbOutForSills(self, dbout)

    def updateCovByPoints(self, icas1, iech1, icas2, iech2):
        return _gstlearn.CovBase_updateCovByPoints(self, icas1, iech1, icas2, iech2)

    def updateCovByMesh(self, imesh, aniso=True):
        return _gstlearn.CovBase_updateCovByMesh(self, imesh, aniso)

    def getValue(self, econs, iv1, iv2):
        return _gstlearn.CovBase_getValue(self, econs, iv1, iv2)

    def nostatUpdate(self, covint):
        return _gstlearn.CovBase_nostatUpdate(self, covint)

# Register CovBase in _gstlearn:
_gstlearn.CovBase_swigregister(CovBase)
class ACor(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACor

    def getNVariables(self):
        return _gstlearn.ACor_getNVariables(self)

    def setContext(self, ctxt):
        return _gstlearn.ACor_setContext(self, ctxt)

    def eval0(self, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACor_eval0(self, ivar, jvar, mode)

    def eval(self, p1, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACor_eval(self, p1, p2, ivar, jvar, mode)

    def copyCovContext(self, ctxt):
        return _gstlearn.ACor_copyCovContext(self, ctxt)

    def updateFromContext(self):
        return _gstlearn.ACor_updateFromContext(self)

    def optimizationPostProcess(self):
        return _gstlearn.ACor_optimizationPostProcess(self)

    def makeElemNoStat(self, *args, **kwargs):
        return _gstlearn.ACor_makeElemNoStat(self, *args, **kwargs)

    def getContext(self):
        return _gstlearn.ACor_getContext(self)

    def getContextCopy(self):
        return _gstlearn.ACor_getContextCopy(self)

    def initFromContext(self):
        return _gstlearn.ACor_initFromContext(self)

    def optimizationPreProcess(self, p, p1As):
        return _gstlearn.ACor_optimizationPreProcess(self, p, p1As)

    def evalCovOnSphere(self, alpha, degree=50, flagScaleDistance=False, mode=None):
        return _gstlearn.ACor_evalCovOnSphere(self, alpha, degree, flagScaleDistance, mode)

    def _checkDims(self, idim, jdim):
        return _gstlearn.ACor__checkDims(self, idim, jdim)

    def evalSpectrumOnSphere(self, n, flagNormDistance=False, flagCumul=False):
        return _gstlearn.ACor_evalSpectrumOnSphere(self, n, flagNormDistance, flagCumul)

    def attachNoStatDb(self, db):
        return _gstlearn.ACor_attachNoStatDb(self, db)

    def evalSpectrum(self, freq, ivar, jvar):
        return _gstlearn.ACor_evalSpectrum(self, freq, ivar, jvar)

    def checkAndManageNoStatDb(self, db, namecol):
        return _gstlearn.ACor_checkAndManageNoStatDb(self, db, namecol)

    def updateCovByMesh(self, imesh, aniso=True):
        return _gstlearn.ACor_updateCovByMesh(self, imesh, aniso)

    def getValue(self, econs, iv1, iv2):
        return _gstlearn.ACor_getValue(self, econs, iv1, iv2)

    def makeStationary(self):
        return _gstlearn.ACor_makeStationary(self)

    def createNoStatTab(self):
        return _gstlearn.ACor_createNoStatTab(self)

    def informMeshByMesh(self, amesh):
        return _gstlearn.ACor_informMeshByMesh(self, amesh)

    def informMeshByApex(self, amesh):
        return _gstlearn.ACor_informMeshByApex(self, amesh)

    def informCoords(self, coords, econs, iv1=0, iv2=0):
        return _gstlearn.ACor_informCoords(self, coords, econs, iv1, iv2)

    def informDbIn(self, dbin):
        return _gstlearn.ACor_informDbIn(self, dbin)

    def informDbOut(self, dbout):
        return _gstlearn.ACor_informDbOut(self, dbout)

    def updateCovByPoints(self, icas1, iech1, icas2, iech2):
        return _gstlearn.ACor_updateCovByPoints(self, icas1, iech1, icas2, iech2)

    def manage(self, db1, db2):
        return _gstlearn.ACor_manage(self, db1, db2)

    def getDimensionNumber(self):
        return _gstlearn.ACor_getDimensionNumber(self)

# Register ACor in _gstlearn:
_gstlearn.ACor_swigregister(ACor)
class CorAniso(ACor, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CorAniso_swiginit(self, _gstlearn.new_CorAniso(*args))
    __swig_destroy__ = _gstlearn.delete_CorAniso

    def clone(self):
        return _gstlearn.CorAniso_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.CorAniso_toString(self, strfmt)

    def isConsistent(self, space):
        return _gstlearn.CorAniso_isConsistent(self, space)

    def getNVariables(self):
        return _gstlearn.CorAniso_getNVariables(self)

    def eval(self, p1, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.CorAniso_eval(self, p1, p2, ivar, jvar, mode)

    def evalCor(self, p1, p2, mode=None, ivar=0, jvar=0):
        return _gstlearn.CorAniso_evalCor(self, p1, p2, mode, ivar, jvar)

    def evalCovOnSphere(self, alpha, degree=50, flagScaleDistance=True, mode=None):
        return _gstlearn.CorAniso_evalCovOnSphere(self, alpha, degree, flagScaleDistance, mode)

    def evalSpectrumOnSphere(self, n, flagNormDistance=False, flagCumul=False):
        return _gstlearn.CorAniso_evalSpectrumOnSphere(self, n, flagNormDistance, flagCumul)

    def evalSpectrum(self, freq, ivar=0, jvar=0):
        return _gstlearn.CorAniso_evalSpectrum(self, freq, ivar, jvar)

    def getIntegralRange(self, ndisc, hmax):
        return _gstlearn.CorAniso_getIntegralRange(self, ndisc, hmax)

    def getFormula(self):
        return _gstlearn.CorAniso_getFormula(self)

    def getBallRadius(self):
        return _gstlearn.CorAniso_getBallRadius(self)

    @staticmethod
    def isOptimizationInitialized(p1As, db=None):
        return _gstlearn.CorAniso_isOptimizationInitialized(p1As, db)

    def optimizationPreProcess(self, p, p1As):
        return _gstlearn.CorAniso_optimizationPreProcess(self, p, p1As)

    def optimizationSetTargetByIndex(self, iech, p1As, p2A):
        return _gstlearn.CorAniso_optimizationSetTargetByIndex(self, iech, p1As, p2A)

    def optimizationPostProcess(self):
        return _gstlearn.CorAniso_optimizationPostProcess(self)

    def isNoStat(self):
        return _gstlearn.CorAniso_isNoStat(self)

    def isValidForTurningBand(self):
        return _gstlearn.CorAniso_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CorAniso_simulateTurningBand(self, t0, operTB)

    def isValidForSpectral(self):
        return _gstlearn.CorAniso_isValidForSpectral(self)

    def simulateSpectralOmega(self, nb):
        return _gstlearn.CorAniso_simulateSpectralOmega(self, nb)

    @staticmethod
    def createIsotropic(ctxt, type, range, param=1., flagRange=True):
        return _gstlearn.CorAniso_createIsotropic(ctxt, type, range, param, flagRange)

    @staticmethod
    def createAnisotropic(*args, **kwargs):
        return _gstlearn.CorAniso_createAnisotropic(*args, **kwargs)

    @staticmethod
    def createIsotropicMulti(ctxt, type, range, param=1., flagRange=True):
        return _gstlearn.CorAniso_createIsotropicMulti(ctxt, type, range, param, flagRange)

    @staticmethod
    def createAnisotropicMulti(*args, **kwargs):
        return _gstlearn.CorAniso_createAnisotropicMulti(*args, **kwargs)

    def setContext(self, ctxt):
        return _gstlearn.CorAniso_setContext(self, ctxt)

    def setParam(self, param):
        return _gstlearn.CorAniso_setParam(self, param)

    def setNoStatFactor(self, noStatFactor):
        return _gstlearn.CorAniso_setNoStatFactor(self, noStatFactor)

    def setRangeIsotropic(self, range):
        return _gstlearn.CorAniso_setRangeIsotropic(self, range)

    def setRange(self, idim, range):
        return _gstlearn.CorAniso_setRange(self, idim, range)

    def setRanges(self, ranges):
        return _gstlearn.CorAniso_setRanges(self, ranges)

    def setScale(self, *args):
        return _gstlearn.CorAniso_setScale(self, *args)

    def setScales(self, scales):
        return _gstlearn.CorAniso_setScales(self, scales)

    def setAnisoRotation(self, *args):
        return _gstlearn.CorAniso_setAnisoRotation(self, *args)

    def setAnisoAngles(self, angles):
        return _gstlearn.CorAniso_setAnisoAngles(self, angles)

    def setAnisoAngle(self, idim, angle):
        return _gstlearn.CorAniso_setAnisoAngle(self, idim, angle)

    def setRotationAnglesAndRadius(self, *args, **kwargs):
        return _gstlearn.CorAniso_setRotationAnglesAndRadius(self, *args, **kwargs)

    def getRanges(self):
        return _gstlearn.CorAniso_getRanges(self)

    def getAnisoRotation(self):
        return _gstlearn.CorAniso_getAnisoRotation(self)

    def getScales(self):
        return _gstlearn.CorAniso_getScales(self)

    def setType(self, type):
        return _gstlearn.CorAniso_setType(self, type)

    def getFlagAniso(self):
        return _gstlearn.CorAniso_getFlagAniso(self)

    def getFlagRotation(self):
        return _gstlearn.CorAniso_getFlagRotation(self)

    def getRange(self, *args):
        return _gstlearn.CorAniso_getRange(self, *args)

    def getScale(self, *args):
        return _gstlearn.CorAniso_getScale(self, *args)

    def getAnisoInvMat(self):
        return _gstlearn.CorAniso_getAnisoInvMat(self)

    def getAnisoAngles(self, *args):
        return _gstlearn.CorAniso_getAnisoAngles(self, *args)

    def getAnisoRotMat(self, *args):
        return _gstlearn.CorAniso_getAnisoRotMat(self, *args)

    def getAnisoCoeffs(self, *args):
        return _gstlearn.CorAniso_getAnisoCoeffs(self, *args)

    def getType(self):
        return _gstlearn.CorAniso_getType(self)

    def getParam(self):
        return _gstlearn.CorAniso_getParam(self)

    def getScadef(self):
        return _gstlearn.CorAniso_getScadef(self)

    def getParMax(self):
        return _gstlearn.CorAniso_getParMax(self)

    def getMaxNDim(self):
        return _gstlearn.CorAniso_getMaxNDim(self)

    def getMinOrder(self):
        return _gstlearn.CorAniso_getMinOrder(self)

    def hasInt1D(self):
        return _gstlearn.CorAniso_hasInt1D(self)

    def hasInt2D(self):
        return _gstlearn.CorAniso_hasInt2D(self)

    def hasRange(self):
        return _gstlearn.CorAniso_hasRange(self)

    def hasParam(self):
        return _gstlearn.CorAniso_hasParam(self)

    def getCovName(self):
        return _gstlearn.CorAniso_getCovName(self)

    def isIsotropic(self):
        return _gstlearn.CorAniso_isIsotropic(self)

    def isAsymptotic(self):
        return _gstlearn.CorAniso_isAsymptotic(self)

    def hasRotation(self):
        return _gstlearn.CorAniso_hasRotation(self)

    def getAniso(self):
        return _gstlearn.CorAniso_getAniso(self)

    def setAniso(self, aniso):
        return _gstlearn.CorAniso_setAniso(self, aniso)

    def getCova(self):
        return _gstlearn.CorAniso_getCova(self)

    def getGradParamNumber(self):
        return _gstlearn.CorAniso_getGradParamNumber(self)

    def hasCovDerivative(self):
        return _gstlearn.CorAniso_hasCovDerivative(self)

    def hasCovOnSphere(self):
        return _gstlearn.CorAniso_hasCovOnSphere(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.CorAniso_hasSpectrumOnSphere(self)

    def hasMarkovCoeffs(self):
        return _gstlearn.CorAniso_hasMarkovCoeffs(self)

    def hasSpectrumOnRn(self):
        return _gstlearn.CorAniso_hasSpectrumOnRn(self)

    def normalizeOnSphere(self, n=50):
        return _gstlearn.CorAniso_normalizeOnSphere(self, n)

    def makeRangeNoStatDb(self, namecol, idim=0, db=None):
        return _gstlearn.CorAniso_makeRangeNoStatDb(self, namecol, idim, db)

    def makeScaleNoStatDb(self, namecol, idim=0, db=None):
        return _gstlearn.CorAniso_makeScaleNoStatDb(self, namecol, idim, db)

    def makeAngleNoStatDb(self, namecol, idim=0, db=None):
        return _gstlearn.CorAniso_makeAngleNoStatDb(self, namecol, idim, db)

    def makeTensorNoStatDb(self, namecol, idim=0, jdim=0, db=None):
        return _gstlearn.CorAniso_makeTensorNoStatDb(self, namecol, idim, jdim, db)

    def makeParamNoStatDb(self, namecol, db=None):
        return _gstlearn.CorAniso_makeParamNoStatDb(self, namecol, db)

    def makeRangeNoStatFunctional(self, func, idim=0):
        return _gstlearn.CorAniso_makeRangeNoStatFunctional(self, func, idim)

    def makeScaleNoStatFunctional(self, func, idim=0):
        return _gstlearn.CorAniso_makeScaleNoStatFunctional(self, func, idim)

    def makeAngleNoStatFunctional(self, func, idim=0):
        return _gstlearn.CorAniso_makeAngleNoStatFunctional(self, func, idim)

    def makeTensorNoStatFunctional(self, func, idim=0, jdim=0):
        return _gstlearn.CorAniso_makeTensorNoStatFunctional(self, func, idim, jdim)

    def makeParamNoStatFunctional(self, func):
        return _gstlearn.CorAniso_makeParamNoStatFunctional(self, func)

    def makeRangeStationary(self, idim=0):
        return _gstlearn.CorAniso_makeRangeStationary(self, idim)

    def makeScaleStationary(self, idim=0):
        return _gstlearn.CorAniso_makeScaleStationary(self, idim)

    def makeAngleStationary(self, idim=0):
        return _gstlearn.CorAniso_makeAngleStationary(self, idim)

    def makeTensorStationary(self, idim, jdim):
        return _gstlearn.CorAniso_makeTensorStationary(self, idim, jdim)

    def makeParamStationary(self):
        return _gstlearn.CorAniso_makeParamStationary(self)

    def getNAngles(self):
        return _gstlearn.CorAniso_getNAngles(self)

    def getNRanges(self):
        return _gstlearn.CorAniso_getNRanges(self)

    def getNScales(self):
        return _gstlearn.CorAniso_getNScales(self)

    def isNoStatForParam(self):
        return _gstlearn.CorAniso_isNoStatForParam(self)

    def isNoStatForTensor(self):
        return _gstlearn.CorAniso_isNoStatForTensor(self)

    def isNoStatForAnisotropy(self):
        return _gstlearn.CorAniso_isNoStatForAnisotropy(self)

    def isNoStatForVariance(self):
        return _gstlearn.CorAniso_isNoStatForVariance(self)

    def isNoStatForRotation(self):
        return _gstlearn.CorAniso_isNoStatForRotation(self)

    def evalCovOnSphereVec(self, alpha, degree=50, flagScaleDistance=False, mode=None):
        return _gstlearn.CorAniso_evalCovOnSphereVec(self, alpha, degree, flagScaleDistance, mode)

    def evalCovFFT(self, hmax, N=128, ivar=0, jvar=0):
        return _gstlearn.CorAniso_evalCovFFT(self, hmax, N, ivar, jvar)

    def getMarkovCoeffs(self):
        return _gstlearn.CorAniso_getMarkovCoeffs(self)

    def setMarkovCoeffs(self, coeffs):
        return _gstlearn.CorAniso_setMarkovCoeffs(self, coeffs)

    def setMarkovCoeffsBySquaredPolynomials(self, coeffs1, coeffs2, eps=0):
        return _gstlearn.CorAniso_setMarkovCoeffsBySquaredPolynomials(self, coeffs1, coeffs2, eps)

    def computeMarkovCoeffs(self):
        return _gstlearn.CorAniso_computeMarkovCoeffs(self)

    def getCorrec(self):
        return _gstlearn.CorAniso_getCorrec(self)

    def getFullCorrec(self):
        return _gstlearn.CorAniso_getFullCorrec(self)

    def nostatUpdate(self, covint):
        return _gstlearn.CorAniso_nostatUpdate(self, covint)

    def informMeshByMeshForAnisotropy(self, amesh):
        return _gstlearn.CorAniso_informMeshByMeshForAnisotropy(self, amesh)

    def informMeshByApexForAnisotropy(self, amesh):
        return _gstlearn.CorAniso_informMeshByApexForAnisotropy(self, amesh)

    def informDbInForAnisotropy(self, dbin):
        return _gstlearn.CorAniso_informDbInForAnisotropy(self, dbin)

    def informDbOutForAnisotropy(self, dbout):
        return _gstlearn.CorAniso_informDbOutForAnisotropy(self, dbout)

    def updateCovByPoints(self, icas1, iech1, icas2, iech2):
        return _gstlearn.CorAniso_updateCovByPoints(self, icas1, iech1, icas2, iech2)

    def updateCovByMesh(self, imesh, aniso=True):
        return _gstlearn.CorAniso_updateCovByMesh(self, imesh, aniso)

    def getValue(self, econs, iv1, iv2):
        return _gstlearn.CorAniso_getValue(self, econs, iv1, iv2)

    def setOptimEnabled(self, flag):
        return _gstlearn.CorAniso_setOptimEnabled(self, flag)

    def computeCorrec(self):
        return _gstlearn.CorAniso_computeCorrec(self)

    def evalCorFromH(self, h, mode):
        return _gstlearn.CorAniso_evalCorFromH(self, h, mode)

    def getDetTensor(self):
        return _gstlearn.CorAniso_getDetTensor(self)

    def updateFromContext(self):
        return _gstlearn.CorAniso_updateFromContext(self)

    def initFromContext(self):
        return _gstlearn.CorAniso_initFromContext(self)

    def optimizationSetTarget(self, pt, p2A):
        return _gstlearn.CorAniso_optimizationSetTarget(self, pt, p2A)

    def optimizationTransformSP(self, ptin, ptout):
        return _gstlearn.CorAniso_optimizationTransformSP(self, ptin, ptout)

    def toStringParams(self, strfmt=None):
        return _gstlearn.CorAniso_toStringParams(self, strfmt)

    def toStringNoStat(self, strfmt=None, i=0):
        return _gstlearn.CorAniso_toStringNoStat(self, strfmt, i)

# Register CorAniso in _gstlearn:
_gstlearn.CorAniso_swigregister(CorAniso)
class ACovFunc(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACovFunc

    def toString(self, strfmt=None):
        return _gstlearn.ACovFunc_toString(self, strfmt)

    def getFormula(self):
        return _gstlearn.ACovFunc_getFormula(self)

    def getScadef(self):
        return _gstlearn.ACovFunc_getScadef(self)

    def getParMax(self):
        return _gstlearn.ACovFunc_getParMax(self)

    def hasInt1D(self):
        return _gstlearn.ACovFunc_hasInt1D(self)

    def hasInt2D(self):
        return _gstlearn.ACovFunc_hasInt2D(self)

    def hasRange(self):
        return _gstlearn.ACovFunc_hasRange(self)

    def hasParam(self):
        return _gstlearn.ACovFunc_hasParam(self)

    def getCovName(self):
        return _gstlearn.ACovFunc_getCovName(self)

    def hasCovDerivative(self):
        return _gstlearn.ACovFunc_hasCovDerivative(self)

    def hasCovOnRn(self):
        return _gstlearn.ACovFunc_hasCovOnRn(self)

    def hasCovOnSphere(self):
        return _gstlearn.ACovFunc_hasCovOnSphere(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.ACovFunc_hasSpectrumOnSphere(self)

    def hasSpectrumOnRn(self):
        return _gstlearn.ACovFunc_hasSpectrumOnRn(self)

    def hasMarkovCoeffs(self):
        return _gstlearn.ACovFunc_hasMarkovCoeffs(self)

    def normalizeOnSphere(self, n=50, scale=1.):
        return _gstlearn.ACovFunc_normalizeOnSphere(self, n, scale)

    def isConsistent(self):
        return _gstlearn.ACovFunc_isConsistent(self)

    def getMaxNDim(self):
        return _gstlearn.ACovFunc_getMaxNDim(self)

    def getMinOrder(self):
        return _gstlearn.ACovFunc_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.ACovFunc_getCompatibleSpaceR(self)

    def getCompatibleSpaceS(self):
        return _gstlearn.ACovFunc_getCompatibleSpaceS(self)

    def isValidForTurningBand(self):
        return _gstlearn.ACovFunc_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.ACovFunc_simulateTurningBand(self, t0, operTB)

    def isValidForSpectral(self):
        return _gstlearn.ACovFunc_isValidForSpectral(self)

    def simulateSpectralOmega(self, nb):
        return _gstlearn.ACovFunc_simulateSpectralOmega(self, nb)

    def setParam(self, param):
        return _gstlearn.ACovFunc_setParam(self, param)

    def setField(self, field):
        return _gstlearn.ACovFunc_setField(self, field)

    def evalCov(self, h):
        return _gstlearn.ACovFunc_evalCov(self, h)

    def evalCovDerivative(self, degree, h):
        return _gstlearn.ACovFunc_evalCovDerivative(self, degree, h)

    def evalCovOnSphere(self, alpha, scale=1., degree=50):
        return _gstlearn.ACovFunc_evalCovOnSphere(self, alpha, scale, degree)

    def evalSpectrumOnSphere(self, n, scale=1.):
        return _gstlearn.ACovFunc_evalSpectrumOnSphere(self, n, scale)

    def evalCovVec(self, vech):
        return _gstlearn.ACovFunc_evalCovVec(self, vech)

    def evalCovDerivativeVec(self, degree, vech):
        return _gstlearn.ACovFunc_evalCovDerivativeVec(self, degree, vech)

    def getType(self):
        return _gstlearn.ACovFunc_getType(self)

    def getContext(self):
        return _gstlearn.ACovFunc_getContext(self)

    def getParam(self):
        return _gstlearn.ACovFunc_getParam(self)

    def copyCovContext(self, ctxt):
        return _gstlearn.ACovFunc_copyCovContext(self, ctxt)

    def evaluateSpectrum(self, freq):
        return _gstlearn.ACovFunc_evaluateSpectrum(self, freq)

    def getMarkovCoeffs(self):
        return _gstlearn.ACovFunc_getMarkovCoeffs(self)

    def setMarkovCoeffs(self, coeffs):
        return _gstlearn.ACovFunc_setMarkovCoeffs(self, coeffs)

    def getCorrec(self):
        return _gstlearn.ACovFunc_getCorrec(self)

    def setCorrec(self, val):
        return _gstlearn.ACovFunc_setCorrec(self, val)

    def computeCorrec(self, ndim):
        return _gstlearn.ACovFunc_computeCorrec(self, ndim)

    def computeMarkovCoeffs(self, dim):
        return _gstlearn.ACovFunc_computeMarkovCoeffs(self, dim)

# Register ACovFunc in _gstlearn:
_gstlearn.ACovFunc_swigregister(ACovFunc)
class ACovAnisoList(ACov, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.ACovAnisoList_swiginit(self, _gstlearn.new_ACovAnisoList(*args))
    __swig_destroy__ = _gstlearn.delete_ACovAnisoList

    def clone(self):
        return _gstlearn.ACovAnisoList_clone(self)

    def isConsistent(self, space):
        return _gstlearn.ACovAnisoList_isConsistent(self, space)

    def getNVariables(self):
        return _gstlearn.ACovAnisoList_getNVariables(self)

    def isIndexable(self):
        return _gstlearn.ACovAnisoList_isIndexable(self)

    def eval0(self, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACovAnisoList_eval0(self, ivar, jvar, mode)

    def eval(self, p1, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.ACovAnisoList_eval(self, p1, p2, ivar, jvar, mode)

    def addEval0CovMatBiPointInPlace(self, mat, mode=None):
        return _gstlearn.ACovAnisoList_addEval0CovMatBiPointInPlace(self, mat, mode)

    def _addEvalCovMatBiPointInPlace(self, mat, p1, p2, mode=None):
        return _gstlearn.ACovAnisoList__addEvalCovMatBiPointInPlace(self, mat, p1, p2, mode)

    def updateCovByPoints(self, icas1, iech1, icas2, iech2):
        return _gstlearn.ACovAnisoList_updateCovByPoints(self, icas1, iech1, icas2, iech2)

    def toString(self, strfmt=None):
        return _gstlearn.ACovAnisoList_toString(self, strfmt)

    def addCov(self, cov):
        return _gstlearn.ACovAnisoList_addCov(self, cov)

    def hasAnam(self):
        return _gstlearn.ACovAnisoList_hasAnam(self)

    def getAnam(self):
        return _gstlearn.ACovAnisoList_getAnam(self)

    def setActiveFactor(self, arg2):
        return _gstlearn.ACovAnisoList_setActiveFactor(self, arg2)

    def getActiveFactor(self):
        return _gstlearn.ACovAnisoList_getActiveFactor(self)

    def getAnamNClass(self):
        return _gstlearn.ACovAnisoList_getAnamNClass(self)

    def addCovList(self, covs):
        return _gstlearn.ACovAnisoList_addCovList(self, covs)

    def delCov(self, icov):
        return _gstlearn.ACovAnisoList_delCov(self, icov)

    def delAllCov(self):
        return _gstlearn.ACovAnisoList_delAllCov(self)

    def setFiltered(self, icov, filtered):
        return _gstlearn.ACovAnisoList_setFiltered(self, icov, filtered)

    def getCovaNumber(self, skipNugget=False):
        return _gstlearn.ACovAnisoList_getCovaNumber(self, skipNugget)

    def isFiltered(self, icov):
        return _gstlearn.ACovAnisoList_isFiltered(self, icov)

    def hasRange(self):
        return _gstlearn.ACovAnisoList_hasRange(self)

    def isStationary(self):
        return _gstlearn.ACovAnisoList_isStationary(self)

    def getMaximumDistance(self):
        return _gstlearn.ACovAnisoList_getMaximumDistance(self)

    def getTotalSill(self, *args):
        return _gstlearn.ACovAnisoList_getTotalSill(self, *args)

    def normalize(self, sill=1., ivar=0, jvar=0):
        return _gstlearn.ACovAnisoList_normalize(self, sill, ivar, jvar)

    def getActiveCovList(self):
        return _gstlearn.ACovAnisoList_getActiveCovList(self)

    def getAllActiveCovList(self):
        return _gstlearn.ACovAnisoList_getAllActiveCovList(self)

    def isAllActiveCovList(self):
        return _gstlearn.ACovAnisoList_isAllActiveCovList(self)

    def isNoStat(self):
        return _gstlearn.ACovAnisoList_isNoStat(self)

    def getCova(self, *args):
        return _gstlearn.ACovAnisoList_getCova(self, *args)

    def setCova(self, icov, covs):
        return _gstlearn.ACovAnisoList_setCova(self, icov, covs)

    def getType(self, icov):
        return _gstlearn.ACovAnisoList_getType(self, icov)

    def getCovName(self, icov):
        return _gstlearn.ACovAnisoList_getCovName(self, icov)

    def setRangeIsotropic(self, icov, range):
        return _gstlearn.ACovAnisoList_setRangeIsotropic(self, icov, range)

    def setType(self, icov, type):
        return _gstlearn.ACovAnisoList_setType(self, icov, type)

    def setParam(self, icov, value):
        return _gstlearn.ACovAnisoList_setParam(self, icov, value)

    def setSill(self, icov, ivar, jvar, value):
        return _gstlearn.ACovAnisoList_setSill(self, icov, ivar, jvar, value)

    def setMarkovCoeffs(self, icov, coeffs):
        return _gstlearn.ACovAnisoList_setMarkovCoeffs(self, icov, coeffs)

    def getParam(self, icov):
        return _gstlearn.ACovAnisoList_getParam(self, icov)

    def getRange(self, icov):
        return _gstlearn.ACovAnisoList_getRange(self, icov)

    def getRanges(self, icov):
        return _gstlearn.ACovAnisoList_getRanges(self, icov)

    def getSill(self, *args):
        return _gstlearn.ACovAnisoList_getSill(self, *args)

    def getGradParamNumber(self, icov):
        return _gstlearn.ACovAnisoList_getGradParamNumber(self, icov)

    def extractCova(self, icov):
        return _gstlearn.ACovAnisoList_extractCova(self, icov)

    def getCovaMinIRFOrder(self):
        return _gstlearn.ACovAnisoList_getCovaMinIRFOrder(self)

    def _optimizationPreProcess(self, p):
        return _gstlearn.ACovAnisoList__optimizationPreProcess(self, p)

    def _optimizationPostProcess(self):
        return _gstlearn.ACovAnisoList__optimizationPostProcess(self)

    def _optimizationSetTarget(self, pt):
        return _gstlearn.ACovAnisoList__optimizationSetTarget(self, pt)

    def optimizationSetTargetByIndex(self, iech):
        return _gstlearn.ACovAnisoList_optimizationSetTargetByIndex(self, iech)

    def evalCovMatrixOptim(self, *args, **kwargs):
        return _gstlearn.ACovAnisoList_evalCovMatrixOptim(self, *args, **kwargs)

    def evalCovMatrixSymmetricOptim(self, *args, **kwargs):
        return _gstlearn.ACovAnisoList_evalCovMatrixSymmetricOptim(self, *args, **kwargs)

    def copyCovContext(self, ctxt):
        return _gstlearn.ACovAnisoList_copyCovContext(self, ctxt)

    def hasNugget(self):
        return _gstlearn.ACovAnisoList_hasNugget(self)

    def getRankNugget(self):
        return _gstlearn.ACovAnisoList_getRankNugget(self)

    def createReduce(self, validVars):
        return _gstlearn.ACovAnisoList_createReduce(self, validVars)

# Register ACovAnisoList in _gstlearn:
_gstlearn.ACovAnisoList_swigregister(ACovAnisoList)
class CovAniso(CovBase, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.CovAniso_swiginit(self, _gstlearn.new_CovAniso(*args))
    __swig_destroy__ = _gstlearn.delete_CovAniso

    def clone(self):
        return _gstlearn.CovAniso_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.CovAniso_toString(self, strfmt)

    def eval0(self, ivar=0, jvar=0, mode=None):
        return _gstlearn.CovAniso_eval0(self, ivar, jvar, mode)

    def eval(self, p1, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.CovAniso_eval(self, p1, p2, ivar, jvar, mode)

    def addEval0CovMatBiPointInPlace(self, mat, mode=None):
        return _gstlearn.CovAniso_addEval0CovMatBiPointInPlace(self, mat, mode)

    def evalCovOnSphere(self, alpha, degree=50, flagScaleDistance=True, mode=None):
        return _gstlearn.CovAniso_evalCovOnSphere(self, alpha, degree, flagScaleDistance, mode)

    def evalSpectrumOnSphere(self, n, flagNormDistance=False, flagCumul=False):
        return _gstlearn.CovAniso_evalSpectrumOnSphere(self, n, flagNormDistance, flagCumul)

    def evalSpectrum(self, freq, ivar=0, jvar=0):
        return _gstlearn.CovAniso_evalSpectrum(self, freq, ivar, jvar)

    def getIntegralRange(self, ndisc, hmax):
        return _gstlearn.CovAniso_getIntegralRange(self, ndisc, hmax)

    def getFormula(self):
        return _gstlearn.CovAniso_getFormula(self)

    def getBallRadius(self):
        return _gstlearn.CovAniso_getBallRadius(self)

    def evalOptimInPlace(self, res, ivars, index, ivar2=0, icol=0, mode=None, flagSym=False):
        return _gstlearn.CovAniso_evalOptimInPlace(self, res, ivars, index, ivar2, icol, mode, flagSym)

    def isValidForTurningBand(self):
        return _gstlearn.CovAniso_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovAniso_simulateTurningBand(self, t0, operTB)

    def isValidForSpectral(self):
        return _gstlearn.CovAniso_isValidForSpectral(self)

    def simulateSpectralOmega(self, nb):
        return _gstlearn.CovAniso_simulateSpectralOmega(self, nb)

    @staticmethod
    def createIsotropic(ctxt, type, range, sill=1., param=1., flagRange=True):
        return _gstlearn.CovAniso_createIsotropic(ctxt, type, range, sill, param, flagRange)

    @staticmethod
    def createAnisotropic(*args, **kwargs):
        return _gstlearn.CovAniso_createAnisotropic(*args, **kwargs)

    @staticmethod
    def createIsotropicMulti(ctxt, type, range, sills, param=1., flagRange=True):
        return _gstlearn.CovAniso_createIsotropicMulti(ctxt, type, range, sills, param, flagRange)

    @staticmethod
    def createAnisotropicMulti(*args, **kwargs):
        return _gstlearn.CovAniso_createAnisotropicMulti(*args, **kwargs)

    def setParam(self, param):
        return _gstlearn.CovAniso_setParam(self, param)

    def setRangeIsotropic(self, range):
        return _gstlearn.CovAniso_setRangeIsotropic(self, range)

    def setRange(self, idim, range):
        return _gstlearn.CovAniso_setRange(self, idim, range)

    def setRanges(self, ranges):
        return _gstlearn.CovAniso_setRanges(self, ranges)

    def setScale(self, *args):
        return _gstlearn.CovAniso_setScale(self, *args)

    def setScales(self, scales):
        return _gstlearn.CovAniso_setScales(self, scales)

    def setAnisoRotation(self, *args):
        return _gstlearn.CovAniso_setAnisoRotation(self, *args)

    def setAnisoAngles(self, angles):
        return _gstlearn.CovAniso_setAnisoAngles(self, angles)

    def setAnisoAngle(self, idim, angle):
        return _gstlearn.CovAniso_setAnisoAngle(self, idim, angle)

    def setRotationAnglesAndRadius(self, *args, **kwargs):
        return _gstlearn.CovAniso_setRotationAnglesAndRadius(self, *args, **kwargs)

    def getSlope(self, ivar, jvar):
        return _gstlearn.CovAniso_getSlope(self, ivar, jvar)

    def getRanges(self):
        return _gstlearn.CovAniso_getRanges(self)

    def getAnisoRotation(self):
        return _gstlearn.CovAniso_getAnisoRotation(self)

    def getScales(self):
        return _gstlearn.CovAniso_getScales(self)

    def setType(self, type):
        return _gstlearn.CovAniso_setType(self, type)

    def getFlagAniso(self):
        return _gstlearn.CovAniso_getFlagAniso(self)

    def getFlagRotation(self):
        return _gstlearn.CovAniso_getFlagRotation(self)

    def getRange(self, *args):
        return _gstlearn.CovAniso_getRange(self, *args)

    def getScale(self, *args):
        return _gstlearn.CovAniso_getScale(self, *args)

    def getAnisoInvMat(self):
        return _gstlearn.CovAniso_getAnisoInvMat(self)

    def getAnisoAngles(self, *args):
        return _gstlearn.CovAniso_getAnisoAngles(self, *args)

    def getAnisoRotMat(self, *args):
        return _gstlearn.CovAniso_getAnisoRotMat(self, *args)

    def getAnisoCoeffs(self, *args):
        return _gstlearn.CovAniso_getAnisoCoeffs(self, *args)

    def getContext(self):
        return _gstlearn.CovAniso_getContext(self)

    def getType(self):
        return _gstlearn.CovAniso_getType(self)

    def getParam(self):
        return _gstlearn.CovAniso_getParam(self)

    def getScadef(self):
        return _gstlearn.CovAniso_getScadef(self)

    def getParMax(self):
        return _gstlearn.CovAniso_getParMax(self)

    def getMaxNDim(self):
        return _gstlearn.CovAniso_getMaxNDim(self)

    def getMinOrder(self):
        return _gstlearn.CovAniso_getMinOrder(self)

    def hasInt1D(self):
        return _gstlearn.CovAniso_hasInt1D(self)

    def hasInt2D(self):
        return _gstlearn.CovAniso_hasInt2D(self)

    def hasRange(self):
        return _gstlearn.CovAniso_hasRange(self)

    def hasParam(self):
        return _gstlearn.CovAniso_hasParam(self)

    def getCovName(self):
        return _gstlearn.CovAniso_getCovName(self)

    def isIsotropic(self):
        return _gstlearn.CovAniso_isIsotropic(self)

    def isAsymptotic(self):
        return _gstlearn.CovAniso_isAsymptotic(self)

    def hasRotation(self):
        return _gstlearn.CovAniso_hasRotation(self)

    def getAniso(self):
        return _gstlearn.CovAniso_getAniso(self)

    def setAniso(self, aniso):
        return _gstlearn.CovAniso_setAniso(self, aniso)

    def getCova(self):
        return _gstlearn.CovAniso_getCova(self)

    def getGradParamNumber(self):
        return _gstlearn.CovAniso_getGradParamNumber(self)

    def hasCovDerivative(self):
        return _gstlearn.CovAniso_hasCovDerivative(self)

    def hasCovOnSphere(self):
        return _gstlearn.CovAniso_hasCovOnSphere(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.CovAniso_hasSpectrumOnSphere(self)

    def hasMarkovCoeffs(self):
        return _gstlearn.CovAniso_hasMarkovCoeffs(self)

    def hasSpectrumOnRn(self):
        return _gstlearn.CovAniso_hasSpectrumOnRn(self)

    def normalizeOnSphere(self, n=50):
        return _gstlearn.CovAniso_normalizeOnSphere(self, n)

    def isNoStatForParam(self):
        return _gstlearn.CovAniso_isNoStatForParam(self)

    def isNoStatForTensor(self):
        return _gstlearn.CovAniso_isNoStatForTensor(self)

    def isNoStatForAnisotropy(self):
        return _gstlearn.CovAniso_isNoStatForAnisotropy(self)

    def isNoStatForRotation(self):
        return _gstlearn.CovAniso_isNoStatForRotation(self)

    def makeRangeNoStatDb(self, namecol, idim=0, db=None):
        return _gstlearn.CovAniso_makeRangeNoStatDb(self, namecol, idim, db)

    def makeScaleNoStatDb(self, namecol, idim=0, db=None):
        return _gstlearn.CovAniso_makeScaleNoStatDb(self, namecol, idim, db)

    def makeAngleNoStatDb(self, namecol, idim=0, db=None):
        return _gstlearn.CovAniso_makeAngleNoStatDb(self, namecol, idim, db)

    def makeTensorNoStatDb(self, namecol, idim=0, jdim=0, db=None):
        return _gstlearn.CovAniso_makeTensorNoStatDb(self, namecol, idim, jdim, db)

    def makeParamNoStatDb(self, namecol, db=None):
        return _gstlearn.CovAniso_makeParamNoStatDb(self, namecol, db)

    def makeRangeNoStatFunctional(self, func, idim=0):
        return _gstlearn.CovAniso_makeRangeNoStatFunctional(self, func, idim)

    def makeScaleNoStatFunctional(self, func, idim=0):
        return _gstlearn.CovAniso_makeScaleNoStatFunctional(self, func, idim)

    def makeAngleNoStatFunctional(self, func, idim=0):
        return _gstlearn.CovAniso_makeAngleNoStatFunctional(self, func, idim)

    def makeTensorNoStatFunctional(self, func, idim=0, jdim=0):
        return _gstlearn.CovAniso_makeTensorNoStatFunctional(self, func, idim, jdim)

    def makeParamNoStatFunctional(self, func):
        return _gstlearn.CovAniso_makeParamNoStatFunctional(self, func)

    def makeRangeStationary(self, idim=0):
        return _gstlearn.CovAniso_makeRangeStationary(self, idim)

    def makeScaleStationary(self, idim=0):
        return _gstlearn.CovAniso_makeScaleStationary(self, idim)

    def makeAngleStationary(self, idim=0):
        return _gstlearn.CovAniso_makeAngleStationary(self, idim)

    def makeTensorStationary(self, idim, jdim):
        return _gstlearn.CovAniso_makeTensorStationary(self, idim, jdim)

    def makeParamStationary(self):
        return _gstlearn.CovAniso_makeParamStationary(self)

    def evalCovOnSphereVec(self, alpha, degree=50, flagScaleDistance=False, mode=None):
        return _gstlearn.CovAniso_evalCovOnSphereVec(self, alpha, degree, flagScaleDistance, mode)

    def evalCovFFT(self, hmax, N=128, ivar=0, jvar=0):
        return _gstlearn.CovAniso_evalCovFFT(self, hmax, N, ivar, jvar)

    def getMarkovCoeffs(self):
        return _gstlearn.CovAniso_getMarkovCoeffs(self)

    def setMarkovCoeffs(self, coeffs):
        return _gstlearn.CovAniso_setMarkovCoeffs(self, coeffs)

    def setMarkovCoeffsBySquaredPolynomials(self, coeffs1, coeffs2, eps=0):
        return _gstlearn.CovAniso_setMarkovCoeffsBySquaredPolynomials(self, coeffs1, coeffs2, eps)

    def computeMarkovCoeffs(self):
        return _gstlearn.CovAniso_computeMarkovCoeffs(self)

    def getCorrec(self):
        return _gstlearn.CovAniso_getCorrec(self)

    def getFullCorrec(self):
        return _gstlearn.CovAniso_getFullCorrec(self)

    def getDimensionNumber(self):
        return _gstlearn.CovAniso_getDimensionNumber(self)

    def createReduce(self, validVars):
        return _gstlearn.CovAniso_createReduce(self, validVars)

    def informDbInForAnisotropy(self, dbin):
        return _gstlearn.CovAniso_informDbInForAnisotropy(self, dbin)

    def informDbOutForAnisotropy(self, dbout):
        return _gstlearn.CovAniso_informDbOutForAnisotropy(self, dbout)

    def setOptimEnabled(self, flag):
        return _gstlearn.CovAniso_setOptimEnabled(self, flag)

    def informMeshByMeshForAnisotropy(self, amesh):
        return _gstlearn.CovAniso_informMeshByMeshForAnisotropy(self, amesh)

    def informMeshByApexForAnisotropy(self, amesh):
        return _gstlearn.CovAniso_informMeshByApexForAnisotropy(self, amesh)

    def _isOptimEnabled(self):
        return _gstlearn.CovAniso__isOptimEnabled(self)

    def isNoStat(self):
        return _gstlearn.CovAniso_isNoStat(self)

    def getNAngles(self):
        return _gstlearn.CovAniso_getNAngles(self)

    def getNRanges(self):
        return _gstlearn.CovAniso_getNRanges(self)

    def getNScales(self):
        return _gstlearn.CovAniso_getNScales(self)

    def _computeCorrec(self):
        return _gstlearn.CovAniso__computeCorrec(self)

    def _getDetTensor(self):
        return _gstlearn.CovAniso__getDetTensor(self)

    def _optimizationTransformSP(self, ptin, ptout):
        return _gstlearn.CovAniso__optimizationTransformSP(self, ptin, ptout)

    def _optimizationSetTarget(self, pt):
        return _gstlearn.CovAniso__optimizationSetTarget(self, pt)

    def __repr__(self):
        return _gstlearn.CovAniso___repr__(self)

# Register CovAniso in _gstlearn:
_gstlearn.CovAniso_swigregister(CovAniso)

def scale2range(type, scale, param=1.):
    return _gstlearn.scale2range(type, scale, param)

def range2scale(type, range, param=1.):
    return _gstlearn.range2scale(type, range, param)
class ACovGradient(CovAniso):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACovGradient

    def evalZAndGradients(self, p1, p2, covVal, covGp, covGG, mode=None, flagGrad=False):
        return _gstlearn.ACovGradient_evalZAndGradients(self, p1, p2, covVal, covGp, covGG, mode, flagGrad)

# Register ACovGradient in _gstlearn:
_gstlearn.ACovGradient_swigregister(ACovGradient)
class CorGneiting(ACor, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CorGneiting_swiginit(self, _gstlearn.new_CorGneiting(*args))
    __swig_destroy__ = _gstlearn.delete_CorGneiting

    def clone(self):
        return _gstlearn.CorGneiting_clone(self)

    def isConsistent(self, space):
        return _gstlearn.CorGneiting_isConsistent(self, space)

    def eval(self, p1, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.CorGneiting_eval(self, p1, p2, ivar, jvar, mode)

    def getNVariables(self):
        return _gstlearn.CorGneiting_getNVariables(self)

    def optimizationSetTargetByIndex(self, iech):
        return _gstlearn.CorGneiting_optimizationSetTargetByIndex(self, iech)

# Register CorGneiting in _gstlearn:
_gstlearn.CorGneiting_swigregister(CorGneiting)
class Def_Tapering(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_gstlearn.Def_Tapering_name_get, _gstlearn.Def_Tapering_name_set)
    maxNDim = property(_gstlearn.Def_Tapering_maxNDim_get, _gstlearn.Def_Tapering_maxNDim_set)
    tapeFunc = property(_gstlearn.Def_Tapering_tapeFunc_get, _gstlearn.Def_Tapering_tapeFunc_set)

    def __init__(self):
        _gstlearn.Def_Tapering_swiginit(self, _gstlearn.new_Def_Tapering())
    __swig_destroy__ = _gstlearn.delete_Def_Tapering

# Register Def_Tapering in _gstlearn:
_gstlearn.Def_Tapering_swigregister(Def_Tapering)

def _tape_spherical(arg1):
    return _gstlearn._tape_spherical(arg1)

def _tape_cubic(arg1):
    return _gstlearn._tape_cubic(arg1)

def _tape_triangle(arg1):
    return _gstlearn._tape_triangle(arg1)

def _tape_penta(arg1):
    return _gstlearn._tape_penta(arg1)

def _tape_storkey(arg1):
    return _gstlearn._tape_storkey(arg1)

def _tape_wendland1(arg1):
    return _gstlearn._tape_wendland1(arg1)

def _tape_wendland2(arg1):
    return _gstlearn._tape_wendland2(arg1)

def D_TAPE(rank):
    return _gstlearn.D_TAPE(rank)
class CovLMCTapering(ACovAnisoList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMCTapering_swiginit(self, _gstlearn.new_CovLMCTapering(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMCTapering

    def clone(self):
        return _gstlearn.CovLMCTapering_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.CovLMCTapering_toString(self, strfmt)

    def eval0(self, ivar=0, jvar=0, mode=None):
        return _gstlearn.CovLMCTapering_eval0(self, ivar, jvar, mode)

    def eval(self, p1, p2, ivar, jvar, mode=None):
        return _gstlearn.CovLMCTapering_eval(self, p1, p2, ivar, jvar, mode)

    def init(self, tapetype, taperange):
        return _gstlearn.CovLMCTapering_init(self, tapetype, taperange)

    def getName(self):
        return _gstlearn.CovLMCTapering_getName(self)

    def getTapeRange(self):
        return _gstlearn.CovLMCTapering_getTapeRange(self)

    def setTapeRange(self, range):
        return _gstlearn.CovLMCTapering_setTapeRange(self, range)

# Register CovLMCTapering in _gstlearn:
_gstlearn.CovLMCTapering_swigregister(CovLMCTapering)
class Def_Convolution(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    convName = property(_gstlearn.Def_Convolution_convName_get, _gstlearn.Def_Convolution_convName_set)
    convScale = property(_gstlearn.Def_Convolution_convScale_get, _gstlearn.Def_Convolution_convScale_set)
    convFunc = property(_gstlearn.Def_Convolution_convFunc_get, _gstlearn.Def_Convolution_convFunc_set)

    def __init__(self):
        _gstlearn.Def_Convolution_swiginit(self, _gstlearn.new_Def_Convolution())
    __swig_destroy__ = _gstlearn.delete_Def_Convolution

# Register Def_Convolution in _gstlearn:
_gstlearn.Def_Convolution_swigregister(Def_Convolution)

def _conv_uniform(v):
    return _gstlearn._conv_uniform(v)

def _conv_exponential(v):
    return _gstlearn._conv_exponential(v)

def _conv_gaussian(v):
    return _gstlearn._conv_gaussian(v)

def _conv_sincard(v):
    return _gstlearn._conv_sincard(v)

def D_CONV(rank):
    return _gstlearn.D_CONV(rank)
class CovLMCConvolution(ACovAnisoList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMCConvolution_swiginit(self, _gstlearn.new_CovLMCConvolution(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMCConvolution

    def clone(self):
        return _gstlearn.CovLMCConvolution_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.CovLMCConvolution_toString(self, strfmt)

    def eval0(self, ivar=0, jvar=0, mode=None):
        return _gstlearn.CovLMCConvolution_eval0(self, ivar, jvar, mode)

    def eval(self, p1, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.CovLMCConvolution_eval(self, p1, p2, ivar, jvar, mode)

    def init(self, conv_type, conv_idir, conv_range, conv_ndisc):
        return _gstlearn.CovLMCConvolution_init(self, conv_type, conv_idir, conv_range, conv_ndisc)

    def getConvRange(self):
        return _gstlearn.CovLMCConvolution_getConvRange(self)

    def getConvWeight(self):
        return _gstlearn.CovLMCConvolution_getConvWeight(self)

    def getConvIncr(self, *args):
        return _gstlearn.CovLMCConvolution_getConvIncr(self, *args)

    def getConvNumber(self):
        return _gstlearn.CovLMCConvolution_getConvNumber(self)

# Register CovLMCConvolution in _gstlearn:
_gstlearn.CovLMCConvolution_swigregister(CovLMCConvolution)
class CovLMCAnamorphosis(ACovAnisoList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMCAnamorphosis_swiginit(self, _gstlearn.new_CovLMCAnamorphosis(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMCAnamorphosis

    def clone(self):
        return _gstlearn.CovLMCAnamorphosis_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.CovLMCAnamorphosis_toString(self, strfmt)

    def eval0(self, ivar=0, jvar=0, mode=None):
        return _gstlearn.CovLMCAnamorphosis_eval0(self, ivar, jvar, mode)

    def eval(self, p1, p2, ivar=0, jvar=0, mode=None):
        return _gstlearn.CovLMCAnamorphosis_eval(self, p1, p2, ivar, jvar, mode)

    def addCov(self, cov):
        return _gstlearn.CovLMCAnamorphosis_addCov(self, cov)

    def hasAnam(self):
        return _gstlearn.CovLMCAnamorphosis_hasAnam(self)

    def getAnam(self):
        return _gstlearn.CovLMCAnamorphosis_getAnam(self)

    def setActiveFactor(self, iclass):
        return _gstlearn.CovLMCAnamorphosis_setActiveFactor(self, iclass)

    def getActiveFactor(self):
        return _gstlearn.CovLMCAnamorphosis_getActiveFactor(self)

    def getAnamNClass(self):
        return _gstlearn.CovLMCAnamorphosis_getAnamNClass(self)

    def init(self, *args, **kwargs):
        return _gstlearn.CovLMCAnamorphosis_init(self, *args, **kwargs)

    def getAnamType(self):
        return _gstlearn.CovLMCAnamorphosis_getAnamType(self)

    def setAnam(self, anam):
        return _gstlearn.CovLMCAnamorphosis_setAnam(self, anam)

# Register CovLMCAnamorphosis in _gstlearn:
_gstlearn.CovLMCAnamorphosis_swigregister(CovLMCAnamorphosis)
class CovLMGradient(ACovAnisoList):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLMGradient_swiginit(self, _gstlearn.new_CovLMGradient(*args))
    __swig_destroy__ = _gstlearn.delete_CovLMGradient

    def clone(self):
        return _gstlearn.CovLMGradient_clone(self)

    def addCov(self, cov):
        return _gstlearn.CovLMGradient_addCov(self, cov)

    def evalZAndGradients(self, *args):
        return _gstlearn.CovLMGradient_evalZAndGradients(self, *args)

# Register CovLMGradient in _gstlearn:
_gstlearn.CovLMGradient_swigregister(CovLMGradient)
class CovContext(ASpaceObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovContext_swiginit(self, _gstlearn.new_CovContext(*args))
    __swig_destroy__ = _gstlearn.delete_CovContext

    def toString(self, strfmt=None):
        return _gstlearn.CovContext_toString(self, strfmt)

    def isConsistent(self, space):
        return _gstlearn.CovContext_isConsistent(self, space)

    @staticmethod
    def create(nvar, ndim):
        return _gstlearn.CovContext_create(nvar, ndim)

    def isEqual(self, r):
        return _gstlearn.CovContext_isEqual(self, r)

    def getNVar(self):
        return _gstlearn.CovContext_getNVar(self)

    def getField(self):
        return _gstlearn.CovContext_getField(self)

    def getASpace(self):
        return _gstlearn.CovContext_getASpace(self)

    def getMean(self, *args):
        return _gstlearn.CovContext_getMean(self, *args)

    def getCovar0(self, *args):
        return _gstlearn.CovContext_getCovar0(self, *args)

    def setNVar(self, nvar):
        return _gstlearn.CovContext_setNVar(self, nvar)

    def setField(self, field):
        return _gstlearn.CovContext_setField(self, field)

    def setMean(self, *args):
        return _gstlearn.CovContext_setMean(self, *args)

    def setCovar0(self, *args):
        return _gstlearn.CovContext_setCovar0(self, *args)

    def copyCovContext(self, ctxt, severe=False):
        return _gstlearn.CovContext_copyCovContext(self, ctxt, severe)

    def createReduce(self, validVars):
        return _gstlearn.CovContext_createReduce(self, validVars)

# Register CovContext in _gstlearn:
_gstlearn.CovContext_swigregister(CovContext)
class CovCalcMode(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCalcMode_swiginit(self, _gstlearn.new_CovCalcMode(*args))
    __swig_destroy__ = _gstlearn.delete_CovCalcMode

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.CovCalcMode_create(*args, **kwargs)

    def getMember(self):
        return _gstlearn.CovCalcMode_getMember(self)

    def getAsVario(self):
        return _gstlearn.CovCalcMode_getAsVario(self)

    def getUnitary(self):
        return _gstlearn.CovCalcMode_getUnitary(self)

    def getOrderVario(self):
        return _gstlearn.CovCalcMode_getOrderVario(self)

    def getActiveCovList(self, *args):
        return _gstlearn.CovCalcMode_getActiveCovList(self, *args)

    def isAllActiveCov(self):
        return _gstlearn.CovCalcMode_isAllActiveCov(self)

    def setAsVario(self, asVario):
        return _gstlearn.CovCalcMode_setAsVario(self, asVario)

    def setMember(self, member):
        return _gstlearn.CovCalcMode_setMember(self, member)

    def setUnitary(self, unitary):
        return _gstlearn.CovCalcMode_setUnitary(self, unitary)

    def setOrderVario(self, orderVario):
        return _gstlearn.CovCalcMode_setOrderVario(self, orderVario)

    def setActiveCovListFromOne(self, keepOnlyCovIdx):
        return _gstlearn.CovCalcMode_setActiveCovListFromOne(self, keepOnlyCovIdx)

    def setActiveCovListFromInterval(self, inddeb, indto):
        return _gstlearn.CovCalcMode_setActiveCovListFromInterval(self, inddeb, indto)

    def setActiveCovList(self, activeCovList, allActiveCov):
        return _gstlearn.CovCalcMode_setActiveCovList(self, activeCovList, allActiveCov)

# Register CovCalcMode in _gstlearn:
_gstlearn.CovCalcMode_swigregister(CovCalcMode)
class CovBesselJ(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovBesselJ_swiginit(self, _gstlearn.new_CovBesselJ(*args))
    __swig_destroy__ = _gstlearn.delete_CovBesselJ

    def hasParam(self):
        return _gstlearn.CovBesselJ_hasParam(self)

    def getParMax(self):
        return _gstlearn.CovBesselJ_getParMax(self)

    def getFormula(self):
        return _gstlearn.CovBesselJ_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovBesselJ_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovBesselJ_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovBesselJ_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovBesselJ_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovBesselJ_simulateTurningBand(self, t0, operTB)

# Register CovBesselJ in _gstlearn:
_gstlearn.CovBesselJ_swigregister(CovBesselJ)
class CovMatern(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovMatern_swiginit(self, _gstlearn.new_CovMatern(*args))
    __swig_destroy__ = _gstlearn.delete_CovMatern

    def getFormula(self):
        return _gstlearn.CovMatern_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovMatern_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovMatern_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovMatern_getCompatibleSpaceR(self)

    def getCompatibleSpaceS(self):
        return _gstlearn.CovMatern_getCompatibleSpaceS(self)

    def hasParam(self):
        return _gstlearn.CovMatern_hasParam(self)

    def getParMax(self):
        return _gstlearn.CovMatern_getParMax(self)

    def getScadef(self):
        return _gstlearn.CovMatern_getScadef(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.CovMatern_hasSpectrumOnSphere(self)

    def hasSpectrumOnRn(self):
        return _gstlearn.CovMatern_hasSpectrumOnRn(self)

    def hasMarkovCoeffs(self):
        return _gstlearn.CovMatern_hasMarkovCoeffs(self)

    def evaluateSpectrum(self, freq):
        return _gstlearn.CovMatern_evaluateSpectrum(self, freq)

    def setMarkovCoeffs(self, coeffs):
        return _gstlearn.CovMatern_setMarkovCoeffs(self, coeffs)

    def getMarkovCoeffs(self):
        return _gstlearn.CovMatern_getMarkovCoeffs(self)

    def getCorrec(self):
        return _gstlearn.CovMatern_getCorrec(self)

    def computeCorrec(self, ndim):
        return _gstlearn.CovMatern_computeCorrec(self, ndim)

    def setCorrec(self, val):
        return _gstlearn.CovMatern_setCorrec(self, val)

    def computeMarkovCoeffs(self, dim):
        return _gstlearn.CovMatern_computeMarkovCoeffs(self, dim)

    def isValidForTurningBand(self):
        return _gstlearn.CovMatern_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovMatern_simulateTurningBand(self, t0, operTB)

    def isValidForSpectral(self):
        return _gstlearn.CovMatern_isValidForSpectral(self)

    def simulateSpectralOmega(self, nb):
        return _gstlearn.CovMatern_simulateSpectralOmega(self, nb)

# Register CovMatern in _gstlearn:
_gstlearn.CovMatern_swigregister(CovMatern)

def bessel_set_old_style(style):
    return _gstlearn.bessel_set_old_style(style)
class CovCauchy(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCauchy_swiginit(self, _gstlearn.new_CovCauchy(*args))
    __swig_destroy__ = _gstlearn.delete_CovCauchy

    def getFormula(self):
        return _gstlearn.CovCauchy_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovCauchy_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovCauchy_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovCauchy_getCompatibleSpaceR(self)

    def hasParam(self):
        return _gstlearn.CovCauchy_hasParam(self)

    def getParMax(self):
        return _gstlearn.CovCauchy_getParMax(self)

    def getScadef(self):
        return _gstlearn.CovCauchy_getScadef(self)

# Register CovCauchy in _gstlearn:
_gstlearn.CovCauchy_swigregister(CovCauchy)
class CovCosExp(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCosExp_swiginit(self, _gstlearn.new_CovCosExp(*args))
    __swig_destroy__ = _gstlearn.delete_CovCosExp

    def getParMax(self):
        return _gstlearn.CovCosExp_getParMax(self)

    def hasParam(self):
        return _gstlearn.CovCosExp_hasParam(self)

    def getScadef(self):
        return _gstlearn.CovCosExp_getScadef(self)

    def getCovName(self):
        return _gstlearn.CovCosExp_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovCosExp_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovCosExp_getCompatibleSpaceR(self)

# Register CovCosExp in _gstlearn:
_gstlearn.CovCosExp_swigregister(CovCosExp)
class CovCosinus(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCosinus_swiginit(self, _gstlearn.new_CovCosinus(*args))
    __swig_destroy__ = _gstlearn.delete_CovCosinus

    def getMaxNDim(self):
        return _gstlearn.CovCosinus_getMaxNDim(self)

    def getCovName(self):
        return _gstlearn.CovCosinus_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovCosinus_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovCosinus_getCompatibleSpaceR(self)

# Register CovCosinus in _gstlearn:
_gstlearn.CovCosinus_swigregister(CovCosinus)
class CovCubic(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovCubic_swiginit(self, _gstlearn.new_CovCubic(*args))
    __swig_destroy__ = _gstlearn.delete_CovCubic

    def getMaxNDim(self):
        return _gstlearn.CovCubic_getMaxNDim(self)

    def getFormula(self):
        return _gstlearn.CovCubic_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovCubic_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovCubic_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovCubic_getCompatibleSpaceR(self)

    def hasCovDerivative(self):
        return _gstlearn.CovCubic_hasCovDerivative(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovCubic_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovCubic_simulateTurningBand(self, t0, operTB)

# Register CovCubic in _gstlearn:
_gstlearn.CovCubic_swigregister(CovCubic)
class CovExponential(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovExponential_swiginit(self, _gstlearn.new_CovExponential(*args))
    __swig_destroy__ = _gstlearn.delete_CovExponential

    def getFormula(self):
        return _gstlearn.CovExponential_getFormula(self)

    def getScadef(self):
        return _gstlearn.CovExponential_getScadef(self)

    def getCovName(self):
        return _gstlearn.CovExponential_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovExponential_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovExponential_getCompatibleSpaceR(self)

    def getCompatibleSpaceS(self):
        return _gstlearn.CovExponential_getCompatibleSpaceS(self)

    def hasCovOnSphere(self):
        return _gstlearn.CovExponential_hasCovOnSphere(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.CovExponential_hasSpectrumOnSphere(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovExponential_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovExponential_simulateTurningBand(self, t0, operTB)

    def isValidForSpectral(self):
        return _gstlearn.CovExponential_isValidForSpectral(self)

    def simulateSpectralOmega(self, nb):
        return _gstlearn.CovExponential_simulateSpectralOmega(self, nb)

# Register CovExponential in _gstlearn:
_gstlearn.CovExponential_swigregister(CovExponential)
class CovGamma(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGamma_swiginit(self, _gstlearn.new_CovGamma(*args))
    __swig_destroy__ = _gstlearn.delete_CovGamma

    def getFormula(self):
        return _gstlearn.CovGamma_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovGamma_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovGamma_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovGamma_getCompatibleSpaceR(self)

    def hasParam(self):
        return _gstlearn.CovGamma_hasParam(self)

    def getParMax(self):
        return _gstlearn.CovGamma_getParMax(self)

    def getScadef(self):
        return _gstlearn.CovGamma_getScadef(self)

# Register CovGamma in _gstlearn:
_gstlearn.CovGamma_swigregister(CovGamma)
class CovGaussian(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGaussian_swiginit(self, _gstlearn.new_CovGaussian(*args))
    __swig_destroy__ = _gstlearn.delete_CovGaussian

    def getFormula(self):
        return _gstlearn.CovGaussian_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovGaussian_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovGaussian_getMinOrder(self)

    def getScadef(self):
        return _gstlearn.CovGaussian_getScadef(self)

    def hasCovDerivative(self):
        return _gstlearn.CovGaussian_hasCovDerivative(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovGaussian_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovGaussian_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovGaussian_simulateTurningBand(self, t0, operTB)

    def isValidForSpectral(self):
        return _gstlearn.CovGaussian_isValidForSpectral(self)

    def simulateSpectralOmega(self, nb):
        return _gstlearn.CovGaussian_simulateSpectralOmega(self, nb)

# Register CovGaussian in _gstlearn:
_gstlearn.CovGaussian_swigregister(CovGaussian)
class CovGC1(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGC1_swiginit(self, _gstlearn.new_CovGC1(*args))
    __swig_destroy__ = _gstlearn.delete_CovGC1

    def hasRange(self):
        return _gstlearn.CovGC1_hasRange(self)

    def getMinOrder(self):
        return _gstlearn.CovGC1_getMinOrder(self)

    def getCovName(self):
        return _gstlearn.CovGC1_getCovName(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovGC1_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovGC1_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovGC1_simulateTurningBand(self, t0, operTB)

# Register CovGC1 in _gstlearn:
_gstlearn.CovGC1_swigregister(CovGC1)
class CovGC3(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGC3_swiginit(self, _gstlearn.new_CovGC3(*args))
    __swig_destroy__ = _gstlearn.delete_CovGC3

    def hasRange(self):
        return _gstlearn.CovGC3_hasRange(self)

    def getMinOrder(self):
        return _gstlearn.CovGC3_getMinOrder(self)

    def getCovName(self):
        return _gstlearn.CovGC3_getCovName(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovGC3_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovGC3_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovGC3_simulateTurningBand(self, t0, operTB)

# Register CovGC3 in _gstlearn:
_gstlearn.CovGC3_swigregister(CovGC3)
class CovGC5(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGC5_swiginit(self, _gstlearn.new_CovGC5(*args))
    __swig_destroy__ = _gstlearn.delete_CovGC5

    def hasRange(self):
        return _gstlearn.CovGC5_hasRange(self)

    def getMinOrder(self):
        return _gstlearn.CovGC5_getMinOrder(self)

    def getCovName(self):
        return _gstlearn.CovGC5_getCovName(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovGC5_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovGC5_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovGC5_simulateTurningBand(self, t0, operTB)

# Register CovGC5 in _gstlearn:
_gstlearn.CovGC5_swigregister(CovGC5)
class CovGCspline2(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGCspline2_swiginit(self, _gstlearn.new_CovGCspline2(*args))
    __swig_destroy__ = _gstlearn.delete_CovGCspline2

    def getMinOrder(self):
        return _gstlearn.CovGCspline2_getMinOrder(self)

    def getMaxNDim(self):
        return _gstlearn.CovGCspline2_getMaxNDim(self)

    def getCovName(self):
        return _gstlearn.CovGCspline2_getCovName(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovGCspline2_getCompatibleSpaceR(self)

    def hasCovDerivative(self):
        return _gstlearn.CovGCspline2_hasCovDerivative(self)

# Register CovGCspline2 in _gstlearn:
_gstlearn.CovGCspline2_swigregister(CovGCspline2)
class CovGCspline(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGCspline_swiginit(self, _gstlearn.new_CovGCspline(*args))
    __swig_destroy__ = _gstlearn.delete_CovGCspline

    def hasRange(self):
        return _gstlearn.CovGCspline_hasRange(self)

    def getCovName(self):
        return _gstlearn.CovGCspline_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovGCspline_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovGCspline_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovGCspline_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovGCspline_simulateTurningBand(self, t0, operTB)

# Register CovGCspline in _gstlearn:
_gstlearn.CovGCspline_swigregister(CovGCspline)
class CovLinear(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLinear_swiginit(self, _gstlearn.new_CovLinear(*args))
    __swig_destroy__ = _gstlearn.delete_CovLinear

    def hasRange(self):
        return _gstlearn.CovLinear_hasRange(self)

    def getMinOrder(self):
        return _gstlearn.CovLinear_getMinOrder(self)

    def getCovName(self):
        return _gstlearn.CovLinear_getCovName(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovLinear_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovLinear_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovLinear_simulateTurningBand(self, t0, operTB)

# Register CovLinear in _gstlearn:
_gstlearn.CovLinear_swigregister(CovLinear)
class CovNugget(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovNugget_swiginit(self, _gstlearn.new_CovNugget(*args))
    __swig_destroy__ = _gstlearn.delete_CovNugget

    def getFormula(self):
        return _gstlearn.CovNugget_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovNugget_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovNugget_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovNugget_getCompatibleSpaceR(self)

    def hasRange(self):
        return _gstlearn.CovNugget_hasRange(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovNugget_isValidForTurningBand(self)

# Register CovNugget in _gstlearn:
_gstlearn.CovNugget_swigregister(CovNugget)
class CovPenta(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovPenta_swiginit(self, _gstlearn.new_CovPenta(*args))
    __swig_destroy__ = _gstlearn.delete_CovPenta

    def getMaxNDim(self):
        return _gstlearn.CovPenta_getMaxNDim(self)

    def getCovName(self):
        return _gstlearn.CovPenta_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovPenta_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovPenta_getCompatibleSpaceR(self)

# Register CovPenta in _gstlearn:
_gstlearn.CovPenta_swigregister(CovPenta)
class CovPower(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovPower_swiginit(self, _gstlearn.new_CovPower(*args))
    __swig_destroy__ = _gstlearn.delete_CovPower

    def hasRange(self):
        return _gstlearn.CovPower_hasRange(self)

    def hasParam(self):
        return _gstlearn.CovPower_hasParam(self)

    def getParMax(self):
        return _gstlearn.CovPower_getParMax(self)

    def getMinOrder(self):
        return _gstlearn.CovPower_getMinOrder(self)

    def getCovName(self):
        return _gstlearn.CovPower_getCovName(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovPower_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovPower_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovPower_simulateTurningBand(self, t0, operTB)

# Register CovPower in _gstlearn:
_gstlearn.CovPower_swigregister(CovPower)
class CovReg1D(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovReg1D_swiginit(self, _gstlearn.new_CovReg1D(*args))
    __swig_destroy__ = _gstlearn.delete_CovReg1D

    def getScadef(self):
        return _gstlearn.CovReg1D_getScadef(self)

    def getCovName(self):
        return _gstlearn.CovReg1D_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovReg1D_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovReg1D_getCompatibleSpaceR(self)

    def getMaxNDim(self):
        return _gstlearn.CovReg1D_getMaxNDim(self)

# Register CovReg1D in _gstlearn:
_gstlearn.CovReg1D_swigregister(CovReg1D)
class CovSincard(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovSincard_swiginit(self, _gstlearn.new_CovSincard(*args))
    __swig_destroy__ = _gstlearn.delete_CovSincard

    def getScadef(self):
        return _gstlearn.CovSincard_getScadef(self)

    def getFormula(self):
        return _gstlearn.CovSincard_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovSincard_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovSincard_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovSincard_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovSincard_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovSincard_simulateTurningBand(self, t0, operTB)

# Register CovSincard in _gstlearn:
_gstlearn.CovSincard_swigregister(CovSincard)
class CovSpherical(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovSpherical_swiginit(self, _gstlearn.new_CovSpherical(*args))
    __swig_destroy__ = _gstlearn.delete_CovSpherical

    def getMaxNDim(self):
        return _gstlearn.CovSpherical_getMaxNDim(self)

    def getFormula(self):
        return _gstlearn.CovSpherical_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovSpherical_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovSpherical_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovSpherical_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovSpherical_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovSpherical_simulateTurningBand(self, t0, operTB)

# Register CovSpherical in _gstlearn:
_gstlearn.CovSpherical_swigregister(CovSpherical)
class CovStable(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovStable_swiginit(self, _gstlearn.new_CovStable(*args))
    __swig_destroy__ = _gstlearn.delete_CovStable

    def hasParam(self):
        return _gstlearn.CovStable_hasParam(self)

    def getScadef(self):
        return _gstlearn.CovStable_getScadef(self)

    def getParMax(self):
        return _gstlearn.CovStable_getParMax(self)

    def getCovName(self):
        return _gstlearn.CovStable_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovStable_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovStable_getCompatibleSpaceR(self)

    def isValidForTurningBand(self):
        return _gstlearn.CovStable_isValidForTurningBand(self)

    def simulateTurningBand(self, t0, operTB):
        return _gstlearn.CovStable_simulateTurningBand(self, t0, operTB)

# Register CovStable in _gstlearn:
_gstlearn.CovStable_swigregister(CovStable)
class CovStorkey(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovStorkey_swiginit(self, _gstlearn.new_CovStorkey(*args))
    __swig_destroy__ = _gstlearn.delete_CovStorkey

    def getMaxNDim(self):
        return _gstlearn.CovStorkey_getMaxNDim(self)

    def getCovName(self):
        return _gstlearn.CovStorkey_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovStorkey_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovStorkey_getCompatibleSpaceR(self)

# Register CovStorkey in _gstlearn:
_gstlearn.CovStorkey_swigregister(CovStorkey)
class CovTriangle(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovTriangle_swiginit(self, _gstlearn.new_CovTriangle(*args))
    __swig_destroy__ = _gstlearn.delete_CovTriangle

    def getMaxNDim(self):
        return _gstlearn.CovTriangle_getMaxNDim(self)

    def getCovName(self):
        return _gstlearn.CovTriangle_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovTriangle_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovTriangle_getCompatibleSpaceR(self)

# Register CovTriangle in _gstlearn:
_gstlearn.CovTriangle_swigregister(CovTriangle)
class CovWendland0(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovWendland0_swiginit(self, _gstlearn.new_CovWendland0(*args))
    __swig_destroy__ = _gstlearn.delete_CovWendland0

    def getMaxNDim(self):
        return _gstlearn.CovWendland0_getMaxNDim(self)

    def getCovName(self):
        return _gstlearn.CovWendland0_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovWendland0_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovWendland0_getCompatibleSpaceR(self)

# Register CovWendland0 in _gstlearn:
_gstlearn.CovWendland0_swigregister(CovWendland0)
class CovWendland1(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovWendland1_swiginit(self, _gstlearn.new_CovWendland1(*args))
    __swig_destroy__ = _gstlearn.delete_CovWendland1

    def getMaxNDim(self):
        return _gstlearn.CovWendland1_getMaxNDim(self)

    def getCovName(self):
        return _gstlearn.CovWendland1_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovWendland1_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovWendland1_getCompatibleSpaceR(self)

# Register CovWendland1 in _gstlearn:
_gstlearn.CovWendland1_swigregister(CovWendland1)
class CovWendland2(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovWendland2_swiginit(self, _gstlearn.new_CovWendland2(*args))
    __swig_destroy__ = _gstlearn.delete_CovWendland2

    def getMaxNDim(self):
        return _gstlearn.CovWendland2_getMaxNDim(self)

    def getCovName(self):
        return _gstlearn.CovWendland2_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovWendland2_getMinOrder(self)

    def getCompatibleSpaceR(self):
        return _gstlearn.CovWendland2_getCompatibleSpaceR(self)

    def hasCovDerivative(self):
        return _gstlearn.CovWendland2_hasCovDerivative(self)

# Register CovWendland2 in _gstlearn:
_gstlearn.CovWendland2_swigregister(CovWendland2)
class CovMarkov(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovMarkov_swiginit(self, _gstlearn.new_CovMarkov(*args))
    __swig_destroy__ = _gstlearn.delete_CovMarkov

    def getFormula(self):
        return _gstlearn.CovMarkov_getFormula(self)

    def getCovName(self):
        return _gstlearn.CovMarkov_getCovName(self)

    def hasParam(self):
        return _gstlearn.CovMarkov_hasParam(self)

    def getParMax(self):
        return _gstlearn.CovMarkov_getParMax(self)

    def getScadef(self):
        return _gstlearn.CovMarkov_getScadef(self)

    def hasCovOnRn(self):
        return _gstlearn.CovMarkov_hasCovOnRn(self)

    def hasSpectrumOnRn(self):
        return _gstlearn.CovMarkov_hasSpectrumOnRn(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.CovMarkov_hasSpectrumOnSphere(self)

    def hasMarkovCoeffs(self):
        return _gstlearn.CovMarkov_hasMarkovCoeffs(self)

    def normalizeOnSphere(self, n=50, scale=1.):
        return _gstlearn.CovMarkov_normalizeOnSphere(self, n, scale)

    def evaluateSpectrum(self, freq):
        return _gstlearn.CovMarkov_evaluateSpectrum(self, freq)

    def getMarkovCoeffs(self):
        return _gstlearn.CovMarkov_getMarkovCoeffs(self)

    def setMarkovCoeffs(self, coeffs):
        return _gstlearn.CovMarkov_setMarkovCoeffs(self, coeffs)

    def getCorrec(self):
        return _gstlearn.CovMarkov_getCorrec(self)

    def setCorrec(self, val):
        return _gstlearn.CovMarkov_setCorrec(self, val)

# Register CovMarkov in _gstlearn:
_gstlearn.CovMarkov_swigregister(CovMarkov)
class CovGeometric(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovGeometric_swiginit(self, _gstlearn.new_CovGeometric(*args))
    __swig_destroy__ = _gstlearn.delete_CovGeometric

    def getCovName(self):
        return _gstlearn.CovGeometric_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovGeometric_getMinOrder(self)

    def getCompatibleSpaceS(self):
        return _gstlearn.CovGeometric_getCompatibleSpaceS(self)

    def hasCovOnSphere(self):
        return _gstlearn.CovGeometric_hasCovOnSphere(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.CovGeometric_hasSpectrumOnSphere(self)

# Register CovGeometric in _gstlearn:
_gstlearn.CovGeometric_swigregister(CovGeometric)
class CovPoisson(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovPoisson_swiginit(self, _gstlearn.new_CovPoisson(*args))
    __swig_destroy__ = _gstlearn.delete_CovPoisson

    def getCovName(self):
        return _gstlearn.CovPoisson_getCovName(self)

    def hasParam(self):
        return _gstlearn.CovPoisson_hasParam(self)

    def getParMax(self):
        return _gstlearn.CovPoisson_getParMax(self)

    def getMinOrder(self):
        return _gstlearn.CovPoisson_getMinOrder(self)

    def getCompatibleSpaceS(self):
        return _gstlearn.CovPoisson_getCompatibleSpaceS(self)

    def hasCovOnRn(self):
        return _gstlearn.CovPoisson_hasCovOnRn(self)

    def hasCovOnSphere(self):
        return _gstlearn.CovPoisson_hasCovOnSphere(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.CovPoisson_hasSpectrumOnSphere(self)

    def isValidForSpectral(self):
        return _gstlearn.CovPoisson_isValidForSpectral(self)

# Register CovPoisson in _gstlearn:
_gstlearn.CovPoisson_swigregister(CovPoisson)
class CovLinearSph(ACovFunc):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovLinearSph_swiginit(self, _gstlearn.new_CovLinearSph(*args))
    __swig_destroy__ = _gstlearn.delete_CovLinearSph

    def getCovName(self):
        return _gstlearn.CovLinearSph_getCovName(self)

    def getMinOrder(self):
        return _gstlearn.CovLinearSph_getMinOrder(self)

    def getCompatibleSpaceS(self):
        return _gstlearn.CovLinearSph_getCompatibleSpaceS(self)

    def hasCovOnRn(self):
        return _gstlearn.CovLinearSph_hasCovOnRn(self)

    def hasCovOnSphere(self):
        return _gstlearn.CovLinearSph_hasCovOnSphere(self)

    def hasSpectrumOnSphere(self):
        return _gstlearn.CovLinearSph_hasSpectrumOnSphere(self)

    def isValidForSpectral(self):
        return _gstlearn.CovLinearSph_isValidForSpectral(self)

# Register CovLinearSph in _gstlearn:
_gstlearn.CovLinearSph_swigregister(CovLinearSph)
class CovDiffusionAdvection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.CovDiffusionAdvection_swiginit(self, _gstlearn.new_CovDiffusionAdvection(*args))
    __swig_destroy__ = _gstlearn.delete_CovDiffusionAdvection

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.CovDiffusionAdvection_create(*args, **kwargs)

    def getMarkovL(self):
        return _gstlearn.CovDiffusionAdvection_getMarkovL(self)

    def setMarkovL(self, markovL):
        return _gstlearn.CovDiffusionAdvection_setMarkovL(self, markovL)

    def getMarkovR(self):
        return _gstlearn.CovDiffusionAdvection_getMarkovR(self)

    def setMarkovR(self, markovR):
        return _gstlearn.CovDiffusionAdvection_setMarkovR(self, markovR)

    def getScaleTime(self):
        return _gstlearn.CovDiffusionAdvection_getScaleTime(self)

    def setScaleTime(self, scaleTime):
        return _gstlearn.CovDiffusionAdvection_setScaleTime(self, scaleTime)

    def getSigma2(self):
        return _gstlearn.CovDiffusionAdvection_getSigma2(self)

    def setSigma2(self, sigma2):
        return _gstlearn.CovDiffusionAdvection_setSigma2(self, sigma2)

    def getVel(self):
        return _gstlearn.CovDiffusionAdvection_getVel(self)

    def setVel(self, vel):
        return _gstlearn.CovDiffusionAdvection_setVel(self, vel)

    def getGlobalCorrec(self):
        return _gstlearn.CovDiffusionAdvection_getGlobalCorrec(self)

    def getSpatialTrace(self):
        return _gstlearn.CovDiffusionAdvection_getSpatialTrace(self)

    def isNoneMarkovL(self):
        return _gstlearn.CovDiffusionAdvection_isNoneMarkovL(self)

    def isNoneMarkovR(self):
        return _gstlearn.CovDiffusionAdvection_isNoneMarkovR(self)

    def evalSpatialSpectrum(self, freq, time):
        return _gstlearn.CovDiffusionAdvection_evalSpatialSpectrum(self, freq, time)

    def evalCovFFT(self, hmax, time=0, N=128):
        return _gstlearn.CovDiffusionAdvection_evalCovFFT(self, hmax, time, N)

# Register CovDiffusionAdvection in _gstlearn:
_gstlearn.CovDiffusionAdvection_swigregister(CovDiffusionAdvection)
class CovHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CovHelper_swiginit(self, _gstlearn.new_CovHelper())
    __swig_destroy__ = _gstlearn.delete_CovHelper

    @staticmethod
    def getAllCovariances(ndim=2, minorder=-1, hasrange=False, flagSimtub=False, flagSimuSpectral=False):
        return _gstlearn.CovHelper_getAllCovariances(ndim, minorder, hasrange, flagSimtub, flagSimuSpectral)

# Register CovHelper in _gstlearn:
_gstlearn.CovHelper_swigregister(CovHelper)
class ADrift(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ADrift

    def toString(self, strfmt=None):
        return _gstlearn.ADrift_toString(self, strfmt)

    def getPowers(self):
        return _gstlearn.ADrift_getPowers(self)

    def getRankFex(self):
        return _gstlearn.ADrift_getRankFex(self)

    def getDriftName(self):
        return _gstlearn.ADrift_getDriftName(self)

    def getOrderIRF(self):
        return _gstlearn.ADrift_getOrderIRF(self)

    def getOrderIRFIdim(self, idim):
        return _gstlearn.ADrift_getOrderIRFIdim(self, idim)

    def eval(self, db, iech):
        return _gstlearn.ADrift_eval(self, db, iech)

    def getDriftNDimMax(self):
        return _gstlearn.ADrift_getDriftNDimMax(self)

    def isDriftExternal(self):
        return _gstlearn.ADrift_isDriftExternal(self)

# Register ADrift in _gstlearn:
_gstlearn.ADrift_swigregister(ADrift)
class DriftList(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftList_swiginit(self, _gstlearn.new_DriftList(*args))
    __swig_destroy__ = _gstlearn.delete_DriftList

    def clone(self):
        return _gstlearn.DriftList_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.DriftList_toString(self, strfmt)

    def getNVariables(self):
        return _gstlearn.DriftList_getNVariables(self)

    def getDriftNumber(self):
        return _gstlearn.DriftList_getDriftNumber(self)

    def hasDrift(self):
        return _gstlearn.DriftList_hasDrift(self)

    def addDrift(self, drift):
        return _gstlearn.DriftList_addDrift(self, drift)

    def delDrift(self, i):
        return _gstlearn.DriftList_delDrift(self, i)

    def delAllDrifts(self):
        return _gstlearn.DriftList_delAllDrifts(self)

    def getFiltered(self):
        return _gstlearn.DriftList_getFiltered(self)

    def isFiltered(self, i):
        return _gstlearn.DriftList_isFiltered(self, i)

    def setFiltered(self, *args):
        return _gstlearn.DriftList_setFiltered(self, *args)

    def getDriftEquationNumber(self):
        return _gstlearn.DriftList_getDriftEquationNumber(self)

    def hasExternalDrift(self):
        return _gstlearn.DriftList_hasExternalDrift(self)

    def isValid(self):
        return _gstlearn.DriftList_isValid(self)

    def getRankFex(self, il):
        return _gstlearn.DriftList_getRankFex(self, il)

    def getDriftName(self, il):
        return _gstlearn.DriftList_getDriftName(self, il)

    def getBetaHats(self):
        return _gstlearn.DriftList_getBetaHats(self)

    def setDriftCLByPart(self, ivar, ib, coef):
        return _gstlearn.DriftList_setDriftCLByPart(self, ivar, ib, coef)

    def resetDriftList(self):
        return _gstlearn.DriftList_resetDriftList(self)

    def isDriftSampleDefined(self, db, ib, nech, nbgh, loctype):
        return _gstlearn.DriftList_isDriftSampleDefined(self, db, ib, nech, nbgh, loctype)

    def getDrift(self, *args):
        return _gstlearn.DriftList_getDrift(self, *args)

    def getDrifts(self, db, useSel=True):
        return _gstlearn.DriftList_getDrifts(self, db, useSel)

    def isFlagLinked(self):
        return _gstlearn.DriftList_isFlagLinked(self)

    def isFlagCombined(self):
        return _gstlearn.DriftList_isFlagCombined(self)

    def getDriftMaxIRFOrder(self):
        return _gstlearn.DriftList_getDriftMaxIRFOrder(self)

    def isDriftDefined(self, powers, rank_fex=0):
        return _gstlearn.DriftList_isDriftDefined(self, powers, rank_fex)

    def isDriftDifferentDefined(self, powers, rank_fex=-1):
        return _gstlearn.DriftList_isDriftDifferentDefined(self, powers, rank_fex)

    def copyCovContext(self, ctxt):
        return _gstlearn.DriftList_copyCovContext(self, ctxt)

    def setFlagLinked(self, flagLinked):
        return _gstlearn.DriftList_setFlagLinked(self, flagLinked)

    def setFlagCombined(self, flagCombined):
        return _gstlearn.DriftList_setFlagCombined(self, flagCombined)

    def setBetaHat(self, betaHat):
        return _gstlearn.DriftList_setBetaHat(self, betaHat)

    def evalDrift(self, *args, **kwargs):
        return _gstlearn.DriftList_evalDrift(self, *args, **kwargs)

    def evalDriftCoef(self, db, iech, coeffs):
        return _gstlearn.DriftList_evalDriftCoef(self, db, iech, coeffs)

    def evalDriftCoefs(self, db, coeffs, useSel=False):
        return _gstlearn.DriftList_evalDriftCoefs(self, db, coeffs, useSel)

    def evalDriftBySample(self, *args, **kwargs):
        return _gstlearn.DriftList_evalDriftBySample(self, *args, **kwargs)

    def evalDriftBySampleInPlace(self, db, iech, member, drftab):
        return _gstlearn.DriftList_evalDriftBySampleInPlace(self, db, iech, member, drftab)

    def evalDriftMatrix(self, *args, **kwargs):
        return _gstlearn.DriftList_evalDriftMatrix(self, *args, **kwargs)

    def evalDriftValue(self, *args, **kwargs):
        return _gstlearn.DriftList_evalDriftValue(self, *args, **kwargs)

# Register DriftList in _gstlearn:
_gstlearn.DriftList_swigregister(DriftList)
class DriftM(ADrift):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftM_swiginit(self, _gstlearn.new_DriftM(*args))
    __swig_destroy__ = _gstlearn.delete_DriftM

    def clone(self):
        return _gstlearn.DriftM_clone(self)

    def getDriftName(self):
        return _gstlearn.DriftM_getDriftName(self)

    def getOrderIRF(self):
        return _gstlearn.DriftM_getOrderIRF(self)

    def getOrderIRFIdim(self, idim):
        return _gstlearn.DriftM_getOrderIRFIdim(self, idim)

    def getDriftNDimMax(self):
        return _gstlearn.DriftM_getDriftNDimMax(self)

    def eval(self, db, iech):
        return _gstlearn.DriftM_eval(self, db, iech)

    def getPowers(self):
        return _gstlearn.DriftM_getPowers(self)

    @staticmethod
    def createByIdentifier(driftname):
        return _gstlearn.DriftM_createByIdentifier(driftname)

# Register DriftM in _gstlearn:
_gstlearn.DriftM_swigregister(DriftM)
class DriftF(ADrift):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DriftF_swiginit(self, _gstlearn.new_DriftF(*args))
    __swig_destroy__ = _gstlearn.delete_DriftF

    def clone(self):
        return _gstlearn.DriftF_clone(self)

    def getDriftName(self):
        return _gstlearn.DriftF_getDriftName(self)

    def getOrderIRF(self):
        return _gstlearn.DriftF_getOrderIRF(self)

    def getOrderIRFIdim(self, idim):
        return _gstlearn.DriftF_getOrderIRFIdim(self, idim)

    def isDriftExternal(self):
        return _gstlearn.DriftF_isDriftExternal(self)

    def eval(self, db, iech):
        return _gstlearn.DriftF_eval(self, db, iech)

    def getRankFex(self):
        return _gstlearn.DriftF_getRankFex(self)

    @staticmethod
    def createByIdentifier(driftname):
        return _gstlearn.DriftF_createByIdentifier(driftname)

# Register DriftF in _gstlearn:
_gstlearn.DriftF_swigregister(DriftF)
class DriftFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def createDriftByRank(rank, rank_fex):
        return _gstlearn.DriftFactory_createDriftByRank(rank, rank_fex)

    @staticmethod
    def createDriftBySymbol(symbol):
        return _gstlearn.DriftFactory_createDriftBySymbol(symbol)

    @staticmethod
    def createDriftByIdentifier(driftname):
        return _gstlearn.DriftFactory_createDriftByIdentifier(driftname)

    @staticmethod
    def createDriftListFromIRF(*args, **kwargs):
        return _gstlearn.DriftFactory_createDriftListFromIRF(*args, **kwargs)

    @staticmethod
    def createDriftListForGradients(*args, **kwargs):
        return _gstlearn.DriftFactory_createDriftListForGradients(*args, **kwargs)

    def __init__(self):
        _gstlearn.DriftFactory_swiginit(self, _gstlearn.new_DriftFactory())
    __swig_destroy__ = _gstlearn.delete_DriftFactory

# Register DriftFactory in _gstlearn:
_gstlearn.DriftFactory_swigregister(DriftFactory)
class SPDE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _gstlearn.SPDE_swiginit(self, _gstlearn.new_SPDE(*args, **kwargs))
    __swig_destroy__ = _gstlearn.delete_SPDE

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.SPDE_create(*args, **kwargs)

    def compute(self, *args, **kwargs):
        return _gstlearn.SPDE_compute(self, *args, **kwargs)

    def computeLogDet(self, nbsimu=1):
        return _gstlearn.SPDE_computeLogDet(self, nbsimu)

    def computeQuad(self):
        return _gstlearn.SPDE_computeQuad(self)

    def computeLogLikelihood(self, nbsimu=1, verbose=False):
        return _gstlearn.SPDE_computeLogLikelihood(self, nbsimu, verbose)

    def getCoeffs(self):
        return _gstlearn.SPDE_getCoeffs(self)

    def setDriftCoeffs(self, coeffs):
        return _gstlearn.SPDE_setDriftCoeffs(self, coeffs)

    def getPrecisionOpMatrix(self, i=0):
        return _gstlearn.SPDE_getPrecisionOpMatrix(self, i)

    def getProjMatrix(self, i=0):
        return _gstlearn.SPDE_getProjMatrix(self, i)

    def getPrecisionKrig(self):
        return _gstlearn.SPDE_getPrecisionKrig(self)

    def getMeshingKrig(self, i=0):
        return _gstlearn.SPDE_getMeshingKrig(self, i)

    def getMeshingSimu(self, i=0):
        return _gstlearn.SPDE_getMeshingSimu(self, i)

    def getData(self):
        return _gstlearn.SPDE_getData(self)

# Register SPDE in _gstlearn:
_gstlearn.SPDE_swigregister(SPDE)

def krigingSPDE(*args, **kwargs):
    return _gstlearn.krigingSPDE(*args, **kwargs)

def simulateSPDE(*args, **kwargs):
    return _gstlearn.simulateSPDE(*args, **kwargs)

def logLikelihoodSPDE(*args, **kwargs):
    return _gstlearn.logLikelihoodSPDE(*args, **kwargs)

def krigingSPDENew(*args, **kwargs):
    return _gstlearn.krigingSPDENew(*args, **kwargs)

def buildInvNugget(*args, **kwargs):
    return _gstlearn.buildInvNugget(*args, **kwargs)
class PGSSPDE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, models, field, ruleprop, data=None):
        _gstlearn.PGSSPDE_swiginit(self, _gstlearn.new_PGSSPDE(models, field, ruleprop, data))
    __swig_destroy__ = _gstlearn.delete_PGSSPDE

    def compute(self, *args, **kwargs):
        return _gstlearn.PGSSPDE_compute(self, *args, **kwargs)

# Register PGSSPDE in _gstlearn:
_gstlearn.PGSSPDE_swigregister(PGSSPDE)
class TestInheritance(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.TestInheritance_swiginit(self, _gstlearn.new_TestInheritance())

    def toString(self, strfmt=None):
        return _gstlearn.TestInheritance_toString(self, strfmt)

    def setIproj(self, ipr):
        return _gstlearn.TestInheritance_setIproj(self, ipr)
    __swig_destroy__ = _gstlearn.delete_TestInheritance

# Register TestInheritance in _gstlearn:
_gstlearn.TestInheritance_swigregister(TestInheritance)
class Style(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Style_swiginit(self, _gstlearn.new_Style(*args))
    __swig_destroy__ = _gstlearn.delete_Style

    @staticmethod
    def documentedStandard(myArg):
        return _gstlearn.Style_documentedStandard(myArg)

    @staticmethod
    def documentedWithFormula(myArg):
        return _gstlearn.Style_documentedWithFormula(myArg)

    @staticmethod
    def unusedArgument(a):
        return _gstlearn.Style_unusedArgument(a)

    @staticmethod
    def myFunction(myArgInt, myArgDoubleDef=2.):
        return _gstlearn.Style_myFunction(myArgInt, myArgDoubleDef)

    def getArgDouble(self):
        return _gstlearn.Style_getArgDouble(self)

    def getArgInt(self):
        return _gstlearn.Style_getArgInt(self)

    def getArgVectorDouble(self):
        return _gstlearn.Style_getArgVectorDouble(self)

    def getArgVectorInt(self):
        return _gstlearn.Style_getArgVectorInt(self)

    def setArgDouble(self, argDouble):
        return _gstlearn.Style_setArgDouble(self, argDouble)

    def setArgInt(self, argInt):
        return _gstlearn.Style_setArgInt(self, argInt)

    def setArgVectorDouble(self, argVectorDouble):
        return _gstlearn.Style_setArgVectorDouble(self, argVectorDouble)

    def setArgVectorInt(self, argVectorInt):
        return _gstlearn.Style_setArgVectorInt(self, argVectorInt)

# Register Style in _gstlearn:
_gstlearn.Style_swigregister(Style)
class SPDEParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.SPDEParam_swiginit(self, _gstlearn.new_SPDEParam(*args))
    __swig_destroy__ = _gstlearn.delete_SPDEParam

    def getBorder(self):
        return _gstlearn.SPDEParam_getBorder(self)

    def getCGparams(self):
        return _gstlearn.SPDEParam_getCGparams(self)

    def getEpsNugget(self):
        return _gstlearn.SPDEParam_getEpsNugget(self)

    def getRefineK(self):
        return _gstlearn.SPDEParam_getRefineK(self)

    def getRefineS(self):
        return _gstlearn.SPDEParam_getRefineS(self)

    def setBorder(self, border):
        return _gstlearn.SPDEParam_setBorder(self, border)

    def setCGparams(self, CGparams):
        return _gstlearn.SPDEParam_setCGparams(self, CGparams)

    def setEpsNugget(self, epsNugget):
        return _gstlearn.SPDEParam_setEpsNugget(self, epsNugget)

    def setRefineK(self, refineK):
        return _gstlearn.SPDEParam_setRefineK(self, refineK)

    def setRefineS(self, refineS):
        return _gstlearn.SPDEParam_setRefineS(self, refineS)

# Register SPDEParam in _gstlearn:
_gstlearn.SPDEParam_swigregister(SPDEParam)
class Db(AStringable, ASerializable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Db_swiginit(self, _gstlearn.new_Db(*args))
    __swig_destroy__ = _gstlearn.delete_Db

    def toTL(self):
        return _gstlearn.Db_toTL(self)

    def clone(self):
        return _gstlearn.Db_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.Db_toString(self, strfmt)

    def isGrid(self):
        return _gstlearn.Db_isGrid(self)

    def isLine(self):
        return _gstlearn.Db_isLine(self)

    def isMesh(self):
        return _gstlearn.Db_isMesh(self)

    def getCoordinate(self, iech, idim, flag_rotate=True):
        return _gstlearn.Db_getCoordinate(self, iech, idim, flag_rotate)

    def getCoordinatesPerSampleInPlace(self, *args):
        return _gstlearn.Db_getCoordinatesPerSampleInPlace(self, *args)

    def getUnit(self, idim=0):
        return _gstlearn.Db_getUnit(self, idim)

    def getNDim(self):
        return _gstlearn.Db_getNDim(self)

    def mayChangeSampleNumber(self):
        return _gstlearn.Db_mayChangeSampleNumber(self)

    def resetDims(self, ncol, nech):
        return _gstlearn.Db_resetDims(self, ncol, nech)

    def isConsistent(self):
        return _gstlearn.Db_isConsistent(self)

    def resetFromSamples(self, *args, **kwargs):
        return _gstlearn.Db_resetFromSamples(self, *args, **kwargs)

    def resetFromCSV(self, filename, verbose, csvfmt, ncol_max=-1, nrow_max=-1, flagAddSampleRank=True):
        return _gstlearn.Db_resetFromCSV(self, filename, verbose, csvfmt, ncol_max, nrow_max, flagAddSampleRank)

    def resetFromBox(self, nech, coormin, coormax, ndim=2, extend=0., seed=321415, flagAddSampleRank=True):
        return _gstlearn.Db_resetFromBox(self, nech, coormin, coormax, ndim, extend, seed, flagAddSampleRank)

    def resetFromOnePoint(self, *args, **kwargs):
        return _gstlearn.Db_resetFromOnePoint(self, *args, **kwargs)

    def resetSamplingDb(self, *args, **kwargs):
        return _gstlearn.Db_resetSamplingDb(self, *args, **kwargs)

    def resetReduce(self, *args, **kwargs):
        return _gstlearn.Db_resetReduce(self, *args, **kwargs)

    def resetFromGridRandomized(self, dbin, randperc=0., flagAddSampleRank=True):
        return _gstlearn.Db_resetFromGridRandomized(self, dbin, randperc, flagAddSampleRank)

    @staticmethod
    def create():
        return _gstlearn.Db_create()

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.Db_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromSamples(*args, **kwargs):
        return _gstlearn.Db_createFromSamples(*args, **kwargs)

    @staticmethod
    def createFromCSV(*args, **kwargs):
        return _gstlearn.Db_createFromCSV(*args, **kwargs)

    @staticmethod
    def createFromBox(nech, coormin, coormax, seed=43241, flag_exact=True, flag_repulsion=False, range=0., beta=0., extend=0., flagAddSampleRank=True):
        return _gstlearn.Db_createFromBox(nech, coormin, coormax, seed, flag_exact, flag_repulsion, range, beta, extend, flagAddSampleRank)

    @staticmethod
    def createFromOnePoint(*args, **kwargs):
        return _gstlearn.Db_createFromOnePoint(*args, **kwargs)

    @staticmethod
    def createSamplingDb(*args, **kwargs):
        return _gstlearn.Db_createSamplingDb(*args, **kwargs)

    @staticmethod
    def createFromDbGrid(nech, dbgrid, seed=432423, flag_exact=True, flag_repulsion=False, range=0., beta=0., flagAddSampleRank=True):
        return _gstlearn.Db_createFromDbGrid(nech, dbgrid, seed, flag_exact, flag_repulsion, range, beta, flagAddSampleRank)

    @staticmethod
    def createReduce(*args, **kwargs):
        return _gstlearn.Db_createReduce(*args, **kwargs)

    @staticmethod
    def createFillRandom(*args, **kwargs):
        return _gstlearn.Db_createFillRandom(*args, **kwargs)

    @staticmethod
    def createFromGridRandomized(dbgrid, randperc=0., flagAddSampleRank=True):
        return _gstlearn.Db_createFromGridRandomized(dbgrid, randperc, flagAddSampleRank)

    def getArrays(self):
        return _gstlearn.Db_getArrays(self)

    def getNameByLocator(self, locatorType, locatorIndex=0):
        return _gstlearn.Db_getNameByLocator(self, locatorType, locatorIndex)

    def getNameByColIdx(self, icol):
        return _gstlearn.Db_getNameByColIdx(self, icol)

    def getNameByUID(self, iuid):
        return _gstlearn.Db_getNameByUID(self, iuid)

    def getName(self, name):
        return _gstlearn.Db_getName(self, name)

    def getNames(self, names):
        return _gstlearn.Db_getNames(self, names)

    def getNamesByLocator(self, locatorType):
        return _gstlearn.Db_getNamesByLocator(self, locatorType)

    def getNamesByColIdx(self, icols):
        return _gstlearn.Db_getNamesByColIdx(self, icols)

    def getNamesByUID(self, iuids):
        return _gstlearn.Db_getNamesByUID(self, iuids)

    def getAllNames(self, excludeRankAndCoordinates=False, verbose=False):
        return _gstlearn.Db_getAllNames(self, excludeRankAndCoordinates, verbose)

    def setName(self, *args):
        return _gstlearn.Db_setName(self, *args)

    def setNameByUID(self, iuid, name):
        return _gstlearn.Db_setNameByUID(self, iuid, name)

    def setNameByColIdx(self, icol, name):
        return _gstlearn.Db_setNameByColIdx(self, icol, name)

    def setNameByLocator(self, locatorType, name):
        return _gstlearn.Db_setNameByLocator(self, locatorType, name)

    def expandNameList(self, *args):
        return _gstlearn.Db_expandNameList(self, *args)

    def identifyNames(self, names):
        return _gstlearn.Db_identifyNames(self, names)

    def getUIDMaxNumber(self):
        return _gstlearn.Db_getUIDMaxNumber(self)

    def getColumnNumber(self):
        return _gstlearn.Db_getColumnNumber(self)

    @staticmethod
    def getNEloc():
        return _gstlearn.Db_getNEloc()

    def getSampleNumber(self, useSel=False):
        return _gstlearn.Db_getSampleNumber(self, useSel)

    def getNumberActiveAndDefined(self, item):
        return _gstlearn.Db_getNumberActiveAndDefined(self, item)

    def getActiveSampleNumber(self):
        return _gstlearn.Db_getActiveSampleNumber(self)

    def getRankRelativeToAbsolute(self, irel):
        return _gstlearn.Db_getRankRelativeToAbsolute(self, irel)

    def getRankAbsoluteToRelative(self, iabs):
        return _gstlearn.Db_getRankAbsoluteToRelative(self, iabs)

    def clearLocators(self, locatorType):
        return _gstlearn.Db_clearLocators(self, locatorType)

    def clearSelection(self):
        return _gstlearn.Db_clearSelection(self)

    def setLocatorByUID(self, *args, **kwargs):
        return _gstlearn.Db_setLocatorByUID(self, *args, **kwargs)

    def setLocatorByColIdx(self, *args, **kwargs):
        return _gstlearn.Db_setLocatorByColIdx(self, *args, **kwargs)

    def setLocator(self, *args, **kwargs):
        return _gstlearn.Db_setLocator(self, *args, **kwargs)

    def setLocators(self, *args, **kwargs):
        return _gstlearn.Db_setLocators(self, *args, **kwargs)

    def setLocatorsByUID(self, *args):
        return _gstlearn.Db_setLocatorsByUID(self, *args)

    def setLocatorsByColIdx(self, *args, **kwargs):
        return _gstlearn.Db_setLocatorsByColIdx(self, *args, **kwargs)

    def addColumnsByVVD(self, tab, radix, locatorType, locatorIndex=0, useSel=False):
        return _gstlearn.Db_addColumnsByVVD(self, tab, radix, locatorType, locatorIndex, useSel)

    def addColumns(self, *args, **kwargs):
        return _gstlearn.Db_addColumns(self, *args, **kwargs)

    def addColumnsByConstant(self, *args, **kwargs):
        return _gstlearn.Db_addColumnsByConstant(self, *args, **kwargs)

    def addColumnsRandom(self, *args, **kwargs):
        return _gstlearn.Db_addColumnsRandom(self, *args, **kwargs)

    def addSelection(self, *args, **kwargs):
        return _gstlearn.Db_addSelection(self, *args, **kwargs)

    def addSelectionByRanks(self, *args, **kwargs):
        return _gstlearn.Db_addSelectionByRanks(self, *args, **kwargs)

    def addSelectionByLimit(self, *args, **kwargs):
        return _gstlearn.Db_addSelectionByLimit(self, *args, **kwargs)

    def addSelectionFromDbByConvexHull(self, *args, **kwargs):
        return _gstlearn.Db_addSelectionFromDbByConvexHull(self, *args, **kwargs)

    def addSelectionRandom(self, *args, **kwargs):
        return _gstlearn.Db_addSelectionRandom(self, *args, **kwargs)

    def addSamples(self, nadd, valinit=1.234e30):
        return _gstlearn.Db_addSamples(self, nadd, valinit)

    def deleteSample(self, e_del):
        return _gstlearn.Db_deleteSample(self, e_del)

    def deleteSamples(self, e_dels):
        return _gstlearn.Db_deleteSamples(self, e_dels)

    def switchLocator(self, locatorType_in, locatorType_out):
        return _gstlearn.Db_switchLocator(self, locatorType_in, locatorType_out)

    def getLastUID(self, number=0):
        return _gstlearn.Db_getLastUID(self, number)

    def getLastName(self, number=0):
        return _gstlearn.Db_getLastName(self, number)

    def getColIdx(self, name):
        return _gstlearn.Db_getColIdx(self, name)

    def getColIdxByUID(self, iuid):
        return _gstlearn.Db_getColIdxByUID(self, iuid)

    def getColIdxByLocator(self, locatorType, locatorIndex=0):
        return _gstlearn.Db_getColIdxByLocator(self, locatorType, locatorIndex)

    def getColIdxs(self, *args):
        return _gstlearn.Db_getColIdxs(self, *args)

    def getColIdxsByUID(self, iuids):
        return _gstlearn.Db_getColIdxsByUID(self, iuids)

    def getColIdxsByLocator(self, locatorType):
        return _gstlearn.Db_getColIdxsByLocator(self, locatorType)

    def setColumn(self, *args, **kwargs):
        return _gstlearn.Db_setColumn(self, *args, **kwargs)

    def setColumnByUIDOldStyle(self, tab, iuid, useSel=False):
        return _gstlearn.Db_setColumnByUIDOldStyle(self, tab, iuid, useSel)

    def setColumnByUID(self, tab, iuid, useSel=False):
        return _gstlearn.Db_setColumnByUID(self, tab, iuid, useSel)

    def setColumnByColIdx(self, tab, icol, useSel=False):
        return _gstlearn.Db_setColumnByColIdx(self, tab, icol, useSel)

    def setColumnsByColIdx(self, tabs, icols, useSel=False):
        return _gstlearn.Db_setColumnsByColIdx(self, tabs, icols, useSel)

    def setColumnByColIdxOldStyle(self, tab, icol, useSel=False):
        return _gstlearn.Db_setColumnByColIdxOldStyle(self, tab, icol, useSel)

    def duplicateColumnByUID(self, iuid_in, iuid_out):
        return _gstlearn.Db_duplicateColumnByUID(self, iuid_in, iuid_out)

    def getItem(self, *args):
        return _gstlearn.Db_getItem(self, *args)

    def getItemNames(self, *args):
        return _gstlearn.Db_getItemNames(self, *args)

    def setItem(self, *args):
        return _gstlearn.Db_setItem(self, *args)

    def getLocator(self, name, ret_locatorType, ret_locatorIndex):
        return _gstlearn.Db_getLocator(self, name, ret_locatorType, ret_locatorIndex)

    def getLocatorByColIdx(self, icol, ret_locatorType, ret_locatorIndex):
        return _gstlearn.Db_getLocatorByColIdx(self, icol, ret_locatorType, ret_locatorIndex)

    def getLocatorByUID(self, iuid, ret_locatorType, ret_locatorIndex):
        return _gstlearn.Db_getLocatorByUID(self, iuid, ret_locatorType, ret_locatorIndex)

    def getLocators(self, *args, **kwargs):
        return _gstlearn.Db_getLocators(self, *args, **kwargs)

    def getLocatorNumber(self, locatorType):
        return _gstlearn.Db_getLocatorNumber(self, locatorType)

    def isUIDDefined(self, iuid):
        return _gstlearn.Db_isUIDDefined(self, iuid)

    def getUID(self, name):
        return _gstlearn.Db_getUID(self, name)

    def getUIDByColIdx(self, icol):
        return _gstlearn.Db_getUIDByColIdx(self, icol)

    def getUIDByLocator(self, locatorType, locatorIndex=0):
        return _gstlearn.Db_getUIDByLocator(self, locatorType, locatorIndex)

    def getUIDs(self, names):
        return _gstlearn.Db_getUIDs(self, names)

    def getUIDsByLocator(self, locatorType):
        return _gstlearn.Db_getUIDsByLocator(self, locatorType)

    def getUIDsByColIdx(self, icols):
        return _gstlearn.Db_getUIDsByColIdx(self, icols)

    def getAllUIDs(self, *args):
        return _gstlearn.Db_getAllUIDs(self, *args)

    def copyByUID(self, iuidIn, iuidOut):
        return _gstlearn.Db_copyByUID(self, iuidIn, iuidOut)

    def copyByCol(self, icolIn, icolOut):
        return _gstlearn.Db_copyByCol(self, icolIn, icolOut)

    def getFaciesNumber(self):
        return _gstlearn.Db_getFaciesNumber(self)

    def hasLocatorDefined(self, name, locatorType, locatorIndex=0):
        return _gstlearn.Db_hasLocatorDefined(self, name, locatorType, locatorIndex)

    def getSampleCoordinates(self, iech):
        return _gstlearn.Db_getSampleCoordinates(self, iech)

    def getSampleAsSPInPlace(self, P):
        return _gstlearn.Db_getSampleAsSPInPlace(self, P)

    def getSampleAsSTInPlace(self, iech, P):
        return _gstlearn.Db_getSampleAsSTInPlace(self, iech, P)

    def getSampleLocators(self, locatorType, iech):
        return _gstlearn.Db_getSampleLocators(self, locatorType, iech)

    def getIncrements(self, iechs, jechs):
        return _gstlearn.Db_getIncrements(self, iechs, jechs)

    def getCoordinates(self, idim, useSel=False, flag_rotate=True):
        return _gstlearn.Db_getCoordinates(self, idim, useSel, flag_rotate)

    def getAllCoordinates(self, useSel=False):
        return _gstlearn.Db_getAllCoordinates(self, useSel)

    def getAllCoordinatesMat(self, *args, **kwargs):
        return _gstlearn.Db_getAllCoordinatesMat(self, *args, **kwargs)

    def setCoordinate(self, iech, idim, value):
        return _gstlearn.Db_setCoordinate(self, iech, idim, value)

    def setCoordinates(self, idim, coor, useSel=False):
        return _gstlearn.Db_setCoordinates(self, idim, coor, useSel)

    def setSampleCoordinates(self, iech, coor):
        return _gstlearn.Db_setSampleCoordinates(self, iech, coor)

    def getDistance1D(self, iech, jech, idim=0, flagAbs=False):
        return _gstlearn.Db_getDistance1D(self, iech, jech, idim, flagAbs)

    def getDistance(self, iech, jech):
        return _gstlearn.Db_getDistance(self, iech, jech)

    def getDistanceVecInPlace(self, iech, jech, dd, db2=None):
        return _gstlearn.Db_getDistanceVecInPlace(self, iech, jech, dd, db2)

    def getValue(self, name, iech):
        return _gstlearn.Db_getValue(self, name, iech)

    def setValue(self, name, iech, value):
        return _gstlearn.Db_setValue(self, name, iech, value)

    def getArray(self, iech, iuid):
        return _gstlearn.Db_getArray(self, iech, iuid)

    def getArrayVec(self, iechs, iuid, values):
        return _gstlearn.Db_getArrayVec(self, iechs, iuid, values)

    def setArray(self, iech, iuid, value):
        return _gstlearn.Db_setArray(self, iech, iuid, value)

    def setArrayVec(self, iechs, iuid, values):
        return _gstlearn.Db_setArrayVec(self, iechs, iuid, values)

    def updArray(self, iech, iuid, oper, value):
        return _gstlearn.Db_updArray(self, iech, iuid, oper, value)

    def updArrayVec(self, iechs, iuid, oper, values):
        return _gstlearn.Db_updArrayVec(self, iechs, iuid, oper, values)

    def getArrayByUID(self, iuid, useSel=False):
        return _gstlearn.Db_getArrayByUID(self, iuid, useSel)

    def getArrayBySample(self, vals, iech):
        return _gstlearn.Db_getArrayBySample(self, vals, iech)

    def setArrayBySample(self, iech, vec):
        return _gstlearn.Db_setArrayBySample(self, iech, vec)

    def getSamplesAsSP(self, pvec, space, useSel=False):
        return _gstlearn.Db_getSamplesAsSP(self, pvec, space, useSel)

    def hasLocator(self, locatorType):
        return _gstlearn.Db_hasLocator(self, locatorType)

    def getFromLocatorNumber(self, locatorType):
        return _gstlearn.Db_getFromLocatorNumber(self, locatorType)

    def getFromLocator(self, locatorType, iech, locatorIndex=0):
        return _gstlearn.Db_getFromLocator(self, locatorType, iech, locatorIndex)

    def setFromLocator(self, locatorType, iech, locatorIndex, value):
        return _gstlearn.Db_setFromLocator(self, locatorType, iech, locatorIndex, value)

    def getValueByColIdx(self, iech, icol):
        return _gstlearn.Db_getValueByColIdx(self, iech, icol)

    def setValueByColIdx(self, iech, icol, value):
        return _gstlearn.Db_setValueByColIdx(self, iech, icol, value)

    def getValuesByNames(self, iechs, names, bySample=False):
        return _gstlearn.Db_getValuesByNames(self, iechs, names, bySample)

    def getValuesByColIdx(self, iechs, icols, bySample=False):
        return _gstlearn.Db_getValuesByColIdx(self, iechs, icols, bySample)

    def setValuesByNames(self, iechs, names, values, bySample=False):
        return _gstlearn.Db_setValuesByNames(self, iechs, names, values, bySample)

    def setValuesByColIdx(self, iechs, icols, values, bySample=False):
        return _gstlearn.Db_setValuesByColIdx(self, iechs, icols, values, bySample)

    def getLocNumber(self, loctype):
        return _gstlearn.Db_getLocNumber(self, loctype)

    def hasLocVariable(self, loctype):
        return _gstlearn.Db_hasLocVariable(self, loctype)

    def getLocVariable(self, loctype, iech, item):
        return _gstlearn.Db_getLocVariable(self, loctype, iech, item)

    def setLocVariable(self, loctype, iech, item, value):
        return _gstlearn.Db_setLocVariable(self, loctype, iech, item, value)

    def updLocVariable(self, loctype, iech, item, oper, value):
        return _gstlearn.Db_updLocVariable(self, loctype, iech, item, oper, value)

    def getZNumber(self):
        return _gstlearn.Db_getZNumber(self)

    def hasZVariable(self):
        return _gstlearn.Db_hasZVariable(self)

    def getZVariable(self, iech, item):
        return _gstlearn.Db_getZVariable(self, iech, item)

    def setZVariable(self, iech, item, value):
        return _gstlearn.Db_setZVariable(self, iech, item, value)

    def updZVariable(self, iech, item, oper, value):
        return _gstlearn.Db_updZVariable(self, iech, item, oper, value)

    def getLocVariables(self, loctype, iech, nitemax=0):
        return _gstlearn.Db_getLocVariables(self, loctype, iech, nitemax)

    def setLocVariables(self, loctype, iech, values):
        return _gstlearn.Db_setLocVariables(self, loctype, iech, values)

    def isVariableNumberComparedTo(self, nvar, compare=0):
        return _gstlearn.Db_isVariableNumberComparedTo(self, nvar, compare)

    def isIsotopic(self, iech, nvar_max=-1):
        return _gstlearn.Db_isIsotopic(self, iech, nvar_max)

    def isAllUndefined(self, iech):
        return _gstlearn.Db_isAllUndefined(self, iech)

    def isAllUndefinedByType(self, loctype, iech):
        return _gstlearn.Db_isAllUndefinedByType(self, loctype, iech)

    def isAllIsotopic(self):
        return _gstlearn.Db_isAllIsotopic(self)

    def setInterval(self, iech, item, rklow=1.234e30, rkup=1.234e30):
        return _gstlearn.Db_setInterval(self, iech, item, rklow, rkup)

    def getIntervalNumber(self):
        return _gstlearn.Db_getIntervalNumber(self)

    def setBound(self, iech, item, lower=1.234e30, upper=1.234e30):
        return _gstlearn.Db_setBound(self, iech, item, lower, upper)

    def getWithinBounds(self, item, useSel=False):
        return _gstlearn.Db_getWithinBounds(self, item, useSel)

    def getGradient(self, item, useSel=False):
        return _gstlearn.Db_getGradient(self, item, useSel)

    def getTangent(self, item, useSel=False):
        return _gstlearn.Db_getTangent(self, item, useSel)

    def getCodeList(self):
        return _gstlearn.Db_getCodeList(self)

    def getSelection(self, iech):
        return _gstlearn.Db_getSelection(self, iech)

    def getSelections(self):
        return _gstlearn.Db_getSelections(self)

    def getRanksActive(self, *args, **kwargs):
        return _gstlearn.Db_getRanksActive(self, *args, **kwargs)

    def getMultipleRanksActive(self, *args, **kwargs):
        return _gstlearn.Db_getMultipleRanksActive(self, *args, **kwargs)

    def getMultipleValuesActive(self, *args, **kwargs):
        return _gstlearn.Db_getMultipleValuesActive(self, *args, **kwargs)

    @staticmethod
    def getMultipleSelectedIndices(*args, **kwargs):
        return _gstlearn.Db_getMultipleSelectedIndices(*args, **kwargs)

    @staticmethod
    def getMultipleSelectedVariables(*args, **kwargs):
        return _gstlearn.Db_getMultipleSelectedVariables(*args, **kwargs)

    def getWeight(self, iech):
        return _gstlearn.Db_getWeight(self, iech)

    def getWeights(self, useSel=False):
        return _gstlearn.Db_getWeights(self, useSel)

    @staticmethod
    def getSimRank(isimu, ivar, icase, nbsimu, nvar):
        return _gstlearn.Db_getSimRank(isimu, ivar, icase, nbsimu, nvar)

    def getSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar):
        return _gstlearn.Db_getSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar)

    def setSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar, value):
        return _gstlearn.Db_setSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar, value)

    def updSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar, oper, value):
        return _gstlearn.Db_updSimvar(self, locatorType, iech, isimu, ivar, icase, nbsimu, nvar, oper, value)

    def isActive(self, iech):
        return _gstlearn.Db_isActive(self, iech)

    def isActiveDomain(self, iech):
        return _gstlearn.Db_isActiveDomain(self, iech)

    def isActiveAndDefined(self, iech, item):
        return _gstlearn.Db_isActiveAndDefined(self, iech, item)

    def getActiveAndDefinedNumber(self, *args):
        return _gstlearn.Db_getActiveAndDefinedNumber(self, *args)

    def getActiveArray(self):
        return _gstlearn.Db_getActiveArray(self)

    def getSortArray(self):
        return _gstlearn.Db_getSortArray(self)

    def getCosineToDirection(self, iech1, iech2, codir):
        return _gstlearn.Db_getCosineToDirection(self, iech1, iech2, codir)

    def getColumn(self, name, useSel=False, flagCompress=True):
        return _gstlearn.Db_getColumn(self, name, useSel, flagCompress)

    def getColumnByUID(self, iuid, useSel=False, flagCompress=True):
        return _gstlearn.Db_getColumnByUID(self, iuid, useSel, flagCompress)

    def getColumnByLocator(self, locatorType, locatorIndex=0, useSel=False, flagCompress=True):
        return _gstlearn.Db_getColumnByLocator(self, locatorType, locatorIndex, useSel, flagCompress)

    def getColumnByColIdx(self, icol, useSel=False, flagCompress=True):
        return _gstlearn.Db_getColumnByColIdx(self, icol, useSel, flagCompress)

    def getAllColumns(self, useSel=False, flagCompress=True):
        return _gstlearn.Db_getAllColumns(self, useSel, flagCompress)

    def getColumns(self, *args, **kwargs):
        return _gstlearn.Db_getColumns(self, *args, **kwargs)

    def getColumnsAsVVD(self, *args, **kwargs):
        return _gstlearn.Db_getColumnsAsVVD(self, *args, **kwargs)

    def getColumnsAsMatrix(self, names, useSel=False, flagCompress=True):
        return _gstlearn.Db_getColumnsAsMatrix(self, names, useSel, flagCompress)

    def getColumnsByColIdx(self, *args, **kwargs):
        return _gstlearn.Db_getColumnsByColIdx(self, *args, **kwargs)

    def getColumnsByColIdxInterval(self, icol_beg, icol_end, useSel=False, flagCompress=True):
        return _gstlearn.Db_getColumnsByColIdxInterval(self, icol_beg, icol_end, useSel, flagCompress)

    def getColumnsActiveAndDefined(self, *args, **kwargs):
        return _gstlearn.Db_getColumnsActiveAndDefined(self, *args, **kwargs)

    def getColumnsByLocator(self, *args, **kwargs):
        return _gstlearn.Db_getColumnsByLocator(self, *args, **kwargs)

    def getColumnsByUID(self, *args, **kwargs):
        return _gstlearn.Db_getColumnsByUID(self, *args, **kwargs)

    def getColumnsByUIDInterval(self, iuid_beg, iuid_end, useSel=False, flagCompress=True):
        return _gstlearn.Db_getColumnsByUIDInterval(self, iuid_beg, iuid_end, useSel, flagCompress)

    def setAllColumns(self, tabs):
        return _gstlearn.Db_setAllColumns(self, tabs)

    def deleteColumn(self, name):
        return _gstlearn.Db_deleteColumn(self, name)

    def deleteColumnByUID(self, iuid_del):
        return _gstlearn.Db_deleteColumnByUID(self, iuid_del)

    def deleteColumnByColIdx(self, icol_del):
        return _gstlearn.Db_deleteColumnByColIdx(self, icol_del)

    def deleteColumns(self, names):
        return _gstlearn.Db_deleteColumns(self, names)

    def deleteColumnsByLocator(self, locatorType):
        return _gstlearn.Db_deleteColumnsByLocator(self, locatorType)

    def deleteColumnsByUID(self, iuids):
        return _gstlearn.Db_deleteColumnsByUID(self, iuids)

    def deleteColumnsByColIdx(self, icols):
        return _gstlearn.Db_deleteColumnsByColIdx(self, icols)

    def deleteColumnsByUIDRange(self, i_del, n_del):
        return _gstlearn.Db_deleteColumnsByUIDRange(self, i_del, n_del)

    def getExtrema(self, idim, useSel=False):
        return _gstlearn.Db_getExtrema(self, idim, useSel)

    def getExtremas(self, useSel=False):
        return _gstlearn.Db_getExtremas(self, useSel)

    def getCoorMinimum(self, useSel=False):
        return _gstlearn.Db_getCoorMinimum(self, useSel)

    def getCoorMaximum(self, useSel=False):
        return _gstlearn.Db_getCoorMaximum(self, useSel)

    def getExtension(self, idim, useSel=False):
        return _gstlearn.Db_getExtension(self, idim, useSel)

    def getExtensionDiagonal(self, useSel=False):
        return _gstlearn.Db_getExtensionDiagonal(self, useSel)

    def getCenter(self, idim, useSel=False):
        return _gstlearn.Db_getCenter(self, idim, useSel)

    def getCenters(self, useSel=False):
        return _gstlearn.Db_getCenters(self, useSel)

    def getExtensionInPlace(self, mini, maxi, flagPreserve=False, useSel=False):
        return _gstlearn.Db_getExtensionInPlace(self, mini, maxi, flagPreserve, useSel)

    def getMinimum(self, name, useSel=False):
        return _gstlearn.Db_getMinimum(self, name, useSel)

    def getMaximum(self, name, useSel=False):
        return _gstlearn.Db_getMaximum(self, name, useSel)

    def getRange(self, name, useSel=False):
        return _gstlearn.Db_getRange(self, name, useSel)

    def getMean(self, name, useSel=False):
        return _gstlearn.Db_getMean(self, name, useSel)

    def getVariance(self, name, useSel=False):
        return _gstlearn.Db_getVariance(self, name, useSel)

    def getStdv(self, name, useSel=False):
        return _gstlearn.Db_getStdv(self, name, useSel)

    def getCorrelation(self, name1, name2, useSel=False):
        return _gstlearn.Db_getCorrelation(self, name1, name2, useSel)

    def hasSameDimension(self, dbaux):
        return _gstlearn.Db_hasSameDimension(self, dbaux)

    def hasLargerDimension(self, dbaux):
        return _gstlearn.Db_hasLargerDimension(self, dbaux)

    def isColIdxValid(self, icol):
        return _gstlearn.Db_isColIdxValid(self, icol)

    def isUIDValid(self, iuid):
        return _gstlearn.Db_isUIDValid(self, iuid)

    def isSampleIndexValid(self, iech):
        return _gstlearn.Db_isSampleIndexValid(self, iech)

    def isSampleIndicesValid(self, iechs, useSel=False):
        return _gstlearn.Db_isSampleIndicesValid(self, iechs, useSel)

    def isLocatorIndexValid(self, locatorType, locatorIndex):
        return _gstlearn.Db_isLocatorIndexValid(self, locatorType, locatorIndex)

    def isDimensionIndexValid(self, idim):
        return _gstlearn.Db_isDimensionIndexValid(self, idim)

    def combineSelection(self, *args, **kwargs):
        return _gstlearn.Db_combineSelection(self, *args, **kwargs)

    def generateRank(self, *args, **kwargs):
        return _gstlearn.Db_generateRank(self, *args, **kwargs)

    def shrinkToValidRows(self, rows):
        return _gstlearn.Db_shrinkToValidRows(self, rows)

    def shrinkToValidCols(self, cols):
        return _gstlearn.Db_shrinkToValidCols(self, cols)

    def statisticsBySample(self, *args, **kwargs):
        return _gstlearn.Db_statisticsBySample(self, *args, **kwargs)

    def statisticsMulti(self, *args, **kwargs):
        return _gstlearn.Db_statisticsMulti(self, *args, **kwargs)

    def areSame(self, name1, name2, eps=1.e-3, useSel=True, verbose=False):
        return _gstlearn.Db_areSame(self, name1, name2, eps, useSel, verbose)

    def filter(self, name, interval, belowRow=-1234567, aboveRow=-1234567):
        return _gstlearn.Db_filter(self, name, interval, belowRow, aboveRow)

    def getSampleRanks(self):
        return _gstlearn.Db_getSampleRanks(self)

    def printOneSample(self, *args, **kwargs):
        return _gstlearn.Db_printOneSample(self, *args, **kwargs)

    def __repr__(self):
        return _gstlearn.Db___repr__(self)

# Register Db in _gstlearn:
_gstlearn.Db_swigregister(Db)
class DbGrid(Db):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.DbGrid_swiginit(self, _gstlearn.new_DbGrid(*args))
    __swig_destroy__ = _gstlearn.delete_DbGrid

    def clone(self):
        return _gstlearn.DbGrid_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.DbGrid_toString(self, strfmt)

    def isGrid(self):
        return _gstlearn.DbGrid_isGrid(self)

    def getCoordinate(self, iech, idim, flag_rotate=True):
        return _gstlearn.DbGrid_getCoordinate(self, iech, idim, flag_rotate)

    def getCoordinatesPerSampleInPlace(self, iech, coor, flag_rotate=True):
        return _gstlearn.DbGrid_getCoordinatesPerSampleInPlace(self, iech, coor, flag_rotate)

    def getUnit(self, idim=0):
        return _gstlearn.DbGrid_getUnit(self, idim)

    def getNDim(self):
        return _gstlearn.DbGrid_getNDim(self)

    def mayChangeSampleNumber(self):
        return _gstlearn.DbGrid_mayChangeSampleNumber(self)

    def resetDims(self, ncol, nech):
        return _gstlearn.DbGrid_resetDims(self, ncol, nech)

    def isConsistent(self):
        return _gstlearn.DbGrid_isConsistent(self)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.DbGrid_createFromNF(neutralFilename, verbose)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.DbGrid_create(*args, **kwargs)

    @staticmethod
    def createCoveringDb(*args, **kwargs):
        return _gstlearn.DbGrid_createCoveringDb(*args, **kwargs)

    @staticmethod
    def createFromPolygon(polygon, nodes, dcell, flagAddSampleRank=True):
        return _gstlearn.DbGrid_createFromPolygon(polygon, nodes, dcell, flagAddSampleRank)

    @staticmethod
    def createCoarse(dbin, nmult, flagCell=True, flagAddSampleRank=True):
        return _gstlearn.DbGrid_createCoarse(dbin, nmult, flagCell, flagAddSampleRank)

    @staticmethod
    def createRefine(dbin, nmult, flagCell=True, flagAddSampleRank=True):
        return _gstlearn.DbGrid_createRefine(dbin, nmult, flagCell, flagAddSampleRank)

    @staticmethod
    def createFromGridExtend(gridIn, tops, bots, nxnew, verbose=False, eps=1.e-3):
        return _gstlearn.DbGrid_createFromGridExtend(gridIn, tops, bots, nxnew, verbose, eps)

    @staticmethod
    def createFromGridShrink(gridIn, deletedRanks):
        return _gstlearn.DbGrid_createFromGridShrink(gridIn, deletedRanks)

    @staticmethod
    def createGrid2D(*args, **kwargs):
        return _gstlearn.DbGrid_createGrid2D(*args, **kwargs)

    @staticmethod
    def createSqueezeAndStretchForward(grid3Din, surf2D, nameTop, nameBot, names, nzout, thickmin=0.):
        return _gstlearn.DbGrid_createSqueezeAndStretchForward(grid3Din, surf2D, nameTop, nameBot, names, nzout, thickmin)

    @staticmethod
    def createSqueezeAndStretchBackward(grid3Din, surf2D, nameTop, nameBot, names, nzout, z0out, dzout):
        return _gstlearn.DbGrid_createSqueezeAndStretchBackward(grid3Din, surf2D, nameTop, nameBot, names, nzout, z0out, dzout)

    @staticmethod
    def createSubGrid(gridin, limits, flagAddCoordinates=False):
        return _gstlearn.DbGrid_createSubGrid(gridin, limits, flagAddCoordinates)

    @staticmethod
    def createMultiple(dbin, nmult, flagAddSampleRank):
        return _gstlearn.DbGrid_createMultiple(dbin, nmult, flagAddSampleRank)

    @staticmethod
    def createDivider(dbin, nmult, flagAddSampleRank):
        return _gstlearn.DbGrid_createDivider(dbin, nmult, flagAddSampleRank)

    def reset(self, *args, **kwargs):
        return _gstlearn.DbGrid_reset(self, *args, **kwargs)

    def resetCoveringDb(self, *args, **kwargs):
        return _gstlearn.DbGrid_resetCoveringDb(self, *args, **kwargs)

    def resetFromPolygon(self, polygon, nodes, dcell, flagAddSampleRank=True):
        return _gstlearn.DbGrid_resetFromPolygon(self, polygon, nodes, dcell, flagAddSampleRank)

    def coarsify(self, nmult):
        return _gstlearn.DbGrid_coarsify(self, nmult)

    def refine(self, nmult):
        return _gstlearn.DbGrid_refine(self, nmult)

    def migrateAllVariables(self, dbin, flag_fill=True, flag_inter=True, flag_ball=False, flagAddSampleRank=True):
        return _gstlearn.DbGrid_migrateAllVariables(self, dbin, flag_fill, flag_inter, flag_ball, flagAddSampleRank)

    def getGrid(self):
        return _gstlearn.DbGrid_getGrid(self)

    def generateCoordinates(self, *args, **kwargs):
        return _gstlearn.DbGrid_generateCoordinates(self, *args, **kwargs)

    def getColumnSubGrid(self, name, idim0, rank, useSel=False):
        return _gstlearn.DbGrid_getColumnSubGrid(self, name, idim0, rank, useSel)

    def gridDefine(self, *args, **kwargs):
        return _gstlearn.DbGrid_gridDefine(self, *args, **kwargs)

    def gridCopyParams(self, mode, gridaux):
        return _gstlearn.DbGrid_gridCopyParams(self, mode, gridaux)

    def isSameGrid(self, grid):
        return _gstlearn.DbGrid_isSameGrid(self, grid)

    def isSameGridMesh(self, dbaux):
        return _gstlearn.DbGrid_isSameGridMesh(self, dbaux)

    def isSameGridRotation(self, dbaux):
        return _gstlearn.DbGrid_isSameGridRotation(self, dbaux)

    def isGridRotated(self):
        return _gstlearn.DbGrid_isGridRotated(self)

    def getNTotal(self):
        return _gstlearn.DbGrid_getNTotal(self)

    def getCellSize(self):
        return _gstlearn.DbGrid_getCellSize(self)

    def getVolume(self):
        return _gstlearn.DbGrid_getVolume(self)

    def getExtends(self):
        return _gstlearn.DbGrid_getExtends(self)

    def getExtend(self, idim):
        return _gstlearn.DbGrid_getExtend(self, idim)

    def getNX(self, idim):
        return _gstlearn.DbGrid_getNX(self, idim)

    def getNXs(self):
        return _gstlearn.DbGrid_getNXs(self)

    def getNXsExt(self, ndimMax):
        return _gstlearn.DbGrid_getNXsExt(self, ndimMax)

    def hasSingleBlock(self):
        return _gstlearn.DbGrid_hasSingleBlock(self)

    def getDX(self, idim):
        return _gstlearn.DbGrid_getDX(self, idim)

    def getDXs(self):
        return _gstlearn.DbGrid_getDXs(self)

    def getX0(self, idim):
        return _gstlearn.DbGrid_getX0(self, idim)

    def getX0s(self):
        return _gstlearn.DbGrid_getX0s(self)

    def getAngle(self, idim):
        return _gstlearn.DbGrid_getAngle(self, idim)

    def getAngles(self):
        return _gstlearn.DbGrid_getAngles(self)

    def getRotMat(self):
        return _gstlearn.DbGrid_getRotMat(self)

    def setNX(self, idim, value):
        return _gstlearn.DbGrid_setNX(self, idim, value)

    def setX0(self, idim, value):
        return _gstlearn.DbGrid_setX0(self, idim, value)

    def setDX(self, idim, value):
        return _gstlearn.DbGrid_setDX(self, idim, value)

    def getGridAxis(self, idim):
        return _gstlearn.DbGrid_getGridAxis(self, idim)

    def getCoordinateFromCorner(self, icorner):
        return _gstlearn.DbGrid_getCoordinateFromCorner(self, icorner)

    def getCoordinatesByIndice(self, *args, **kwargs):
        return _gstlearn.DbGrid_getCoordinatesByIndice(self, *args, **kwargs)

    def getCoordinatesPerSample(self, iech, flag_rotate=True):
        return _gstlearn.DbGrid_getCoordinatesPerSample(self, iech, flag_rotate)

    def coordinateToRank(self, coor, centered=False, eps=1.e-6):
        return _gstlearn.DbGrid_coordinateToRank(self, coor, centered, eps)

    def coordinateToIndices(self, coor, centered=False, eps=1.e-6):
        return _gstlearn.DbGrid_coordinateToIndices(self, coor, centered, eps)

    def coordinateToIndicesInPlace(self, coor, indices, centered=False, eps=1.e-6):
        return _gstlearn.DbGrid_coordinateToIndicesInPlace(self, coor, indices, centered, eps)

    def getCenterIndices(self):
        return _gstlearn.DbGrid_getCenterIndices(self)

    def indiceToRank(self, indice):
        return _gstlearn.DbGrid_indiceToRank(self, indice)

    def rankToIndice(self, node, indices, minusOne=False):
        return _gstlearn.DbGrid_rankToIndice(self, node, indices, minusOne)

    def rankToCoordinatesInPlace(self, *args, **kwargs):
        return _gstlearn.DbGrid_rankToCoordinatesInPlace(self, *args, **kwargs)

    def rankToCoordinates(self, *args, **kwargs):
        return _gstlearn.DbGrid_rankToCoordinates(self, *args, **kwargs)

    def indicesToCoordinateInPlace(self, *args, **kwargs):
        return _gstlearn.DbGrid_indicesToCoordinateInPlace(self, *args, **kwargs)

    def indicesToCoordinate(self, *args, **kwargs):
        return _gstlearn.DbGrid_indicesToCoordinate(self, *args, **kwargs)

    def sampleBelongsToCell(self, *args, **kwargs):
        return _gstlearn.DbGrid_sampleBelongsToCell(self, *args, **kwargs)

    def centerCoordinateInPlace(self, coor, centered=False, stopIfOut=False, eps=1.e-6):
        return _gstlearn.DbGrid_centerCoordinateInPlace(self, coor, centered, stopIfOut, eps)

    def locateDataInGrid(self, *args, **kwargs):
        return _gstlearn.DbGrid_locateDataInGrid(self, *args, **kwargs)

    def getMirrorIndex(self, idim, ix):
        return _gstlearn.DbGrid_getMirrorIndex(self, idim, ix)

    def getSlice(self, name, pos=0, indice=0, useSel=False):
        return _gstlearn.DbGrid_getSlice(self, name, pos, indice, useSel)

    def getOneSlice(self, *args, **kwargs):
        return _gstlearn.DbGrid_getOneSlice(self, *args, **kwargs)

    def assignGridColumn(self, name, idim, rank, value, useSel=False):
        return _gstlearn.DbGrid_assignGridColumn(self, name, idim, rank, value, useSel)

    def getBlockExtensions(self, node):
        return _gstlearn.DbGrid_getBlockExtensions(self, node)

    def getCellEdges(self, node=0, forceGridMesh=False):
        return _gstlearn.DbGrid_getCellEdges(self, node, forceGridMesh)

    def getAllCellsEdges(self, forceGridMesh=False):
        return _gstlearn.DbGrid_getAllCellsEdges(self, forceGridMesh)

    def getGridEdges(self):
        return _gstlearn.DbGrid_getGridEdges(self)

    def getCodir(self, grincr):
        return _gstlearn.DbGrid_getCodir(self, grincr)

    def getLimitsFromVariableExtend(self, *args, **kwargs):
        return _gstlearn.DbGrid_getLimitsFromVariableExtend(self, *args, **kwargs)

    def setSelectionFromVariableExtend(self, nameTop, nameBot):
        return _gstlearn.DbGrid_setSelectionFromVariableExtend(self, nameTop, nameBot)

    def clean3DFromSurfaces(self, *args, **kwargs):
        return _gstlearn.DbGrid_clean3DFromSurfaces(self, *args, **kwargs)

    def morpho(self, *args, **kwargs):
        return _gstlearn.DbGrid_morpho(self, *args, **kwargs)

    def smooth(self, *args, **kwargs):
        return _gstlearn.DbGrid_smooth(self, *args, **kwargs)

    def addSelectionFromDbByMorpho(self, *args, **kwargs):
        return _gstlearn.DbGrid_addSelectionFromDbByMorpho(self, *args, **kwargs)

    def getSampleAsSTInPlace(self, iech, P):
        return _gstlearn.DbGrid_getSampleAsSTInPlace(self, iech, P)

    def getDiscretizedBlock(self, ndiscs, iech=0, flagPerCell=False, flagRandom=False, seed=132433):
        return _gstlearn.DbGrid_getDiscretizedBlock(self, ndiscs, iech, flagPerCell, flagRandom, seed)

    def getGridPileInPlace(self, iuid, indg, idim0, vec):
        return _gstlearn.DbGrid_getGridPileInPlace(self, iuid, indg, idim0, vec)

    def setGridPileInPlace(self, iuid, indg, idim0, vec):
        return _gstlearn.DbGrid_setGridPileInPlace(self, iuid, indg, idim0, vec)

    def getDistanceToOrigin(self, *args, **kwargs):
        return _gstlearn.DbGrid_getDistanceToOrigin(self, *args, **kwargs)

    def __repr__(self):
        return _gstlearn.DbGrid___repr__(self)

# Register DbGrid in _gstlearn:
_gstlearn.DbGrid_swigregister(DbGrid)
class DbLine(Db):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.DbLine_swiginit(self, _gstlearn.new_DbLine(*args))
    __swig_destroy__ = _gstlearn.delete_DbLine

    def clone(self):
        return _gstlearn.DbLine_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.DbLine_toString(self, strfmt)

    def isLine(self):
        return _gstlearn.DbLine_isLine(self)

    def mayChangeSampleNumber(self):
        return _gstlearn.DbLine_mayChangeSampleNumber(self)

    def isConsistent(self):
        return _gstlearn.DbLine_isConsistent(self)

    def resetFromSamples(self, *args, **kwargs):
        return _gstlearn.DbLine_resetFromSamples(self, *args, **kwargs)

    def resetFromSamplesById(self, *args, **kwargs):
        return _gstlearn.DbLine_resetFromSamplesById(self, *args, **kwargs)

    @staticmethod
    def createFromSamples(*args, **kwargs):
        return _gstlearn.DbLine_createFromSamples(*args, **kwargs)

    @staticmethod
    def createFromSamplesById(*args, **kwargs):
        return _gstlearn.DbLine_createFromSamplesById(*args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.DbLine_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFillRandom(*args, **kwargs):
        return _gstlearn.DbLine_createFillRandom(*args, **kwargs)

    @staticmethod
    def createVerticalFromGrid(grid, names, xranks, yranks, byZ=1):
        return _gstlearn.DbLine_createVerticalFromGrid(grid, names, xranks, yranks, byZ)

    def createStatToHeader(self):
        return _gstlearn.DbLine_createStatToHeader(self)

    def getLineNumber(self):
        return _gstlearn.DbLine_getLineNumber(self)

    def getLineSampleNumber(self, iline):
        return _gstlearn.DbLine_getLineSampleNumber(self, iline)

    def getLineLength(self, iline):
        return _gstlearn.DbLine_getLineLength(self, iline)

    def getNTotal(self):
        return _gstlearn.DbLine_getNTotal(self)

    def getLineBySample(self, iech):
        return _gstlearn.DbLine_getLineBySample(self, iech)

    def _getHeaderCoordinate(self, idim):
        return _gstlearn.DbLine__getHeaderCoordinate(self, idim)

    def getCoordinates(self, iline, idim):
        return _gstlearn.DbLine_getCoordinates(self, iline, idim)

    def getLineLengths(self):
        return _gstlearn.DbLine_getLineLengths(self)

    def getLineSampleRank(self, iline, isample):
        return _gstlearn.DbLine_getLineSampleRank(self, iline, isample)

    def __repr__(self):
        return _gstlearn.DbLine___repr__(self)

# Register DbLine in _gstlearn:
_gstlearn.DbLine_swigregister(DbLine)
class DbGraphO(Db):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.DbGraphO_swiginit(self, _gstlearn.new_DbGraphO(*args))
    __swig_destroy__ = _gstlearn.delete_DbGraphO

    def clone(self):
        return _gstlearn.DbGraphO_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.DbGraphO_toString(self, strfmt)

    def isLine(self):
        return _gstlearn.DbGraphO_isLine(self)

    def mayChangeSampleNumber(self):
        return _gstlearn.DbGraphO_mayChangeSampleNumber(self)

    def isConsistent(self):
        return _gstlearn.DbGraphO_isConsistent(self)

    def resetFromSamples(self, *args, **kwargs):
        return _gstlearn.DbGraphO_resetFromSamples(self, *args, **kwargs)

    def resetFromMatrix(self, *args, **kwargs):
        return _gstlearn.DbGraphO_resetFromMatrix(self, *args, **kwargs)

    @staticmethod
    def createFromSamples(*args, **kwargs):
        return _gstlearn.DbGraphO_createFromSamples(*args, **kwargs)

    @staticmethod
    def createFromMatrix(*args, **kwargs):
        return _gstlearn.DbGraphO_createFromMatrix(*args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.DbGraphO_createFromNF(neutralFilename, verbose)

    def getArcNumber(self):
        return _gstlearn.DbGraphO_getArcNumber(self)

    def getNodeNumber(self):
        return _gstlearn.DbGraphO_getNodeNumber(self)

    def getArc(self, iarc, idim):
        return _gstlearn.DbGraphO_getArc(self, iarc, idim)

    def getArcValue(self, iarc):
        return _gstlearn.DbGraphO_getArcValue(self, iarc)

    def getOrderDown(self, node=0):
        return _gstlearn.DbGraphO_getOrderDown(self, node)

    def getCumulDown(self, node):
        return _gstlearn.DbGraphO_getCumulDown(self, node)

    def getIndicesNextDown(self, node=0):
        return _gstlearn.DbGraphO_getIndicesNextDown(self, node)

    def getIndicesNextUp(self, node=0):
        return _gstlearn.DbGraphO_getIndicesNextUp(self, node)

    def isEndDown(self, node=0):
        return _gstlearn.DbGraphO_isEndDown(self, node)

    def isEndUp(self, node=0):
        return _gstlearn.DbGraphO_isEndUp(self, node)

    def areConnected(self, node1, node2):
        return _gstlearn.DbGraphO_areConnected(self, node1, node2)

    def getEndsDown(self):
        return _gstlearn.DbGraphO_getEndsDown(self)

    def getEndsUp(self):
        return _gstlearn.DbGraphO_getEndsUp(self)

    def getOrphans(self):
        return _gstlearn.DbGraphO_getOrphans(self)

    def getMatArcs(self):
        return _gstlearn.DbGraphO_getMatArcs(self)

    def setArcLine(self, nodes, value=1.):
        return _gstlearn.DbGraphO_setArcLine(self, nodes, value)

    def __repr__(self):
        return _gstlearn.DbGraphO___repr__(self)

# Register DbGraphO in _gstlearn:
_gstlearn.DbGraphO_swigregister(DbGraphO)
class DbMeshTurbo(DbGrid):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.DbMeshTurbo_swiginit(self, _gstlearn.new_DbMeshTurbo(*args))
    __swig_destroy__ = _gstlearn.delete_DbMeshTurbo

    def clone(self):
        return _gstlearn.DbMeshTurbo_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.DbMeshTurbo_toString(self, strfmt)

    def isMesh(self):
        return _gstlearn.DbMeshTurbo_isMesh(self)

    def mayChangeSampleNumber(self):
        return _gstlearn.DbMeshTurbo_mayChangeSampleNumber(self)

    def isConsistent(self):
        return _gstlearn.DbMeshTurbo_isConsistent(self)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.DbMeshTurbo_create(*args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.DbMeshTurbo_createFromNF(neutralFilename, verbose)

    def getNApices(self):
        return _gstlearn.DbMeshTurbo_getNApices(self)

    def getNMeshes(self):
        return _gstlearn.DbMeshTurbo_getNMeshes(self)

    def getApex(self, imesh, rank):
        return _gstlearn.DbMeshTurbo_getApex(self, imesh, rank)

    def getCoor(self, imesh, rank, idim):
        return _gstlearn.DbMeshTurbo_getCoor(self, imesh, rank, idim)

    def getCoordinatesInPlace(self, imesh, rank, coords):
        return _gstlearn.DbMeshTurbo_getCoordinatesInPlace(self, imesh, rank, coords)

    def getApexCoor(self, i, idim):
        return _gstlearn.DbMeshTurbo_getApexCoor(self, i, idim)

    def getApexCoordinatesInPlace(self, i, coords):
        return _gstlearn.DbMeshTurbo_getApexCoordinatesInPlace(self, i, coords)

    def getCoordinatesPerMesh(self, imesh, idim, flagClose=False):
        return _gstlearn.DbMeshTurbo_getCoordinatesPerMesh(self, imesh, idim, flagClose)

    def __repr__(self):
        return _gstlearn.DbMeshTurbo___repr__(self)

# Register DbMeshTurbo in _gstlearn:
_gstlearn.DbMeshTurbo_swigregister(DbMeshTurbo)
class DbMeshStandard(Db):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.DbMeshStandard_swiginit(self, _gstlearn.new_DbMeshStandard(*args))
    __swig_destroy__ = _gstlearn.delete_DbMeshStandard

    def clone(self):
        return _gstlearn.DbMeshStandard_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.DbMeshStandard_toString(self, strfmt)

    def isMesh(self):
        return _gstlearn.DbMeshStandard_isMesh(self)

    def mayChangeSampleNumber(self):
        return _gstlearn.DbMeshStandard_mayChangeSampleNumber(self)

    def isConsistent(self):
        return _gstlearn.DbMeshStandard_isConsistent(self)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.DbMeshStandard_create(*args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.DbMeshStandard_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromExternal(*args, **kwargs):
        return _gstlearn.DbMeshStandard_createFromExternal(*args, **kwargs)

    def getNApices(self):
        return _gstlearn.DbMeshStandard_getNApices(self)

    def getNMeshes(self):
        return _gstlearn.DbMeshStandard_getNMeshes(self)

    def getApex(self, imesh, rank):
        return _gstlearn.DbMeshStandard_getApex(self, imesh, rank)

    def getCoor(self, imesh, rank, idim):
        return _gstlearn.DbMeshStandard_getCoor(self, imesh, rank, idim)

    def getCoordinatesInPlace(self, imesh, rank, coords):
        return _gstlearn.DbMeshStandard_getCoordinatesInPlace(self, imesh, rank, coords)

    def getApexCoor(self, i, idim):
        return _gstlearn.DbMeshStandard_getApexCoor(self, i, idim)

    def getApexCoordinatesInPlace(self, i, coords):
        return _gstlearn.DbMeshStandard_getApexCoordinatesInPlace(self, i, coords)

    def getCoordinatesPerMesh(self, imesh, idim, flagClose=False):
        return _gstlearn.DbMeshStandard_getCoordinatesPerMesh(self, imesh, idim, flagClose)

    def __repr__(self):
        return _gstlearn.DbMeshStandard___repr__(self)

# Register DbMeshStandard in _gstlearn:
_gstlearn.DbMeshStandard_swigregister(DbMeshStandard)
class DbStringFormat(AStringable, AStringFormat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.DbStringFormat_swiginit(self, _gstlearn.new_DbStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_DbStringFormat

    def toString(self, strfmt=None):
        return _gstlearn.DbStringFormat_toString(self, strfmt)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.DbStringFormat_create(*args, **kwargs)

    @staticmethod
    def createFromKeys(params, names, cols, useSel):
        return _gstlearn.DbStringFormat_createFromKeys(params, names, cols, useSel)

    @staticmethod
    def createFromFlags(*args, **kwargs):
        return _gstlearn.DbStringFormat_createFromFlags(*args, **kwargs)

    def getCols(self):
        return _gstlearn.DbStringFormat_getCols(self)

    def getUseSel(self):
        return _gstlearn.DbStringFormat_getUseSel(self)

    def getMode(self):
        return _gstlearn.DbStringFormat_getMode(self)

    def getParams(self):
        return _gstlearn.DbStringFormat_getParams(self)

    def getNames(self):
        return _gstlearn.DbStringFormat_getNames(self)

    def setCols(self, cols):
        return _gstlearn.DbStringFormat_setCols(self, cols)

    def setUseSel(self, useSel):
        return _gstlearn.DbStringFormat_setUseSel(self, useSel)

    def setMode(self, mode):
        return _gstlearn.DbStringFormat_setMode(self, mode)

    def setNames(self, names):
        return _gstlearn.DbStringFormat_setNames(self, names)

    def setParams(self, params):
        return _gstlearn.DbStringFormat_setParams(self, params)

    def setFlags(self, *args, **kwargs):
        return _gstlearn.DbStringFormat_setFlags(self, *args, **kwargs)

    def setResume(self):
        return _gstlearn.DbStringFormat_setResume(self)

    def setVars(self):
        return _gstlearn.DbStringFormat_setVars(self)

    def setExtend(self):
        return _gstlearn.DbStringFormat_setExtend(self)

    def setStats(self):
        return _gstlearn.DbStringFormat_setStats(self)

    def setArray(self):
        return _gstlearn.DbStringFormat_setArray(self)

    def setLocator(self):
        return _gstlearn.DbStringFormat_setLocator(self)

    def matchResume(self):
        return _gstlearn.DbStringFormat_matchResume(self)

    def matchVars(self):
        return _gstlearn.DbStringFormat_matchVars(self)

    def matchExtend(self):
        return _gstlearn.DbStringFormat_matchExtend(self)

    def matchStats(self):
        return _gstlearn.DbStringFormat_matchStats(self)

    def matchArray(self):
        return _gstlearn.DbStringFormat_matchArray(self)

    def matchLocator(self):
        return _gstlearn.DbStringFormat_matchLocator(self)

# Register DbStringFormat in _gstlearn:
_gstlearn.DbStringFormat_swigregister(DbStringFormat)
class DbHelper(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def findDuplicates(db1, db2, flag_same, verbose, opt_code, tolcode, dist, sel):
        return _gstlearn.DbHelper_findDuplicates(db1, db2, flag_same, verbose, opt_code, tolcode, dist, sel)

    @staticmethod
    def centerPointToGrid(db_point, db_grid, eps_random=1.e-6):
        return _gstlearn.DbHelper_centerPointToGrid(db_point, db_grid, eps_random)

    @staticmethod
    def normalizeVariables(db, oper, cols, center, stdv):
        return _gstlearn.DbHelper_normalizeVariables(db, oper, cols, center, stdv)

    @staticmethod
    def dbgrid_filling(*args, **kwargs):
        return _gstlearn.DbHelper_dbgrid_filling(*args, **kwargs)

    @staticmethod
    def db_duplicate(*args, **kwargs):
        return _gstlearn.DbHelper_db_duplicate(*args, **kwargs)

    @staticmethod
    def db_compositional_transform(db, verbose, mode, type, number, iatt_in, iatt_out, numout):
        return _gstlearn.DbHelper_db_compositional_transform(db, verbose, mode, type, number, iatt_in, iatt_out, numout)

    @staticmethod
    def dbgrid_sampling(dbin, nmult):
        return _gstlearn.DbHelper_dbgrid_sampling(dbin, nmult)

    @staticmethod
    def db_grid1D_fill(*args, **kwargs):
        return _gstlearn.DbHelper_db_grid1D_fill(*args, **kwargs)

    def __init__(self):
        _gstlearn.DbHelper_swiginit(self, _gstlearn.new_DbHelper())
    __swig_destroy__ = _gstlearn.delete_DbHelper

# Register DbHelper in _gstlearn:
_gstlearn.DbHelper_swigregister(DbHelper)
class DbH(DbHelper):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.DbH_swiginit(self, _gstlearn.new_DbH())
    __swig_destroy__ = _gstlearn.delete_DbH

# Register DbH in _gstlearn:
_gstlearn.DbH_swigregister(DbH)
class CalcAnamTransform(ACalcDbVarCreator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, anam):
        _gstlearn.CalcAnamTransform_swiginit(self, _gstlearn.new_CalcAnamTransform(anam))
    __swig_destroy__ = _gstlearn.delete_CalcAnamTransform

    def setAnam(self, anam):
        return _gstlearn.CalcAnamTransform_setAnam(self, anam)

    def getAnam(self):
        return _gstlearn.CalcAnamTransform_getAnam(self)

    def setFlagVars(self, flagVars):
        return _gstlearn.CalcAnamTransform_setFlagVars(self, flagVars)

    def setFlagToFactors(self, flagToFactors):
        return _gstlearn.CalcAnamTransform_setFlagToFactors(self, flagToFactors)

    def setFlagZToY(self, flagZToY):
        return _gstlearn.CalcAnamTransform_setFlagZToY(self, flagZToY)

    def setFlagNormalScore(self, flagNormalScore):
        return _gstlearn.CalcAnamTransform_setFlagNormalScore(self, flagNormalScore)

    def setIfacs(self, ifacs):
        return _gstlearn.CalcAnamTransform_setIfacs(self, ifacs)

    def setIptrEst(self, iptrEst):
        return _gstlearn.CalcAnamTransform_setIptrEst(self, iptrEst)

    def setIptrStd(self, iptrStd):
        return _gstlearn.CalcAnamTransform_setIptrStd(self, iptrStd)

    def setSelectivity(self, selectivity):
        return _gstlearn.CalcAnamTransform_setSelectivity(self, selectivity)

    def setFlagOk(self, flagOk):
        return _gstlearn.CalcAnamTransform_setFlagOk(self, flagOk)

    def setNbsimu(self, nbsimu):
        return _gstlearn.CalcAnamTransform_setNbsimu(self, nbsimu)

    def setProba(self, proba):
        return _gstlearn.CalcAnamTransform_setProba(self, proba)

    def setFlagDisjKrig(self, flagDisjKrig):
        return _gstlearn.CalcAnamTransform_setFlagDisjKrig(self, flagDisjKrig)

    def setFlagCondExp(self, flagCondExp):
        return _gstlearn.CalcAnamTransform_setFlagCondExp(self, flagCondExp)

    def setFlagUniCond(self, flagUniCond):
        return _gstlearn.CalcAnamTransform_setFlagUniCond(self, flagUniCond)

# Register CalcAnamTransform in _gstlearn:
_gstlearn.CalcAnamTransform_swigregister(CalcAnamTransform)

def DisjunctiveKriging(*args, **kwargs):
    return _gstlearn.DisjunctiveKriging(*args, **kwargs)

def ConditionalExpectation(*args, **kwargs):
    return _gstlearn.ConditionalExpectation(*args, **kwargs)

def UniformConditioning(*args, **kwargs):
    return _gstlearn.UniformConditioning(*args, **kwargs)

def anamPointToBlock(anam, verbose, cvv, coeff, mu):
    return _gstlearn.anamPointToBlock(anam, verbose, cvv, coeff, mu)
class AAnam(AStringable, ASerializable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AAnam

    def getType(self):
        return _gstlearn.AAnam_getType(self)

    def getVariance(self):
        return _gstlearn.AAnam_getVariance(self)

    def hasFactor(self):
        return _gstlearn.AAnam_hasFactor(self)

    def getNFactor(self):
        return _gstlearn.AAnam_getNFactor(self)

    def getNClass(self):
        return _gstlearn.AAnam_getNClass(self)

    def isChangeSupportDefined(self):
        return _gstlearn.AAnam_isChangeSupportDefined(self)

    def z2factor(self, z, ifacs):
        return _gstlearn.AAnam_z2factor(self, z, ifacs)

    def computeVariance(self, sval):
        return _gstlearn.AAnam_computeVariance(self, sval)

    def updatePointToBlock(self, r_coef):
        return _gstlearn.AAnam_updatePointToBlock(self, r_coef)

    def allowChangeSupport(self):
        return _gstlearn.AAnam_allowChangeSupport(self)

    def hasGaussian(self):
        return _gstlearn.AAnam_hasGaussian(self)

    def rawToTransformValue(self, z):
        return _gstlearn.AAnam_rawToTransformValue(self, z)

    def transformToRawValue(self, y):
        return _gstlearn.AAnam_transformToRawValue(self, y)

    def fitFromArray(self, *args, **kwargs):
        return _gstlearn.AAnam_fitFromArray(self, *args, **kwargs)

    def invertVariance(self, cvv):
        return _gstlearn.AAnam_invertVariance(self, cvv)

    def rawToTransformVec(self, z):
        return _gstlearn.AAnam_rawToTransformVec(self, z)

    def transformToRawVec(self, y):
        return _gstlearn.AAnam_transformToRawVec(self, y)

    def fitFromLocator(self, *args, **kwargs):
        return _gstlearn.AAnam_fitFromLocator(self, *args, **kwargs)

    def fit(self, db, name):
        return _gstlearn.AAnam_fit(self, db, name)

    def rawToGaussianByLocator(self, *args, **kwargs):
        return _gstlearn.AAnam_rawToGaussianByLocator(self, *args, **kwargs)

    def rawToGaussian(self, *args, **kwargs):
        return _gstlearn.AAnam_rawToGaussian(self, *args, **kwargs)

    def normalScore(self, *args, **kwargs):
        return _gstlearn.AAnam_normalScore(self, *args, **kwargs)

    def gaussianToRawByLocator(self, *args, **kwargs):
        return _gstlearn.AAnam_gaussianToRawByLocator(self, *args, **kwargs)

    def gaussianToRaw(self, *args, **kwargs):
        return _gstlearn.AAnam_gaussianToRaw(self, *args, **kwargs)

    def rawToFactorByRanks(self, *args, **kwargs):
        return _gstlearn.AAnam_rawToFactorByRanks(self, *args, **kwargs)

    def rawToFactor(self, *args, **kwargs):
        return _gstlearn.AAnam_rawToFactor(self, *args, **kwargs)

# Register AAnam in _gstlearn:
_gstlearn.AAnam_swigregister(AAnam)
class AnamContinuousFit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getAylim(self):
        return _gstlearn.AnamContinuousFit_getAylim(self)

    def setAylim(self, aylim):
        return _gstlearn.AnamContinuousFit_setAylim(self, aylim)

    def getAzlim(self):
        return _gstlearn.AnamContinuousFit_getAzlim(self)

    def setAzlim(self, azlim):
        return _gstlearn.AnamContinuousFit_setAzlim(self, azlim)

    def getPylim(self):
        return _gstlearn.AnamContinuousFit_getPylim(self)

    def setPylim(self, pylim):
        return _gstlearn.AnamContinuousFit_setPylim(self, pylim)

    def getPzlim(self):
        return _gstlearn.AnamContinuousFit_getPzlim(self)

    def setPzlim(self, pzlim):
        return _gstlearn.AnamContinuousFit_setPzlim(self, pzlim)

    def getY(self):
        return _gstlearn.AnamContinuousFit_getY(self)

    def setY(self, y):
        return _gstlearn.AnamContinuousFit_setY(self, y)

    def getZ(self):
        return _gstlearn.AnamContinuousFit_getZ(self)

    def setZ(self, z):
        return _gstlearn.AnamContinuousFit_setZ(self, z)

    def __init__(self):
        _gstlearn.AnamContinuousFit_swiginit(self, _gstlearn.new_AnamContinuousFit())
    __swig_destroy__ = _gstlearn.delete_AnamContinuousFit

# Register AnamContinuousFit in _gstlearn:
_gstlearn.AnamContinuousFit_swigregister(AnamContinuousFit)
class AnamContinuous(AAnam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AnamContinuous

    def toString(self, strfmt=None):
        return _gstlearn.AnamContinuous_toString(self, strfmt)

    def hasGaussian(self):
        return _gstlearn.AnamContinuous_hasGaussian(self)

    def calculateMeanAndVariance(self):
        return _gstlearn.AnamContinuous_calculateMeanAndVariance(self)

    def getVariance(self):
        return _gstlearn.AnamContinuous_getVariance(self)

    def setABounds(self, azmin=1.234e30, azmax=1.234e30, aymin=1.234e30, aymax=1.234e30):
        return _gstlearn.AnamContinuous_setABounds(self, azmin, azmax, aymin, aymax)

    def setPBounds(self, pzmin=1.234e30, pzmax=1.234e30, pymin=1.234e30, pymax=1.234e30):
        return _gstlearn.AnamContinuous_setPBounds(self, pzmin, pzmax, pymin, pymax)

    def rawToGaussianVector(self, z):
        return _gstlearn.AnamContinuous_rawToGaussianVector(self, z)

    def gaussianToRawVector(self, y):
        return _gstlearn.AnamContinuous_gaussianToRawVector(self, y)

    def sample(self, ndisc=100, aymin=-10, aymax=10):
        return _gstlearn.AnamContinuous_sample(self, ndisc, aymin, aymax)

    def getMean(self):
        return _gstlearn.AnamContinuous_getMean(self)

    def getAymax(self):
        return _gstlearn.AnamContinuous_getAymax(self)

    def getAymin(self):
        return _gstlearn.AnamContinuous_getAymin(self)

    def getAzmax(self):
        return _gstlearn.AnamContinuous_getAzmax(self)

    def getAzmin(self):
        return _gstlearn.AnamContinuous_getAzmin(self)

    def getPymax(self):
        return _gstlearn.AnamContinuous_getPymax(self)

    def getPymin(self):
        return _gstlearn.AnamContinuous_getPymin(self)

    def getPzmax(self):
        return _gstlearn.AnamContinuous_getPzmax(self)

    def getPzmin(self):
        return _gstlearn.AnamContinuous_getPzmin(self)

    def setAzmin(self, azmin):
        return _gstlearn.AnamContinuous_setAzmin(self, azmin)

    def setAzmax(self, azmax):
        return _gstlearn.AnamContinuous_setAzmax(self, azmax)

    def setAymin(self, aymin):
        return _gstlearn.AnamContinuous_setAymin(self, aymin)

    def setAymax(self, aymax):
        return _gstlearn.AnamContinuous_setAymax(self, aymax)

    def setPzmin(self, pzmin):
        return _gstlearn.AnamContinuous_setPzmin(self, pzmin)

    def setPzmax(self, pzmax):
        return _gstlearn.AnamContinuous_setPzmax(self, pzmax)

    def setPymin(self, pymin):
        return _gstlearn.AnamContinuous_setPymin(self, pymin)

    def setPymax(self, pymax):
        return _gstlearn.AnamContinuous_setPymax(self, pymax)

    def setMean(self, mean):
        return _gstlearn.AnamContinuous_setMean(self, mean)

    def setVariance(self, variance):
        return _gstlearn.AnamContinuous_setVariance(self, variance)

# Register AnamContinuous in _gstlearn:
_gstlearn.AnamContinuous_swigregister(AnamContinuous)
class AnamDiscrete(AAnam):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AnamDiscrete

    def toString(self, strfmt=None):
        return _gstlearn.AnamDiscrete_toString(self, strfmt)

    def hasGaussian(self):
        return _gstlearn.AnamDiscrete_hasGaussian(self)

    def getNClass(self):
        return _gstlearn.AnamDiscrete_getNClass(self)

    def calculateMeanAndVariance(self):
        return _gstlearn.AnamDiscrete_calculateMeanAndVariance(self)

    def getVariance(self):
        return _gstlearn.AnamDiscrete_getVariance(self)

    def getNCut(self):
        return _gstlearn.AnamDiscrete_getNCut(self)

    def getNElem(self):
        return _gstlearn.AnamDiscrete_getNElem(self)

    def getZCut(self, *args):
        return _gstlearn.AnamDiscrete_getZCut(self, *args)

    def getMean(self):
        return _gstlearn.AnamDiscrete_getMean(self)

    def setMean(self, mean):
        return _gstlearn.AnamDiscrete_setMean(self, mean)

    def setVariance(self, variance):
        return _gstlearn.AnamDiscrete_setVariance(self, variance)

    def setNCut(self, ncut):
        return _gstlearn.AnamDiscrete_setNCut(self, ncut)

    def setZCut(self, zcut):
        return _gstlearn.AnamDiscrete_setZCut(self, zcut)

    def setNElem(self, nelem):
        return _gstlearn.AnamDiscrete_setNElem(self, nelem)

    def setStats(self, stats):
        return _gstlearn.AnamDiscrete_setStats(self, stats)

    def getDDStatProp(self, iclass):
        return _gstlearn.AnamDiscrete_getDDStatProp(self, iclass)

    def getDDStatZmoy(self, iclass):
        return _gstlearn.AnamDiscrete_getDDStatZmoy(self, iclass)

    def getDDStatCnorm(self, iclass):
        return _gstlearn.AnamDiscrete_getDDStatCnorm(self, iclass)

    def getDDStatLambda(self, iclass):
        return _gstlearn.AnamDiscrete_getDDStatLambda(self, iclass)

    def getDDStatU(self, iclass):
        return _gstlearn.AnamDiscrete_getDDStatU(self, iclass)

    def getDDStatMul(self, iclass):
        return _gstlearn.AnamDiscrete_getDDStatMul(self, iclass)

    def setDDStatProp(self, iclass, value):
        return _gstlearn.AnamDiscrete_setDDStatProp(self, iclass, value)

    def setDDStatZmoy(self, iclass, value):
        return _gstlearn.AnamDiscrete_setDDStatZmoy(self, iclass, value)

    def setDDStatCnorm(self, iclass, value):
        return _gstlearn.AnamDiscrete_setDDStatCnorm(self, iclass, value)

    def setDDStatLambda(self, iclass, value):
        return _gstlearn.AnamDiscrete_setDDStatLambda(self, iclass, value)

    def setDDStatU(self, iclass, value):
        return _gstlearn.AnamDiscrete_setDDStatU(self, iclass, value)

    def setDDStatMul(self, iclass, value):
        return _gstlearn.AnamDiscrete_setDDStatMul(self, iclass, value)

    def getIRStatT(self, iclass):
        return _gstlearn.AnamDiscrete_getIRStatT(self, iclass)

    def getIRStatQ(self, iclass):
        return _gstlearn.AnamDiscrete_getIRStatQ(self, iclass)

    def getIRStatZ(self, iclass):
        return _gstlearn.AnamDiscrete_getIRStatZ(self, iclass)

    def getIRStatB(self, iclass):
        return _gstlearn.AnamDiscrete_getIRStatB(self, iclass)

    def getIRStatR(self, iclass):
        return _gstlearn.AnamDiscrete_getIRStatR(self, iclass)

    def getIRStatRV(self, iclass):
        return _gstlearn.AnamDiscrete_getIRStatRV(self, iclass)

    def setIRStatT(self, iclass, value):
        return _gstlearn.AnamDiscrete_setIRStatT(self, iclass, value)

    def setIRStatQ(self, iclass, value):
        return _gstlearn.AnamDiscrete_setIRStatQ(self, iclass, value)

    def setIRStatZ(self, iclass, value):
        return _gstlearn.AnamDiscrete_setIRStatZ(self, iclass, value)

    def setIRStatB(self, iclass, value):
        return _gstlearn.AnamDiscrete_setIRStatB(self, iclass, value)

    def setIRStatR(self, iclass, value):
        return _gstlearn.AnamDiscrete_setIRStatR(self, iclass, value)

    def setIRStatRV(self, iclass, value):
        return _gstlearn.AnamDiscrete_setIRStatRV(self, iclass, value)

    def getStats(self):
        return _gstlearn.AnamDiscrete_getStats(self)

# Register AnamDiscrete in _gstlearn:
_gstlearn.AnamDiscrete_swigregister(AnamDiscrete)
class AnamUser(AnamContinuous):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AnamUser_swiginit(self, _gstlearn.new_AnamUser(*args))
    __swig_destroy__ = _gstlearn.delete_AnamUser

    def clone(self):
        return _gstlearn.AnamUser_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.AnamUser_toString(self, strfmt)

    def getType(self):
        return _gstlearn.AnamUser_getType(self)

    def isChangeSupportDefined(self):
        return _gstlearn.AnamUser_isChangeSupportDefined(self)

    def calculateMeanAndVariance(self):
        return _gstlearn.AnamUser_calculateMeanAndVariance(self)

    def transformToRawValue(self, h):
        return _gstlearn.AnamUser_transformToRawValue(self, h)

    def rawToTransformValue(self, h):
        return _gstlearn.AnamUser_rawToTransformValue(self, h)

    def setY2zFunction(self, y2z_function):
        return _gstlearn.AnamUser_setY2zFunction(self, y2z_function)

    def setZ2yFunction(self, z2y_function):
        return _gstlearn.AnamUser_setZ2yFunction(self, z2y_function)

# Register AnamUser in _gstlearn:
_gstlearn.AnamUser_swigregister(AnamUser)
class AnamHermite(AnamContinuous):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.AnamHermite_swiginit(self, _gstlearn.new_AnamHermite(*args))
    __swig_destroy__ = _gstlearn.delete_AnamHermite

    def clone(self):
        return _gstlearn.AnamHermite_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.AnamHermite_toString(self, strfmt)

    def getType(self):
        return _gstlearn.AnamHermite_getType(self)

    def hasFactor(self):
        return _gstlearn.AnamHermite_hasFactor(self)

    def getNFactor(self):
        return _gstlearn.AnamHermite_getNFactor(self)

    def z2factor(self, z, ifacs):
        return _gstlearn.AnamHermite_z2factor(self, z, ifacs)

    def computeVariance(self, chh):
        return _gstlearn.AnamHermite_computeVariance(self, chh)

    def updatePointToBlock(self, r_coef):
        return _gstlearn.AnamHermite_updatePointToBlock(self, r_coef)

    def allowChangeSupport(self):
        return _gstlearn.AnamHermite_allowChangeSupport(self)

    def isChangeSupportDefined(self):
        return _gstlearn.AnamHermite_isChangeSupportDefined(self)

    def getNClass(self):
        return _gstlearn.AnamHermite_getNClass(self)

    def fitFromArray(self, *args, **kwargs):
        return _gstlearn.AnamHermite_fitFromArray(self, *args, **kwargs)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.AnamHermite_createFromNF(neutralFilename, verbose)

    def rawToTransformValue(self, z):
        return _gstlearn.AnamHermite_rawToTransformValue(self, z)

    def transformToRawValue(self, y):
        return _gstlearn.AnamHermite_transformToRawValue(self, y)

    def calculateMeanAndVariance(self):
        return _gstlearn.AnamHermite_calculateMeanAndVariance(self)

    @staticmethod
    def create(nbpoly=0, flagBound=True, rCoef=1.):
        return _gstlearn.AnamHermite_create(nbpoly, flagBound, rCoef)

    def reset(self, pymin, pzmin, pymax, pzmax, aymin, azmin, aymax, azmax, r, psi_hn):
        return _gstlearn.AnamHermite_reset(self, pymin, pzmin, pymax, pzmax, aymin, azmin, aymax, azmax, r, psi_hn)

    def getNbPoly(self):
        return _gstlearn.AnamHermite_getNbPoly(self)

    def getPsiHns(self):
        return _gstlearn.AnamHermite_getPsiHns(self)

    def getPsiHn(self, ih):
        return _gstlearn.AnamHermite_getPsiHn(self, ih)

    def getRCoef(self):
        return _gstlearn.AnamHermite_getRCoef(self)

    def getFlagBound(self):
        return _gstlearn.AnamHermite_getFlagBound(self)

    def setPsiHns(self, psi_hn):
        return _gstlearn.AnamHermite_setPsiHns(self, psi_hn)

    def setFlagBound(self, flagBound):
        return _gstlearn.AnamHermite_setFlagBound(self, flagBound)

    def setPsiHn(self, i, psi_hn):
        return _gstlearn.AnamHermite_setPsiHn(self, i, psi_hn)

    def setRCoef(self, r_coef):
        return _gstlearn.AnamHermite_setRCoef(self, r_coef)

    def factor2Selectivity(self, db, selectivity, cols_est, cols_std, iptr0):
        return _gstlearn.AnamHermite_factor2Selectivity(self, db, selectivity, cols_est, cols_std, iptr0)

    def evalSupportCoefficient(self, *args, **kwargs):
        return _gstlearn.AnamHermite_evalSupportCoefficient(self, *args, **kwargs)

    def cumulateVarianceRatio(self, chh):
        return _gstlearn.AnamHermite_cumulateVarianceRatio(self, chh)

    def __repr__(self):
        return _gstlearn.AnamHermite___repr__(self)

# Register AnamHermite in _gstlearn:
_gstlearn.AnamHermite_swigregister(AnamHermite)
class AnamEmpirical(AnamContinuous):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AnamEmpirical_swiginit(self, _gstlearn.new_AnamEmpirical(*args))
    __swig_destroy__ = _gstlearn.delete_AnamEmpirical

    def clone(self):
        return _gstlearn.AnamEmpirical_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.AnamEmpirical_toString(self, strfmt)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.AnamEmpirical_createFromNF(neutralFilename, verbose)

    def reset(self, ndisc, pymin, pzmin, pymax, pzmax, aymin, azmin, aymax, azmax, sigma2e, zdisc, ydisc):
        return _gstlearn.AnamEmpirical_reset(self, ndisc, pymin, pzmin, pymax, pzmax, aymin, azmin, aymax, azmax, sigma2e, zdisc, ydisc)

    def getType(self):
        return _gstlearn.AnamEmpirical_getType(self)

    def getNFactor(self):
        return _gstlearn.AnamEmpirical_getNFactor(self)

    def fitFromArray(self, *args, **kwargs):
        return _gstlearn.AnamEmpirical_fitFromArray(self, *args, **kwargs)

    def calculateMeanAndVariance(self):
        return _gstlearn.AnamEmpirical_calculateMeanAndVariance(self)

    def rawToTransformValue(self, zz):
        return _gstlearn.AnamEmpirical_rawToTransformValue(self, zz)

    def transformToRawValue(self, yy):
        return _gstlearn.AnamEmpirical_transformToRawValue(self, yy)

    def isChangeSupportDefined(self):
        return _gstlearn.AnamEmpirical_isChangeSupportDefined(self)

    @staticmethod
    def create(ndisc=100, sigma2e=1.234e30):
        return _gstlearn.AnamEmpirical_create(ndisc, sigma2e)

    def getNDisc(self):
        return _gstlearn.AnamEmpirical_getNDisc(self)

    def getSigma2e(self):
        return _gstlearn.AnamEmpirical_getSigma2e(self)

    def getZDisc(self):
        return _gstlearn.AnamEmpirical_getZDisc(self)

    def getYDisc(self):
        return _gstlearn.AnamEmpirical_getYDisc(self)

    def isFlagDilution(self):
        return _gstlearn.AnamEmpirical_isFlagDilution(self)

    def isFlagGaussian(self):
        return _gstlearn.AnamEmpirical_isFlagGaussian(self)

    def setSigma2e(self, sigma2e):
        return _gstlearn.AnamEmpirical_setSigma2e(self, sigma2e)

    def setNDisc(self, ndisc):
        return _gstlearn.AnamEmpirical_setNDisc(self, ndisc)

    def setDisc(self, zdisc, ydisc):
        return _gstlearn.AnamEmpirical_setDisc(self, zdisc, ydisc)

    def setFlagDilution(self, flagDilution):
        return _gstlearn.AnamEmpirical_setFlagDilution(self, flagDilution)

    def setFlagGaussian(self, flagGaussian):
        return _gstlearn.AnamEmpirical_setFlagGaussian(self, flagGaussian)

# Register AnamEmpirical in _gstlearn:
_gstlearn.AnamEmpirical_swigregister(AnamEmpirical)
class AnamDiscreteDD(AnamDiscrete):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AnamDiscreteDD_swiginit(self, _gstlearn.new_AnamDiscreteDD(*args))
    __swig_destroy__ = _gstlearn.delete_AnamDiscreteDD

    def clone(self):
        return _gstlearn.AnamDiscreteDD_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.AnamDiscreteDD_toString(self, strfmt)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.AnamDiscreteDD_createFromNF(neutralFilename, verbose)

    def getType(self):
        return _gstlearn.AnamDiscreteDD_getType(self)

    def hasFactor(self):
        return _gstlearn.AnamDiscreteDD_hasFactor(self)

    def getNFactor(self):
        return _gstlearn.AnamDiscreteDD_getNFactor(self)

    def z2factor(self, z, ifacs):
        return _gstlearn.AnamDiscreteDD_z2factor(self, z, ifacs)

    def computeVariance(self, sval):
        return _gstlearn.AnamDiscreteDD_computeVariance(self, sval)

    def updatePointToBlock(self, r_coef):
        return _gstlearn.AnamDiscreteDD_updatePointToBlock(self, r_coef)

    def allowChangeSupport(self):
        return _gstlearn.AnamDiscreteDD_allowChangeSupport(self)

    def isChangeSupportDefined(self):
        return _gstlearn.AnamDiscreteDD_isChangeSupportDefined(self)

    def fitFromArray(self, *args, **kwargs):
        return _gstlearn.AnamDiscreteDD_fitFromArray(self, *args, **kwargs)

    def calculateMeanAndVariance(self):
        return _gstlearn.AnamDiscreteDD_calculateMeanAndVariance(self)

    def factors_exp(self, verbose=False):
        return _gstlearn.AnamDiscreteDD_factors_exp(self, verbose)

    def factors_maf(self, verbose=False):
        return _gstlearn.AnamDiscreteDD_factors_maf(self, verbose)

    def factors_mod(self):
        return _gstlearn.AnamDiscreteDD_factors_mod(self)

    def chi2I(self, chi, mode):
        return _gstlearn.AnamDiscreteDD_chi2I(self, chi, mode)

    @staticmethod
    def create(mu=1., scoef=0.):
        return _gstlearn.AnamDiscreteDD_create(mu, scoef)

    def reset(self, ncut, scoef, mu, zcut, pcaz2f, pcaf2z, stats):
        return _gstlearn.AnamDiscreteDD_reset(self, ncut, scoef, mu, zcut, pcaz2f, pcaf2z, stats)

    def getMAF(self):
        return _gstlearn.AnamDiscreteDD_getMAF(self)

    def getMu(self):
        return _gstlearn.AnamDiscreteDD_getMu(self)

    def getSCoef(self):
        return _gstlearn.AnamDiscreteDD_getSCoef(self)

    def getI2Chi(self):
        return _gstlearn.AnamDiscreteDD_getI2Chi(self)

    def getPcaZ2Fs(self):
        return _gstlearn.AnamDiscreteDD_getPcaZ2Fs(self)

    def getPcaF2Zs(self):
        return _gstlearn.AnamDiscreteDD_getPcaF2Zs(self)

    def setMu(self, mu):
        return _gstlearn.AnamDiscreteDD_setMu(self, mu)

    def setRCoef(self, rcoef):
        return _gstlearn.AnamDiscreteDD_setRCoef(self, rcoef)

    def setPcaZ2F(self, pcaz2f):
        return _gstlearn.AnamDiscreteDD_setPcaZ2F(self, pcaz2f)

    def setPcaF2Z(self, pcaf2z):
        return _gstlearn.AnamDiscreteDD_setPcaF2Z(self, pcaf2z)

    def setI2Chi(self, i2Chi):
        return _gstlearn.AnamDiscreteDD_setI2Chi(self, i2Chi)

    def factor2Selectivity(self, db, selectivity, cols_est, cols_std, iptr0):
        return _gstlearn.AnamDiscreteDD_factor2Selectivity(self, db, selectivity, cols_est, cols_std, iptr0)

# Register AnamDiscreteDD in _gstlearn:
_gstlearn.AnamDiscreteDD_swigregister(AnamDiscreteDD)
class AnamDiscreteIR(AnamDiscrete):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AnamDiscreteIR_swiginit(self, _gstlearn.new_AnamDiscreteIR(*args))
    __swig_destroy__ = _gstlearn.delete_AnamDiscreteIR

    def clone(self):
        return _gstlearn.AnamDiscreteIR_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.AnamDiscreteIR_toString(self, strfmt)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.AnamDiscreteIR_createFromNF(neutralFilename, verbose)

    def getType(self):
        return _gstlearn.AnamDiscreteIR_getType(self)

    def hasFactor(self):
        return _gstlearn.AnamDiscreteIR_hasFactor(self)

    def z2factor(self, z, ifacs):
        return _gstlearn.AnamDiscreteIR_z2factor(self, z, ifacs)

    def computeVariance(self, sval):
        return _gstlearn.AnamDiscreteIR_computeVariance(self, sval)

    def updatePointToBlock(self, r_coef):
        return _gstlearn.AnamDiscreteIR_updatePointToBlock(self, r_coef)

    def allowChangeSupport(self):
        return _gstlearn.AnamDiscreteIR_allowChangeSupport(self)

    def isChangeSupportDefined(self):
        return _gstlearn.AnamDiscreteIR_isChangeSupportDefined(self)

    def fitFromArray(self, *args, **kwargs):
        return _gstlearn.AnamDiscreteIR_fitFromArray(self, *args, **kwargs)

    def calculateMeanAndVariance(self):
        return _gstlearn.AnamDiscreteIR_calculateMeanAndVariance(self)

    @staticmethod
    def create(rcoef=0.):
        return _gstlearn.AnamDiscreteIR_create(rcoef)

    def reset(self, ncut, r_coef, zcut, stats):
        return _gstlearn.AnamDiscreteIR_reset(self, ncut, r_coef, zcut, stats)

    def getRCoef(self):
        return _gstlearn.AnamDiscreteIR_getRCoef(self)

    def setRCoef(self, rcoef):
        return _gstlearn.AnamDiscreteIR_setRCoef(self, rcoef)

    def factor2Selectivity(self, db, selectivity, cols_est, cols_std, iptr0):
        return _gstlearn.AnamDiscreteIR_factor2Selectivity(self, db, selectivity, cols_est, cols_std, iptr0)

# Register AnamDiscreteIR in _gstlearn:
_gstlearn.AnamDiscreteIR_swigregister(AnamDiscreteIR)
class PPMT(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.PPMT_swiginit(self, _gstlearn.new_PPMT(*args))
    __swig_destroy__ = _gstlearn.delete_PPMT

    def toString(self, strfmt=None):
        return _gstlearn.PPMT_toString(self, strfmt)

    def clone(self):
        return _gstlearn.PPMT_clone(self)

    @staticmethod
    def create(*args, **kwargs):
        return _gstlearn.PPMT_create(*args, **kwargs)

    def getNiter(self):
        return _gstlearn.PPMT_getNiter(self)

    def getAlpha(self):
        return _gstlearn.PPMT_getAlpha(self)

    def getNdir(self):
        return _gstlearn.PPMT_getNdir(self)

    def getNdim(self):
        return _gstlearn.PPMT_getNdim(self)

    def getNbpoly(self):
        return _gstlearn.PPMT_getNbpoly(self)

    def isFitted(self):
        return _gstlearn.PPMT_isFitted(self)

    def getMethodDir(self):
        return _gstlearn.PPMT_getMethodDir(self)

    def getMethodTrans(self):
        return _gstlearn.PPMT_getMethodTrans(self)

    def getSerieAngle(self):
        return _gstlearn.PPMT_getSerieAngle(self)

    def getSerieScore(self, flagLog=False):
        return _gstlearn.PPMT_getSerieScore(self, flagLog)

    def fit(self, *args, **kwargs):
        return _gstlearn.PPMT_fit(self, *args, **kwargs)

    def fitFromMatrix(self, Y, niter, verbose=False):
        return _gstlearn.PPMT_fitFromMatrix(self, Y, niter, verbose)

    def rawToGaussian(self, *args, **kwargs):
        return _gstlearn.PPMT_rawToGaussian(self, *args, **kwargs)

    def gaussianToRaw(self, *args, **kwargs):
        return _gstlearn.PPMT_gaussianToRaw(self, *args, **kwargs)

    def __repr__(self):
        return _gstlearn.PPMT___repr__(self)

# Register PPMT in _gstlearn:
_gstlearn.PPMT_swigregister(PPMT)
class AGibbs(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_AGibbs

    def toString(self, strfmt=None):
        return _gstlearn.AGibbs_toString(self, strfmt)

    def calculInitialize(self, y, isimu, ipgs):
        return _gstlearn.AGibbs_calculInitialize(self, y, isimu, ipgs)

    def update(self, y, isimu, ipgs, iter):
        return _gstlearn.AGibbs_update(self, y, isimu, ipgs, iter)

    def covmatAlloc(self, verbose, verboseTimer=False):
        return _gstlearn.AGibbs_covmatAlloc(self, verbose, verboseTimer)

    def getSimulate(self, y, yk, sk, icase, ipgs, ivar, iact, iter):
        return _gstlearn.AGibbs_getSimulate(self, y, yk, sk, icase, ipgs, ivar, iact, iter)

    def checkGibbs(self, y, isimu, ipgs):
        return _gstlearn.AGibbs_checkGibbs(self, y, isimu, ipgs)

    def cleanup(self):
        return _gstlearn.AGibbs_cleanup(self)

    def init(self, npgs, nvar, nburn, niter, seed=3241, flag_order=0, flag_decay=True):
        return _gstlearn.AGibbs_init(self, npgs, nvar, nburn, niter, seed, flag_order, flag_decay)

    def run(self, y, ipgs0=0, isimu0=0, verboseTimer=False, flagCheck=False):
        return _gstlearn.AGibbs_run(self, y, ipgs0, isimu0, verboseTimer, flagCheck)

    def getNvar(self):
        return _gstlearn.AGibbs_getNvar(self)

    def setNvar(self, nvar):
        return _gstlearn.AGibbs_setNvar(self, nvar)

    def getNpgs(self):
        return _gstlearn.AGibbs_getNpgs(self)

    def setNpgs(self, npgs):
        return _gstlearn.AGibbs_setNpgs(self, npgs)

    def getNburn(self):
        return _gstlearn.AGibbs_getNburn(self)

    def setNburn(self, nburn):
        return _gstlearn.AGibbs_setNburn(self, nburn)

    def getNiter(self):
        return _gstlearn.AGibbs_getNiter(self)

    def setNiter(self, niter):
        return _gstlearn.AGibbs_setNiter(self, niter)

    def getFlagOrder(self):
        return _gstlearn.AGibbs_getFlagOrder(self)

    def setFlagOrder(self, flagOrder):
        return _gstlearn.AGibbs_setFlagOrder(self, flagOrder)

    def getOptionStats(self):
        return _gstlearn.AGibbs_getOptionStats(self)

    def setOptionStats(self, option_stats):
        return _gstlearn.AGibbs_setOptionStats(self, option_stats)

    def getDb(self):
        return _gstlearn.AGibbs_getDb(self)

    def allocY(self):
        return _gstlearn.AGibbs_allocY(self)

    def storeResult(self, y, isimu, ipgs):
        return _gstlearn.AGibbs_storeResult(self, y, isimu, ipgs)

    def getSampleNumber(self):
        return _gstlearn.AGibbs_getSampleNumber(self)

    def getSampleRank(self, i):
        return _gstlearn.AGibbs_getSampleRank(self, i)

    def getRank(self, ipgs, ivar):
        return _gstlearn.AGibbs_getRank(self, ipgs, ivar)

# Register AGibbs in _gstlearn:
_gstlearn.AGibbs_swigregister(AGibbs)
class GibbsMulti(AGibbs):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_GibbsMulti

    def calculInitialize(self, y, isimu, ipgs):
        return _gstlearn.GibbsMulti_calculInitialize(self, y, isimu, ipgs)

    def getSimulate(self, y, yk, sk, icase, ipgs, ivar, iact, iter):
        return _gstlearn.GibbsMulti_getSimulate(self, y, yk, sk, icase, ipgs, ivar, iact, iter)

    def checkGibbs(self, y, isimu, ipgs):
        return _gstlearn.GibbsMulti_checkGibbs(self, y, isimu, ipgs)

    def getModel(self):
        return _gstlearn.GibbsMulti_getModel(self)

# Register GibbsMulti in _gstlearn:
_gstlearn.GibbsMulti_swigregister(GibbsMulti)
class GibbsMMulti(GibbsMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GibbsMMulti_swiginit(self, _gstlearn.new_GibbsMMulti(*args))
    __swig_destroy__ = _gstlearn.delete_GibbsMMulti

    def update(self, y, isimu, ipgs, iter):
        return _gstlearn.GibbsMMulti_update(self, y, isimu, ipgs, iter)

    def covmatAlloc(self, verbose, verboseTimer=False):
        return _gstlearn.GibbsMMulti_covmatAlloc(self, verbose, verboseTimer)

    def setEps(self, eps):
        return _gstlearn.GibbsMMulti_setEps(self, eps)

    def cleanup(self):
        return _gstlearn.GibbsMMulti_cleanup(self)

    def setFlagStoreInternal(self, flagStoreInternal):
        return _gstlearn.GibbsMMulti_setFlagStoreInternal(self, flagStoreInternal)

# Register GibbsMMulti in _gstlearn:
_gstlearn.GibbsMMulti_swigregister(GibbsMMulti)
class GibbsUMulti(GibbsMulti):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GibbsUMulti_swiginit(self, _gstlearn.new_GibbsUMulti(*args))
    __swig_destroy__ = _gstlearn.delete_GibbsUMulti

    def update(self, y, isimu, ipgs, iter):
        return _gstlearn.GibbsUMulti_update(self, y, isimu, ipgs, iter)

    def covmatAlloc(self, verbose, verboseTimer=False):
        return _gstlearn.GibbsUMulti_covmatAlloc(self, verbose, verboseTimer)

# Register GibbsUMulti in _gstlearn:
_gstlearn.GibbsUMulti_swigregister(GibbsUMulti)
class Spill_Res(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    success = property(_gstlearn.Spill_Res_success_get, _gstlearn.Spill_Res_success_set)
    h = property(_gstlearn.Spill_Res_h_get, _gstlearn.Spill_Res_h_set)
    th = property(_gstlearn.Spill_Res_th_get, _gstlearn.Spill_Res_th_set)
    ix0 = property(_gstlearn.Spill_Res_ix0_get, _gstlearn.Spill_Res_ix0_set)
    iy0 = property(_gstlearn.Spill_Res_iy0_get, _gstlearn.Spill_Res_iy0_set)

    def __init__(self):
        _gstlearn.Spill_Res_swiginit(self, _gstlearn.new_Spill_Res())
    __swig_destroy__ = _gstlearn.delete_Spill_Res

# Register Spill_Res in _gstlearn:
_gstlearn.Spill_Res_swigregister(Spill_Res)

def morpho_count(imagin):
    return _gstlearn.morpho_count(imagin)

def morpho_duplicate(imagin, imagout):
    return _gstlearn.morpho_duplicate(imagin, imagout)

def morpho_erosion(option, radius, imagin, imagout, verbose=False):
    return _gstlearn.morpho_erosion(option, radius, imagin, imagout, verbose)

def morpho_dilation(option, radius, imagin, imagout, verbose=False):
    return _gstlearn.morpho_dilation(option, radius, imagin, imagout, verbose)

def morpho_opening(option, radius, imagin, imagout, verbose=False):
    return _gstlearn.morpho_opening(option, radius, imagin, imagout, verbose)

def morpho_closing(option, radius, imagin, imagout, verbose=False):
    return _gstlearn.morpho_closing(option, radius, imagin, imagout, verbose)

def morpho_intersection(image1, image2, imagout, verbose=False):
    return _gstlearn.morpho_intersection(image1, image2, imagout, verbose)

def morpho_union(image1, image2, imagout, verbose=False):
    return _gstlearn.morpho_union(image1, image2, imagout, verbose)

def morpho_negation(imagin, imagout, verbose=False):
    return _gstlearn.morpho_negation(imagin, imagout, verbose)

def morpho_double2imageInPlace(nx, tabin, vmin, vmax, imagout, verbose=False):
    return _gstlearn.morpho_double2imageInPlace(nx, tabin, vmin, vmax, imagout, verbose)

def morpho_double2image(nx, tabin, vmin, vmax, verbose=False):
    return _gstlearn.morpho_double2image(nx, tabin, vmin, vmax, verbose)

def morpho_image2double(imagin, mode, grain, pore, tabout, verbose=False):
    return _gstlearn.morpho_image2double(imagin, mode, grain, pore, tabout, verbose)

def morpho_labelling(option, flag_size, imagin, ccvoid, verbose=False):
    return _gstlearn.morpho_labelling(option, flag_size, imagin, ccvoid, verbose)

def morpho_labelsize(option, imagin):
    return _gstlearn.morpho_labelsize(option, imagin)

def morpho_distance(option, radius, flagDistErode, imagin, dist, verbose=False):
    return _gstlearn.morpho_distance(option, radius, flagDistErode, imagin, dist, verbose)

def gridcell_neigh(ndim, option, radius, flag_center=True, verbose=False):
    return _gstlearn.gridcell_neigh(ndim, option, radius, flag_center, verbose)

def spillPoint(dbgrid, name_depth, name_data, option=0, flag_up=True, verbose_step=0, hmax=1.234e30):
    return _gstlearn.spillPoint(dbgrid, name_depth, name_data, option, flag_up, verbose_step, hmax)

def db_morpho_calc(dbgrid, iptr0, oper, vmin, vmax, option, radius, flagDistErode, verbose):
    return _gstlearn.db_morpho_calc(dbgrid, iptr0, oper, vmin, vmax, option, radius, flagDistErode, verbose)

def db_morpho_angle2D(dbgrid, radius, iptr0):
    return _gstlearn.db_morpho_angle2D(dbgrid, radius, iptr0)

def db_morpho_gradients(dbgrid, iptr0):
    return _gstlearn.db_morpho_gradients(dbgrid, iptr0)
class Polygons(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Polygons_swiginit(self, _gstlearn.new_Polygons(*args))
    __swig_destroy__ = _gstlearn.delete_Polygons

    def toString(self, strfmt=None):
        return _gstlearn.Polygons_toString(self, strfmt)

    def resetFromDb(self, db, dilate=0., verbose=False):
        return _gstlearn.Polygons_resetFromDb(self, db, dilate, verbose)

    def resetFromCSV(self, filename, csv, verbose=0, ncol_max=-1, nrow_max=-1):
        return _gstlearn.Polygons_resetFromCSV(self, filename, csv, verbose, ncol_max, nrow_max)

    def resetFromWKT(self, filename, csv, verbose=0, ncol_max=-1, nrow_max=-1):
        return _gstlearn.Polygons_resetFromWKT(self, filename, csv, verbose, ncol_max, nrow_max)

    @staticmethod
    def create():
        return _gstlearn.Polygons_create()

    @staticmethod
    def createFromNF(neutralFilename, verbose=False):
        return _gstlearn.Polygons_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromCSV(*args, **kwargs):
        return _gstlearn.Polygons_createFromCSV(*args, **kwargs)

    @staticmethod
    def createFromWKT(*args, **kwargs):
        return _gstlearn.Polygons_createFromWKT(*args, **kwargs)

    @staticmethod
    def createFromDb(db, dilate=0., verbose=False):
        return _gstlearn.Polygons_createFromDb(db, dilate, verbose)

    def getPolyElemNumber(self):
        return _gstlearn.Polygons_getPolyElemNumber(self)

    def addPolyElem(self, polyelem):
        return _gstlearn.Polygons_addPolyElem(self, polyelem)

    def getPolyElems(self):
        return _gstlearn.Polygons_getPolyElems(self)

    def getPolyElem(self, ipol):
        return _gstlearn.Polygons_getPolyElem(self, ipol)

    def getClosedPolyElem(self, ipol):
        return _gstlearn.Polygons_getClosedPolyElem(self, ipol)

    def getX(self, ipol):
        return _gstlearn.Polygons_getX(self, ipol)

    def getY(self, ipol):
        return _gstlearn.Polygons_getY(self, ipol)

    def setX(self, ipol, x):
        return _gstlearn.Polygons_setX(self, ipol, x)

    def setY(self, ipol, y):
        return _gstlearn.Polygons_setY(self, ipol, y)

    def getExtension(self, xmin, xmax, ymin, ymax):
        return _gstlearn.Polygons_getExtension(self, xmin, xmax, ymin, ymax)

    def getSurface(self):
        return _gstlearn.Polygons_getSurface(self)

    def inside(self, coor, flag_nested=False):
        return _gstlearn.Polygons_inside(self, coor, flag_nested)

    def reduceComplexity(self, distmin):
        return _gstlearn.Polygons_reduceComplexity(self, distmin)

    def __repr__(self):
        return _gstlearn.Polygons___repr__(self)

# Register Polygons in _gstlearn:
_gstlearn.Polygons_swigregister(Polygons)

def db_polygon(*args, **kwargs):
    return _gstlearn.db_polygon(*args, **kwargs)

def dbPolygonDistance(*args, **kwargs):
    return _gstlearn.dbPolygonDistance(*args, **kwargs)

def db_selhull(*args, **kwargs):
    return _gstlearn.db_selhull(*args, **kwargs)
class PolyElem(PolyLine2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.PolyElem_swiginit(self, _gstlearn.new_PolyElem(*args))
    __swig_destroy__ = _gstlearn.delete_PolyElem

    def toString(self, strfmt=None):
        return _gstlearn.PolyElem_toString(self, strfmt)

    @staticmethod
    def create():
        return _gstlearn.PolyElem_create()

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.PolyElem_createFromNF(neutralFilename, verbose)

    def getX(self, *args):
        return _gstlearn.PolyElem_getX(self, *args)

    def getY(self, *args):
        return _gstlearn.PolyElem_getY(self, *args)

    def getZmax(self):
        return _gstlearn.PolyElem_getZmax(self)

    def getZmin(self):
        return _gstlearn.PolyElem_getZmin(self)

    def init(self, x, y, zmin=1.234e30, zmax=1.234e30):
        return _gstlearn.PolyElem_init(self, x, y, zmin, zmax)

    def getExtension(self, xmin, xmax, ymin, ymax):
        return _gstlearn.PolyElem_getExtension(self, xmin, xmax, ymin, ymax)

    def getSurface(self):
        return _gstlearn.PolyElem_getSurface(self)

    def closePolyElem(self):
        return _gstlearn.PolyElem_closePolyElem(self)

    def inside(self, coor):
        return _gstlearn.PolyElem_inside(self, coor)

    def inside3D(self, zz):
        return _gstlearn.PolyElem_inside3D(self, zz)

    def reduceComplexity(self, distmin):
        return _gstlearn.PolyElem_reduceComplexity(self, distmin)

# Register PolyElem in _gstlearn:
_gstlearn.PolyElem_swigregister(PolyElem)

def statOptionToName(opers):
    return _gstlearn.statOptionToName(opers)

def KeysToStatOptions(opers):
    return _gstlearn.KeysToStatOptions(opers)

def dbStatisticsMono(*args, **kwargs):
    return _gstlearn.dbStatisticsMono(*args, **kwargs)

def dbStatisticsCorrel(*args, **kwargs):
    return _gstlearn.dbStatisticsCorrel(*args, **kwargs)

def dbStatisticsPrint(*args, **kwargs):
    return _gstlearn.dbStatisticsPrint(*args, **kwargs)

def dbStatisticsMulti(*args, **kwargs):
    return _gstlearn.dbStatisticsMulti(*args, **kwargs)

def dbStatisticsPerCell(*args, **kwargs):
    return _gstlearn.dbStatisticsPerCell(*args, **kwargs)

def statisticsProportion(dbin, dbout, pos, nfacies, radius):
    return _gstlearn.statisticsProportion(dbin, dbout, pos, nfacies, radius)

def statisticsTransition(dbin, dbout, pos, nfacies, radius, orient):
    return _gstlearn.statisticsTransition(dbin, dbout, pos, nfacies, radius, orient)

def dbStatisticsFacies(db):
    return _gstlearn.dbStatisticsFacies(db)

def dbStatisticsIndicator(db):
    return _gstlearn.dbStatisticsIndicator(db)

def sphering(X):
    return _gstlearn.sphering(X)

def correlationPairs(db1, db2, name1, name2, flagFrom1=False, verbose=False):
    return _gstlearn.correlationPairs(db1, db2, name1, name2, flagFrom1, verbose)

def hscatterPairs(db, name1, name2, varioparam, ipas=0, idir=0, verbose=False):
    return _gstlearn.hscatterPairs(db, name1, name2, varioparam, ipas, idir, verbose)

def correlationIdentify(db1, db2, icol1, icol2, polygon):
    return _gstlearn.correlationIdentify(db1, db2, icol1, icol2, polygon)

def condexp(db1, db2, icol1, icol2, mini, maxi, nclass, verbose=False):
    return _gstlearn.condexp(db1, db2, icol1, icol2, mini, maxi, nclass, verbose)

def contingencyTable(values):
    return _gstlearn.contingencyTable(values)

def contingencyTable2(values, bins):
    return _gstlearn.contingencyTable2(values, bins)

def dbVarianceMatrix(db):
    return _gstlearn.dbVarianceMatrix(db)
class PCA(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.PCA_swiginit(self, _gstlearn.new_PCA(*args))
    __swig_destroy__ = _gstlearn.delete_PCA

    def toString(self, strfmt=None):
        return _gstlearn.PCA_toString(self, strfmt)

    def init(self, nvar):
        return _gstlearn.PCA_init(self, nvar)

    def getEigVals(self):
        return _gstlearn.PCA_getEigVals(self)

    def getEigVal(self, ivar):
        return _gstlearn.PCA_getEigVal(self, ivar)

    def getEigVecs(self):
        return _gstlearn.PCA_getEigVecs(self)

    def getEigVec(self, ivar, jvar):
        return _gstlearn.PCA_getEigVec(self, ivar, jvar)

    def getVarianceRatio(self):
        return _gstlearn.PCA_getVarianceRatio(self)

    def getMeans(self):
        return _gstlearn.PCA_getMeans(self)

    def getMean(self, ivar):
        return _gstlearn.PCA_getMean(self, ivar)

    def getC0(self):
        return _gstlearn.PCA_getC0(self)

    def getNVar(self):
        return _gstlearn.PCA_getNVar(self)

    def getF2Zs(self):
        return _gstlearn.PCA_getF2Zs(self)

    def getZ2Fs(self):
        return _gstlearn.PCA_getZ2Fs(self)

    def getSigmas(self):
        return _gstlearn.PCA_getSigmas(self)

    def getSigma(self, ivar):
        return _gstlearn.PCA_getSigma(self, ivar)

    def setMeans(self, mean):
        return _gstlearn.PCA_setMeans(self, mean)

    def setSigmas(self, sigma):
        return _gstlearn.PCA_setSigmas(self, sigma)

    def setZ2Fs(self, z2f):
        return _gstlearn.PCA_setZ2Fs(self, z2f)

    def setF2Zs(self, f2z):
        return _gstlearn.PCA_setF2Zs(self, f2z)

    def setEigVals(self, eigval):
        return _gstlearn.PCA_setEigVals(self, eigval)

    def setEigVal(self, ivar, eigval):
        return _gstlearn.PCA_setEigVal(self, ivar, eigval)

    def setEigVecs(self, eigvec):
        return _gstlearn.PCA_setEigVecs(self, eigvec)

    def setEigVec(self, ivar, jvar, eigvec):
        return _gstlearn.PCA_setEigVec(self, ivar, jvar, eigvec)

    def pca_compute(self, db, verbose=False, optionPositive=True):
        return _gstlearn.PCA_pca_compute(self, db, verbose, optionPositive)

    def maf_compute(self, db, varioparam, ilag0=1, idir0=0, verbose=False):
        return _gstlearn.PCA_maf_compute(self, db, varioparam, ilag0, idir0, verbose)

    def maf_compute_interval(self, db, hmin, hmax, verbose=False):
        return _gstlearn.PCA_maf_compute_interval(self, db, hmin, hmax, verbose)

    def dbZ2F(self, *args, **kwargs):
        return _gstlearn.PCA_dbZ2F(self, *args, **kwargs)

    def dbF2Z(self, *args, **kwargs):
        return _gstlearn.PCA_dbF2Z(self, *args, **kwargs)

    def mafOfIndex(self):
        return _gstlearn.PCA_mafOfIndex(self)

    def __repr__(self):
        return _gstlearn.PCA___repr__(self)

# Register PCA in _gstlearn:
_gstlearn.PCA_swigregister(PCA)
class PCAStringFormat(AStringFormat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.PCAStringFormat_swiginit(self, _gstlearn.new_PCAStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_PCAStringFormat

    def getflagCenter(self):
        return _gstlearn.PCAStringFormat_getflagCenter(self)

    def getflagStats(self):
        return _gstlearn.PCAStringFormat_getflagStats(self)

    def setflagCenter(self, flagCenter):
        return _gstlearn.PCAStringFormat_setflagCenter(self, flagCenter)

    def setflagStats(self, flagStats):
        return _gstlearn.PCAStringFormat_setflagStats(self, flagStats)

# Register PCAStringFormat in _gstlearn:
_gstlearn.PCAStringFormat_swigregister(PCAStringFormat)
class Selectivity(AStringable, ICloneable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Selectivity_swiginit(self, _gstlearn.new_Selectivity(*args))
    __swig_destroy__ = _gstlearn.delete_Selectivity

    def clone(self):
        return _gstlearn.Selectivity_clone(self)

    def toString(self, strfmt=None):
        return _gstlearn.Selectivity_toString(self, strfmt)

    @staticmethod
    def create(ncut):
        return _gstlearn.Selectivity_create(ncut)

    @staticmethod
    def createByCuts(zcut):
        return _gstlearn.Selectivity_createByCuts(zcut)

    @staticmethod
    def createByCodes(*args, **kwargs):
        return _gstlearn.Selectivity_createByCodes(*args, **kwargs)

    @staticmethod
    def createByKeys(*args, **kwargs):
        return _gstlearn.Selectivity_createByKeys(*args, **kwargs)

    @staticmethod
    def createInterpolation(zcuts, selecin, verbose):
        return _gstlearn.Selectivity_createInterpolation(zcuts, selecin, verbose)

    def calculateFromDb(self, db, autoCuts=False):
        return _gstlearn.Selectivity_calculateFromDb(self, db, autoCuts)

    def calculateFromArray(self, *args, **kwargs):
        return _gstlearn.Selectivity_calculateFromArray(self, *args, **kwargs)

    def calculateFromAnamorphosis(self, anam):
        return _gstlearn.Selectivity_calculateFromAnamorphosis(self, anam)

    def eval(self, db, autoCuts=False):
        return _gstlearn.Selectivity_eval(self, db, autoCuts)

    def evalFromArray(self, *args, **kwargs):
        return _gstlearn.Selectivity_evalFromArray(self, *args, **kwargs)

    def evalFromAnamorphosis(self, anam):
        return _gstlearn.Selectivity_evalFromAnamorphosis(self, anam)

    def resetCuts(self, zcuts):
        return _gstlearn.Selectivity_resetCuts(self, zcuts)

    def getNCuts(self):
        return _gstlearn.Selectivity_getNCuts(self)

    @staticmethod
    def getNQT():
        return _gstlearn.Selectivity_getNQT()

    def getVariableNumber(self):
        return _gstlearn.Selectivity_getVariableNumber(self)

    def getVariableName(self, *args):
        return _gstlearn.Selectivity_getVariableName(self, *args)

    def getVariableNames(self):
        return _gstlearn.Selectivity_getVariableNames(self)

    def setZcut(self, iclass, zcut):
        return _gstlearn.Selectivity_setZcut(self, iclass, zcut)

    def setBest(self, iclass, best):
        return _gstlearn.Selectivity_setBest(self, iclass, best)

    def setMest(self, iclass, mest):
        return _gstlearn.Selectivity_setMest(self, iclass, mest)

    def setQest(self, iclass, qest):
        return _gstlearn.Selectivity_setQest(self, iclass, qest)

    def setQstd(self, iclass, qstd):
        return _gstlearn.Selectivity_setQstd(self, iclass, qstd)

    def setTest(self, iclass, test):
        return _gstlearn.Selectivity_setTest(self, iclass, test)

    def setTstd(self, iclass, tstd):
        return _gstlearn.Selectivity_setTstd(self, iclass, tstd)

    def getBest(self, iclass):
        return _gstlearn.Selectivity_getBest(self, iclass)

    def getMest(self, iclass):
        return _gstlearn.Selectivity_getMest(self, iclass)

    def getQest(self, iclass):
        return _gstlearn.Selectivity_getQest(self, iclass)

    def getQstd(self, iclass):
        return _gstlearn.Selectivity_getQstd(self, iclass)

    def getTest(self, iclass):
        return _gstlearn.Selectivity_getTest(self, iclass)

    def getTstd(self, iclass):
        return _gstlearn.Selectivity_getTstd(self, iclass)

    def getZcut(self, *args):
        return _gstlearn.Selectivity_getZcut(self, *args)

    def calculateBenefitAndGrade(self):
        return _gstlearn.Selectivity_calculateBenefitAndGrade(self)

    def dumpGini(self):
        return _gstlearn.Selectivity_dumpGini(self)

    def correctTonnageOrder(self):
        return _gstlearn.Selectivity_correctTonnageOrder(self)

    def defineRecoveries(self, codes, flag_est, flag_std, proba=1.234e30, verbose=False):
        return _gstlearn.Selectivity_defineRecoveries(self, codes, flag_est, flag_std, proba, verbose)

    def isUsed(self, code):
        return _gstlearn.Selectivity_isUsed(self, code)

    def isUsedEst(self, code):
        return _gstlearn.Selectivity_isUsedEst(self, code)

    def isUsedStD(self, code):
        return _gstlearn.Selectivity_isUsedStD(self, code)

    def isNeededT(self):
        return _gstlearn.Selectivity_isNeededT(self)

    def isNeededQ(self):
        return _gstlearn.Selectivity_isNeededQ(self)

    def getAddressQTEst(self, code, iptr0, rank=0):
        return _gstlearn.Selectivity_getAddressQTEst(self, code, iptr0, rank)

    def getAddressQTStd(self, code, iptr0, rank=0):
        return _gstlearn.Selectivity_getAddressQTStd(self, code, iptr0, rank)

    def getNumberQTEst(self, *args):
        return _gstlearn.Selectivity_getNumberQTEst(self, *args)

    def getNumberQTStd(self, *args):
        return _gstlearn.Selectivity_getNumberQTStd(self, *args)

    def storeInDb(self, db, iech0, iptr, zestim, zstdev):
        return _gstlearn.Selectivity_storeInDb(self, db, iech0, iptr, zestim, zstdev)

    def interpolateSelectivity(self, selecin):
        return _gstlearn.Selectivity_interpolateSelectivity(self, selecin)

    def setFlagTonnageCorrect(self, flagTonnageCorrect):
        return _gstlearn.Selectivity_setFlagTonnageCorrect(self, flagTonnageCorrect)

    def setZmax(self, zmax):
        return _gstlearn.Selectivity_setZmax(self, zmax)

    def isFlagTonnageCorrect(self):
        return _gstlearn.Selectivity_isFlagTonnageCorrect(self)

    def getZmax(self):
        return _gstlearn.Selectivity_getZmax(self)

    def isOnlyZDefined(self):
        return _gstlearn.Selectivity_isOnlyZDefined(self)

    def getStats(self):
        return _gstlearn.Selectivity_getStats(self)

    def getAllStats(self):
        return _gstlearn.Selectivity_getAllStats(self)

    def getNumberQt(self):
        return _gstlearn.Selectivity_getNumberQt(self)

    def getRankQt(self):
        return _gstlearn.Selectivity_getRankQt(self)

    def __repr__(self):
        return _gstlearn.Selectivity___repr__(self)

# Register Selectivity in _gstlearn:
_gstlearn.Selectivity_swigregister(Selectivity)

def dbSelectivity(*args, **kwargs):
    return _gstlearn.dbSelectivity(*args, **kwargs)
class Regression(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Regression_swiginit(self, _gstlearn.new_Regression(*args))
    __swig_destroy__ = _gstlearn.delete_Regression

    def toString(self, strfmt=None):
        return _gstlearn.Regression_toString(self, strfmt)

    def setCoeffs(self, coeffs):
        return _gstlearn.Regression_setCoeffs(self, coeffs)

    def setCount(self, count):
        return _gstlearn.Regression_setCount(self, count)

    def setFlagCst(self, flagCst):
        return _gstlearn.Regression_setFlagCst(self, flagCst)

    def setNvar(self, nvar):
        return _gstlearn.Regression_setNvar(self, nvar)

    def setVariance(self, variance):
        return _gstlearn.Regression_setVariance(self, variance)

    def setVarres(self, varres):
        return _gstlearn.Regression_setVarres(self, varres)

    def getCoeffs(self):
        return _gstlearn.Regression_getCoeffs(self)

    def getCoeff(self, i):
        return _gstlearn.Regression_getCoeff(self, i)

    def getNvar(self):
        return _gstlearn.Regression_getNvar(self)

    def getCount(self):
        return _gstlearn.Regression_getCount(self)

    def getVariance(self):
        return _gstlearn.Regression_getVariance(self)

    def getVarres(self):
        return _gstlearn.Regression_getVarres(self)

    def apply(self, db1, iptr0, nameResp, nameAux, mode=0, flagCst=False, db2=None, model=None):
        return _gstlearn.Regression_apply(self, db1, iptr0, nameResp, nameAux, mode, flagCst, db2, model)

    def __repr__(self):
        return _gstlearn.Regression___repr__(self)

# Register Regression in _gstlearn:
_gstlearn.Regression_swigregister(Regression)

def regression(*args, **kwargs):
    return _gstlearn.regression(*args, **kwargs)

def regressionDeming(x, y, delta=1):
    return _gstlearn.regressionDeming(x, y, delta)
class Rule(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.Rule_swiginit(self, _gstlearn.new_Rule(*args))
    __swig_destroy__ = _gstlearn.delete_Rule

    def toString(self, strfmt=None):
        return _gstlearn.Rule_toString(self, strfmt)

    def resetFromNames(self, nodnames, rho=0.):
        return _gstlearn.Rule_resetFromNames(self, nodnames, rho)

    def resetFromCodes(self, nodes, rho=0.):
        return _gstlearn.Rule_resetFromCodes(self, nodes, rho)

    def resetFromNumericalCoding(self, n_type, n_facs, rho=0.):
        return _gstlearn.Rule_resetFromNumericalCoding(self, n_type, n_facs, rho)

    def resetFromFaciesCount(self, nfacies, rho=0.):
        return _gstlearn.Rule_resetFromFaciesCount(self, nfacies, rho)

    @staticmethod
    def create(rho=0.):
        return _gstlearn.Rule_create(rho)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.Rule_createFromNF(neutralFilename, verbose)

    @staticmethod
    def createFromNames(nodnames, rho=0.):
        return _gstlearn.Rule_createFromNames(nodnames, rho)

    @staticmethod
    def createFromCodes(nodes, rho=0.):
        return _gstlearn.Rule_createFromCodes(nodes, rho)

    @staticmethod
    def createFromNumericalCoding(n_type, n_facs, rho=0.):
        return _gstlearn.Rule_createFromNumericalCoding(n_type, n_facs, rho)

    @staticmethod
    def createFromFaciesCount(nfacies, rho=0.):
        return _gstlearn.Rule_createFromFaciesCount(nfacies, rho)

    def displaySpecific(self):
        return _gstlearn.Rule_displaySpecific(self)

    def particularities(self, db, dbprop, model, flag_grid_check, flag_stat):
        return _gstlearn.Rule_particularities(self, db, dbprop, model, flag_grid_check, flag_stat)

    def checkModel(self, model, nvar=0):
        return _gstlearn.Rule_checkModel(self, model, nvar)

    def gaus2facData(self, propdef, dbin, dbout, flag_used, ipgs, isimu, nbsimu):
        return _gstlearn.Rule_gaus2facData(self, propdef, dbin, dbout, flag_used, ipgs, isimu, nbsimu)

    def gaus2facResult(self, propdef, dbout, flag_used, ipgs, isimu, nbsimu):
        return _gstlearn.Rule_gaus2facResult(self, propdef, dbout, flag_used, ipgs, isimu, nbsimu)

    def evaluateBounds(self, propdef, dbin, dbout, isimu, igrf, ipgs, nbsimu):
        return _gstlearn.Rule_evaluateBounds(self, propdef, dbin, dbout, isimu, igrf, ipgs, nbsimu)

    def getFlagProp(self):
        return _gstlearn.Rule_getFlagProp(self)

    def getModeRule(self):
        return _gstlearn.Rule_getModeRule(self)

    def getRho(self):
        return _gstlearn.Rule_getRho(self)

    def getMainNode(self):
        return _gstlearn.Rule_getMainNode(self)

    def setFlagProp(self, flagProp):
        return _gstlearn.Rule_setFlagProp(self, flagProp)

    def setRho(self, rho):
        return _gstlearn.Rule_setRho(self, rho)

    def setModeRule(self, modeRule):
        return _gstlearn.Rule_setModeRule(self, modeRule)

    def setProportions(self, *args, **kwargs):
        return _gstlearn.Rule_setProportions(self, *args, **kwargs)

    def statistics(self, verbose, node_tot, nfac_tot, nmax_tot, ny1_tot, ny2_tot, prop_tot):
        return _gstlearn.Rule_statistics(self, verbose, node_tot, nfac_tot, nmax_tot, ny1_tot, ny2_tot, prop_tot)

    def getFaciesNumber(self):
        return _gstlearn.Rule_getFaciesNumber(self)

    def getGRFNumber(self):
        return _gstlearn.Rule_getGRFNumber(self)

    def getY1Number(self):
        return _gstlearn.Rule_getY1Number(self)

    def getY2Number(self):
        return _gstlearn.Rule_getY2Number(self)

    def isYUsed(self, igrf):
        return _gstlearn.Rule_isYUsed(self, igrf)

    def whichGRFUsed(self):
        return _gstlearn.Rule_whichGRFUsed(self)

    def getProportion(self, facies):
        return _gstlearn.Rule_getProportion(self, facies)

    def getThresh(self, facies):
        return _gstlearn.Rule_getThresh(self, facies)

    def getThreshFromRectangle(self, rect, facies):
        return _gstlearn.Rule_getThreshFromRectangle(self, rect, facies)

    def getFaciesFromGaussian(self, y1, y2):
        return _gstlearn.Rule_getFaciesFromGaussian(self, y1, y2)

    def updateShift(self):
        return _gstlearn.Rule_updateShift(self)

    def __repr__(self):
        return _gstlearn.Rule___repr__(self)

# Register Rule in _gstlearn:
_gstlearn.Rule_swigregister(Rule)

def set_rule_mode(rule_mode):
    return _gstlearn.set_rule_mode(rule_mode)

def get_rule_mode():
    return _gstlearn.get_rule_mode()

def get_rule_extreme(mode):
    return _gstlearn.get_rule_extreme(mode)

def rule_free(rule):
    return _gstlearn.rule_free(rule)

def model_rule_combine(model1, model2, rule):
    return _gstlearn.model_rule_combine(model1, model2, rule)

def db_rule_shadow(db, dbprop, rule, model1, props, flag_stat, nfacies):
    return _gstlearn.db_rule_shadow(db, dbprop, rule, model1, props, flag_stat, nfacies)
class RuleStringFormat(AStringFormat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.RuleStringFormat_swiginit(self, _gstlearn.new_RuleStringFormat(*args))
    __swig_destroy__ = _gstlearn.delete_RuleStringFormat

    def getFlagProp(self):
        return _gstlearn.RuleStringFormat_getFlagProp(self)

    def getFlagThresh(self):
        return _gstlearn.RuleStringFormat_getFlagThresh(self)

    def setFlagProp(self, flagProp):
        return _gstlearn.RuleStringFormat_setFlagProp(self, flagProp)

    def setFlagThresh(self, flagThresh):
        return _gstlearn.RuleStringFormat_setFlagThresh(self, flagThresh)

# Register RuleStringFormat in _gstlearn:
_gstlearn.RuleStringFormat_swigregister(RuleStringFormat)
class RuleProp(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.RuleProp_swiginit(self, _gstlearn.new_RuleProp(*args))
    __swig_destroy__ = _gstlearn.delete_RuleProp

    def toString(self, strfmt=None):
        return _gstlearn.RuleProp_toString(self, strfmt)

    def resetFromDb(self, *args, **kwargs):
        return _gstlearn.RuleProp_resetFromDb(self, *args, **kwargs)

    def resetFromRule(self, *args, **kwargs):
        return _gstlearn.RuleProp_resetFromRule(self, *args, **kwargs)

    def resetFromRuleAndDb(self, rule, dbprop):
        return _gstlearn.RuleProp_resetFromRuleAndDb(self, rule, dbprop)

    def resetFromRules(self, *args, **kwargs):
        return _gstlearn.RuleProp_resetFromRules(self, *args, **kwargs)

    def resetFromRulesAndDb(self, rule1, rule2, dbprop):
        return _gstlearn.RuleProp_resetFromRulesAndDb(self, rule1, rule2, dbprop)

    @staticmethod
    def createFromDb(*args, **kwargs):
        return _gstlearn.RuleProp_createFromDb(*args, **kwargs)

    @staticmethod
    def createFromRule(*args, **kwargs):
        return _gstlearn.RuleProp_createFromRule(*args, **kwargs)

    @staticmethod
    def createFromRuleAndDb(rule, dbprop):
        return _gstlearn.RuleProp_createFromRuleAndDb(rule, dbprop)

    @staticmethod
    def createFromRules(*args, **kwargs):
        return _gstlearn.RuleProp_createFromRules(*args, **kwargs)

    @staticmethod
    def createFromRulesAndDb(rule1, rule2, dbprop):
        return _gstlearn.RuleProp_createFromRulesAndDb(rule1, rule2, dbprop)

    def getDbprop(self):
        return _gstlearn.RuleProp_getDbprop(self)

    def setDbprop(self, dbprop):
        return _gstlearn.RuleProp_setDbprop(self, dbprop)

    def isFlagStat(self):
        return _gstlearn.RuleProp_isFlagStat(self)

    def setFlagStat(self, flagStat):
        return _gstlearn.RuleProp_setFlagStat(self, flagStat)

    def getPropCst(self):
        return _gstlearn.RuleProp_getPropCst(self)

    def setPropCst(self, propcst):
        return _gstlearn.RuleProp_setPropCst(self, propcst)

    def getRule(self, rank=0):
        return _gstlearn.RuleProp_getRule(self, rank)

    def addRule(self, rule):
        return _gstlearn.RuleProp_addRule(self, rule)

    def clearRule(self):
        return _gstlearn.RuleProp_clearRule(self)

    def getRuleNumber(self):
        return _gstlearn.RuleProp_getRuleNumber(self)

    def fit(self, db, varioparam, ngrfmax=1, verbose=False):
        return _gstlearn.RuleProp_fit(self, db, varioparam, ngrfmax, verbose)

    def gaussToCategory(self, *args, **kwargs):
        return _gstlearn.RuleProp_gaussToCategory(self, *args, **kwargs)

    def categoryToThresh(self, *args, **kwargs):
        return _gstlearn.RuleProp_categoryToThresh(self, *args, **kwargs)

    def computeAllThreshes(self, *args, **kwargs):
        return _gstlearn.RuleProp_computeAllThreshes(self, *args, **kwargs)

    def __repr__(self):
        return _gstlearn.RuleProp___repr__(self)

# Register RuleProp in _gstlearn:
_gstlearn.RuleProp_swigregister(RuleProp)
class KrigingSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dbin, dbout, model, neigh):
        _gstlearn.KrigingSystem_swiginit(self, _gstlearn.new_KrigingSystem(dbin, dbout, model, neigh))
    __swig_destroy__ = _gstlearn.delete_KrigingSystem

    def setKrigOptCalcul(self, *args, **kwargs):
        return _gstlearn.KrigingSystem_setKrigOptCalcul(self, *args, **kwargs)

    def setKrigOptXValid(self, flag_xvalid, flag_kfold, optionXValidEstim=False, optionXValidStdev=False, optionXValidVarZ=False):
        return _gstlearn.KrigingSystem_setKrigOptXValid(self, flag_xvalid, flag_kfold, optionXValidEstim, optionXValidStdev, optionXValidVarZ)

    def setKrigOptColCok(self, rank_colcok):
        return _gstlearn.KrigingSystem_setKrigOptColCok(self, rank_colcok)

    def setKrigOptBayes(self, flag_bayes, prior_mean, prior_cov, seed=414371):
        return _gstlearn.KrigingSystem_setKrigOptBayes(self, flag_bayes, prior_mean, prior_cov, seed)

    def setKrigOptImage(self, seed=133271):
        return _gstlearn.KrigingSystem_setKrigOptImage(self, seed)

    def setKrigOptDataWeights(self, iptrWeights, flagSet=True):
        return _gstlearn.KrigingSystem_setKrigOptDataWeights(self, iptrWeights, flagSet)

    def setKrigOptMatLC(self, matLC):
        return _gstlearn.KrigingSystem_setKrigOptMatLC(self, matLC)

    def setKrigoptCode(self, flag_code):
        return _gstlearn.KrigingSystem_setKrigoptCode(self, flag_code)

    def setKrigOptFlagSimu(self, flagSimu, nbsimu=0, rankPGS=-1):
        return _gstlearn.KrigingSystem_setKrigOptFlagSimu(self, flagSimu, nbsimu, rankPGS)

    def setKrigOptSaveWeights(self, flag_save):
        return _gstlearn.KrigingSystem_setKrigOptSaveWeights(self, flag_save)

    def setKrigOptDGM(self, flag_dgm, eps=1.e-6):
        return _gstlearn.KrigingSystem_setKrigOptDGM(self, flag_dgm, eps)

    def setKrigOptFlagGlobal(self, flag_global):
        return _gstlearn.KrigingSystem_setKrigOptFlagGlobal(self, flag_global)

    def setKrigOptFlagLTerm(self, flag_lterm):
        return _gstlearn.KrigingSystem_setKrigOptFlagLTerm(self, flag_lterm)

    def setKrigOptAnamophosis(self, anam):
        return _gstlearn.KrigingSystem_setKrigOptAnamophosis(self, anam)

    def setKrigOptFactorKriging(self, flag_factor_kriging):
        return _gstlearn.KrigingSystem_setKrigOptFactorKriging(self, flag_factor_kriging)

    def updKrigOptEstim(self, iptrEst, iptrStd, iptrVarZ):
        return _gstlearn.KrigingSystem_updKrigOptEstim(self, iptrEst, iptrStd, iptrVarZ)

    def updKrigOptIclass(self, index_class, nclasses):
        return _gstlearn.KrigingSystem_updKrigOptIclass(self, index_class, nclasses)

    def updKrigOptNeighOnly(self, iptrNeigh):
        return _gstlearn.KrigingSystem_updKrigOptNeighOnly(self, iptrNeigh)

    def isReady(self):
        return _gstlearn.KrigingSystem_isReady(self)

    def estimate(self, iech_out):
        return _gstlearn.KrigingSystem_estimate(self, iech_out)

    def conclusion(self):
        return _gstlearn.KrigingSystem_conclusion(self)

    def getNDim(self):
        return _gstlearn.KrigingSystem_getNDim(self)

    def getNech(self):
        return _gstlearn.KrigingSystem_getNech(self)

    def getNeq(self):
        return _gstlearn.KrigingSystem_getNeq(self)

    def getNRed(self):
        return _gstlearn.KrigingSystem_getNRed(self)

    def getSampleIndices(self):
        return _gstlearn.KrigingSystem_getSampleIndices(self)

    def getSampleCoordinates(self):
        return _gstlearn.KrigingSystem_getSampleCoordinates(self)

    def getSampleData(self):
        return _gstlearn.KrigingSystem_getSampleData(self)

    def getZam(self):
        return _gstlearn.KrigingSystem_getZam(self)

    def getLHSC(self):
        return _gstlearn.KrigingSystem_getLHSC(self)

    def getWeights(self):
        return _gstlearn.KrigingSystem_getWeights(self)

    def getVariance(self):
        return _gstlearn.KrigingSystem_getVariance(self)

    def getLTerm(self):
        return _gstlearn.KrigingSystem_getLTerm(self)

    def getRHSC(self, *args):
        return _gstlearn.KrigingSystem_getRHSC(self, *args)

    def getZamC(self):
        return _gstlearn.KrigingSystem_getZamC(self)

    def getLHSInvC(self):
        return _gstlearn.KrigingSystem_getLHSInvC(self)

# Register KrigingSystem in _gstlearn:
_gstlearn.KrigingSystem_swigregister(KrigingSystem)
class KrigingCalcul(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, flagDual=False, Z=None, Sigma=None, X=None, Sigma00=None, Means=None):
        _gstlearn.KrigingCalcul_swiginit(self, _gstlearn.new_KrigingCalcul(flagDual, Z, Sigma, X, Sigma00, Means))
    __swig_destroy__ = _gstlearn.delete_KrigingCalcul

    def setData(self, Z=None, Means=None):
        return _gstlearn.KrigingCalcul_setData(self, Z, Means)

    def setLHS(self, Sigma=None, X=None):
        return _gstlearn.KrigingCalcul_setLHS(self, Sigma, X)

    def setRHS(self, Sigma0=None, X0=None):
        return _gstlearn.KrigingCalcul_setRHS(self, Sigma0, X0)

    def setVar(self, Sigma00=None):
        return _gstlearn.KrigingCalcul_setVar(self, Sigma00)

    def setColCokUnique(self, Zp=None, rankColCok=None):
        return _gstlearn.KrigingCalcul_setColCokUnique(self, Zp, rankColCok)

    def setBayes(self, PriorMean=None, PriorCov=None):
        return _gstlearn.KrigingCalcul_setBayes(self, PriorMean, PriorCov)

    def setXvalidUnique(self, rankXvalidEqs=None, rankXvalidVars=None):
        return _gstlearn.KrigingCalcul_setXvalidUnique(self, rankXvalidEqs, rankXvalidVars)

    def printStatus(self):
        return _gstlearn.KrigingCalcul_printStatus(self)

    def getEstimation(self):
        return _gstlearn.KrigingCalcul_getEstimation(self)

    def getStdv(self):
        return _gstlearn.KrigingCalcul_getStdv(self)

    def getVarianceZstar(self):
        return _gstlearn.KrigingCalcul_getVarianceZstar(self)

    def getPostMean(self):
        return _gstlearn.KrigingCalcul_getPostMean(self)

    def getStdvMat(self):
        return _gstlearn.KrigingCalcul_getStdvMat(self)

    def getVarianceZstarMat(self):
        return _gstlearn.KrigingCalcul_getVarianceZstarMat(self)

    def getPostCov(self):
        return _gstlearn.KrigingCalcul_getPostCov(self)

    def getLambda(self):
        return _gstlearn.KrigingCalcul_getLambda(self)

    def getLambda0(self):
        return _gstlearn.KrigingCalcul_getLambda0(self)

    def getMu(self):
        return _gstlearn.KrigingCalcul_getMu(self)

    def getX0(self):
        return _gstlearn.KrigingCalcul_getX0(self)

    def getX0p(self):
        return _gstlearn.KrigingCalcul_getX0p(self)

    def getY0(self):
        return _gstlearn.KrigingCalcul_getY0(self)

    def getY0p(self):
        return _gstlearn.KrigingCalcul_getY0p(self)

    def getSigma0(self):
        return _gstlearn.KrigingCalcul_getSigma0(self)

    def getSigma0p(self):
        return _gstlearn.KrigingCalcul_getSigma0p(self)

    def resetLinkedToZ(self):
        return _gstlearn.KrigingCalcul_resetLinkedToZ(self)

    def resetLinkedToLHS(self):
        return _gstlearn.KrigingCalcul_resetLinkedToLHS(self)

    def resetLinkedToRHS(self):
        return _gstlearn.KrigingCalcul_resetLinkedToRHS(self)

    def resetLinkedtoVar0(self):
        return _gstlearn.KrigingCalcul_resetLinkedtoVar0(self)

    def resetLinkedToBayes(self):
        return _gstlearn.KrigingCalcul_resetLinkedToBayes(self)

    def resetLinkedToColCok(self):
        return _gstlearn.KrigingCalcul_resetLinkedToColCok(self)

    def resetLinkedToXvalid(self):
        return _gstlearn.KrigingCalcul_resetLinkedToXvalid(self)

# Register KrigingCalcul in _gstlearn:
_gstlearn.KrigingCalcul_swigregister(KrigingCalcul)
class Krigtest_Res(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ndim = property(_gstlearn.Krigtest_Res_ndim_get, _gstlearn.Krigtest_Res_ndim_set)
    nvar = property(_gstlearn.Krigtest_Res_nvar_get, _gstlearn.Krigtest_Res_nvar_set)
    nech = property(_gstlearn.Krigtest_Res_nech_get, _gstlearn.Krigtest_Res_nech_set)
    neq = property(_gstlearn.Krigtest_Res_neq_get, _gstlearn.Krigtest_Res_neq_set)
    nrhs = property(_gstlearn.Krigtest_Res_nrhs_get, _gstlearn.Krigtest_Res_nrhs_set)
    nbgh = property(_gstlearn.Krigtest_Res_nbgh_get, _gstlearn.Krigtest_Res_nbgh_set)
    xyz = property(_gstlearn.Krigtest_Res_xyz_get, _gstlearn.Krigtest_Res_xyz_set)
    data = property(_gstlearn.Krigtest_Res_data_get, _gstlearn.Krigtest_Res_data_set)
    lhs = property(_gstlearn.Krigtest_Res_lhs_get, _gstlearn.Krigtest_Res_lhs_set)
    rhs = property(_gstlearn.Krigtest_Res_rhs_get, _gstlearn.Krigtest_Res_rhs_set)
    wgt = property(_gstlearn.Krigtest_Res_wgt_get, _gstlearn.Krigtest_Res_wgt_set)
    var = property(_gstlearn.Krigtest_Res_var_get, _gstlearn.Krigtest_Res_var_set)
    zam = property(_gstlearn.Krigtest_Res_zam_get, _gstlearn.Krigtest_Res_zam_set)

    def toTL(self):
        return _gstlearn.Krigtest_Res_toTL(self)

    def __init__(self):
        _gstlearn.Krigtest_Res_swiginit(self, _gstlearn.new_Krigtest_Res())
    __swig_destroy__ = _gstlearn.delete_Krigtest_Res

# Register Krigtest_Res in _gstlearn:
_gstlearn.Krigtest_Res_swigregister(Krigtest_Res)
class CalcKriging(ACalcInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, flag_est=True, flag_std=True, flag_varZ=False):
        _gstlearn.CalcKriging_swiginit(self, _gstlearn.new_CalcKriging(flag_est, flag_std, flag_varZ))
    __swig_destroy__ = _gstlearn.delete_CalcKriging

    def setCalcul(self, calcul):
        return _gstlearn.CalcKriging_setCalcul(self, calcul)

    def setMatLC(self, matLC):
        return _gstlearn.CalcKriging_setMatLC(self, matLC)

    def setNdisc(self, ndiscs):
        return _gstlearn.CalcKriging_setNdisc(self, ndiscs)

    def setRankColCok(self, rankColCok):
        return _gstlearn.CalcKriging_setRankColCok(self, rankColCok)

    def setFlagDgm(self, flagDgm):
        return _gstlearn.CalcKriging_setFlagDgm(self, flagDgm)

    def setPriorCov(self, priorCov):
        return _gstlearn.CalcKriging_setPriorCov(self, priorCov)

    def setPriorMean(self, priorMean):
        return _gstlearn.CalcKriging_setPriorMean(self, priorMean)

    def setFlagBayes(self, flagBayes):
        return _gstlearn.CalcKriging_setFlagBayes(self, flagBayes)

    def setFlagProf(self, flagProf):
        return _gstlearn.CalcKriging_setFlagProf(self, flagProf)

    def setIechSingleTarget(self, iechSingleTarget):
        return _gstlearn.CalcKriging_setIechSingleTarget(self, iechSingleTarget)

    def setVerboseSingleTarget(self, verbose):
        return _gstlearn.CalcKriging_setVerboseSingleTarget(self, verbose)

    def setFlagPerCell(self, flagPerCell):
        return _gstlearn.CalcKriging_setFlagPerCell(self, flagPerCell)

    def setAnam(self, anam):
        return _gstlearn.CalcKriging_setAnam(self, anam)

    def setFlagGam(self, flagGam):
        return _gstlearn.CalcKriging_setFlagGam(self, flagGam)

    def setFlagXvalidEst(self, flagXvalidEst):
        return _gstlearn.CalcKriging_setFlagXvalidEst(self, flagXvalidEst)

    def setFlagXvalidStd(self, flagXvalidStd):
        return _gstlearn.CalcKriging_setFlagXvalidStd(self, flagXvalidStd)

    def setFlagXvalidVarZ(self, flagXvalidVarZ):
        return _gstlearn.CalcKriging_setFlagXvalidVarZ(self, flagXvalidVarZ)

    def setFlagXvalid(self, flagXvalid):
        return _gstlearn.CalcKriging_setFlagXvalid(self, flagXvalid)

    def setFlagKfold(self, flag_kfold):
        return _gstlearn.CalcKriging_setFlagKfold(self, flag_kfold)

    def setFlagNeighOnly(self, flagNeighOnly):
        return _gstlearn.CalcKriging_setFlagNeighOnly(self, flagNeighOnly)

    def getKtest(self):
        return _gstlearn.CalcKriging_getKtest(self)

# Register CalcKriging in _gstlearn:
_gstlearn.CalcKriging_swigregister(CalcKriging)

def kriging(*args, **kwargs):
    return _gstlearn.kriging(*args, **kwargs)

def krigcell(*args, **kwargs):
    return _gstlearn.krigcell(*args, **kwargs)

def kribayes(*args, **kwargs):
    return _gstlearn.kribayes(*args, **kwargs)

def krigprof(*args, **kwargs):
    return _gstlearn.krigprof(*args, **kwargs)

def kriggam(*args, **kwargs):
    return _gstlearn.kriggam(*args, **kwargs)

def krigtest(*args, **kwargs):
    return _gstlearn.krigtest(*args, **kwargs)

def xvalid(*args, **kwargs):
    return _gstlearn.xvalid(*args, **kwargs)

def test_neigh(*args, **kwargs):
    return _gstlearn.test_neigh(*args, **kwargs)
class CalcKrigingFactors(ACalcInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, flag_est=True, flag_std=True):
        _gstlearn.CalcKrigingFactors_swiginit(self, _gstlearn.new_CalcKrigingFactors(flag_est, flag_std))
    __swig_destroy__ = _gstlearn.delete_CalcKrigingFactors

    def setCalcul(self, calcul):
        return _gstlearn.CalcKrigingFactors_setCalcul(self, calcul)

    def setNdisc(self, ndiscs):
        return _gstlearn.CalcKrigingFactors_setNdisc(self, ndiscs)

    def setIuidFactors(self, iuidFactors):
        return _gstlearn.CalcKrigingFactors_setIuidFactors(self, iuidFactors)

# Register CalcKrigingFactors in _gstlearn:
_gstlearn.CalcKrigingFactors_swigregister(CalcKrigingFactors)

def krigingFactors(*args, **kwargs):
    return _gstlearn.krigingFactors(*args, **kwargs)
class CalcSimpleInterpolation(ACalcInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CalcSimpleInterpolation_swiginit(self, _gstlearn.new_CalcSimpleInterpolation())
    __swig_destroy__ = _gstlearn.delete_CalcSimpleInterpolation

    def setFlagMovAve(self, flagMovAve):
        return _gstlearn.CalcSimpleInterpolation_setFlagMovAve(self, flagMovAve)

    def setFlagMovMed(self, flagMovMed):
        return _gstlearn.CalcSimpleInterpolation_setFlagMovMed(self, flagMovMed)

    def setFlagInvDist(self, flagInvDist):
        return _gstlearn.CalcSimpleInterpolation_setFlagInvDist(self, flagInvDist)

    def setFlagLstSqr(self, flagLstSqr):
        return _gstlearn.CalcSimpleInterpolation_setFlagLstSqr(self, flagLstSqr)

    def setFlagNearest(self, flagNearest):
        return _gstlearn.CalcSimpleInterpolation_setFlagNearest(self, flagNearest)

    def setDmax(self, dmax):
        return _gstlearn.CalcSimpleInterpolation_setDmax(self, dmax)

    def setExponent(self, exponent):
        return _gstlearn.CalcSimpleInterpolation_setExponent(self, exponent)

    def setFlagExpand(self, flagExpand):
        return _gstlearn.CalcSimpleInterpolation_setFlagExpand(self, flagExpand)

    def setOrder(self, order):
        return _gstlearn.CalcSimpleInterpolation_setOrder(self, order)

    def setFlagEst(self, flagEst):
        return _gstlearn.CalcSimpleInterpolation_setFlagEst(self, flagEst)

    def setFlagStd(self, flagStd):
        return _gstlearn.CalcSimpleInterpolation_setFlagStd(self, flagStd)

# Register CalcSimpleInterpolation in _gstlearn:
_gstlearn.CalcSimpleInterpolation_swigregister(CalcSimpleInterpolation)

def inverseDistance(*args, **kwargs):
    return _gstlearn.inverseDistance(*args, **kwargs)

def nearestNeighbor(*args, **kwargs):
    return _gstlearn.nearestNeighbor(*args, **kwargs)

def movingAverage(*args, **kwargs):
    return _gstlearn.movingAverage(*args, **kwargs)

def movingMedian(*args, **kwargs):
    return _gstlearn.movingMedian(*args, **kwargs)

def leastSquares(*args, **kwargs):
    return _gstlearn.leastSquares(*args, **kwargs)
class CalcImage(ACalcInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _gstlearn.CalcImage_swiginit(self, _gstlearn.new_CalcImage())
    __swig_destroy__ = _gstlearn.delete_CalcImage

    def setFlagFilter(self, flagFilter):
        return _gstlearn.CalcImage_setFlagFilter(self, flagFilter)

    def setFlagMorpho(self, flagMorpho):
        return _gstlearn.CalcImage_setFlagMorpho(self, flagMorpho)

    def setOper(self, oper):
        return _gstlearn.CalcImage_setOper(self, oper)

    def setOption(self, option):
        return _gstlearn.CalcImage_setOption(self, option)

    def setRadius(self, radius):
        return _gstlearn.CalcImage_setRadius(self, radius)

    def setVmin(self, vmin):
        return _gstlearn.CalcImage_setVmin(self, vmin)

    def setVmax(self, vmax):
        return _gstlearn.CalcImage_setVmax(self, vmax)

    def setVerbose(self, verbose):
        return _gstlearn.CalcImage_setVerbose(self, verbose)

    def setDistErode(self, distErode):
        return _gstlearn.CalcImage_setDistErode(self, distErode)

    def setNvarMorpho(self, nvarMorpho):
        return _gstlearn.CalcImage_setNvarMorpho(self, nvarMorpho)

    def setFlagSmooth(self, flagSmooth):
        return _gstlearn.CalcImage_setFlagSmooth(self, flagSmooth)

    def setSmoothRange(self, smoothRange):
        return _gstlearn.CalcImage_setSmoothRange(self, smoothRange)

    def setSmoothType(self, smoothType):
        return _gstlearn.CalcImage_setSmoothType(self, smoothType)

# Register CalcImage in _gstlearn:
_gstlearn.CalcImage_swigregister(CalcImage)

def krimage(*args, **kwargs):
    return _gstlearn.krimage(*args, **kwargs)

def dbMorpho(*args, **kwargs):
    return _gstlearn.dbMorpho(*args, **kwargs)

def dbSmoother(*args, **kwargs):
    return _gstlearn.dbSmoother(*args, **kwargs)
class Global_Result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ntot = property(_gstlearn.Global_Result_ntot_get, _gstlearn.Global_Result_ntot_set)
    np = property(_gstlearn.Global_Result_np_get, _gstlearn.Global_Result_np_set)
    ng = property(_gstlearn.Global_Result_ng_get, _gstlearn.Global_Result_ng_set)
    surface = property(_gstlearn.Global_Result_surface_get, _gstlearn.Global_Result_surface_set)
    zest = property(_gstlearn.Global_Result_zest_get, _gstlearn.Global_Result_zest_set)
    sse = property(_gstlearn.Global_Result_sse_get, _gstlearn.Global_Result_sse_set)
    cvgeo = property(_gstlearn.Global_Result_cvgeo_get, _gstlearn.Global_Result_cvgeo_set)
    cvv = property(_gstlearn.Global_Result_cvv_get, _gstlearn.Global_Result_cvv_set)
    weights = property(_gstlearn.Global_Result_weights_get, _gstlearn.Global_Result_weights_set)

    def toTL(self):
        return _gstlearn.Global_Result_toTL(self)

    def __init__(self):
        _gstlearn.Global_Result_swiginit(self, _gstlearn.new_Global_Result())
    __swig_destroy__ = _gstlearn.delete_Global_Result

# Register Global_Result in _gstlearn:
_gstlearn.Global_Result_swigregister(Global_Result)
class CalcGlobal(ACalcInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, ivar0=0, verbose=False):
        _gstlearn.CalcGlobal_swiginit(self, _gstlearn.new_CalcGlobal(ivar0, verbose))
    __swig_destroy__ = _gstlearn.delete_CalcGlobal

    def setFlagArithmetic(self, flagArithmetic):
        return _gstlearn.CalcGlobal_setFlagArithmetic(self, flagArithmetic)

    def setFlagKriging(self, flagKriging):
        return _gstlearn.CalcGlobal_setFlagKriging(self, flagKriging)

    def getGRes(self):
        return _gstlearn.CalcGlobal_getGRes(self)

# Register CalcGlobal in _gstlearn:
_gstlearn.CalcGlobal_swigregister(CalcGlobal)

def global_arithmetic(dbin, dbgrid, model, ivar0, verbose):
    return _gstlearn.global_arithmetic(dbin, dbgrid, model, ivar0, verbose)

def global_kriging(dbin, dbout, model, ivar0, verbose):
    return _gstlearn.global_kriging(dbin, dbout, model, ivar0, verbose)
class AOF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.AOF_swiginit(self, _gstlearn.new_AOF(*args))
    __swig_destroy__ = _gstlearn.delete_AOF

    def mustBeGrid(self):
        return _gstlearn.AOF_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.AOF_mustBeOneVariable(self)

    def mustBeForNDim(self, arg2):
        return _gstlearn.AOF_mustBeForNDim(self, arg2)

    def mustBeForRotation(self, arg2):
        return _gstlearn.AOF_mustBeForRotation(self, arg2)

    def isAuthorized(self):
        return _gstlearn.AOF_isAuthorized(self)

    def writeInFile(self):
        return _gstlearn.AOF_writeInFile(self)

    def readFromFile(self):
        return _gstlearn.AOF_readFromFile(self)

    def readGridFromFile(self):
        return _gstlearn.AOF_readGridFromFile(self)

    def isValidForGrid(self):
        return _gstlearn.AOF_isValidForGrid(self)

    def isValidForVariable(self):
        return _gstlearn.AOF_isValidForVariable(self)

    def isValidForNDim(self):
        return _gstlearn.AOF_isValidForNDim(self)

    def isValidForRotation(self):
        return _gstlearn.AOF_isValidForRotation(self)

    def setCols(self, *args):
        return _gstlearn.AOF_setCols(self, *args)

    def setCol(self, icol):
        return _gstlearn.AOF_setCol(self, icol)

    def getFilename(self):
        return _gstlearn.AOF_getFilename(self)

# Register AOF in _gstlearn:
_gstlearn.AOF_swigregister(AOF)

def db_grid_read_f2g(filename, verbose=0):
    return _gstlearn.db_grid_read_f2g(filename, verbose)

def db_grid_write_zycor(filename, db, icol):
    return _gstlearn.db_grid_write_zycor(filename, db, icol)

def db_grid_read_zycor(filename, verbose=0):
    return _gstlearn.db_grid_read_zycor(filename, verbose)

def db_grid_write_arcgis(filename, db, icol):
    return _gstlearn.db_grid_write_arcgis(filename, db, icol)

def db_grid_write_XYZ(filename, db, icol):
    return _gstlearn.db_grid_write_XYZ(filename, db, icol)

def db_write_vtk(filename, db, cols):
    return _gstlearn.db_write_vtk(filename, db, cols)

def db_grid_write_bmp(filename, db, icol, nsamplex=1, nsampley=1, nmult=1, ncolor=1, flag_low=1, flag_high=1, valmin=1.234e30, valmax=1.234e30, red=None, green=None, blue=None, mask_red=0, mask_green=0, mask_blue=0, ffff_red=232, ffff_green=232, ffff_blue=0, low_red=255, low_green=255, low_blue=255, high_red=255, high_green=0, high_blue=0):
    return _gstlearn.db_grid_write_bmp(filename, db, icol, nsamplex, nsampley, nmult, ncolor, flag_low, flag_high, valmin, valmax, red, green, blue, mask_red, mask_green, mask_blue, ffff_red, ffff_green, ffff_blue, low_red, low_green, low_blue, high_red, high_green, high_blue)

def db_grid_read_bmp(filename, verbose=0):
    return _gstlearn.db_grid_read_bmp(filename, verbose)

def db_grid_write_irap(filename, db, icol, nsamplex=1, nsampley=1):
    return _gstlearn.db_grid_write_irap(filename, db, icol, nsamplex, nsampley)

def db_grid_write_ifpen(filename, db, ncol, icols):
    return _gstlearn.db_grid_write_ifpen(filename, db, ncol, icols)

def db_grid_read_ifpen(filename, verbose=0):
    return _gstlearn.db_grid_read_ifpen(filename, verbose)

def db_grid_write_eclipse(filename, db, icol):
    return _gstlearn.db_grid_write_eclipse(filename, db, icol)

def db_well_read_las(filename, xwell, ywell, cwell, verbose=0):
    return _gstlearn.db_well_read_las(filename, xwell, ywell, cwell, verbose)
class FileLAS(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FileLAS_swiginit(self, _gstlearn.new_FileLAS(*args))
    __swig_destroy__ = _gstlearn.delete_FileLAS

    def mustBeGrid(self):
        return _gstlearn.FileLAS_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.FileLAS_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim):
        return _gstlearn.FileLAS_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode):
        return _gstlearn.FileLAS_mustBeForRotation(self, mode)

    def readFromFile(self):
        return _gstlearn.FileLAS_readFromFile(self)

    def setCwell(self, cwell):
        return _gstlearn.FileLAS_setCwell(self, cwell)

    def setXwell(self, xwell):
        return _gstlearn.FileLAS_setXwell(self, xwell)

    def setYwell(self, ywell):
        return _gstlearn.FileLAS_setYwell(self, ywell)

# Register FileLAS in _gstlearn:
_gstlearn.FileLAS_swigregister(FileLAS)
class FileVTK(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FileVTK_swiginit(self, _gstlearn.new_FileVTK(*args))
    __swig_destroy__ = _gstlearn.delete_FileVTK

    def mustBeGrid(self):
        return _gstlearn.FileVTK_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.FileVTK_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim):
        return _gstlearn.FileVTK_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode):
        return _gstlearn.FileVTK_mustBeForRotation(self, mode)

    def writeInFile(self):
        return _gstlearn.FileVTK_writeInFile(self)

    def setFactvar(self, factvar):
        return _gstlearn.FileVTK_setFactvar(self, factvar)

    def setFactx(self, factx):
        return _gstlearn.FileVTK_setFactx(self, factx)

    def setFacty(self, facty):
        return _gstlearn.FileVTK_setFacty(self, facty)

    def setFactz(self, factz):
        return _gstlearn.FileVTK_setFactz(self, factz)

    def setFlagBinary(self, flagBinary):
        return _gstlearn.FileVTK_setFlagBinary(self, flagBinary)

# Register FileVTK in _gstlearn:
_gstlearn.FileVTK_swigregister(FileVTK)
class GridArcGis(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridArcGis_swiginit(self, _gstlearn.new_GridArcGis(*args))
    __swig_destroy__ = _gstlearn.delete_GridArcGis

    def mustBeGrid(self):
        return _gstlearn.GridArcGis_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.GridArcGis_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim):
        return _gstlearn.GridArcGis_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode):
        return _gstlearn.GridArcGis_mustBeForRotation(self, mode)

    def isAuthorized(self):
        return _gstlearn.GridArcGis_isAuthorized(self)

    def writeInFile(self):
        return _gstlearn.GridArcGis_writeInFile(self)

# Register GridArcGis in _gstlearn:
_gstlearn.GridArcGis_swigregister(GridArcGis)
class GridBmp(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridBmp_swiginit(self, _gstlearn.new_GridBmp(*args))
    __swig_destroy__ = _gstlearn.delete_GridBmp

    def mustBeGrid(self):
        return _gstlearn.GridBmp_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.GridBmp_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim):
        return _gstlearn.GridBmp_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode):
        return _gstlearn.GridBmp_mustBeForRotation(self, mode)

    def writeInFile(self):
        return _gstlearn.GridBmp_writeInFile(self)

    def readGridFromFile(self):
        return _gstlearn.GridBmp_readGridFromFile(self)

    def setColors(self, reds, greens, blues):
        return _gstlearn.GridBmp_setColors(self, reds, greens, blues)

    def setFFFF(self, red, green, blue):
        return _gstlearn.GridBmp_setFFFF(self, red, green, blue)

    def setHigh(self, red, green, blue):
        return _gstlearn.GridBmp_setHigh(self, red, green, blue)

    def setLow(self, red, green, blue):
        return _gstlearn.GridBmp_setLow(self, red, green, blue)

    def setMask(self, red, green, blue):
        return _gstlearn.GridBmp_setMask(self, red, green, blue)

    def setFlagHigh(self, flagHigh):
        return _gstlearn.GridBmp_setFlagHigh(self, flagHigh)

    def setFlagLow(self, flagLow):
        return _gstlearn.GridBmp_setFlagLow(self, flagLow)

    def setNcolor(self, ncolor):
        return _gstlearn.GridBmp_setNcolor(self, ncolor)

    def setNmult(self, nmult):
        return _gstlearn.GridBmp_setNmult(self, nmult)

    def setNsamplex(self, nsamplex):
        return _gstlearn.GridBmp_setNsamplex(self, nsamplex)

    def setNsampley(self, nsampley):
        return _gstlearn.GridBmp_setNsampley(self, nsampley)

    def setValmax(self, valmax):
        return _gstlearn.GridBmp_setValmax(self, valmax)

    def setValmin(self, valmin):
        return _gstlearn.GridBmp_setValmin(self, valmin)

# Register GridBmp in _gstlearn:
_gstlearn.GridBmp_swigregister(GridBmp)
class GridEclipse(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridEclipse_swiginit(self, _gstlearn.new_GridEclipse(*args))
    __swig_destroy__ = _gstlearn.delete_GridEclipse

    def mustBeGrid(self):
        return _gstlearn.GridEclipse_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.GridEclipse_mustBeOneVariable(self)

    def mustBeForNDim(self, arg2):
        return _gstlearn.GridEclipse_mustBeForNDim(self, arg2)

    def mustBeForRotation(self, mode):
        return _gstlearn.GridEclipse_mustBeForRotation(self, mode)

    def writeInFile(self):
        return _gstlearn.GridEclipse_writeInFile(self)

# Register GridEclipse in _gstlearn:
_gstlearn.GridEclipse_swigregister(GridEclipse)
class GridF2G(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridF2G_swiginit(self, _gstlearn.new_GridF2G(*args))
    __swig_destroy__ = _gstlearn.delete_GridF2G

    def mustBeGrid(self):
        return _gstlearn.GridF2G_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.GridF2G_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim):
        return _gstlearn.GridF2G_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode):
        return _gstlearn.GridF2G_mustBeForRotation(self, mode)

    def readGridFromFile(self):
        return _gstlearn.GridF2G_readGridFromFile(self)

# Register GridF2G in _gstlearn:
_gstlearn.GridF2G_swigregister(GridF2G)
class GridIfpEn(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridIfpEn_swiginit(self, _gstlearn.new_GridIfpEn(*args))
    __swig_destroy__ = _gstlearn.delete_GridIfpEn

    def mustBeGrid(self):
        return _gstlearn.GridIfpEn_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.GridIfpEn_mustBeOneVariable(self)

    def mustBeForNDim(self, arg2):
        return _gstlearn.GridIfpEn_mustBeForNDim(self, arg2)

    def mustBeForRotation(self, mode):
        return _gstlearn.GridIfpEn_mustBeForRotation(self, mode)

    def writeInFile(self):
        return _gstlearn.GridIfpEn_writeInFile(self)

    def readGridFromFile(self):
        return _gstlearn.GridIfpEn_readGridFromFile(self)

# Register GridIfpEn in _gstlearn:
_gstlearn.GridIfpEn_swigregister(GridIfpEn)
class GridIrap(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridIrap_swiginit(self, _gstlearn.new_GridIrap(*args))
    __swig_destroy__ = _gstlearn.delete_GridIrap

    def mustBeGrid(self):
        return _gstlearn.GridIrap_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.GridIrap_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim):
        return _gstlearn.GridIrap_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode):
        return _gstlearn.GridIrap_mustBeForRotation(self, mode)

    def writeInFile(self):
        return _gstlearn.GridIrap_writeInFile(self)

    def getNsamplex(self):
        return _gstlearn.GridIrap_getNsamplex(self)

    def setNsamplex(self, nsamplex):
        return _gstlearn.GridIrap_setNsamplex(self, nsamplex)

    def getNsampley(self):
        return _gstlearn.GridIrap_getNsampley(self)

    def setNsampley(self, nsampley):
        return _gstlearn.GridIrap_setNsampley(self, nsampley)

# Register GridIrap in _gstlearn:
_gstlearn.GridIrap_swigregister(GridIrap)
class GridXYZ(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridXYZ_swiginit(self, _gstlearn.new_GridXYZ(*args))
    __swig_destroy__ = _gstlearn.delete_GridXYZ

    def mustBeGrid(self):
        return _gstlearn.GridXYZ_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.GridXYZ_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim):
        return _gstlearn.GridXYZ_mustBeForNDim(self, ndim)

    def writeInFile(self):
        return _gstlearn.GridXYZ_writeInFile(self)

# Register GridXYZ in _gstlearn:
_gstlearn.GridXYZ_swigregister(GridXYZ)
class GridZycor(AOF):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.GridZycor_swiginit(self, _gstlearn.new_GridZycor(*args))
    __swig_destroy__ = _gstlearn.delete_GridZycor

    def mustBeGrid(self):
        return _gstlearn.GridZycor_mustBeGrid(self)

    def mustBeOneVariable(self):
        return _gstlearn.GridZycor_mustBeOneVariable(self)

    def mustBeForNDim(self, ndim):
        return _gstlearn.GridZycor_mustBeForNDim(self, ndim)

    def mustBeForRotation(self, mode):
        return _gstlearn.GridZycor_mustBeForRotation(self, mode)

    def writeInFile(self):
        return _gstlearn.GridZycor_writeInFile(self)

    def readGridFromFile(self):
        return _gstlearn.GridZycor_readGridFromFile(self)

# Register GridZycor in _gstlearn:
_gstlearn.GridZycor_swigregister(GridZycor)
class SegYArg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    error = property(_gstlearn.SegYArg_error_get, _gstlearn.SegYArg_error_set)
    ndescr = property(_gstlearn.SegYArg_ndescr_get, _gstlearn.SegYArg_ndescr_set)
    npertrace = property(_gstlearn.SegYArg_npertrace_get, _gstlearn.SegYArg_npertrace_set)
    ntraces = property(_gstlearn.SegYArg_ntraces_get, _gstlearn.SegYArg_ntraces_set)
    tab = property(_gstlearn.SegYArg_tab_get, _gstlearn.SegYArg_tab_set)
    descr = property(_gstlearn.SegYArg_descr_get, _gstlearn.SegYArg_descr_set)
    cotes = property(_gstlearn.SegYArg_cotes_get, _gstlearn.SegYArg_cotes_set)

    def __init__(self):
        _gstlearn.SegYArg_swiginit(self, _gstlearn.new_SegYArg())
    __swig_destroy__ = _gstlearn.delete_SegYArg

# Register SegYArg in _gstlearn:
_gstlearn.SegYArg_swigregister(SegYArg)

def segy_summary(*args, **kwargs):
    return _gstlearn.segy_summary(*args, **kwargs)

def segy_array(*args, **kwargs):
    return _gstlearn.segy_array(*args, **kwargs)

def db_segy(*args, **kwargs):
    return _gstlearn.db_segy(*args, **kwargs)
class ACalcSimulation(ACalcInterpolator):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gstlearn.delete_ACalcSimulation

    def getSeed(self):
        return _gstlearn.ACalcSimulation_getSeed(self)

    def getNbSimu(self):
        return _gstlearn.ACalcSimulation_getNbSimu(self)

    def setSeed(self, seed):
        return _gstlearn.ACalcSimulation_setSeed(self, seed)

    def setNbSimu(self, nbsimu):
        return _gstlearn.ACalcSimulation_setNbSimu(self, nbsimu)

# Register ACalcSimulation in _gstlearn:
_gstlearn.ACalcSimulation_swigregister(ACalcSimulation)
class CalcSimuTurningBands(ACalcSimulation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbsimu=0, nbtuba=0, flag_check=False, seed=4324324):
        _gstlearn.CalcSimuTurningBands_swiginit(self, _gstlearn.new_CalcSimuTurningBands(nbsimu, nbtuba, flag_check, seed))
    __swig_destroy__ = _gstlearn.delete_CalcSimuTurningBands

    def getNBtuba(self):
        return _gstlearn.CalcSimuTurningBands_getNBtuba(self)

    def setNBtuba(self, nbtuba):
        return _gstlearn.CalcSimuTurningBands_setNBtuba(self, nbtuba)

    def getNDirs(self):
        return _gstlearn.CalcSimuTurningBands_getNDirs(self)

    def simulate(self, *args, **kwargs):
        return _gstlearn.CalcSimuTurningBands_simulate(self, *args, **kwargs)

    def simulatePotential(self, dbiso, dbgrd, dbtgt, dbout, model, delta):
        return _gstlearn.CalcSimuTurningBands_simulatePotential(self, dbiso, dbgrd, dbtgt, dbout, model, delta)

    @staticmethod
    def isValidForTurningBands(model):
        return _gstlearn.CalcSimuTurningBands_isValidForTurningBands(model)

    def getBayesCov(self):
        return _gstlearn.CalcSimuTurningBands_getBayesCov(self)

    def setBayesCov(self, bayes_cov):
        return _gstlearn.CalcSimuTurningBands_setBayesCov(self, bayes_cov)

    def getBayesMean(self):
        return _gstlearn.CalcSimuTurningBands_getBayesMean(self)

    def setBayesMean(self, dmean):
        return _gstlearn.CalcSimuTurningBands_setBayesMean(self, dmean)

    def isFlagCheck(self):
        return _gstlearn.CalcSimuTurningBands_isFlagCheck(self)

    def setFlagCheck(self, flag_check):
        return _gstlearn.CalcSimuTurningBands_setFlagCheck(self, flag_check)

    def isFlagBayes(self):
        return _gstlearn.CalcSimuTurningBands_isFlagBayes(self)

    def setFlagBayes(self, flag_bayes):
        return _gstlearn.CalcSimuTurningBands_setFlagBayes(self, flag_bayes)

    def setFlagDgm(self, flag_dgm):
        return _gstlearn.CalcSimuTurningBands_setFlagDgm(self, flag_dgm)

    def isFlagGibbs(self):
        return _gstlearn.CalcSimuTurningBands_isFlagGibbs(self)

    def setFlagGibbs(self, flag_gibbs):
        return _gstlearn.CalcSimuTurningBands_setFlagGibbs(self, flag_gibbs)

    def isFlagPgs(self):
        return _gstlearn.CalcSimuTurningBands_isFlagPgs(self)

    def setFlagPgs(self, flag_pgs):
        return _gstlearn.CalcSimuTurningBands_setFlagPgs(self, flag_pgs)

    def getIcase(self):
        return _gstlearn.CalcSimuTurningBands_getIcase(self)

    def setIcase(self, icase):
        return _gstlearn.CalcSimuTurningBands_setIcase(self, icase)

    def getNbtuba(self):
        return _gstlearn.CalcSimuTurningBands_getNbtuba(self)

    def setNbtuba(self, nbtuba):
        return _gstlearn.CalcSimuTurningBands_setNbtuba(self, nbtuba)

    def setFlagAllocationAlreadyDone(self, flag):
        return _gstlearn.CalcSimuTurningBands_setFlagAllocationAlreadyDone(self, flag)

# Register CalcSimuTurningBands in _gstlearn:
_gstlearn.CalcSimuTurningBands_swigregister(CalcSimuTurningBands)

def simtub(*args, **kwargs):
    return _gstlearn.simtub(*args, **kwargs)

def simbayes(*args, **kwargs):
    return _gstlearn.simbayes(*args, **kwargs)
class TurningBandDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.TurningBandDirection_swiginit(self, _gstlearn.new_TurningBandDirection(*args))
    __swig_destroy__ = _gstlearn.delete_TurningBandDirection

    def getAng(self, *args):
        return _gstlearn.TurningBandDirection_getAng(self, *args)

    def getDXP(self):
        return _gstlearn.TurningBandDirection_getDXP(self)

    def getDYP(self):
        return _gstlearn.TurningBandDirection_getDYP(self)

    def getDZP(self):
        return _gstlearn.TurningBandDirection_getDZP(self)

    def getT00(self):
        return _gstlearn.TurningBandDirection_getT00(self)

    def getTmax(self):
        return _gstlearn.TurningBandDirection_getTmax(self)

    def getTmin(self):
        return _gstlearn.TurningBandDirection_getTmin(self)

    def getScale(self):
        return _gstlearn.TurningBandDirection_getScale(self)

    def setAng(self, *args):
        return _gstlearn.TurningBandDirection_setAng(self, *args)

    def setDXP(self, dxp):
        return _gstlearn.TurningBandDirection_setDXP(self, dxp)

    def setDYP(self, dyp):
        return _gstlearn.TurningBandDirection_setDYP(self, dyp)

    def setDZP(self, dzp):
        return _gstlearn.TurningBandDirection_setDZP(self, dzp)

    def setT00(self, t00):
        return _gstlearn.TurningBandDirection_setT00(self, t00)

    def setTmax(self, tmax):
        return _gstlearn.TurningBandDirection_setTmax(self, tmax)

    def setTmin(self, tmin):
        return _gstlearn.TurningBandDirection_setTmin(self, tmin)

    def setScale(self, scale):
        return _gstlearn.TurningBandDirection_setScale(self, scale)

    def projectPoint(self, db, iech):
        return _gstlearn.TurningBandDirection_projectPoint(self, db, iech)

    def projectGrid(self, db, ix, iy, iz):
        return _gstlearn.TurningBandDirection_projectGrid(self, db, ix, iy, iz)

# Register TurningBandDirection in _gstlearn:
_gstlearn.TurningBandDirection_swigregister(TurningBandDirection)
class TurningBandOperate(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.TurningBandOperate_swiginit(self, _gstlearn.new_TurningBandOperate(*args))
    __swig_destroy__ = _gstlearn.delete_TurningBandOperate

    def getT(self):
        return _gstlearn.TurningBandOperate_getT(self)

    def getV0(self):
        return _gstlearn.TurningBandOperate_getV0(self)

    def getV1(self):
        return _gstlearn.TurningBandOperate_getV1(self)

    def getV2(self):
        return _gstlearn.TurningBandOperate_getV2(self)

    def getNt0(self):
        return _gstlearn.TurningBandOperate_getNt0(self)

    def isFlagScaled(self):
        return _gstlearn.TurningBandOperate_isFlagScaled(self)

    def getVexp(self):
        return _gstlearn.TurningBandOperate_getVexp(self)

    def getTdeb(self):
        return _gstlearn.TurningBandOperate_getTdeb(self)

    def getOmega(self):
        return _gstlearn.TurningBandOperate_getOmega(self)

    def getPhi(self):
        return _gstlearn.TurningBandOperate_getPhi(self)

    def getOffset(self):
        return _gstlearn.TurningBandOperate_getOffset(self)

    def getScale(self):
        return _gstlearn.TurningBandOperate_getScale(self)

    def setT(self, t):
        return _gstlearn.TurningBandOperate_setT(self, t)

    def setV0(self, v0):
        return _gstlearn.TurningBandOperate_setV0(self, v0)

    def setV1(self, v1):
        return _gstlearn.TurningBandOperate_setV1(self, v1)

    def setV2(self, v2):
        return _gstlearn.TurningBandOperate_setV2(self, v2)

    def setNt0(self, nt0):
        return _gstlearn.TurningBandOperate_setNt0(self, nt0)

    def setFlagScaled(self, flagScaled):
        return _gstlearn.TurningBandOperate_setFlagScaled(self, flagScaled)

    def setVexp(self, vexp):
        return _gstlearn.TurningBandOperate_setVexp(self, vexp)

    def setTdeb(self, tdeb):
        return _gstlearn.TurningBandOperate_setTdeb(self, tdeb)

    def setOmega(self, omega):
        return _gstlearn.TurningBandOperate_setOmega(self, omega)

    def setPhi(self, phi):
        return _gstlearn.TurningBandOperate_setPhi(self, phi)

    def setOffset(self, offset):
        return _gstlearn.TurningBandOperate_setOffset(self, offset)

    def setScale(self, scale):
        return _gstlearn.TurningBandOperate_setScale(self, scale)

    def getTsize(self):
        return _gstlearn.TurningBandOperate_getTsize(self)

    def pushT(self, value):
        return _gstlearn.TurningBandOperate_pushT(self, value)

    def pushV0(self, value):
        return _gstlearn.TurningBandOperate_pushV0(self, value)

    def pushV1(self, value):
        return _gstlearn.TurningBandOperate_pushV1(self, value)

    def pushV2(self, value):
        return _gstlearn.TurningBandOperate_pushV2(self, value)

    def reset(self):
        return _gstlearn.TurningBandOperate_reset(self)

    def shotNoiseAffineOne(self, t0):
        return _gstlearn.TurningBandOperate_shotNoiseAffineOne(self, t0)

    def shotNoiseCubicOne(self, t0):
        return _gstlearn.TurningBandOperate_shotNoiseCubicOne(self, t0)

    def spectralOne(self, t0):
        return _gstlearn.TurningBandOperate_spectralOne(self, t0)

    def IRFProcessOne(self, t0):
        return _gstlearn.TurningBandOperate_IRFProcessOne(self, t0)

    def cosineOne(self, t0):
        return _gstlearn.TurningBandOperate_cosineOne(self, t0)

# Register TurningBandOperate in _gstlearn:
_gstlearn.TurningBandOperate_swigregister(TurningBandOperate)
class spSim(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    _k = property(_gstlearn.spSim__k_get, _gstlearn.spSim__k_set)
    _countP = property(_gstlearn.spSim__countP_get, _gstlearn.spSim__countP_set)
    _countM = property(_gstlearn.spSim__countM_get, _gstlearn.spSim__countM_set)
    _tab = property(_gstlearn.spSim__tab_get, _gstlearn.spSim__tab_set)

    def __init__(self):
        _gstlearn.spSim_swiginit(self, _gstlearn.new_spSim())
    __swig_destroy__ = _gstlearn.delete_spSim

# Register spSim in _gstlearn:
_gstlearn.spSim_swigregister(spSim)
class SimuSpectral(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.SimuSpectral_swiginit(self, _gstlearn.new_SimuSpectral(*args))
    __swig_destroy__ = _gstlearn.delete_SimuSpectral

    def simulate(self, ns, seed=4273, verbose=False, nd=100):
        return _gstlearn.SimuSpectral_simulate(self, ns, seed, verbose, nd)

    def compute(self, *args, **kwargs):
        return _gstlearn.SimuSpectral_compute(self, *args, **kwargs)

    @staticmethod
    def isValidForSpectral(model):
        return _gstlearn.SimuSpectral_isValidForSpectral(model)

    def setModel(self, model):
        return _gstlearn.SimuSpectral_setModel(self, model)

    def setNdim(self, ndim):
        return _gstlearn.SimuSpectral_setNdim(self, ndim)

    def setNs(self, ns):
        return _gstlearn.SimuSpectral_setNs(self, ns)

# Register SimuSpectral in _gstlearn:
_gstlearn.SimuSpectral_swigregister(SimuSpectral)

def simuSpectral(*args, **kwargs):
    return _gstlearn.simuSpectral(*args, **kwargs)
class BooleanObject(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.BooleanObject_swiginit(self, _gstlearn.new_BooleanObject(*args))
    __swig_destroy__ = _gstlearn.delete_BooleanObject

    def toString(self, strfmt=None):
        return _gstlearn.BooleanObject_toString(self, strfmt)

    def setMode(self, mode):
        return _gstlearn.BooleanObject_setMode(self, mode)

    def setOrientation(self, orientation):
        return _gstlearn.BooleanObject_setOrientation(self, orientation)

    def setCenter(self, *args):
        return _gstlearn.BooleanObject_setCenter(self, *args)

    def setExtension(self, idim, value):
        return _gstlearn.BooleanObject_setExtension(self, idim, value)

    def setValue(self, rank, value):
        return _gstlearn.BooleanObject_setValue(self, rank, value)

    def getMode(self):
        return _gstlearn.BooleanObject_getMode(self)

    def getCenter(self, idim):
        return _gstlearn.BooleanObject_getCenter(self, idim)

    def getExtension(self, idim):
        return _gstlearn.BooleanObject_getExtension(self, idim)

    def getOrientation(self):
        return _gstlearn.BooleanObject_getOrientation(self)

    def getValue(self, rank):
        return _gstlearn.BooleanObject_getValue(self, rank)

    def getToken(self):
        return _gstlearn.BooleanObject_getToken(self)

    @staticmethod
    def generate(dbout, cdgrain, tokens, boolparam, eps=1.e-3):
        return _gstlearn.BooleanObject_generate(dbout, cdgrain, tokens, boolparam, eps)

    def isCompatiblePore(self, db):
        return _gstlearn.BooleanObject_isCompatiblePore(self, db)

    def isCompatibleGrainAdd(self, db):
        return _gstlearn.BooleanObject_isCompatibleGrainAdd(self, db)

    def isCompatibleGrainDelete(self, db, iptr_cover):
        return _gstlearn.BooleanObject_isCompatibleGrainDelete(self, db, iptr_cover)

    def projectToGrid(self, dbout, iptr_simu, iptr_rank, facies, rank):
        return _gstlearn.BooleanObject_projectToGrid(self, dbout, iptr_simu, iptr_rank, facies, rank)

    def coverageUpdate(self, db, iptr_cover, val):
        return _gstlearn.BooleanObject_coverageUpdate(self, db, iptr_cover, val)

    def getValues(self):
        return _gstlearn.BooleanObject_getValues(self)

# Register BooleanObject in _gstlearn:
_gstlearn.BooleanObject_swigregister(BooleanObject)
class SimuBoolean(ACalcSimulation, AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbsimu=0, seed=4324324):
        _gstlearn.SimuBoolean_swiginit(self, _gstlearn.new_SimuBoolean(nbsimu, seed))
    __swig_destroy__ = _gstlearn.delete_SimuBoolean

    def toString(self, strfmt=None):
        return _gstlearn.SimuBoolean_toString(self, strfmt)

    def simulate(self, dbin, dbout, tokens, boolparam, iptr_simu, iptr_rank, iptr_cover, verbose=False):
        return _gstlearn.SimuBoolean_simulate(self, dbin, dbout, tokens, boolparam, iptr_simu, iptr_rank, iptr_cover, verbose)

    def extractObjects(self):
        return _gstlearn.SimuBoolean_extractObjects(self)

# Register SimuBoolean in _gstlearn:
_gstlearn.SimuBoolean_swigregister(SimuBoolean)

def simbool(*args, **kwargs):
    return _gstlearn.simbool(*args, **kwargs)
class SimuBooleanParam(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SimuBooleanParam_swiginit(self, _gstlearn.new_SimuBooleanParam(*args))
    __swig_destroy__ = _gstlearn.delete_SimuBooleanParam

    def toString(self, strfmt=None):
        return _gstlearn.SimuBooleanParam_toString(self, strfmt)

    def getBackground(self):
        return _gstlearn.SimuBooleanParam_getBackground(self)

    def setBackground(self, background):
        return _gstlearn.SimuBooleanParam_setBackground(self, background)

    def getFacies(self):
        return _gstlearn.SimuBooleanParam_getFacies(self)

    def setFacies(self, facies):
        return _gstlearn.SimuBooleanParam_setFacies(self, facies)

    def getMaxiter(self):
        return _gstlearn.SimuBooleanParam_getMaxiter(self)

    def setMaxiter(self, maxiter):
        return _gstlearn.SimuBooleanParam_setMaxiter(self, maxiter)

    def getTmax(self):
        return _gstlearn.SimuBooleanParam_getTmax(self)

    def setTmax(self, tmax):
        return _gstlearn.SimuBooleanParam_setTmax(self, tmax)

    def setDilate(self, dilate):
        return _gstlearn.SimuBooleanParam_setDilate(self, dilate)

    def getDilate(self, *args):
        return _gstlearn.SimuBooleanParam_getDilate(self, *args)

    def isDilate(self):
        return _gstlearn.SimuBooleanParam_isDilate(self)

    def __repr__(self):
        return _gstlearn.SimuBooleanParam___repr__(self)

# Register SimuBooleanParam in _gstlearn:
_gstlearn.SimuBooleanParam_swigregister(SimuBooleanParam)
class SimuSpherical(ACalcSimulation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbsimu=1, seed=4324324):
        _gstlearn.SimuSpherical_swiginit(self, _gstlearn.new_SimuSpherical(nbsimu, seed))
    __swig_destroy__ = _gstlearn.delete_SimuSpherical

    def simulate(self, db, model, sphepar, iptr, verbose=False):
        return _gstlearn.SimuSpherical_simulate(self, db, model, sphepar, iptr, verbose)

    def simulate_mesh(self, mesh, model, sphepar, verbose=False):
        return _gstlearn.SimuSpherical_simulate_mesh(self, mesh, model, sphepar, verbose)

# Register SimuSpherical in _gstlearn:
_gstlearn.SimuSpherical_swigregister(SimuSpherical)

def simsph(*args, **kwargs):
    return _gstlearn.simsph(*args, **kwargs)
class SimuSphericalParam(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SimuSphericalParam_swiginit(self, _gstlearn.new_SimuSphericalParam(*args))
    __swig_destroy__ = _gstlearn.delete_SimuSphericalParam

    def toString(self, strfmt=None):
        return _gstlearn.SimuSphericalParam_toString(self, strfmt)

    def getNbf(self):
        return _gstlearn.SimuSphericalParam_getNbf(self)

    def setNbf(self, nbf):
        return _gstlearn.SimuSphericalParam_setNbf(self, nbf)

    def getNdisc(self):
        return _gstlearn.SimuSphericalParam_getNdisc(self)

    def setNdisc(self, ndisc):
        return _gstlearn.SimuSphericalParam_setNdisc(self, ndisc)

    def getNfmax(self):
        return _gstlearn.SimuSphericalParam_getNfmax(self)

    def setNfmax(self, nfmax):
        return _gstlearn.SimuSphericalParam_setNfmax(self, nfmax)

    def getSpecial(self):
        return _gstlearn.SimuSphericalParam_getSpecial(self)

    def setSpecial(self, special):
        return _gstlearn.SimuSphericalParam_setSpecial(self, special)

    def getTol(self):
        return _gstlearn.SimuSphericalParam_getTol(self)

    def setTol(self, tol):
        return _gstlearn.SimuSphericalParam_setTol(self, tol)

    def getDegmax(self):
        return _gstlearn.SimuSphericalParam_getDegmax(self)

    def setDegmax(self, degmax):
        return _gstlearn.SimuSphericalParam_setDegmax(self, degmax)

    def __repr__(self):
        return _gstlearn.SimuSphericalParam___repr__(self)

# Register SimuSphericalParam in _gstlearn:
_gstlearn.SimuSphericalParam_swigregister(SimuSphericalParam)
class CalcSimuSubstitution(ACalcSimulation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbsimu=0, seed=4324324, verbose=False):
        _gstlearn.CalcSimuSubstitution_swiginit(self, _gstlearn.new_CalcSimuSubstitution(nbsimu, seed, verbose))
    __swig_destroy__ = _gstlearn.delete_CalcSimuSubstitution

    def getSubparam(self):
        return _gstlearn.CalcSimuSubstitution_getSubparam(self)

    def setSubparam(self, subparam):
        return _gstlearn.CalcSimuSubstitution_setSubparam(self, subparam)

# Register CalcSimuSubstitution in _gstlearn:
_gstlearn.CalcSimuSubstitution_swigregister(CalcSimuSubstitution)

def substitution(*args, **kwargs):
    return _gstlearn.substitution(*args, **kwargs)
class SimuSubstitutionParam(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SimuSubstitutionParam_swiginit(self, _gstlearn.new_SimuSubstitutionParam(*args))
    __swig_destroy__ = _gstlearn.delete_SimuSubstitutionParam

    def toString(self, strfmt=None):
        return _gstlearn.SimuSubstitutionParam_toString(self, strfmt)

    def setColang(self, colang):
        return _gstlearn.SimuSubstitutionParam_setColang(self, colang)

    def getColfac(self):
        return _gstlearn.SimuSubstitutionParam_getColfac(self)

    def setColfac(self, colfac):
        return _gstlearn.SimuSubstitutionParam_setColfac(self, colfac)

    def getFactor(self):
        return _gstlearn.SimuSubstitutionParam_getFactor(self)

    def setFactor(self, factor):
        return _gstlearn.SimuSubstitutionParam_setFactor(self, factor)

    def isFlagAuto(self):
        return _gstlearn.SimuSubstitutionParam_isFlagAuto(self)

    def setFlagAuto(self, flagAuto):
        return _gstlearn.SimuSubstitutionParam_setFlagAuto(self, flagAuto)

    def isFlagCoding(self):
        return _gstlearn.SimuSubstitutionParam_isFlagCoding(self)

    def setFlagCoding(self, flagCoding):
        return _gstlearn.SimuSubstitutionParam_setFlagCoding(self, flagCoding)

    def isFlagDirect(self):
        return _gstlearn.SimuSubstitutionParam_isFlagDirect(self)

    def setFlagDirect(self, flagDirect):
        return _gstlearn.SimuSubstitutionParam_setFlagDirect(self, flagDirect)

    def isFlagOrient(self):
        return _gstlearn.SimuSubstitutionParam_isFlagOrient(self)

    def setFlagOrient(self, flagOrient):
        return _gstlearn.SimuSubstitutionParam_setFlagOrient(self, flagOrient)

    def getIntensity(self):
        return _gstlearn.SimuSubstitutionParam_getIntensity(self)

    def setIntensity(self, intensity):
        return _gstlearn.SimuSubstitutionParam_setIntensity(self, intensity)

    def getNfacies(self):
        return _gstlearn.SimuSubstitutionParam_getNfacies(self)

    def setNfacies(self, nfacies):
        return _gstlearn.SimuSubstitutionParam_setNfacies(self, nfacies)

    def getNstates(self):
        return _gstlearn.SimuSubstitutionParam_getNstates(self)

    def setNstates(self, nstates):
        return _gstlearn.SimuSubstitutionParam_setNstates(self, nstates)

    def getTrans(self):
        return _gstlearn.SimuSubstitutionParam_getTrans(self)

    def setTrans(self, trans):
        return _gstlearn.SimuSubstitutionParam_setTrans(self, trans)

    def setVector(self, vector):
        return _gstlearn.SimuSubstitutionParam_setVector(self, vector)

    def getColang(self, *args):
        return _gstlearn.SimuSubstitutionParam_getColang(self, *args)

    def getVector(self, *args):
        return _gstlearn.SimuSubstitutionParam_getVector(self, *args)

    def isValid(self, verbose=False):
        return _gstlearn.SimuSubstitutionParam_isValid(self, verbose)

    def isValidOrientation(self, vector, verbose=False):
        return _gstlearn.SimuSubstitutionParam_isValidOrientation(self, vector, verbose)

    def isValidFactor(self, factor, verbose=False):
        return _gstlearn.SimuSubstitutionParam_isValidFactor(self, factor, verbose)

    def isAngleLocal(self):
        return _gstlearn.SimuSubstitutionParam_isAngleLocal(self)

    def isLocal(self):
        return _gstlearn.SimuSubstitutionParam_isLocal(self)

    def __repr__(self):
        return _gstlearn.SimuSubstitutionParam___repr__(self)

# Register SimuSubstitutionParam in _gstlearn:
_gstlearn.SimuSubstitutionParam_swigregister(SimuSubstitutionParam)
class Stack(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valref = property(_gstlearn.Stack_valref_get, _gstlearn.Stack_valref_set)
    valsim = property(_gstlearn.Stack_valsim_get, _gstlearn.Stack_valsim_set)

    def __init__(self):
        _gstlearn.Stack_swiginit(self, _gstlearn.new_Stack())
    __swig_destroy__ = _gstlearn.delete_Stack

# Register Stack in _gstlearn:
_gstlearn.Stack_swigregister(Stack)
class CalcSimuPartition(ACalcSimulation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mode, nbsimu=0, seed=4324324, verbose=False):
        _gstlearn.CalcSimuPartition_swiginit(self, _gstlearn.new_CalcSimuPartition(mode, nbsimu, seed, verbose))
    __swig_destroy__ = _gstlearn.delete_CalcSimuPartition

    def getParparam(self):
        return _gstlearn.CalcSimuPartition_getParparam(self)

    def setParparam(self, parparam):
        return _gstlearn.CalcSimuPartition_setParparam(self, parparam)

    def setMode(self, mode):
        return _gstlearn.CalcSimuPartition_setMode(self, mode)

    def setVerbose(self, verbose):
        return _gstlearn.CalcSimuPartition_setVerbose(self, verbose)

# Register CalcSimuPartition in _gstlearn:
_gstlearn.CalcSimuPartition_swigregister(CalcSimuPartition)

def tessellation_voronoi(*args, **kwargs):
    return _gstlearn.tessellation_voronoi(*args, **kwargs)

def tessellation_poisson(*args, **kwargs):
    return _gstlearn.tessellation_poisson(*args, **kwargs)
class SimuPartitionParam(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SimuPartitionParam_swiginit(self, _gstlearn.new_SimuPartitionParam(*args))
    __swig_destroy__ = _gstlearn.delete_SimuPartitionParam

    def toString(self, strfmt=None):
        return _gstlearn.SimuPartitionParam_toString(self, strfmt)

    def setDilate(self, dilate):
        return _gstlearn.SimuPartitionParam_setDilate(self, dilate)

    def getIntensity(self):
        return _gstlearn.SimuPartitionParam_getIntensity(self)

    def setIntensity(self, intensity):
        return _gstlearn.SimuPartitionParam_setIntensity(self, intensity)

    def getNbtuba(self):
        return _gstlearn.SimuPartitionParam_getNbtuba(self)

    def setNbtuba(self, nbtuba):
        return _gstlearn.SimuPartitionParam_setNbtuba(self, nbtuba)

    def getDilate(self, *args):
        return _gstlearn.SimuPartitionParam_getDilate(self, *args)

    def __repr__(self):
        return _gstlearn.SimuPartitionParam___repr__(self)

# Register SimuPartitionParam in _gstlearn:
_gstlearn.SimuPartitionParam_swigregister(SimuPartitionParam)
class SimuFFTParam(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SimuFFTParam_swiginit(self, _gstlearn.new_SimuFFTParam(*args))
    __swig_destroy__ = _gstlearn.delete_SimuFFTParam

    def toString(self, strfmt=None):
        return _gstlearn.SimuFFTParam_toString(self, strfmt)

    def isFlagAliasing(self):
        return _gstlearn.SimuFFTParam_isFlagAliasing(self)

    def setFlagAliasing(self, flagAliasing):
        return _gstlearn.SimuFFTParam_setFlagAliasing(self, flagAliasing)

    def getPercent(self):
        return _gstlearn.SimuFFTParam_getPercent(self)

    def setPercent(self, percent):
        return _gstlearn.SimuFFTParam_setPercent(self, percent)

    def __repr__(self):
        return _gstlearn.SimuFFTParam___repr__(self)

# Register SimuFFTParam in _gstlearn:
_gstlearn.SimuFFTParam_swigregister(SimuFFTParam)
class CalcSimuFFT(ACalcSimulation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbsimu=0, verbose=False, seed=4324324):
        _gstlearn.CalcSimuFFT_swiginit(self, _gstlearn.new_CalcSimuFFT(nbsimu, verbose, seed))
    __swig_destroy__ = _gstlearn.delete_CalcSimuFFT

    def setParam(self, param):
        return _gstlearn.CalcSimuFFT_setParam(self, param)

    def setVerbose(self, verbose):
        return _gstlearn.CalcSimuFFT_setVerbose(self, verbose)

    def changeSupport(self, sigma):
        return _gstlearn.CalcSimuFFT_changeSupport(self, sigma)

# Register CalcSimuFFT in _gstlearn:
_gstlearn.CalcSimuFFT_swigregister(CalcSimuFFT)

def simfft(*args, **kwargs):
    return _gstlearn.simfft(*args, **kwargs)

def getChangeSupport(*args, **kwargs):
    return _gstlearn.getChangeSupport(*args, **kwargs)
class SimuRefineParam(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.SimuRefineParam_swiginit(self, _gstlearn.new_SimuRefineParam(*args))
    __swig_destroy__ = _gstlearn.delete_SimuRefineParam

    def toString(self, strfmt=None):
        return _gstlearn.SimuRefineParam_toString(self, strfmt)

    def isFlagSK(self):
        return _gstlearn.SimuRefineParam_isFlagSK(self)

    def setFlagKs(self, flagKS):
        return _gstlearn.SimuRefineParam_setFlagKs(self, flagKS)

    def getNmult(self):
        return _gstlearn.SimuRefineParam_getNmult(self)

    def setNmult(self, nmult):
        return _gstlearn.SimuRefineParam_setNmult(self, nmult)

    def __repr__(self):
        return _gstlearn.SimuRefineParam___repr__(self)

# Register SimuRefineParam in _gstlearn:
_gstlearn.SimuRefineParam_swigregister(SimuRefineParam)
class CalcSimuRefine(ACalcSimulation):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nbsimu=0, seed=4324324, verbose=False):
        _gstlearn.CalcSimuRefine_swiginit(self, _gstlearn.new_CalcSimuRefine(nbsimu, seed, verbose))
    __swig_destroy__ = _gstlearn.delete_CalcSimuRefine

    def getParam(self):
        return _gstlearn.CalcSimuRefine_getParam(self)

    def setParam(self, param):
        return _gstlearn.CalcSimuRefine_setParam(self, param)

    def getResultingGrid(self):
        return _gstlearn.CalcSimuRefine_getResultingGrid(self)

# Register CalcSimuRefine in _gstlearn:
_gstlearn.CalcSimuRefine_swigregister(CalcSimuRefine)

def simulation_refine(*args, **kwargs):
    return _gstlearn.simulation_refine(*args, **kwargs)
class CalcSimuEden(ACalcSimulation, AStringable, ISkinFunctions):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nfacies=0, nfluids=0, niter=1, nbsimu=0, seed=4324324, verbose=False):
        _gstlearn.CalcSimuEden_swiginit(self, _gstlearn.new_CalcSimuEden(nfacies, nfluids, niter, nbsimu, seed, verbose))
    __swig_destroy__ = _gstlearn.delete_CalcSimuEden

    def toString(self, strfmt=None):
        return _gstlearn.CalcSimuEden_toString(self, strfmt)

    def isAlreadyFilled(self, ipos):
        return _gstlearn.CalcSimuEden_isAlreadyFilled(self, ipos)

    def isToBeFilled(self, ipos):
        return _gstlearn.CalcSimuEden_isToBeFilled(self, ipos)

    def getWeight(self, ipos, idir):
        return _gstlearn.CalcSimuEden_getWeight(self, ipos, idir)

    def setIndFacies(self, indFacies):
        return _gstlearn.CalcSimuEden_setIndFacies(self, indFacies)

    def setIndFluid(self, indFluid):
        return _gstlearn.CalcSimuEden_setIndFluid(self, indFluid)

    def setIndPerm(self, indPerm):
        return _gstlearn.CalcSimuEden_setIndPerm(self, indPerm)

    def setIndPoro(self, indPoro):
        return _gstlearn.CalcSimuEden_setIndPoro(self, indPoro)

    def setSpeeds(self, speeds):
        return _gstlearn.CalcSimuEden_setSpeeds(self, speeds)

    def setNumberMax(self, numberMax):
        return _gstlearn.CalcSimuEden_setNumberMax(self, numberMax)

    def setShowFluid(self, showFluid):
        return _gstlearn.CalcSimuEden_setShowFluid(self, showFluid)

    def setVolumeMax(self, volumeMax):
        return _gstlearn.CalcSimuEden_setVolumeMax(self, volumeMax)

# Register CalcSimuEden in _gstlearn:
_gstlearn.CalcSimuEden_swigregister(CalcSimuEden)

def fluid_propagation(*args, **kwargs):
    return _gstlearn.fluid_propagation(*args, **kwargs)
class FracEnviron(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _gstlearn.FracEnviron_swiginit(self, _gstlearn.new_FracEnviron(*args))
    __swig_destroy__ = _gstlearn.delete_FracEnviron

    def toString(self, strfmt=None):
        return _gstlearn.FracEnviron_toString(self, strfmt)

    @staticmethod
    def createFromNF(neutralFilename, verbose=True):
        return _gstlearn.FracEnviron_createFromNF(neutralFilename, verbose)

    @staticmethod
    def create(xmax=0., ymax=0., deltax=0., deltay=0, mean=0., stdev=0.):
        return _gstlearn.FracEnviron_create(xmax, ymax, deltax, deltay, mean, stdev)

    def getNFamilies(self):
        return _gstlearn.FracEnviron_getNFamilies(self)

    def getNFaults(self):
        return _gstlearn.FracEnviron_getNFaults(self)

    def getDeltax(self):
        return _gstlearn.FracEnviron_getDeltax(self)

    def getDeltay(self):
        return _gstlearn.FracEnviron_getDeltay(self)

    def getMean(self):
        return _gstlearn.FracEnviron_getMean(self)

    def getStdev(self):
        return _gstlearn.FracEnviron_getStdev(self)

    def getXmax(self):
        return _gstlearn.FracEnviron_getXmax(self)

    def getYmax(self):
        return _gstlearn.FracEnviron_getYmax(self)

    def getXextend(self):
        return _gstlearn.FracEnviron_getXextend(self)

    def getFault(self, i):
        return _gstlearn.FracEnviron_getFault(self, i)

    def getFamily(self, i):
        return _gstlearn.FracEnviron_getFamily(self, i)

    def addFamily(self, family):
        return _gstlearn.FracEnviron_addFamily(self, family)

    def addFault(self, fault):
        return _gstlearn.FracEnviron_addFault(self, fault)

    def __repr__(self):
        return _gstlearn.FracEnviron___repr__(self)

# Register FracEnviron in _gstlearn:
_gstlearn.FracEnviron_swigregister(FracEnviron)
class FracFamily(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FracFamily_swiginit(self, _gstlearn.new_FracFamily(*args))
    __swig_destroy__ = _gstlearn.delete_FracFamily

    def toString(self, strfmt=None):
        return _gstlearn.FracFamily_toString(self, strfmt)

    def getAlpha(self):
        return _gstlearn.FracFamily_getAlpha(self)

    def setAlpha(self, alpha):
        return _gstlearn.FracFamily_setAlpha(self, alpha)

    def getAterm(self):
        return _gstlearn.FracFamily_getAterm(self)

    def setAterm(self, aterm):
        return _gstlearn.FracFamily_setAterm(self, aterm)

    def getBterm(self):
        return _gstlearn.FracFamily_getBterm(self)

    def setBterm(self, bterm):
        return _gstlearn.FracFamily_setBterm(self, bterm)

    def getDorient(self):
        return _gstlearn.FracFamily_getDorient(self)

    def setDorient(self, dorient):
        return _gstlearn.FracFamily_setDorient(self, dorient)

    def getOrient(self):
        return _gstlearn.FracFamily_getOrient(self)

    def setOrient(self, orient):
        return _gstlearn.FracFamily_setOrient(self, orient)

    def getProp1(self):
        return _gstlearn.FracFamily_getProp1(self)

    def setProp1(self, prop1):
        return _gstlearn.FracFamily_setProp1(self, prop1)

    def getProp2(self):
        return _gstlearn.FracFamily_getProp2(self)

    def setProp2(self, prop2):
        return _gstlearn.FracFamily_setProp2(self, prop2)

    def getRange(self):
        return _gstlearn.FracFamily_getRange(self)

    def setRange(self, range):
        return _gstlearn.FracFamily_setRange(self, range)

    def getRatcst(self):
        return _gstlearn.FracFamily_getRatcst(self)

    def setRatcst(self, ratcst):
        return _gstlearn.FracFamily_setRatcst(self, ratcst)

    def getTheta0(self):
        return _gstlearn.FracFamily_getTheta0(self)

    def setTheta0(self, theta0):
        return _gstlearn.FracFamily_setTheta0(self, theta0)

# Register FracFamily in _gstlearn:
_gstlearn.FracFamily_swigregister(FracFamily)
class FracFault(AStringable, ASerializable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FracFault_swiginit(self, _gstlearn.new_FracFault(*args))
    __swig_destroy__ = _gstlearn.delete_FracFault

    def toString(self, strfmt=None):
        return _gstlearn.FracFault_toString(self, strfmt)

    def getCoord(self):
        return _gstlearn.FracFault_getCoord(self)

    def getOrient(self):
        return _gstlearn.FracFault_getOrient(self)

    def getRangel(self, *args):
        return _gstlearn.FracFault_getRangel(self, *args)

    def getRanger(self, *args):
        return _gstlearn.FracFault_getRanger(self, *args)

    def getThetal(self, *args):
        return _gstlearn.FracFault_getThetal(self, *args)

    def getThetar(self, *args):
        return _gstlearn.FracFault_getThetar(self, *args)

    def getNFamilies(self):
        return _gstlearn.FracFault_getNFamilies(self)

    def faultAbscissae(self, cote):
        return _gstlearn.FracFault_faultAbscissae(self, cote)

    def addFaultPerFamily(self, thetal, thetar, rangel, ranger):
        return _gstlearn.FracFault_addFaultPerFamily(self, thetal, thetar, rangel, ranger)

    def setRangel(self, rangel):
        return _gstlearn.FracFault_setRangel(self, rangel)

    def setRanger(self, ranger):
        return _gstlearn.FracFault_setRanger(self, ranger)

    def setThetal(self, thetal):
        return _gstlearn.FracFault_setThetal(self, thetal)

    def setThetar(self, thetar):
        return _gstlearn.FracFault_setThetar(self, thetar)

# Register FracFault in _gstlearn:
_gstlearn.FracFault_swigregister(FracFault)
class FracDesc(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FracDesc_swiginit(self, _gstlearn.new_FracDesc(*args))
    __swig_destroy__ = _gstlearn.delete_FracDesc

    def toString(self, strfmt=None):
        return _gstlearn.FracDesc_toString(self, strfmt)

    def getNPoint(self):
        return _gstlearn.FracDesc_getNPoint(self)

    def getFamily(self):
        return _gstlearn.FracDesc_getFamily(self)

    def setFamily(self, family):
        return _gstlearn.FracDesc_setFamily(self, family)

    def getOrient(self):
        return _gstlearn.FracDesc_getOrient(self)

    def setOrient(self, orient):
        return _gstlearn.FracDesc_setOrient(self, orient)

    def getXXF(self, i):
        return _gstlearn.FracDesc_getXXF(self, i)

    def getYYF(self, i):
        return _gstlearn.FracDesc_getYYF(self, i)

    def setXXF(self, i, value):
        return _gstlearn.FracDesc_setXXF(self, i, value)

    def setYYF(self, i, value):
        return _gstlearn.FracDesc_setYYF(self, i, value)

    def addPoint(self, x, y):
        return _gstlearn.FracDesc_addPoint(self, x, y)

    def fractureExtension(self, cote, dcote):
        return _gstlearn.FracDesc_fractureExtension(self, cote, dcote)

# Register FracDesc in _gstlearn:
_gstlearn.FracDesc_swigregister(FracDesc)
NPART = _gstlearn.NPART
NBYFRAC = _gstlearn.NBYFRAC
NBYWOUT = _gstlearn.NBYWOUT
class FracList(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.FracList_swiginit(self, _gstlearn.new_FracList(*args))
    __swig_destroy__ = _gstlearn.delete_FracList

    def toString(self, strfmt=None):
        return _gstlearn.FracList_toString(self, strfmt)

    def getNFracs(self):
        return _gstlearn.FracList_getNFracs(self)

    def simulate(self, *args, **kwargs):
        return _gstlearn.FracList_simulate(self, *args, **kwargs)

    def addDescription(self, *args, **kwargs):
        return _gstlearn.FracList_addDescription(self, *args, **kwargs)

    def fractureExport(self):
        return _gstlearn.FracList_fractureExport(self)

    def layinfoExport(self):
        return _gstlearn.FracList_layinfoExport(self)

    @staticmethod
    def fractureImport(*args, **kwargs):
        return _gstlearn.FracList_fractureImport(*args, **kwargs)

    def fractureToBlock(self, *args, **kwargs):
        return _gstlearn.FracList_fractureToBlock(self, *args, **kwargs)

    def fractureToWell(self, nval, well, xmax, permtab, nint, ncol):
        return _gstlearn.FracList_fractureToWell(self, nval, well, xmax, permtab, nint, ncol)

    def fractureWellToBlock(self, dbgrid, col_perm, col_fluid, flag_fluid, val_fluid, wellout, nval, ndisc=1000., verbose=False):
        return _gstlearn.FracList_fractureWellToBlock(self, dbgrid, col_perm, col_fluid, flag_fluid, val_fluid, wellout, nval, ndisc, verbose)

    def fractureExtractLength(self, ifam, cote, dcote):
        return _gstlearn.FracList_fractureExtractLength(self, ifam, cote, dcote)

    def fractureExtractDist(self, ifam, cote, dcote):
        return _gstlearn.FracList_fractureExtractDist(self, ifam, cote, dcote)

    def setFamily(self, i, ifam):
        return _gstlearn.FracList_setFamily(self, i, ifam)

    def setOrient(self, i, orient):
        return _gstlearn.FracList_setOrient(self, i, orient)

    def addPoint(self, i, xx, yy):
        return _gstlearn.FracList_addPoint(self, i, xx, yy)

# Register FracList in _gstlearn:
_gstlearn.FracList_swigregister(FracList)
class Ball(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Ball_swiginit(self, _gstlearn.new_Ball(*args))
    __swig_destroy__ = _gstlearn.delete_Ball

    def init(self, db, dist_function=None, leaf_size=10, default_distance_function=1, useSel=False):
        return _gstlearn.Ball_init(self, db, dist_function, leaf_size, default_distance_function, useSel)

    def query(self, test, n_samples, n_features, n_neighbors=1):
        return _gstlearn.Ball_query(self, test, n_samples, n_features, n_neighbors)

    def queryAsVVD(self, test, n_neighbors=1):
        return _gstlearn.Ball_queryAsVVD(self, test, n_neighbors)

    def queryOne(self, test, n_features, n_neighbors=1):
        return _gstlearn.Ball_queryOne(self, test, n_features, n_neighbors)

    def queryOneAsVD(self, test, n_neighbors=1):
        return _gstlearn.Ball_queryOneAsVD(self, test, n_neighbors)

    def queryOneAsVDFromSP(self, Pt, n_neighbors=1):
        return _gstlearn.Ball_queryOneAsVDFromSP(self, Pt, n_neighbors)

    def getIndices(self, Pt, n_neighbors=1):
        return _gstlearn.Ball_getIndices(self, Pt, n_neighbors)

    def queryClosest(self, test):
        return _gstlearn.Ball_queryClosest(self, test)

    def queryOneInPlace(self, test, n_neighbors, indices, distances, rank=0):
        return _gstlearn.Ball_queryOneInPlace(self, test, n_neighbors, indices, distances, rank)

    def display(self, level=-1):
        return _gstlearn.Ball_display(self, level)

# Register Ball in _gstlearn:
_gstlearn.Ball_swigregister(Ball)
class KNN(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.KNN_swiginit(self, _gstlearn.new_KNN(*args))
    __swig_destroy__ = _gstlearn.delete_KNN

    def setDistances(self, distances):
        return _gstlearn.KNN_setDistances(self, distances)

    def setIndices(self, indices):
        return _gstlearn.KNN_setIndices(self, indices)

    def setNNeighbors(self, n_neighbors):
        return _gstlearn.KNN_setNNeighbors(self, n_neighbors)

    def setNSamples(self, n_samples):
        return _gstlearn.KNN_setNSamples(self, n_samples)

    def btree_query(self, tree, x, n_samples, n_features, n_neigh):
        return _gstlearn.KNN_btree_query(self, tree, x, n_samples, n_features, n_neigh)

    def btree_query_inPlace(self, tree, x, n_samples, n_features, n_neigh, rank, indices, distances):
        return _gstlearn.KNN_btree_query_inPlace(self, tree, x, n_samples, n_features, n_neigh, rank, indices, distances)

    def getIndices(self, rank=0):
        return _gstlearn.KNN_getIndices(self, rank)

    def getIndex(self, rank=0, ineigh=0):
        return _gstlearn.KNN_getIndex(self, rank, ineigh)

    def getDistances(self, rank=0):
        return _gstlearn.KNN_getDistances(self, rank)

    def getDistance(self, rank=0, ineigh=0):
        return _gstlearn.KNN_getDistance(self, rank, ineigh)

# Register KNN in _gstlearn:
_gstlearn.KNN_swigregister(KNN)
class Projection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.Projection_swiginit(self, _gstlearn.new_Projection(*args))
    __swig_destroy__ = _gstlearn.delete_Projection

    def operateInPlace(self, coor):
        return _gstlearn.Projection_operateInPlace(self, coor)

    def operateInvert(self, coor):
        return _gstlearn.Projection_operateInvert(self, coor)

    def operateVecInPlace(self, x, y):
        return _gstlearn.Projection_operateVecInPlace(self, x, y)

    def operateOnDb(self, db):
        return _gstlearn.Projection_operateOnDb(self, db)

    def operateOnPolygons(self, poly):
        return _gstlearn.Projection_operateOnPolygons(self, poly)

    def isFlagMean(self):
        return _gstlearn.Projection_isFlagMean(self)

    def getXcenter(self):
        return _gstlearn.Projection_getXcenter(self)

    def getYcenter(self):
        return _gstlearn.Projection_getYcenter(self)

# Register Projection in _gstlearn:
_gstlearn.Projection_swigregister(Projection)
class SpatialIndices(AStringable):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _gstlearn.SpatialIndices_swiginit(self, _gstlearn.new_SpatialIndices(*args))
    __swig_destroy__ = _gstlearn.delete_SpatialIndices

    def toString(self, strfmt=None):
        return _gstlearn.SpatialIndices_toString(self, strfmt)

    def computeCGI(self, name):
        return _gstlearn.SpatialIndices_computeCGI(self, name)

    def spatial(self, name):
        return _gstlearn.SpatialIndices_spatial(self, name)

    def getLIC(self, name1, name2):
        return _gstlearn.SpatialIndices_getLIC(self, name1, name2)

    def getGIC(self, name1, name2):
        return _gstlearn.SpatialIndices_getGIC(self, name1, name2)

    def getMatrixEllipse(self):
        return _gstlearn.SpatialIndices_getMatrixEllipse(self)

    def getMatrixInertia(self):
        return _gstlearn.SpatialIndices_getMatrixInertia(self)

    def getAxes(self):
        return _gstlearn.SpatialIndices_getAxes(self)

    def getAxe(self, rank):
        return _gstlearn.SpatialIndices_getAxe(self, rank)

    def getCenter(self):
        return _gstlearn.SpatialIndices_getCenter(self)

    def getInertia(self):
        return _gstlearn.SpatialIndices_getInertia(self)

    def getIso(self):
        return _gstlearn.SpatialIndices_getIso(self)

    def getQT(self, name):
        return _gstlearn.SpatialIndices_getQT(self, name)

    def getMicroStructure(self, name, h0, polygon=None, dlim=0., ndisc=100):
        return _gstlearn.SpatialIndices_getMicroStructure(self, name, h0, polygon, dlim, ndisc)

    def getPatches(self, name, Dmin, Amin=0):
        return _gstlearn.SpatialIndices_getPatches(self, name, Dmin, Amin)

# Register SpatialIndices in _gstlearn:
_gstlearn.SpatialIndices_swigregister(SpatialIndices)

def inquire_gstlearn(release, date):
    return _gstlearn.inquire_gstlearn(release, date)

def acknowledge_gstlearn():
    return _gstlearn.acknowledge_gstlearn()

def potential_kriging(db, dbgrd, dbtgt, dbout, model, neigh, nugget_grd=0., nugget_tgt=0., flag_pot=True, flag_grad=False, flag_trans=False, flag_save_data=False, opt_part=0, verbose=False):
    return _gstlearn.potential_kriging(db, dbgrd, dbtgt, dbout, model, neigh, nugget_grd, nugget_tgt, flag_pot, flag_grad, flag_trans, flag_save_data, opt_part, verbose)

def potential_cov(model, verbose, type1, x10, x1p, tx1, type2, x20, x2p, tx2, covtab):
    return _gstlearn.potential_cov(model, verbose, type1, x10, x1p, tx1, type2, x20, x2p, tx2, covtab)

def potential_simulate(dbiso, dbgrd, dbtgt, dbout, model, neigh, nugget_grd=0., nugget_tgt=0., dist_tempere=1.234e30, flag_trans=False, seed=135674, nbsimu=1, nbtuba=100, verbose=False):
    return _gstlearn.potential_simulate(dbiso, dbgrd, dbtgt, dbout, model, neigh, nugget_grd, nugget_tgt, dist_tempere, flag_trans, seed, nbsimu, nbtuba, verbose)

def potential_xvalid(dbiso, dbgrd, dbtgt, model, neigh, nugget_grd=0., nugget_tgt=0., flag_dist_conv=False, verbose=False):
    return _gstlearn.potential_xvalid(dbiso, dbgrd, dbtgt, model, neigh, nugget_grd, nugget_tgt, flag_dist_conv, verbose)

def seismic_estimate_XZ(db, model, nbench, nv2max, flag_ks, flag_std, flag_sort, flag_stat):
    return _gstlearn.seismic_estimate_XZ(db, model, nbench, nv2max, flag_ks, flag_std, flag_sort, flag_stat)

def seismic_simulate_XZ(db, model, nbench, nv2max, nbsimu, seed, flag_ks, flag_sort, flag_stat):
    return _gstlearn.seismic_simulate_XZ(db, model, nbench, nv2max, nbsimu, seed, flag_ks, flag_sort, flag_stat)

def seismic_z2t_grid(verbose, db_z, iatt_v, nx, x0, dx):
    return _gstlearn.seismic_z2t_grid(verbose, db_z, iatt_v, nx, x0, dx)

def seismic_t2z_grid(verbose, db_t, iatt_v, nx, x0, dx):
    return _gstlearn.seismic_t2z_grid(verbose, db_t, iatt_v, nx, x0, dx)

def seismic_z2t_convert(db_z, iatt_v, db_t):
    return _gstlearn.seismic_z2t_convert(db_z, iatt_v, db_t)

def seismic_t2z_convert(db_t, iatt_v, db_z):
    return _gstlearn.seismic_t2z_convert(db_t, iatt_v, db_z)

def seismic_operate(db, oper):
    return _gstlearn.seismic_operate(db, oper)

def seismic_convolve(db, flag_operate, flag_contrast, type, ntw, option, tindex, fpeak, period, amplitude, distort, val_before, val_middle, val_after, wavelet):
    return _gstlearn.seismic_convolve(db, flag_operate, flag_contrast, type, ntw, option, tindex, fpeak, period, amplitude, distort, val_before, val_middle, val_after, wavelet)
class LinearOpCGSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, linop):
        _gstlearn.LinearOpCGSolver_swiginit(self, _gstlearn.new_LinearOpCGSolver(linop))

    def solve(self, rhs, out):
        return _gstlearn.LinearOpCGSolver_solve(self, rhs, out)

    def setMaxIterations(self, n):
        return _gstlearn.LinearOpCGSolver_setMaxIterations(self, n)

    def setTolerance(self, tol):
        return _gstlearn.LinearOpCGSolver_setTolerance(self, tol)

    def getIterations(self):
        return _gstlearn.LinearOpCGSolver_getIterations(self)

    def getError(self):
        return _gstlearn.LinearOpCGSolver_getError(self)
    __swig_destroy__ = _gstlearn.delete_LinearOpCGSolver

# Register LinearOpCGSolver in _gstlearn:
_gstlearn.LinearOpCGSolver_swigregister(LinearOpCGSolver)
class LinearSPDEOpCGSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, linop):
        _gstlearn.LinearSPDEOpCGSolver_swiginit(self, _gstlearn.new_LinearSPDEOpCGSolver(linop))

    def solve(self, rhs, out):
        return _gstlearn.LinearSPDEOpCGSolver_solve(self, rhs, out)

    def setMaxIterations(self, n):
        return _gstlearn.LinearSPDEOpCGSolver_setMaxIterations(self, n)

    def setTolerance(self, tol):
        return _gstlearn.LinearSPDEOpCGSolver_setTolerance(self, tol)

    def getIterations(self):
        return _gstlearn.LinearSPDEOpCGSolver_getIterations(self)

    def getError(self):
        return _gstlearn.LinearSPDEOpCGSolver_getError(self)
    __swig_destroy__ = _gstlearn.delete_LinearSPDEOpCGSolver

# Register LinearSPDEOpCGSolver in _gstlearn:
_gstlearn.LinearSPDEOpCGSolver_swigregister(LinearSPDEOpCGSolver)


import gstlearn as gl
import numpy as np
import scipy.sparse as sc
import pandas as pd
import os
import sys

## Version and authors
from gstlearn.version import __version__
from gstlearn.version import __author__

## Numpy default integer type could be different according the OS (int64 or int32)
## https://stackoverflow.com/questions/36278590/numpy-array-dtype-is-coming-as-int32-by-default-in-a-windows-10-64-bit-machine
## Remind that there is no standard NaN for integers in Python
## We cannot use std::numeric_limits<int>::quiet_NaN() in C++
## But we can use the minimum signed integer value as follow

import os
## Integer NaN custom value
if os.name == 'nt':         # Windows
  inan = -2147483648
else:                       # Others
  inan = -sys.maxsize - 1

## isNaN custom function
def isNaN(value):
  if (type(value).__module__ == np.__name__): # Numpy type
    if (np.dtype(value) == 'intc' or np.dtype(value) == 'int64' or np.dtype(value) == 'int32'):
      return value == gl.inan
  else:
    if (type(value).__name__ == 'int'):
      return value == gl.inan
  return np.isnan(value)


## Add operator [] to VectorXXX R class [1-based index] ##
## ---------------------------------------------------- ##

def setitem(self, idx, item):
  if idx < 0 or idx >= self.length():
    raise IndexError("Index out or range")
  self.setAt(idx,item)

def getitem(self, idx):
  if idx < 0 or idx >= self.length():
    raise IndexError("Index out or range")
  return self.getAt(idx)

setattr(gl.VectorDouble,       "__getitem__", getitem)
setattr(gl.VectorDouble,       "__setitem__", setitem)
setattr(gl.VectorInt,          "__getitem__", getitem)
setattr(gl.VectorInt,          "__setitem__", setitem)
setattr(gl.VectorString,       "__getitem__", getitem)
setattr(gl.VectorString,       "__setitem__", setitem)
setattr(gl.VectorFloat,        "__getitem__", getitem)
setattr(gl.VectorFloat,        "__setitem__", setitem)
setattr(gl.VectorUChar,        "__getitem__", getitem)
setattr(gl.VectorUChar,        "__setitem__", setitem)
setattr(gl.VectorBool,         "__getitem__", getitem)
setattr(gl.VectorBool,         "__setitem__", setitem)
setattr(gl.VectorVectorDouble, "__getitem__", getitem)
setattr(gl.VectorVectorDouble, "__setitem__", setitem)
setattr(gl.VectorVectorInt,    "__getitem__", getitem)
setattr(gl.VectorVectorInt,    "__setitem__", setitem)
setattr(gl.VectorVectorFloat,  "__getitem__", getitem)
setattr(gl.VectorVectorFloat,  "__setitem__", setitem)

## Override operator [] for the Db class ##
## ------------------------------------- ##
# Thanks to Nicolas Desassis:

def is_list_type(mylist, types):
    """Check if an input is an iterable (tuple, list or numpy array) containing
       elements of only a given type"""
    all_type = True
    if not(isinstance(mylist,(tuple, list, np.ndarray))):
        all_type = False
    i = 0
    while all_type and i<len(mylist):
        if not(isinstance(mylist[i], types)):
               all_type = False
        i += 1
    return all_type

def check_nrows(db, nrows):
    """Check if a number of rows matches with the number of samples of a Db, 
    and returns the flag for useSel (whether it matches the number of active 
    samples or the total number of samples)"""
    if nrows == db.getActiveSampleNumber() :
        useSel = True
    elif nrows == db.getSampleNumber() or db.getSampleNumber()==0:
        useSel = False
    else:
        if db.getActiveSampleNumber() != db.getSampleNumber():
            raise ValueError("Error of dimension. Your number of lines ("+str(nrows)+") has to be equal to " +
                str(db.getActiveSampleNumber()) + " or " + str(db.getSampleNumber()))
        else :
            raise ValueError("Error of dimension. Your number of lines ("+str(nrows)+") has to be equal to " +
                  str(db.getActiveSampleNumber()))
    return useSel

def findColumnNames(self, columns):
    """Extract names of columns from Db, given different possible types of arguments: 
        names, indices, or locator"""
    if isinstance(columns, str) or is_list_type(columns, (str, np.str_)): #get variable(s) by name
        names = self.identifyNames(np.atleast_1d(columns))

    elif isinstance(columns, (int, np.int_)):
        names = self.getNameByColIdx(columns)

    elif isinstance(columns, slice):
        Nmax = self.getColumnNumber()
        names = []
        for i in range(Nmax)[columns]:
            names.append(self.getNameByColIdx(i))

    elif is_list_type(columns, (int, np.int_)):
        names = []
        Nfields = self.getColumnNumber()
        for i in columns:
            if i >= Nfields:
                print("Warning: the index {} is out of bounds with {}, this index is ignored".format(i,Nfields))
            else:
                names.append(self.getNameByColIdx(int(i)))

    else:
        raise ValueError("Argument for columns of wrong type: {}".format(type(columns)))

    return np.atleast_1d(names)

def has_row_selection(self, arg):
    """Check if the argument given contains a rows selection [rows,columns], 
    or only column selection [columns].
    If the argument is a tuple of length 2 and its first element is a valid argument
    for indexing rows, then the function returns True."""
    valid_row_indexing = False
    if isinstance(arg, tuple) and len(arg)==2:
        array_test = np.zeros(getNrows(self))
        try: # test if first element of tuple is a valid argument for indexing rows. If yes, then we assume it is the argument for rows.
            array_test[arg[0],]
            valid_row_indexing = True
        except IndexError:
            valid_row_indexing = False
    return valid_row_indexing

def getNrows(self, useSel=None):
    """ get number of rows of the Db when using or not a selection"""
    if useSel is None:
        useSel = self.useSel
    nrows = self.getSampleNumber(useSel)
    return nrows

def getdbitem(self,arg):
    """
    Extract data from a Db. Use Db[arg]

    Parameters
    ----------
    arg is (rows, columns) or columns
    rows : (optional) int, list of int, or slice. Which rows (samples) to extract.
    columns: str or list of str. Names of the variables to extract.
             int, list of int, or slice. Indices of the variables to extract.
             gstlearn.ELoc. Locator of the variables to extract.

    Returns
    -------
    numpy.ndarray
        2D array of shape (nrows, nvars) of the extracted data.
    Examples
    --------
    db["var"] or db[:,"var"] extracts the variable named "var"
    db[5:10,(2,3)] extracts the rows 5 to 9 of the variables of index 2 and 3 (array of shape (5,2))
    db[gl.ELoc.Z] extracts all the variables located with Z.
    """
    nrows = getNrows(self)

    selec_rows = has_row_selection(self, arg)
    if selec_rows:
        rows = arg[0]
        columns = arg[1]
    else:
        rows = slice(None,None,None) # extract all rows
        columns = arg

# extract columns
    ColNames = findColumnNames(self, columns)
    nbvar = len(ColNames)
    temp = np.array(self.getColumns(ColNames, self.useSel))
    temp = temp.reshape([nbvar,nrows]).T

# extract rows
    temp = temp[rows,]
    if len(temp.shape) == 2:
      if temp.shape[1] == 1:
        return temp[:,0]

    return temp

# This function will add a set of vectors (as a numpy array) to a db. 
# If some of the names exist, the corresponding variables will be replaced 
# and not added.

def setdbitem(self,name,tab):

# analyze input arguments
    selec_rows = has_row_selection(self, name)   
    if selec_rows:
        rows = name[0]
        columns = name[1]
    else:
        columns = name

# find existing column names
    arr_columns = np.atleast_1d(columns)
    ColNames = findColumnNames(self, columns) #existing names

# analyze input table
    if isinstance(tab, (float, np.floating, int, np.integer, bool, np.bool_)):
        nrows = getNrows(self)
        nvars = len(ColNames) # this means we will only modify existing columns, not create ones
        tab = np.ones((nrows, nvars))*tab
        if selec_rows:
            tab = np.atleast_2d(tab[rows,:])
    else:
        tab = np.copy(np.float64(tab))
        if len(tab.shape) == 1:
            tab = np.atleast_2d(tab).T
        nrows, nvars = tab.shape

# create list of column names to modify and/or create
    if len(ColNames) == nvars: # modify existing variables only
        new_names = ColNames

    elif len(arr_columns) == nvars and is_list_type(arr_columns, (str,np.str_)):
        new_names = arr_columns

    elif isinstance(columns, (str,np.str_)) and nvars > 1 and len(ColNames)==0: # create new variables from a unique name
        new_names = gl.generateMultipleNames(columns, nvars)

    else:
        raise ValueError("Wrong type or length of input ({0}): the input should correspond"
                         " either to a number of existing variables ({1}) equal to the"
                         " number of columns of the table (nvar={2}), or should be a name or "
                         "list of names of length nvar={2} in order to create new variables.".format(columns, len(ColNames), nvars))

# loop on the column names to modify/create each column
    for i,name in enumerate(new_names):
# check if existing name
        ExistingNames = findColumnNames(self, name)
        if len(ExistingNames) > 1:
            raise ValueError("There is more than one variable name corresponding to '{}' "
                             "in the Db: {}".format(name, ExistingNames))

        if selec_rows:
            useSel = self.useSel
            if len(ExistingNames) == 0: # create new variable
                nrows_tot = getNrows(self, useSel)
                tab_i = np.empty(nrows_tot)
                tab_i.fill(np.nan) # NaNs outside of target rows
            elif len(ExistingNames) == 1: # modify existing variable
                tab_i = self[name]

            tab_i = np.squeeze(tab_i)
            tab_i[rows,] = tab[:,i]

        else:
            useSel = check_nrows(self,nrows)
            tab_i = np.empty(nrows)
            tab_i[:] = tab[:,i]

        tab_i[np.isnan(tab_i)] = np.nan
        VectD = np.double(tab_i)
        self.setColumn(VectD, name, gl.ELoc.UNKNOWN, 0, useSel)

    return

setattr(gl.Db,"useSel",False)    

setattr(gl.Db,"__getitem__",getdbitem)
setattr(gl.Db,"__setitem__",setdbitem)

def Db_toTL(self, flagLocate=False):
  dat = pd.DataFrame(self.getAllColumns().reshape(-1,self.getSampleNumber()).T, 
    columns = self.getAllNames())

  if flagLocate:
    for j,i in enumerate(self.getAllNames()):
      dat[i].locator = self.getLocators()[j] 
  return dat

setattr(gl.Db, "toTL", Db_toTL)

def Db_fromPanda(pf):
# Create an empty Db
	dat = Db()
# And import all columns in one a loop using [] operator
	for field in pf.columns :
		mycol = pf[field]
		if mycol.dtype == 'float64' or mycol.dtype == 'int64':
	 		dat[field] = mycol
	return dat

gl.Db.fromTL = staticmethod(Db_fromPanda)

def Vector_toTL(self):
  return np.array(self)

setattr(gl.VectorDouble, "toTL", Vector_toTL)
setattr(gl.VectorInt, "toTL", Vector_toTL)

def VectorVector_toTL(self):
  retvec = []
  for vec in self:
    retvec.append(np.array(vec))
  return (retvec)

setattr(gl.VectorVectorDouble, "toTL", VectorVector_toTL)

def matrix_toTL(self):
  if self.isSparse():
  	NF_T = self.getMatrixToTriplet()
  	return Triplet_toTL(NF_T)
  else:
    return np.array(self.getValues(False)).reshape(self.getNRows(),self.getNCols())
  return

setattr(gl.MatrixRectangular, "toTL", matrix_toTL)
setattr(gl.MatrixSquareGeneral, "toTL", matrix_toTL)
setattr(gl.MatrixSquareSymmetric, "toTL", matrix_toTL)
setattr(gl.MatrixSparse, "toTL", matrix_toTL)
setattr(gl.ProjMatrix, "toTL", matrix_toTL)
setattr(gl.PrecisionOpMultiMatrix, "toTL", matrix_toTL)
setattr(gl.ProjMultiMatrix, "toTL", matrix_toTL)

def Triplet_toTL(self):
  return sc.csc_matrix((np.array(self.getValues()), 
                       (np.array(self.getRows()), np.array(self.getCols()))),
                                 shape=(self.getNRows()+1, self.getNCols()+1))

setattr(gl.NF_Triplet, "toTL", Triplet_toTL)

def table_toTL(self):
# As a Panda Data Frame
  colnames = self.getColumnNames()
  rownames = self.getRowNames()
  if len(colnames) == 0:
  	colnames = None
  if len(rownames) == 0:
  	rownames = None
  Anp = pd.DataFrame(self.getValues(False).reshape(self.getNRows(),self.getNCols()),
  columns = colnames, index=rownames)
  return Anp

setattr(gl.Table, "toTL", table_toTL)

def vario_toTL(self, idir, ivar, jvar):
  sw = self.getSwVec(idir, ivar, jvar, False)
  hh = self.getHhVec(idir, ivar, jvar, False)
  gg = self.getGgVec(idir, ivar, jvar, False, False, False)
  array = np.vstack((sw, hh, gg)).T
  colnames = np.array(["sw","hh","gg"])
  return pd.DataFrame(array, columns = colnames)

setattr(gl.Vario, "toTL", vario_toTL)

def vario_updateFromPanda(self, pf, idir, ivar, jvar):
	vario = self
	ndir = vario.getDirectionNumber()
	nvar = vario.getVariableNumber()
	if idir < 0 or idir >= ndir:
	 return vario
	if ivar < 0 or ivar >= nvar:
	 return vario
	if jvar < 0 or jvar >= nvar:
	 return vario
	nlag = vario.getLagTotalNumber(idir)
	if len(pf.index) != nlag:
	 return vario

	vario.setSwVec(idir, ivar, jvar, pf["sw"])
	vario.setHhVec(idir, ivar, jvar, pf["hh"])
	vario.setGgVec(idir, ivar, jvar, pf["gg"])
	return vario

setattr(gl.Vario, "updateFromPanda", vario_updateFromPanda)



