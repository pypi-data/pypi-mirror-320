"""Tests for the bbf.bspline.BSpline2D class"""

import numpy as np
import pytest

import bbf.bspline


# The `expected` arrays from the following tests have been computed with bbf at
# the commit 27adf5e3 (July, 2024):
# https://gitlab.in2p3.fr/lemaitre/bbf/-/tree/27adf5e331d2d434d5dc66ed7e2894fdc8bfe780.
# The tests below simply ensure the results are stable accross bbf versions.
# Below is the code snippet to generate the `expected` arrays.
#
#   from bbf.bspline import BSpline2D
#   import numpy as np
#   gx = np.asarray([0, 1, 2], dtype=np.float64)
#   gy = np.asarray([0, 1.2], dtype=np.float64)
#   x = np.asarray([0.15, 0.3, 1.8], dtype=np.float64)
#   y = np.asarray([0.15, 0.3, 0.4], dtype=np.float64)
#   s = BSpline2D(gx, gy, x_order=4, y_order=4)
#   J0 = s.eval(x, y)
#   J1x, J1y = s.gradient(x, y)
#   J2xx, J2yy, J2xy = s.hessian(x, y)


@pytest.fixture
def basis():
    gx = np.asarray([0, 1, 2], dtype=np.float64)
    gy = np.asarray([0, 1.2], dtype=np.float64)
    return lambda dtype: bbf.bspline.BSpline2D(
        gx, gy, x_order=4, y_order=4, dtype=dtype)


@pytest.fixture
def x():
    return np.asarray([0.15, 0.3, 1.8], dtype=np.float64)


@pytest.fixture
def y():
    return np.asarray([0.15, 0.3, 0.4], dtype=np.float64)


@pytest.mark.parametrize('dtype', (np.float32, np.float64))
def test_eval(basis, x, y, dtype):
    expected = np.asarray([
        [1.14282159e-02, 7.21119724e-02, 2.80506524e-02, 6.28051758e-05,
        0.00000000e+00, 6.67367825e-02, 4.21108690e-01, 1.63805996e-01,
        3.66760254e-04, 0.00000000e+00, 2.41558499e-02, 1.52423265e-01,
        5.92907376e-02, 1.32751465e-04, 0.00000000e+00, 3.33184136e-05,
        2.10238987e-04, 8.17803277e-05, 1.83105469e-07, 0.00000000e+00],
       [4.01953125e-03, 4.14960937e-02, 2.44804687e-02, 3.16406250e-04,
        0.00000000e+00, 3.49848090e-02, 3.61169705e-01, 2.13070747e-01,
        2.75390625e-03, 0.00000000e+00, 1.80134549e-02, 1.85963976e-01,
        1.09708767e-01, 1.41796875e-03, 0.00000000e+00, 1.48871528e-04,
        1.53689236e-03, 9.06684028e-04, 1.17187500e-05, 0.00000000e+00],
       [0.00000000e+00, 6.58436214e-05, 1.39588477e-02, 3.11440329e-02,
        4.21399177e-03, 0.00000000e+00, 7.65432099e-04, 1.62271605e-01,
        3.62049383e-01, 4.89876543e-02, 0.00000000e+00, 4.93827160e-04,
        1.04691358e-01, 2.33580247e-01, 3.16049383e-02, 0.00000000e+00,
        8.23045267e-06, 1.74485597e-03, 3.89300412e-03, 5.26748971e-04]])

    result = basis(dtype).eval(x, y).toarray()
    assert result.dtype == dtype
    assert np.allclose(expected, result)


@pytest.mark.parametrize('dtype', (np.float32, np.float64))
def test_gradient(basis, x, y, dtype):
    expected_x = np.asarray([
        [-4.03348796e-02, -2.97277832e-02,  6.88065592e-02,
         1.25610352e-03,  0.00000000e+00, -2.35541585e-01,
         -1.73599854e-01,  4.01806234e-01,  7.33520508e-03,
         0.00000000e+00, -8.52559408e-02, -6.28356934e-02,
         1.45436605e-01,  2.65502930e-03,  0.00000000e+00,
         -1.17594401e-04, -8.66699219e-05,  2.00602214e-04,
         3.66210937e-06,  0.00000000e+00],
        [-1.72265625e-02, -3.26953125e-02,  4.67578125e-02,
         3.16406250e-03,  0.00000000e+00, -1.49934896e-01,
         -2.84570312e-01,  4.06966146e-01,  2.75390625e-02,
         0.00000000e+00, -7.72005208e-02, -1.46523437e-01,
         2.09544271e-01,  1.41796875e-02,  0.00000000e+00,
         -6.38020833e-04, -1.21093750e-03,  1.73177083e-03,
         1.17187500e-04,  0.00000000e+00],
        [ 0.00000000e+00, -9.87654321e-04, -3.16049383e-02,
          1.67901235e-02,  1.58024691e-02,  0.00000000e+00,
          -1.14814815e-02, -3.67407407e-01,  1.95185185e-01,
          1.83703704e-01,  0.00000000e+00, -7.40740741e-03,
          -2.37037037e-01,  1.25925926e-01,  1.18518519e-01,
          0.00000000e+00, -1.23456790e-04, -3.95061728e-03,
          2.09876543e-03,  1.97530864e-03]])
    expected_y = np.asarray([
        [-3.26520454e-02, -2.06034207e-01, -8.01447211e-02,
         -1.79443359e-04,  0.00000000e+00, -1.93246799e-02,
         -1.21938612e-01, -4.74325901e-02, -1.06201172e-04,
         0.00000000e+00,  5.13103570e-02,  3.23768039e-01,
         1.25941705e-01,  2.81982422e-04,  0.00000000e+00,
         6.66368273e-04,  4.20477973e-03,  1.63560655e-03,
         3.66210937e-06,  0.00000000e+00],
        [-1.33984375e-02, -1.38320312e-01, -8.16015625e-02,
         -1.05468750e-03,  0.00000000e+00, -1.93532986e-02,
         -1.99796007e-01, -1.17868924e-01, -1.52343750e-03,
         0.00000000e+00,  3.12630208e-02,  3.22747396e-01,
         1.90403646e-01,  2.46093750e-03,  0.00000000e+00,
         1.48871528e-03,  1.53689236e-02,  9.06684028e-03,
         1.17187500e-04,  0.00000000e+00],
        [ 0.00000000e+00, -2.46913580e-04, -5.23456790e-02,
          -1.16790123e-01, -1.58024691e-02,  0.00000000e+00,
          -5.55555556e-04, -1.17777778e-01, -2.62777778e-01,
          -3.55555556e-02,  0.00000000e+00,  7.40740741e-04,
          1.57037037e-01,  3.50370370e-01,  4.74074074e-02,
          0.00000000e+00,  6.17283951e-05,  1.30864198e-02,
          2.91975309e-02,  3.95061728e-03]])
    Jx, Jy = basis(dtype).gradient(x, y)

    assert Jx.dtype == dtype
    assert Jy.dtype == dtype

    assert np.allclose(expected_x, Jx.toarray())
    assert np.allclose(expected_y, Jy.toarray())


@pytest.mark.parametrize('dtype', (np.float32, np.float64))
def test_hessian(basis, x, y, dtype):
    expected_xx =np.asarray([
        [0.00000000e+00, 0.00000000e+00, 9.49055990e-02, 1.67480469e-02,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 5.54215495e-01,
         9.78027344e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         2.00602214e-01, 3.54003906e-02, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 2.76692708e-04, 4.88281250e-05, 0.00000000e+00],
        [0.00000000e+00, 0.00000000e+00, 4.92187500e-02, 2.10937500e-02,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.28385417e-01,
         1.83593750e-01, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         2.20572917e-01, 9.45312500e-02, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 1.82291667e-03, 7.81250000e-04, 0.00000000e+00],
        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.87654321e-03,
         3.95061728e-02, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         1.14814815e-01, 4.59259259e-01, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 7.40740741e-02, 2.96296296e-01, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 1.23456790e-03, 4.93827160e-03]])
    expected_yy = np.asarray([
        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 8.95598958e-02, 5.65122396e-01,
         2.19825521e-01, 4.92187500e-04, 0.00000000e+00, 1.27942708e-02,
         8.07317708e-02, 3.14036458e-02, 7.03125000e-05, 0.00000000e+00],
        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 4.28750000e-02, 4.42625000e-01,
         2.61125000e-01, 3.37500000e-03, 0.00000000e+00, 1.42916667e-02,
         1.47541667e-01, 8.70416667e-02, 1.12500000e-03, 0.00000000e+00],
        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 8.88888889e-04,
         1.88444444e-01, 4.20444444e-01, 5.68888889e-02, 0.00000000e+00,
         4.44444444e-04, 9.42222222e-02, 2.10222222e-01, 2.84444444e-02]])
    expected_xy = np.asarray([
        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 1.38291016e-01, 2.40214844e-01,
         4.30664063e-03, 0.00000000e+00, 0.00000000e+00, 2.20136719e-01,
         3.82382812e-01, 6.85546875e-03, 0.00000000e+00, 0.00000000e+00,
         2.82226563e-03, 4.90234375e-03, 8.78906250e-05, 0.00000000e+00],
        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 6.89062500e-02, 1.99687500e-01,
         1.26562500e-02, 0.00000000e+00, 0.00000000e+00, 1.68437500e-01,
         4.88125000e-01, 3.09375000e-02, 0.00000000e+00, 0.00000000e+00,
         7.65625000e-03, 2.21875000e-02, 1.40625000e-03, 0.00000000e+00],
        [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
         0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 4.44444444e-03,
         1.46666667e-01, 7.11111111e-02, 0.00000000e+00, 0.00000000e+00,
         1.44444444e-02, 4.76666667e-01, 2.31111111e-01, 0.00000000e+00,
         0.00000000e+00, 1.11111111e-03, 3.66666667e-02, 1.77777778e-02]])

    Jxx, Jyy, Jxy = basis(dtype).hessian(x, y)

    assert Jxx.dtype == dtype
    assert Jyy.dtype == dtype
    assert Jxy.dtype == dtype

    assert np.allclose(expected_xx, Jxx.toarray())
    assert np.allclose(expected_yy, Jyy.toarray())
    assert np.allclose(expected_xy, Jxy.toarray())
