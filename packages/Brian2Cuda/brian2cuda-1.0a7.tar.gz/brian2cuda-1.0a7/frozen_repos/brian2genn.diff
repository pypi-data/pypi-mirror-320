diff --git a/brian2genn/device.py b/brian2genn/device.py
index fd387d2..330c9d6 100644
--- a/brian2genn/device.py
+++ b/brian2genn/device.py
@@ -7,6 +7,7 @@ import platform
 import re
 import shutil
 import sys
+import time
 
 from pkg_resources import parse_version
 from subprocess import call, check_call, CalledProcessError
@@ -345,6 +346,12 @@ class GeNNDevice(CPPStandaloneDevice):
                            'before_end': [],
                            'after_end': []}
 
+        self.timers = {'run_binary': None,
+                       'compile': {'buildmodel': None,
+                                   'clean':None,
+                                   'make': None,
+                                   'all': None}}
+
     def insert_code(self, slot, code):
         '''
         Insert custom C++ code directly into ``main.cpp``. The available slots
@@ -1019,8 +1026,10 @@ class GeNNDevice(CPPStandaloneDevice):
                 check_call(cmd, cwd=directory)
             else:
                 # print ["./main", "test", str(self.run_duration), gpu_arg]
+                _start_timer = time.time()
                 check_call(["./main", "test", str(self.run_duration)],
                            cwd=directory)
+                self.timers['run_binary'] = time.time() - _start_timer
         self.has_been_run = True
         last_run_info = open(
             os.path.join(directory, 'results/last_run_info.txt'), 'r').read()
@@ -1166,9 +1175,19 @@ class GeNNDevice(CPPStandaloneDevice):
                 args += ['-i', inc_path]
                 args += ['magicnetwork_model.cpp']
                 print(args)
+                _t0 = time.time()
                 check_call(args, cwd=directory, env=env)
+                _t1 = time.time()
                 call(["make", "clean"], cwd=directory, env=env)
-                check_call(["make"], cwd=directory, env=env)
+                _t2 = time.time()
+                check_call(["make", "-j"], cwd=directory, env=env)
+                _t3 = time.time()
+                self.timers['compile']['buildmodel'] = _t1 - _t0
+                self.timers['compile']['clean'] = _t2 - _t1
+                self.timers['compile']['make'] = _t3 - _t2
+                self.timers['compile']['all'] = sum(
+                    t for t in self.timers['compile'].values() if t is not None
+                )
 
     def add_parameter(self, model, varname, variable):
         model.parameters.append(varname)
@@ -1827,6 +1846,35 @@ class GeNNDevice(CPPStandaloneDevice):
         self.run_statement_used = True
 
 
+    def network_get_profiling_info(self, net):
+        fname = os.path.join(self.project_dir, 'test_output', 'test.time')
+        net._profiling_info = []
+        keys = []
+        if not prefs['devices.genn.kernel_timing']:
+            raise ValueError("No profiling info collected (need to set "
+                             "`prefs['devices.genn.kernel_timing'] = True`?)")
+        keys = ['neuronUpdateTime',
+                'presynapticUpdateTime',
+                'postsynapticUpdateTime',
+                'synapseDynamicsTime',
+                'initTime',
+                'initSparseTime']
+        with open(fname) as f:
+            # times are appended as new line in each run
+            last_line = f.read().splitlines()[-1]
+        times = last_line.split()
+        # total elapses time is always recorded
+        n_time = len(times)
+        n_key = len(keys)
+        assert n_time == n_key, (
+            f'{n_time} != {n_key} \ntimes: {times}\nkeys: {keys}'
+        )
+        for key, time in zip(keys, times):
+            net._profiling_info.append((key, float(time)*second))
+        return sorted(net._profiling_info, key=lambda item: item[1],
+                      reverse=True)
+
+
 # ------------------------------------------------------------------------------
 # End of GeNNDevice
 # ------------------------------------------------------------------------------
diff --git a/brian2genn/templates/main.cpp b/brian2genn/templates/main.cpp
index 8be3b0d..1e75fa5 100644
--- a/brian2genn/templates/main.cpp
+++ b/brian2genn/templates/main.cpp
@@ -137,6 +137,7 @@ int main(int argc, char *argv[])
   {% for kt in ('neuronUpdateTime', 'presynapticUpdateTime', 'postsynapticUpdateTime', 'synapseDynamicsTime', 'initTime', 'initSparseTime') %}
   fprintf(timef,"%f ", {{kt}});
   {% endfor %}
+  fprintf(timef,"\n");
   {% endif %} 
 
   // get the final results from the GPU 
