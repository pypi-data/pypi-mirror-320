# coding: utf-8

"""
    Live Data Identity API

    Manage your Live Data organization and user access to your resources

    The version of the OpenAPI document: 1.0
    Contact: support@livedatatechnologies.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ldt_identity_client_staging.models.post_session_google200_response_orgs_inner import PostSessionGoogle200ResponseOrgsInner
from ldt_identity_client_staging.models.post_session_google200_response_services_inner import PostSessionGoogle200ResponseServicesInner
from ldt_identity_client_staging.models.user import User
from typing import Optional, Set
from typing_extensions import Self

class PostSessionGoogle200Response(BaseModel):
    """
    PostSessionGoogle200Response
    """ # noqa: E501
    access_token: StrictStr = Field(alias="accessToken")
    refresh_token: StrictStr = Field(alias="refreshToken")
    expires_at: StrictStr = Field(alias="expiresAt")
    user: User
    orgs: Optional[List[PostSessionGoogle200ResponseOrgsInner]] = None
    services: Optional[List[PostSessionGoogle200ResponseServicesInner]] = None
    __properties: ClassVar[List[str]] = ["accessToken", "refreshToken", "expiresAt", "user", "orgs", "services"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostSessionGoogle200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in orgs (list)
        _items = []
        if self.orgs:
            for _item_orgs in self.orgs:
                if _item_orgs:
                    _items.append(_item_orgs.to_dict())
            _dict['orgs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostSessionGoogle200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessToken": obj.get("accessToken"),
            "refreshToken": obj.get("refreshToken"),
            "expiresAt": obj.get("expiresAt"),
            "user": User.from_dict(obj["user"]) if obj.get("user") is not None else None,
            "orgs": [PostSessionGoogle200ResponseOrgsInner.from_dict(_item) for _item in obj["orgs"]] if obj.get("orgs") is not None else None,
            "services": [PostSessionGoogle200ResponseServicesInner.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None
        })
        return _obj


