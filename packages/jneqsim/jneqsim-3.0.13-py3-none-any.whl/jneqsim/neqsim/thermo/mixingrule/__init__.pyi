
import sys
if sys.version_info >= (3, 8):
    from typing import Protocol
else:
    from typing_extensions import Protocol

import java.io
import java.lang
import jpype
import neqsim
import jneqsim.neqsim.thermo
import jneqsim.neqsim.thermo.component
import jneqsim.neqsim.thermo.phase
import typing



class CPAMixingInterface(java.io.Serializable):
    def calcDelta(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
    def calcDeltaNog(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
    def calcDeltadN(self, int: int, int2: int, int3: int, int4: int, int5: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int6: int) -> float: ...
    def calcDeltadT(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
    def calcDeltadTdT(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
    def calcDeltadTdV(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
    def calcDeltadV(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
    def calcXi(self, intArray: typing.Union[typing.List[typing.MutableSequence[typing.MutableSequence[int]]], jpype.JArray], intArray2: typing.Union[typing.List[typing.MutableSequence[typing.MutableSequence[typing.MutableSequence[int]]]], jpype.JArray], int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...

class ElectrolyteMixingRulesInterface(java.io.Serializable):
    def calcW(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
    def calcWT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
    def calcWTT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
    def calcWi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
    def calcWiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
    @typing.overload
    def calcWij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
    @typing.overload
    def calcWij(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> None: ...
    def getWij(self, int: int, int2: int, double: float) -> float: ...
    def getWijParameter(self, int: int, int2: int) -> float: ...
    def getWijT(self, int: int, int2: int, double: float) -> float: ...
    def getWijTT(self, int: int, int2: int, double: float) -> float: ...
    def gettWijT1Parameter(self, int: int, int2: int) -> float: ...
    def gettWijT2Parameter(self, int: int, int2: int) -> float: ...
    def setWijParameter(self, int: int, int2: int, double: float) -> None: ...
    def setWijT1Parameter(self, int: int, int2: int, double: float) -> None: ...
    def setWijT2Parameter(self, int: int, int2: int, double: float) -> None: ...

class EosMixingRulesInterface(java.lang.Cloneable):
    def calcA(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
    def calcAT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
    def calcATT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
    def calcAi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
    def calcAiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
    def calcAij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
    def calcB(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
    def calcBi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
    def calcBij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
    def getBinaryInteractionParameter(self, int: int, int2: int) -> float: ...
    def getBinaryInteractionParameterT1(self, int: int, int2: int) -> float: ...
    def getBinaryInteractionParameters(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getBmixType(self) -> int: ...
    def getGEPhase(self) -> jneqsim.neqsim.thermo.phase.PhaseInterface: ...
    def getMixingRuleName(self) -> java.lang.String: ...
    def setBinaryInteractionParameter(self, int: int, int2: int, double: float) -> None: ...
    def setBinaryInteractionParameterT1(self, int: int, int2: int, double: float) -> None: ...
    def setBinaryInteractionParameterij(self, int: int, int2: int, double: float) -> None: ...
    def setBinaryInteractionParameterji(self, int: int, int2: int, double: float) -> None: ...
    def setBmixType(self, int: int) -> None: ...
    def setCalcEOSInteractionParameters(self, boolean: bool) -> None: ...
    def setMixingRuleGEModel(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setnEOSkij(self, double: float) -> None: ...

class HVmixingRuleInterface(EosMixingRulesInterface):
    def getHVDijParameter(self, int: int, int2: int) -> float: ...
    def getHVDijTParameter(self, int: int, int2: int) -> float: ...
    def getHValphaParameter(self, int: int, int2: int) -> float: ...
    def getKijWongSandler(self, int: int, int2: int) -> float: ...
    def setHVDijParameter(self, int: int, int2: int, double: float) -> None: ...
    def setHVDijTParameter(self, int: int, int2: int, double: float) -> None: ...
    def setHValphaParameter(self, int: int, int2: int, double: float) -> None: ...
    def setKijWongSandler(self, int: int, int2: int, double: float) -> None: ...

class CPAMixing(java.lang.Cloneable, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    def __init__(self): ...
    def clone(self) -> 'CPAMixing': ...
    def getInteractionMatrix(self, intArray: typing.Union[typing.List[int], jpype.JArray], intArray2: typing.Union[typing.List[int], jpype.JArray]) -> typing.MutableSequence[typing.MutableSequence[int]]: ...
    @typing.overload
    def getMixingRule(self, int: int) -> CPAMixingInterface: ...
    @typing.overload
    def getMixingRule(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> CPAMixingInterface: ...
    def resetMixingRule(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> CPAMixingInterface: ...
    def setAssociationScheme(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> typing.MutableSequence[typing.MutableSequence[int]]: ...
    def setCrossAssociationScheme(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> typing.MutableSequence[typing.MutableSequence[int]]: ...
    class CPA_Radoch(jneqsim.neqsim.thermo.mixingrule.CPAMixing.CPA_Radoch_base):
        def __init__(self, cPAMixing: 'CPAMixing'): ...
        @typing.overload
        def calcDelta(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        @typing.overload
        def calcDelta(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def calcDeltaNog(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltadN(self, int: int, int2: int, int3: int, int4: int, int5: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int6: int) -> float: ...
        def calcDeltadT(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltadTdT(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltadTdV(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltadV(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def getCrossAssociationEnergy(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def getCrossAssociationVolume(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
    class CPA_Radoch_base(CPAMixingInterface):
        def __init__(self, cPAMixing: 'CPAMixing'): ...
        def calcDelta(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltaNog(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltadN(self, int: int, int2: int, int3: int, int4: int, int5: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int6: int) -> float: ...
        def calcDeltadT(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltadTdT(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltadTdV(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        def calcDeltadV(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        @typing.overload
        def calcXi(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        @typing.overload
        def calcXi(self, intArray: typing.Union[typing.List[typing.MutableSequence[typing.MutableSequence[int]]], jpype.JArray], intArray2: typing.Union[typing.List[typing.MutableSequence[typing.MutableSequence[typing.MutableSequence[int]]]], jpype.JArray], int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
    class PCSAFTa_Radoch(jneqsim.neqsim.thermo.mixingrule.CPAMixing.CPA_Radoch):
        def __init__(self, cPAMixing: 'CPAMixing'): ...
        @typing.overload
        def calcDelta(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        @typing.overload
        def calcDelta(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        @typing.overload
        def getCrossAssociationEnergy(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        @typing.overload
        def getCrossAssociationEnergy(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...
        @typing.overload
        def getCrossAssociationVolume(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        @typing.overload
        def getCrossAssociationVolume(self, int: int, int2: int, int3: int, int4: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int5: int) -> float: ...

class EosMixingRules(java.lang.Cloneable, jneqsim.neqsim.thermo.ThermodynamicConstantsInterface):
    Atot: float = ...
    Btot: float = ...
    Ai: float = ...
    Bi: float = ...
    A: float = ...
    B: float = ...
    mixingRuleGEModel: java.lang.String = ...
    mixingRuleName: java.lang.String = ...
    intparam: typing.MutableSequence[typing.MutableSequence[float]] = ...
    intparamT: typing.MutableSequence[typing.MutableSequence[float]] = ...
    WSintparam: typing.MutableSequence[typing.MutableSequence[float]] = ...
    intparamij: typing.MutableSequence[typing.MutableSequence[float]] = ...
    intparamji: typing.MutableSequence[typing.MutableSequence[float]] = ...
    intparamTType: typing.MutableSequence[typing.MutableSequence[int]] = ...
    nEOSkij: float = ...
    calcEOSInteractionParameters: typing.ClassVar[bool] = ...
    def __init__(self): ...
    def clone(self) -> 'EosMixingRules': ...
    def displayInteractionCoefficients(self, string: typing.Union[java.lang.String, str], phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> None: ...
    def getClassicOrHV(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def getClassicOrWS(self) -> typing.MutableSequence[typing.MutableSequence[java.lang.String]]: ...
    def getElectrolyteMixingRule(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> ElectrolyteMixingRulesInterface: ...
    def getHVDij(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getHVDijT(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getHValpha(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    @typing.overload
    def getMixingRule(self, int: int) -> EosMixingRulesInterface: ...
    @typing.overload
    def getMixingRule(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> EosMixingRulesInterface: ...
    def getMixingRuleName(self) -> java.lang.String: ...
    def getNRTLDij(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getNRTLDijT(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getNRTLalpha(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getSRKbinaryInteractionParameters(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def getWSintparam(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
    def isCalcEOSInteractionParameters(self) -> bool: ...
    def resetMixingRule(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> EosMixingRulesInterface: ...
    def setCalcEOSInteractionParameters(self, boolean: bool) -> None: ...
    def setMixingRuleGEModel(self, string: typing.Union[java.lang.String, str]) -> None: ...
    def setMixingRuleName(self, string: typing.Union[java.lang.String, str]) -> None: ...
    class ClassicSRK(jneqsim.neqsim.thermo.mixingrule.EosMixingRules.ClassicVdW):
        def __init__(self, eosMixingRules: 'EosMixingRules'): ...
        def calcA(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcATT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def clone(self) -> 'EosMixingRules.ClassicSRK': ...
        def getkij(self, double: float, int: int, int2: int) -> float: ...
    class ClassicSRKT(jneqsim.neqsim.thermo.mixingrule.EosMixingRules.ClassicSRK):
        def __init__(self, eosMixingRules: 'EosMixingRules'): ...
        def calcATT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAiTT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def clone(self) -> 'EosMixingRules.ClassicSRKT': ...
        def getkij(self, double: float, int: int, int2: int) -> float: ...
        def getkijdT(self, double: float, int: int, int2: int) -> float: ...
        def getkijdTdT(self, double: float, int: int, int2: int) -> float: ...
    class ClassicSRKT2(jneqsim.neqsim.thermo.mixingrule.EosMixingRules.ClassicSRKT):
        def __init__(self, eosMixingRules: 'EosMixingRules'): ...
        def clone(self) -> 'EosMixingRules.ClassicSRKT': ...
        def getkij(self, double: float, int: int, int2: int) -> float: ...
        def getkijdT(self, double: float, int: int, int2: int) -> float: ...
        def getkijdTdT(self, double: float, int: int, int2: int) -> float: ...
    class ClassicSRKT2x(jneqsim.neqsim.thermo.mixingrule.EosMixingRules.ClassicSRKT2):
        def __init__(self, eosMixingRules: 'EosMixingRules'): ...
        def calcA(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        @typing.overload
        def getkij(self, double: float, int: int, int2: int) -> float: ...
        @typing.overload
        def getkij(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, int: int, int2: int) -> float: ...
        def getkijdn(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, int2: int, int3: int) -> float: ...
        def getkijdndn(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, int3: int, int4: int) -> float: ...
    class ClassicVdW(EosMixingRulesInterface, java.io.Serializable):
        def __init__(self, eosMixingRules: 'EosMixingRules'): ...
        def calcA(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcATT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def calcB(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcBi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcBi2(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcBij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def clone(self) -> 'EosMixingRules.ClassicVdW': ...
        def getA(self) -> float: ...
        def getB(self) -> float: ...
        def getBinaryInteractionParameter(self, int: int, int2: int) -> float: ...
        def getBinaryInteractionParameterT1(self, int: int, int2: int) -> float: ...
        def getBinaryInteractionParameters(self) -> typing.MutableSequence[typing.MutableSequence[float]]: ...
        def getBmixType(self) -> int: ...
        def getGEPhase(self) -> jneqsim.neqsim.thermo.phase.PhaseInterface: ...
        def getMixingRuleName(self) -> java.lang.String: ...
        def getbij(self, componentEosInterface: jneqsim.neqsim.thermo.component.ComponentEosInterface, componentEosInterface2: jneqsim.neqsim.thermo.component.ComponentEosInterface) -> float: ...
        def prettyPrintKij(self) -> None: ...
        def setBinaryInteractionParameter(self, int: int, int2: int, double: float) -> None: ...
        def setBinaryInteractionParameterT1(self, int: int, int2: int, double: float) -> None: ...
        def setBinaryInteractionParameterij(self, int: int, int2: int, double: float) -> None: ...
        def setBinaryInteractionParameterji(self, int: int, int2: int, double: float) -> None: ...
        def setBmixType(self, int: int) -> None: ...
        def setCalcEOSInteractionParameters(self, boolean: bool) -> None: ...
        def setMixingRuleGEModel(self, string: typing.Union[java.lang.String, str]) -> None: ...
        def setnEOSkij(self, double: float) -> None: ...
    class ElectrolyteMixRule(ElectrolyteMixingRulesInterface, java.lang.Cloneable):
        def __init__(self, eosMixingRules: 'EosMixingRules', phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface): ...
        def calcW(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcWT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcWTT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcWi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcWiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        @typing.overload
        def calcWij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        @typing.overload
        def calcWij(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface) -> None: ...
        def getWij(self, int: int, int2: int, double: float) -> float: ...
        def getWijParameter(self, int: int, int2: int) -> float: ...
        def getWijT(self, int: int, int2: int, double: float) -> float: ...
        def getWijTT(self, int: int, int2: int, double: float) -> float: ...
        def gettWijT1Parameter(self, int: int, int2: int) -> float: ...
        def gettWijT2Parameter(self, int: int, int2: int) -> float: ...
        def setWijParameter(self, int: int, int2: int, double: float) -> None: ...
        def setWijT1Parameter(self, int: int, int2: int, double: float) -> None: ...
        def setWijT2Parameter(self, int: int, int2: int, double: float) -> None: ...
    class SRKHuronVidal(jneqsim.neqsim.thermo.mixingrule.EosMixingRules.ClassicSRK, HVmixingRuleInterface):
        @typing.overload
        def __init__(self, eosMixingRules: 'EosMixingRules', phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray3: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], stringArray: typing.Union[typing.List[typing.MutableSequence[java.lang.String]], jpype.JArray]): ...
        @typing.overload
        def __init__(self, eosMixingRules: 'EosMixingRules', phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], stringArray: typing.Union[typing.List[typing.MutableSequence[java.lang.String]], jpype.JArray]): ...
        def calcA(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def getHVDijParameter(self, int: int, int2: int) -> float: ...
        def getHVDijTParameter(self, int: int, int2: int) -> float: ...
        def getHValphaParameter(self, int: int, int2: int) -> float: ...
        def getKijWongSandler(self, int: int, int2: int) -> float: ...
        def setHVDijParameter(self, int: int, int2: int, double: float) -> None: ...
        def setHVDijTParameter(self, int: int, int2: int, double: float) -> None: ...
        def setHValphaParameter(self, int: int, int2: int, double: float) -> None: ...
        def setKijWongSandler(self, int: int, int2: int, double: float) -> None: ...
    class SRKHuronVidal2(jneqsim.neqsim.thermo.mixingrule.EosMixingRules.ClassicSRK, HVmixingRuleInterface):
        @typing.overload
        def __init__(self, eosMixingRules: 'EosMixingRules', phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray3: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], stringArray: typing.Union[typing.List[typing.MutableSequence[java.lang.String]], jpype.JArray]): ...
        @typing.overload
        def __init__(self, eosMixingRules: 'EosMixingRules', phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], stringArray: typing.Union[typing.List[typing.MutableSequence[java.lang.String]], jpype.JArray]): ...
        def calcA(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcATT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def getGEPhase(self) -> jneqsim.neqsim.thermo.phase.PhaseInterface: ...
        def getHVDijParameter(self, int: int, int2: int) -> float: ...
        def getHVDijTParameter(self, int: int, int2: int) -> float: ...
        def getHValphaParameter(self, int: int, int2: int) -> float: ...
        def getKijWongSandler(self, int: int, int2: int) -> float: ...
        def init(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> None: ...
        def setHVDijParameter(self, int: int, int2: int, double: float) -> None: ...
        def setHVDijTParameter(self, int: int, int2: int, double: float) -> None: ...
        def setHValphaParameter(self, int: int, int2: int, double: float) -> None: ...
        def setKijWongSandler(self, int: int, int2: int, double: float) -> None: ...
    class WongSandlerMixingRule(jneqsim.neqsim.thermo.mixingrule.EosMixingRules.SRKHuronVidal2):
        @typing.overload
        def __init__(self, eosMixingRules: 'EosMixingRules', phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray3: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], stringArray: typing.Union[typing.List[typing.MutableSequence[java.lang.String]], jpype.JArray]): ...
        @typing.overload
        def __init__(self, eosMixingRules: 'EosMixingRules', phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, doubleArray: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], doubleArray2: typing.Union[typing.List[typing.MutableSequence[float]], jpype.JArray], stringArray: typing.Union[typing.List[typing.MutableSequence[java.lang.String]], jpype.JArray]): ...
        def calcA(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcATT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcAi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcAij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def calcB(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcBT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcBTT(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> float: ...
        def calcBi(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcBiT(self, int: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int2: int) -> float: ...
        def calcBij(self, int: int, int2: int, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int3: int) -> float: ...
        def init(self, phaseInterface: jneqsim.neqsim.thermo.phase.PhaseInterface, double: float, double2: float, int: int) -> None: ...


class __module_protocol__(Protocol):
    # A module protocol which reflects the result of ``jp.JPackage("jneqsim.neqsim.thermo.mixingrule")``.

    CPAMixing: typing.Type[CPAMixing]
    CPAMixingInterface: typing.Type[CPAMixingInterface]
    ElectrolyteMixingRulesInterface: typing.Type[ElectrolyteMixingRulesInterface]
    EosMixingRules: typing.Type[EosMixingRules]
    EosMixingRulesInterface: typing.Type[EosMixingRulesInterface]
    HVmixingRuleInterface: typing.Type[HVmixingRuleInterface]
