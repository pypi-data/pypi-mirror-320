// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: riegeli/records/records_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_riegeli_2frecords_2frecords_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_riegeli_2frecords_2frecords_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_riegeli_2frecords_2frecords_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_riegeli_2frecords_2frecords_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_riegeli_2frecords_2frecords_5fmetadata_2eproto;
namespace riegeli {
class RecordsMetadata;
struct RecordsMetadataDefaultTypeInternal;
extern RecordsMetadataDefaultTypeInternal _RecordsMetadata_default_instance_;
}  // namespace riegeli
PROTOBUF_NAMESPACE_OPEN
template<> ::riegeli::RecordsMetadata* Arena::CreateMaybeMessage<::riegeli::RecordsMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace riegeli {

// ===================================================================

class RecordsMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:riegeli.RecordsMetadata) */ {
 public:
  inline RecordsMetadata() : RecordsMetadata(nullptr) {}
  ~RecordsMetadata() override;
  explicit PROTOBUF_CONSTEXPR RecordsMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordsMetadata(const RecordsMetadata& from);
  RecordsMetadata(RecordsMetadata&& from) noexcept
    : RecordsMetadata() {
    *this = ::std::move(from);
  }

  inline RecordsMetadata& operator=(const RecordsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordsMetadata& operator=(RecordsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordsMetadata* internal_default_instance() {
    return reinterpret_cast<const RecordsMetadata*>(
               &_RecordsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecordsMetadata& a, RecordsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordsMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordsMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordsMetadata>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordsMetadata& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RecordsMetadata& from) {
    RecordsMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordsMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "riegeli.RecordsMetadata";
  }
  protected:
  explicit RecordsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileDescriptorFieldNumber = 3,
    kFileCommentFieldNumber = 1,
    kRecordTypeNameFieldNumber = 2,
    kRecordWriterOptionsFieldNumber = 4,
    kNumRecordsFieldNumber = 5,
  };
  // repeated .google.protobuf.FileDescriptorProto file_descriptor = 3;
  int file_descriptor_size() const;
  private:
  int _internal_file_descriptor_size() const;
  public:
  void clear_file_descriptor();
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* mutable_file_descriptor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto >*
      mutable_file_descriptor();
  private:
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& _internal_file_descriptor(int index) const;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* _internal_add_file_descriptor();
  public:
  const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& file_descriptor(int index) const;
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* add_file_descriptor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto >&
      file_descriptor() const;

  // optional string file_comment = 1;
  bool has_file_comment() const;
  private:
  bool _internal_has_file_comment() const;
  public:
  void clear_file_comment();
  const std::string& file_comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_comment();
  PROTOBUF_NODISCARD std::string* release_file_comment();
  void set_allocated_file_comment(std::string* file_comment);
  private:
  const std::string& _internal_file_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_comment(const std::string& value);
  std::string* _internal_mutable_file_comment();
  public:

  // optional string record_type_name = 2;
  bool has_record_type_name() const;
  private:
  bool _internal_has_record_type_name() const;
  public:
  void clear_record_type_name();
  const std::string& record_type_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_type_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_type_name();
  PROTOBUF_NODISCARD std::string* release_record_type_name();
  void set_allocated_record_type_name(std::string* record_type_name);
  private:
  const std::string& _internal_record_type_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_type_name(const std::string& value);
  std::string* _internal_mutable_record_type_name();
  public:

  // optional string record_writer_options = 4;
  bool has_record_writer_options() const;
  private:
  bool _internal_has_record_writer_options() const;
  public:
  void clear_record_writer_options();
  const std::string& record_writer_options() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_writer_options(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_writer_options();
  PROTOBUF_NODISCARD std::string* release_record_writer_options();
  void set_allocated_record_writer_options(std::string* record_writer_options);
  private:
  const std::string& _internal_record_writer_options() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_writer_options(const std::string& value);
  std::string* _internal_mutable_record_writer_options();
  public:

  // optional int64 num_records = 5;
  bool has_num_records() const;
  private:
  bool _internal_has_num_records() const;
  public:
  void clear_num_records();
  int64_t num_records() const;
  void set_num_records(int64_t value);
  private:
  int64_t _internal_num_records() const;
  void _internal_set_num_records(int64_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          RecordsMetadata, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:riegeli.RecordsMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto > file_descriptor_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_comment_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_type_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_writer_options_;
    int64_t num_records_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_riegeli_2frecords_2frecords_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecordsMetadata

// optional string file_comment = 1;
inline bool RecordsMetadata::_internal_has_file_comment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RecordsMetadata::has_file_comment() const {
  return _internal_has_file_comment();
}
inline void RecordsMetadata::clear_file_comment() {
  _impl_.file_comment_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RecordsMetadata::file_comment() const {
  // @@protoc_insertion_point(field_get:riegeli.RecordsMetadata.file_comment)
  return _internal_file_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordsMetadata::set_file_comment(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.file_comment_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:riegeli.RecordsMetadata.file_comment)
}
inline std::string* RecordsMetadata::mutable_file_comment() {
  std::string* _s = _internal_mutable_file_comment();
  // @@protoc_insertion_point(field_mutable:riegeli.RecordsMetadata.file_comment)
  return _s;
}
inline const std::string& RecordsMetadata::_internal_file_comment() const {
  return _impl_.file_comment_.Get();
}
inline void RecordsMetadata::_internal_set_file_comment(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.file_comment_.Set(value, GetArenaForAllocation());
}
inline std::string* RecordsMetadata::_internal_mutable_file_comment() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.file_comment_.Mutable(GetArenaForAllocation());
}
inline std::string* RecordsMetadata::release_file_comment() {
  // @@protoc_insertion_point(field_release:riegeli.RecordsMetadata.file_comment)
  if (!_internal_has_file_comment()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.file_comment_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_comment_.IsDefault()) {
    _impl_.file_comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RecordsMetadata::set_allocated_file_comment(std::string* file_comment) {
  if (file_comment != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.file_comment_.SetAllocated(file_comment, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.file_comment_.IsDefault()) {
    _impl_.file_comment_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:riegeli.RecordsMetadata.file_comment)
}

// optional string record_type_name = 2;
inline bool RecordsMetadata::_internal_has_record_type_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RecordsMetadata::has_record_type_name() const {
  return _internal_has_record_type_name();
}
inline void RecordsMetadata::clear_record_type_name() {
  _impl_.record_type_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RecordsMetadata::record_type_name() const {
  // @@protoc_insertion_point(field_get:riegeli.RecordsMetadata.record_type_name)
  return _internal_record_type_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordsMetadata::set_record_type_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.record_type_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:riegeli.RecordsMetadata.record_type_name)
}
inline std::string* RecordsMetadata::mutable_record_type_name() {
  std::string* _s = _internal_mutable_record_type_name();
  // @@protoc_insertion_point(field_mutable:riegeli.RecordsMetadata.record_type_name)
  return _s;
}
inline const std::string& RecordsMetadata::_internal_record_type_name() const {
  return _impl_.record_type_name_.Get();
}
inline void RecordsMetadata::_internal_set_record_type_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.record_type_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RecordsMetadata::_internal_mutable_record_type_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.record_type_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RecordsMetadata::release_record_type_name() {
  // @@protoc_insertion_point(field_release:riegeli.RecordsMetadata.record_type_name)
  if (!_internal_has_record_type_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.record_type_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_type_name_.IsDefault()) {
    _impl_.record_type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RecordsMetadata::set_allocated_record_type_name(std::string* record_type_name) {
  if (record_type_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.record_type_name_.SetAllocated(record_type_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_type_name_.IsDefault()) {
    _impl_.record_type_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:riegeli.RecordsMetadata.record_type_name)
}

// repeated .google.protobuf.FileDescriptorProto file_descriptor = 3;
inline int RecordsMetadata::_internal_file_descriptor_size() const {
  return _impl_.file_descriptor_.size();
}
inline int RecordsMetadata::file_descriptor_size() const {
  return _internal_file_descriptor_size();
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* RecordsMetadata::mutable_file_descriptor(int index) {
  // @@protoc_insertion_point(field_mutable:riegeli.RecordsMetadata.file_descriptor)
  return _impl_.file_descriptor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto >*
RecordsMetadata::mutable_file_descriptor() {
  // @@protoc_insertion_point(field_mutable_list:riegeli.RecordsMetadata.file_descriptor)
  return &_impl_.file_descriptor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& RecordsMetadata::_internal_file_descriptor(int index) const {
  return _impl_.file_descriptor_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto& RecordsMetadata::file_descriptor(int index) const {
  // @@protoc_insertion_point(field_get:riegeli.RecordsMetadata.file_descriptor)
  return _internal_file_descriptor(index);
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* RecordsMetadata::_internal_add_file_descriptor() {
  return _impl_.file_descriptor_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* RecordsMetadata::add_file_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto* _add = _internal_add_file_descriptor();
  // @@protoc_insertion_point(field_add:riegeli.RecordsMetadata.file_descriptor)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::FileDescriptorProto >&
RecordsMetadata::file_descriptor() const {
  // @@protoc_insertion_point(field_list:riegeli.RecordsMetadata.file_descriptor)
  return _impl_.file_descriptor_;
}

// optional string record_writer_options = 4;
inline bool RecordsMetadata::_internal_has_record_writer_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RecordsMetadata::has_record_writer_options() const {
  return _internal_has_record_writer_options();
}
inline void RecordsMetadata::clear_record_writer_options() {
  _impl_.record_writer_options_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RecordsMetadata::record_writer_options() const {
  // @@protoc_insertion_point(field_get:riegeli.RecordsMetadata.record_writer_options)
  return _internal_record_writer_options();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordsMetadata::set_record_writer_options(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.record_writer_options_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:riegeli.RecordsMetadata.record_writer_options)
}
inline std::string* RecordsMetadata::mutable_record_writer_options() {
  std::string* _s = _internal_mutable_record_writer_options();
  // @@protoc_insertion_point(field_mutable:riegeli.RecordsMetadata.record_writer_options)
  return _s;
}
inline const std::string& RecordsMetadata::_internal_record_writer_options() const {
  return _impl_.record_writer_options_.Get();
}
inline void RecordsMetadata::_internal_set_record_writer_options(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.record_writer_options_.Set(value, GetArenaForAllocation());
}
inline std::string* RecordsMetadata::_internal_mutable_record_writer_options() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.record_writer_options_.Mutable(GetArenaForAllocation());
}
inline std::string* RecordsMetadata::release_record_writer_options() {
  // @@protoc_insertion_point(field_release:riegeli.RecordsMetadata.record_writer_options)
  if (!_internal_has_record_writer_options()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.record_writer_options_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_writer_options_.IsDefault()) {
    _impl_.record_writer_options_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RecordsMetadata::set_allocated_record_writer_options(std::string* record_writer_options) {
  if (record_writer_options != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.record_writer_options_.SetAllocated(record_writer_options, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.record_writer_options_.IsDefault()) {
    _impl_.record_writer_options_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:riegeli.RecordsMetadata.record_writer_options)
}

// optional int64 num_records = 5;
inline bool RecordsMetadata::_internal_has_num_records() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RecordsMetadata::has_num_records() const {
  return _internal_has_num_records();
}
inline void RecordsMetadata::clear_num_records() {
  _impl_.num_records_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int64_t RecordsMetadata::_internal_num_records() const {
  return _impl_.num_records_;
}
inline int64_t RecordsMetadata::num_records() const {
  // @@protoc_insertion_point(field_get:riegeli.RecordsMetadata.num_records)
  return _internal_num_records();
}
inline void RecordsMetadata::_internal_set_num_records(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_records_ = value;
}
inline void RecordsMetadata::set_num_records(int64_t value) {
  _internal_set_num_records(value);
  // @@protoc_insertion_point(field_set:riegeli.RecordsMetadata.num_records)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace riegeli

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_riegeli_2frecords_2frecords_5fmetadata_2eproto
